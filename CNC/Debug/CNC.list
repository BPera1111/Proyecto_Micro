
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  0800e5c8  0800e5c8  0000f5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f838  0800f838  00011350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f838  0800f838  00010838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f840  0800f840  00011350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f840  0800f840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f844  0800f844  00010844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800f848  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004374  20000350  0800fb98  00011350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046c4  0800fb98  000116c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea3e  00000000  00000000  00011379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b3  00000000  00000000  0001fdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00022e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000986  00000000  00000000  00023b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad01  00000000  00000000  000244d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011279  00000000  00000000  0003f1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0c7  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  000da55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000decf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e5b0 	.word	0x0800e5b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e5b0 	.word	0x0800e5b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <__aeabi_d2lz>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
 8001182:	f7ff fc1b 	bl	80009bc <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x1c>
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4620      	mov	r0, r4
 8001196:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <__aeabi_d2ulz+0x34>)
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff f991 	bl	80004d8 <__aeabi_dmul>
 80011b6:	f7ff fc3f 	bl	8000a38 <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff f912 	bl	80003e4 <__aeabi_ui2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <__aeabi_d2ulz+0x38>)
 80011c4:	f7ff f988 	bl	80004d8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7fe ffca 	bl	8000168 <__aeabi_dsub>
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <gc_init>:

/**
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 80011e8:	2209      	movs	r2, #9
 80011ea:	2100      	movs	r1, #0
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <gc_init+0x48>)
 80011ee:	f00b f840 	bl	800c272 <memset>
    gc_state_modal.motion = MOTION_MODE_SEEK;       // G0 por defecto
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <gc_init+0x48>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
    gc_state_modal.coord_select = 0;                // G54 por defecto 
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <gc_init+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	705a      	strb	r2, [r3, #1]
    gc_state_modal.plane_select = 0;                // G17 (XY plane) por defecto
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <gc_init+0x48>)
 8001200:	2200      	movs	r2, #0
 8001202:	709a      	strb	r2, [r3, #2]
    gc_state_modal.units = 0;                       // G21 (mm) por defecto
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <gc_init+0x48>)
 8001206:	2200      	movs	r2, #0
 8001208:	70da      	strb	r2, [r3, #3]
    gc_state_modal.distance = 0;                    // G90 (absoluto) por defecto
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <gc_init+0x48>)
 800120c:	2200      	movs	r2, #0
 800120e:	711a      	strb	r2, [r3, #4]
    gc_state_modal.feed_rate = 0;                   // G94 por defecto
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <gc_init+0x48>)
 8001212:	2200      	movs	r2, #0
 8001214:	715a      	strb	r2, [r3, #5]
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <gc_init+0x48>)
 8001218:	2200      	movs	r2, #0
 800121a:	719a      	strb	r2, [r3, #6]
    gc_state_modal.coolant = 0;                     // M9 (coolant off) por defecto
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <gc_init+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	71da      	strb	r2, [r3, #7]
    gc_state_modal.program_flow = 0;                // Normal execution
 8001222:	4b02      	ldr	r3, [pc, #8]	@ (800122c <gc_init+0x48>)
 8001224:	2200      	movs	r2, #0
 8001226:	721a      	strb	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000039c 	.word	0x2000039c

08001230 <gc_clear_block>:

/**
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001234:	2230      	movs	r2, #48	@ 0x30
 8001236:	2100      	movs	r1, #0
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <gc_clear_block+0x7c>)
 800123a:	f00b f81a 	bl	800c272 <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <gc_clear_block+0x7c>)
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <gc_clear_block+0x80>)
 8001242:	ca07      	ldmia	r2, {r0, r1, r2}
 8001244:	c303      	stmia	r3!, {r0, r1}
 8001246:	701a      	strb	r2, [r3, #0]
    
    // Inicializar valores como indefinidos
    gc_block.values.x = NAN;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <gc_clear_block+0x7c>)
 800124a:	4a1a      	ldr	r2, [pc, #104]	@ (80012b4 <gc_clear_block+0x84>)
 800124c:	60da      	str	r2, [r3, #12]
    gc_block.values.y = NAN;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <gc_clear_block+0x7c>)
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <gc_clear_block+0x84>)
 8001252:	611a      	str	r2, [r3, #16]
    gc_block.values.z = NAN;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <gc_clear_block+0x7c>)
 8001256:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <gc_clear_block+0x84>)
 8001258:	615a      	str	r2, [r3, #20]
    gc_block.values.f = NAN;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <gc_clear_block+0x7c>)
 800125c:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <gc_clear_block+0x84>)
 800125e:	619a      	str	r2, [r3, #24]
    gc_block.values.s = NAN;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <gc_clear_block+0x7c>)
 8001262:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <gc_clear_block+0x84>)
 8001264:	61da      	str	r2, [r3, #28]
    gc_block.values.n = -1;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <gc_clear_block+0x7c>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	621a      	str	r2, [r3, #32]
    gc_block.values.p = 0;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <gc_clear_block+0x7c>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    gc_block.values.l = 0;
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <gc_clear_block+0x7c>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    // Flags de definición
    gc_block.values.x_defined = false;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <gc_clear_block+0x7c>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    gc_block.values.y_defined = false;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <gc_clear_block+0x7c>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    gc_block.values.z_defined = false;
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <gc_clear_block+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    gc_block.values.f_defined = false;
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <gc_clear_block+0x7c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    gc_block.values.s_defined = false;
 800129e:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <gc_clear_block+0x7c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000036c 	.word	0x2000036c
 80012b0:	2000039c 	.word	0x2000039c
 80012b4:	7fc00000 	.word	0x7fc00000

080012b8 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    char *ptr = line + *char_counter;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 80012d0:	e008      	b.n	80012e4 <read_float+0x2c>
        ptr++; 
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	701a      	strb	r2, [r3, #0]
    while ((c = *ptr) == ' ' || c == '\t') { 
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	767b      	strb	r3, [r7, #25]
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d0f0      	beq.n	80012d2 <read_float+0x1a>
 80012f0:	7e7b      	ldrb	r3, [r7, #25]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	d0ed      	beq.n	80012d2 <read_float+0x1a>
    }
    
    if (c == 0) return false;  // Fin de línea
 80012f6:	7e7b      	ldrb	r3, [r7, #25]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <read_float+0x48>
 80012fc:	2300      	movs	r3, #0
 80012fe:	e04d      	b.n	800139c <read_float+0xe4>
    
    char *start = ptr;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	617b      	str	r3, [r7, #20]
    
    // Leer número (incluyendo signo y punto decimal)
    if (c == '+' || c == '-') { 
 8001304:	7e7b      	ldrb	r3, [r7, #25]
 8001306:	2b2b      	cmp	r3, #43	@ 0x2b
 8001308:	d002      	beq.n	8001310 <read_float+0x58>
 800130a:	7e7b      	ldrb	r3, [r7, #25]
 800130c:	2b2d      	cmp	r3, #45	@ 0x2d
 800130e:	d108      	bne.n	8001322 <read_float+0x6a>
        ptr++; 
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3301      	adds	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	701a      	strb	r2, [r3, #0]
    }
    
    bool found_decimal = false;
 8001322:	2300      	movs	r3, #0
 8001324:	76fb      	strb	r3, [r7, #27]
    bool found_digit = false;
 8001326:	2300      	movs	r3, #0
 8001328:	76bb      	strb	r3, [r7, #26]
    
    while ((c = *ptr) != 0) {
 800132a:	e01c      	b.n	8001366 <read_float+0xae>
        if (c >= '0' && c <= '9') {
 800132c:	7e7b      	ldrb	r3, [r7, #25]
 800132e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001330:	d905      	bls.n	800133e <read_float+0x86>
 8001332:	7e7b      	ldrb	r3, [r7, #25]
 8001334:	2b39      	cmp	r3, #57	@ 0x39
 8001336:	d802      	bhi.n	800133e <read_float+0x86>
            found_digit = true;
 8001338:	2301      	movs	r3, #1
 800133a:	76bb      	strb	r3, [r7, #26]
 800133c:	e00a      	b.n	8001354 <read_float+0x9c>
        } else if (c == '.' && !found_decimal) {
 800133e:	7e7b      	ldrb	r3, [r7, #25]
 8001340:	2b2e      	cmp	r3, #46	@ 0x2e
 8001342:	d116      	bne.n	8001372 <read_float+0xba>
 8001344:	7efb      	ldrb	r3, [r7, #27]
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d010      	beq.n	8001372 <read_float+0xba>
            found_decimal = true;
 8001350:	2301      	movs	r3, #1
 8001352:	76fb      	strb	r3, [r7, #27]
        } else {
            break;  // Caracter no numérico
        }
        ptr++;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	701a      	strb	r2, [r3, #0]
    while ((c = *ptr) != 0) {
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	767b      	strb	r3, [r7, #25]
 800136c:	7e7b      	ldrb	r3, [r7, #25]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1dc      	bne.n	800132c <read_float+0x74>
    }
    
    if (!found_digit) return false;
 8001372:	7ebb      	ldrb	r3, [r7, #26]
 8001374:	f083 0301 	eor.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <read_float+0xca>
 800137e:	2300      	movs	r3, #0
 8001380:	e00c      	b.n	800139c <read_float+0xe4>
    
    *float_ptr = atof(start);
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f00a f80e 	bl	800b3a4 <atof>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb72 	bl	8000a78 <__aeabi_d2f>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
    return true;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    uint8_t char_counter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	747b      	strb	r3, [r7, #17]
    unsigned char letter;
    float value;
    uint8_t int_value = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	74bb      	strb	r3, [r7, #18]
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
 80013b4:	2300      	movs	r3, #0
 80013b6:	82bb      	strh	r3, [r7, #20]
    uint8_t word_bit = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	74fb      	strb	r3, [r7, #19]
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 80013bc:	f7ff ff38 	bl	8001230 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 80013c0:	e291      	b.n	80018e6 <gc_parse_line+0x542>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 80013c2:	7c7b      	ldrb	r3, [r7, #17]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	747b      	strb	r3, [r7, #17]
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 80013ca:	7c7b      	ldrb	r3, [r7, #17]
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d0f4      	beq.n	80013c2 <gc_parse_line+0x1e>
 80013d8:	7c7b      	ldrb	r3, [r7, #17]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	d0ed      	beq.n	80013c2 <gc_parse_line+0x1e>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
 80013e6:	7c7b      	ldrb	r3, [r7, #17]
 80013e8:	461a      	mov	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	75fb      	strb	r3, [r7, #23]
        if (letter == 0) break;  // Fin de línea
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 827f 	beq.w	80018f8 <gc_parse_line+0x554>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b60      	cmp	r3, #96	@ 0x60
 80013fe:	d905      	bls.n	800140c <gc_parse_line+0x68>
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b7a      	cmp	r3, #122	@ 0x7a
 8001404:	d802      	bhi.n	800140c <gc_parse_line+0x68>
            letter -= 32;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	3b20      	subs	r3, #32
 800140a:	75fb      	strb	r3, [r7, #23]
        }
        
        char_counter++;
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	3301      	adds	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	747b      	strb	r3, [r7, #17]
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	f107 0311 	add.w	r3, r7, #17
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff4a 	bl	80012b8 <read_float>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <gc_parse_line+0x90>
            return STATUS_BAD_NUMBER_FORMAT;
 8001430:	2302      	movs	r3, #2
 8001432:	e263      	b.n	80018fc <gc_parse_line+0x558>
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f00d f8a0 	bl	800e57c <truncf>
 800143c:	4603      	mov	r3, r0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe7a 	bl	8001138 <__aeabi_f2uiz>
 8001444:	4603      	mov	r3, r0
 8001446:	74bb      	strb	r3, [r7, #18]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3b46      	subs	r3, #70	@ 0x46
 800144c:	2b14      	cmp	r3, #20
 800144e:	f200 8248 	bhi.w	80018e2 <gc_parse_line+0x53e>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <gc_parse_line+0xb4>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001839 	.word	0x08001839
 800145c:	080014ad 	.word	0x080014ad
 8001460:	080018e3 	.word	0x080018e3
 8001464:	080018e3 	.word	0x080018e3
 8001468:	080018e3 	.word	0x080018e3
 800146c:	080018e3 	.word	0x080018e3
 8001470:	080018c3 	.word	0x080018c3
 8001474:	080016f9 	.word	0x080016f9
 8001478:	08001885 	.word	0x08001885
 800147c:	080018e3 	.word	0x080018e3
 8001480:	080018a3 	.word	0x080018a3
 8001484:	080018e3 	.word	0x080018e3
 8001488:	080018e3 	.word	0x080018e3
 800148c:	0800185f 	.word	0x0800185f
 8001490:	080018e3 	.word	0x080018e3
 8001494:	080018e3 	.word	0x080018e3
 8001498:	080018e3 	.word	0x080018e3
 800149c:	080018e3 	.word	0x080018e3
 80014a0:	08001809 	.word	0x08001809
 80014a4:	08001819 	.word	0x08001819
 80014a8:	08001829 	.word	0x08001829
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014ac:	7cbb      	ldrb	r3, [r7, #18]
 80014ae:	2b63      	cmp	r3, #99	@ 0x63
 80014b0:	d901      	bls.n	80014b6 <gc_parse_line+0x112>
 80014b2:	2314      	movs	r3, #20
 80014b4:	e222      	b.n	80018fc <gc_parse_line+0x558>
                
                switch (int_value) {
 80014b6:	7cbb      	ldrb	r3, [r7, #18]
 80014b8:	2b5e      	cmp	r3, #94	@ 0x5e
 80014ba:	f200 8106 	bhi.w	80016ca <gc_parse_line+0x326>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <gc_parse_line+0x120>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	08001641 	.word	0x08001641
 80014c8:	08001641 	.word	0x08001641
 80014cc:	08001641 	.word	0x08001641
 80014d0:	08001641 	.word	0x08001641
 80014d4:	0800164d 	.word	0x0800164d
 80014d8:	080016cb 	.word	0x080016cb
 80014dc:	080016cb 	.word	0x080016cb
 80014e0:	080016cb 	.word	0x080016cb
 80014e4:	080016cb 	.word	0x080016cb
 80014e8:	080016cb 	.word	0x080016cb
 80014ec:	080016cb 	.word	0x080016cb
 80014f0:	080016cb 	.word	0x080016cb
 80014f4:	080016cb 	.word	0x080016cb
 80014f8:	080016cb 	.word	0x080016cb
 80014fc:	080016cb 	.word	0x080016cb
 8001500:	080016cb 	.word	0x080016cb
 8001504:	080016cb 	.word	0x080016cb
 8001508:	0800165b 	.word	0x0800165b
 800150c:	0800165b 	.word	0x0800165b
 8001510:	0800165b 	.word	0x0800165b
 8001514:	0800166b 	.word	0x0800166b
 8001518:	0800166b 	.word	0x0800166b
 800151c:	080016cb 	.word	0x080016cb
 8001520:	080016cb 	.word	0x080016cb
 8001524:	080016cb 	.word	0x080016cb
 8001528:	080016cb 	.word	0x080016cb
 800152c:	080016cb 	.word	0x080016cb
 8001530:	080016cb 	.word	0x080016cb
 8001534:	0800167d 	.word	0x0800167d
 8001538:	080016cb 	.word	0x080016cb
 800153c:	080016cb 	.word	0x080016cb
 8001540:	080016cb 	.word	0x080016cb
 8001544:	080016cb 	.word	0x080016cb
 8001548:	080016cb 	.word	0x080016cb
 800154c:	080016cb 	.word	0x080016cb
 8001550:	080016cb 	.word	0x080016cb
 8001554:	080016cb 	.word	0x080016cb
 8001558:	080016cb 	.word	0x080016cb
 800155c:	080016cb 	.word	0x080016cb
 8001560:	080016cb 	.word	0x080016cb
 8001564:	080016cb 	.word	0x080016cb
 8001568:	080016cb 	.word	0x080016cb
 800156c:	080016cb 	.word	0x080016cb
 8001570:	080016cb 	.word	0x080016cb
 8001574:	080016cb 	.word	0x080016cb
 8001578:	080016cb 	.word	0x080016cb
 800157c:	080016cb 	.word	0x080016cb
 8001580:	080016cb 	.word	0x080016cb
 8001584:	080016cb 	.word	0x080016cb
 8001588:	080016cb 	.word	0x080016cb
 800158c:	080016cb 	.word	0x080016cb
 8001590:	080016cb 	.word	0x080016cb
 8001594:	080016cb 	.word	0x080016cb
 8001598:	080016cb 	.word	0x080016cb
 800159c:	080016bb 	.word	0x080016bb
 80015a0:	080016bb 	.word	0x080016bb
 80015a4:	080016bb 	.word	0x080016bb
 80015a8:	080016bb 	.word	0x080016bb
 80015ac:	080016bb 	.word	0x080016bb
 80015b0:	080016bb 	.word	0x080016bb
 80015b4:	080016cb 	.word	0x080016cb
 80015b8:	080016cb 	.word	0x080016cb
 80015bc:	080016cb 	.word	0x080016cb
 80015c0:	080016cb 	.word	0x080016cb
 80015c4:	080016cb 	.word	0x080016cb
 80015c8:	080016cb 	.word	0x080016cb
 80015cc:	080016cb 	.word	0x080016cb
 80015d0:	080016cb 	.word	0x080016cb
 80015d4:	080016cb 	.word	0x080016cb
 80015d8:	080016cb 	.word	0x080016cb
 80015dc:	080016cb 	.word	0x080016cb
 80015e0:	080016cb 	.word	0x080016cb
 80015e4:	080016cb 	.word	0x080016cb
 80015e8:	080016cb 	.word	0x080016cb
 80015ec:	080016cb 	.word	0x080016cb
 80015f0:	080016cb 	.word	0x080016cb
 80015f4:	080016cb 	.word	0x080016cb
 80015f8:	080016cb 	.word	0x080016cb
 80015fc:	080016cb 	.word	0x080016cb
 8001600:	080016cb 	.word	0x080016cb
 8001604:	080016cb 	.word	0x080016cb
 8001608:	080016cb 	.word	0x080016cb
 800160c:	080016cb 	.word	0x080016cb
 8001610:	080016cb 	.word	0x080016cb
 8001614:	080016cb 	.word	0x080016cb
 8001618:	080016cb 	.word	0x080016cb
 800161c:	080016cb 	.word	0x080016cb
 8001620:	080016cb 	.word	0x080016cb
 8001624:	080016cb 	.word	0x080016cb
 8001628:	080016cb 	.word	0x080016cb
 800162c:	0800168b 	.word	0x0800168b
 8001630:	0800168b 	.word	0x0800168b
 8001634:	0800169b 	.word	0x0800169b
 8001638:	080016a9 	.word	0x080016a9
 800163c:	080016a9 	.word	0x080016a9
                    case 0: case 1: case 2: case 3:
                        word_bit = MODAL_GROUP_G1;
 8001640:	2301      	movs	r3, #1
 8001642:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.motion = int_value;
 8001644:	4aaf      	ldr	r2, [pc, #700]	@ (8001904 <gc_parse_line+0x560>)
 8001646:	7cbb      	ldrb	r3, [r7, #18]
 8001648:	7013      	strb	r3, [r2, #0]
                        break;
 800164a:	e040      	b.n	80016ce <gc_parse_line+0x32a>
                    case 4:
                        word_bit = MODAL_GROUP_G0;
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 4;  // G4 - Dwell
 8001650:	4bac      	ldr	r3, [pc, #688]	@ (8001904 <gc_parse_line+0x560>)
 8001652:	2204      	movs	r2, #4
 8001654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 8001658:	e039      	b.n	80016ce <gc_parse_line+0x32a>
                    case 17: case 18: case 19:
                        word_bit = MODAL_GROUP_G2;
 800165a:	2302      	movs	r3, #2
 800165c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.plane_select = int_value - 17;
 800165e:	7cbb      	ldrb	r3, [r7, #18]
 8001660:	3b11      	subs	r3, #17
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4ba7      	ldr	r3, [pc, #668]	@ (8001904 <gc_parse_line+0x560>)
 8001666:	709a      	strb	r2, [r3, #2]
                        break;
 8001668:	e031      	b.n	80016ce <gc_parse_line+0x32a>
                    case 20: case 21:
                        word_bit = MODAL_GROUP_G6;
 800166a:	2306      	movs	r3, #6
 800166c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.units = 21 - int_value;  // G21=0(mm), G20=1(inch)
 800166e:	7cbb      	ldrb	r3, [r7, #18]
 8001670:	f1c3 0315 	rsb	r3, r3, #21
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4ba3      	ldr	r3, [pc, #652]	@ (8001904 <gc_parse_line+0x560>)
 8001678:	70da      	strb	r2, [r3, #3]
                        break;
 800167a:	e028      	b.n	80016ce <gc_parse_line+0x32a>
                    case 28:
                        word_bit = MODAL_GROUP_G0;
 800167c:	2300      	movs	r3, #0
 800167e:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 28;  // G28 - Home
 8001680:	4ba0      	ldr	r3, [pc, #640]	@ (8001904 <gc_parse_line+0x560>)
 8001682:	221c      	movs	r2, #28
 8001684:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 8001688:	e021      	b.n	80016ce <gc_parse_line+0x32a>
                    case 90: case 91:
                        word_bit = MODAL_GROUP_G3;
 800168a:	2303      	movs	r3, #3
 800168c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.distance = int_value - 90;  // G90=0(abs), G91=1(inc)
 800168e:	7cbb      	ldrb	r3, [r7, #18]
 8001690:	3b5a      	subs	r3, #90	@ 0x5a
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b9b      	ldr	r3, [pc, #620]	@ (8001904 <gc_parse_line+0x560>)
 8001696:	711a      	strb	r2, [r3, #4]
                        break;
 8001698:	e019      	b.n	80016ce <gc_parse_line+0x32a>
                    case 92:
                        word_bit = MODAL_GROUP_G0;
 800169a:	2300      	movs	r3, #0
 800169c:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 92;  // G92 - Set position
 800169e:	4b99      	ldr	r3, [pc, #612]	@ (8001904 <gc_parse_line+0x560>)
 80016a0:	225c      	movs	r2, #92	@ 0x5c
 80016a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80016a6:	e012      	b.n	80016ce <gc_parse_line+0x32a>
                    case 93: case 94:
                        word_bit = MODAL_GROUP_G5;
 80016a8:	2305      	movs	r3, #5
 80016aa:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.feed_rate = 94 - int_value;
 80016ac:	7cbb      	ldrb	r3, [r7, #18]
 80016ae:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b93      	ldr	r3, [pc, #588]	@ (8001904 <gc_parse_line+0x560>)
 80016b6:	715a      	strb	r2, [r3, #5]
                        break;
 80016b8:	e009      	b.n	80016ce <gc_parse_line+0x32a>
                    case 54: case 55: case 56: case 57: case 58: case 59:
                        word_bit = MODAL_GROUP_G12;
 80016ba:	2309      	movs	r3, #9
 80016bc:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.coord_select = int_value - 54;
 80016be:	7cbb      	ldrb	r3, [r7, #18]
 80016c0:	3b36      	subs	r3, #54	@ 0x36
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <gc_parse_line+0x560>)
 80016c6:	705a      	strb	r2, [r3, #1]
                        break;
 80016c8:	e001      	b.n	80016ce <gc_parse_line+0x32a>
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80016ca:	2314      	movs	r3, #20
 80016cc:	e116      	b.n	80018fc <gc_parse_line+0x558>
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80016ce:	8aba      	ldrh	r2, [r7, #20]
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	fa42 f303 	asr.w	r3, r2, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <gc_parse_line+0x33e>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80016de:	2315      	movs	r3, #21
 80016e0:	e10c      	b.n	80018fc <gc_parse_line+0x558>
                }
                command_words |= bit(word_bit);
 80016e2:	7cfb      	ldrb	r3, [r7, #19]
 80016e4:	2201      	movs	r2, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	82bb      	strh	r3, [r7, #20]
                break;
 80016f6:	e0f6      	b.n	80018e6 <gc_parse_line+0x542>
                
            case 'M':
                // Validar rango de comandos M
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80016f8:	7cbb      	ldrb	r3, [r7, #18]
 80016fa:	2b63      	cmp	r3, #99	@ 0x63
 80016fc:	d901      	bls.n	8001702 <gc_parse_line+0x35e>
 80016fe:	2314      	movs	r3, #20
 8001700:	e0fc      	b.n	80018fc <gc_parse_line+0x558>
                
                switch (int_value) {
 8001702:	7cbb      	ldrb	r3, [r7, #18]
 8001704:	2b1e      	cmp	r3, #30
 8001706:	dc45      	bgt.n	8001794 <gc_parse_line+0x3f0>
 8001708:	2b00      	cmp	r3, #0
 800170a:	db66      	blt.n	80017da <gc_parse_line+0x436>
 800170c:	2b1e      	cmp	r3, #30
 800170e:	d864      	bhi.n	80017da <gc_parse_line+0x436>
 8001710:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <gc_parse_line+0x374>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017db 	.word	0x080017db
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017db 	.word	0x080017db
 8001744:	080017db 	.word	0x080017db
 8001748:	080017db 	.word	0x080017db
 800174c:	080017db 	.word	0x080017db
 8001750:	080017db 	.word	0x080017db
 8001754:	080017db 	.word	0x080017db
 8001758:	080017db 	.word	0x080017db
 800175c:	080017bf 	.word	0x080017bf
 8001760:	080017cd 	.word	0x080017cd
 8001764:	080017db 	.word	0x080017db
 8001768:	080017db 	.word	0x080017db
 800176c:	080017db 	.word	0x080017db
 8001770:	080017db 	.word	0x080017db
 8001774:	080017db 	.word	0x080017db
 8001778:	080017db 	.word	0x080017db
 800177c:	080017db 	.word	0x080017db
 8001780:	080017db 	.word	0x080017db
 8001784:	080017db 	.word	0x080017db
 8001788:	080017db 	.word	0x080017db
 800178c:	080017db 	.word	0x080017db
 8001790:	0800179b 	.word	0x0800179b
 8001794:	2b54      	cmp	r3, #84	@ 0x54
 8001796:	d019      	beq.n	80017cc <gc_parse_line+0x428>
 8001798:	e01f      	b.n	80017da <gc_parse_line+0x436>
                    case 0: case 1: case 2: case 30:
                        word_bit = MODAL_GROUP_M4;
 800179a:	230b      	movs	r3, #11
 800179c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.program_flow = int_value;
 800179e:	4a59      	ldr	r2, [pc, #356]	@ (8001904 <gc_parse_line+0x560>)
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	7213      	strb	r3, [r2, #8]
                        break;
 80017a4:	e01b      	b.n	80017de <gc_parse_line+0x43a>
                    case 3: case 4: case 5:
                        word_bit = MODAL_GROUP_M7;
 80017a6:	230c      	movs	r3, #12
 80017a8:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.spindle = int_value;
 80017aa:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <gc_parse_line+0x560>)
 80017ac:	7cbb      	ldrb	r3, [r7, #18]
 80017ae:	7193      	strb	r3, [r2, #6]
                        break;
 80017b0:	e015      	b.n	80017de <gc_parse_line+0x43a>
                    case 7: case 8: case 9:
                        word_bit = MODAL_GROUP_M8;
 80017b2:	230d      	movs	r3, #13
 80017b4:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.coolant = int_value;
 80017b6:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <gc_parse_line+0x560>)
 80017b8:	7cbb      	ldrb	r3, [r7, #18]
 80017ba:	71d3      	strb	r3, [r2, #7]
                        break;
 80017bc:	e00f      	b.n	80017de <gc_parse_line+0x43a>
                    case 17:  // M17 - Enable steppers
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 80017be:	2300      	movs	r3, #0
 80017c0:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 17;
 80017c2:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <gc_parse_line+0x560>)
 80017c4:	2211      	movs	r2, #17
 80017c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80017ca:	e008      	b.n	80017de <gc_parse_line+0x43a>
                    case 18:  // M18 - Disable steppers
                    case 84:  // M84 - Disable steppers (alias de M18)
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 80017cc:	2300      	movs	r3, #0
 80017ce:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 18;
 80017d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001904 <gc_parse_line+0x560>)
 80017d2:	2212      	movs	r2, #18
 80017d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80017d8:	e001      	b.n	80017de <gc_parse_line+0x43a>
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80017da:	2314      	movs	r3, #20
 80017dc:	e08e      	b.n	80018fc <gc_parse_line+0x558>
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80017de:	8aba      	ldrh	r2, [r7, #20]
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	fa42 f303 	asr.w	r3, r2, r3
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <gc_parse_line+0x44e>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80017ee:	2315      	movs	r3, #21
 80017f0:	e084      	b.n	80018fc <gc_parse_line+0x558>
                }
                command_words |= bit(word_bit);
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	2201      	movs	r2, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	b21b      	sxth	r3, r3
 8001804:	82bb      	strh	r3, [r7, #20]
                break;
 8001806:	e06e      	b.n	80018e6 <gc_parse_line+0x542>
                
            case 'X':
                gc_block.values.x = value;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a3e      	ldr	r2, [pc, #248]	@ (8001904 <gc_parse_line+0x560>)
 800180c:	60d3      	str	r3, [r2, #12]
                gc_block.values.x_defined = true;
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <gc_parse_line+0x560>)
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001816:	e066      	b.n	80018e6 <gc_parse_line+0x542>
            case 'Y':
                gc_block.values.y = value;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a3a      	ldr	r2, [pc, #232]	@ (8001904 <gc_parse_line+0x560>)
 800181c:	6113      	str	r3, [r2, #16]
                gc_block.values.y_defined = true;
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <gc_parse_line+0x560>)
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                break;
 8001826:	e05e      	b.n	80018e6 <gc_parse_line+0x542>
            case 'Z':
                gc_block.values.z = value;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a36      	ldr	r2, [pc, #216]	@ (8001904 <gc_parse_line+0x560>)
 800182c:	6153      	str	r3, [r2, #20]
                gc_block.values.z_defined = true;
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <gc_parse_line+0x560>)
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
 8001836:	e056      	b.n	80018e6 <gc_parse_line+0x542>
            case 'F':
                gc_block.values.f = value;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <gc_parse_line+0x560>)
 800183c:	6193      	str	r3, [r2, #24]
                gc_block.values.f_defined = true;
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <gc_parse_line+0x560>)
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc0f 	bl	8001070 <__aeabi_fcmplt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d100      	bne.n	800185a <gc_parse_line+0x4b6>
                break;
 8001858:	e045      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800185a:	2304      	movs	r3, #4
 800185c:	e04e      	b.n	80018fc <gc_parse_line+0x558>
            case 'S':
                gc_block.values.s = value;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <gc_parse_line+0x560>)
 8001862:	61d3      	str	r3, [r2, #28]
                gc_block.values.s_defined = true;
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <gc_parse_line+0x560>)
 8001866:	2201      	movs	r2, #1
 8001868:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbfc 	bl	8001070 <__aeabi_fcmplt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <gc_parse_line+0x4dc>
                break;
 800187e:	e032      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001880:	2304      	movs	r3, #4
 8001882:	e03b      	b.n	80018fc <gc_parse_line+0x558>
            case 'N':
                gc_block.values.n = int_value;
 8001884:	7cbb      	ldrb	r3, [r7, #18]
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <gc_parse_line+0x560>)
 8001888:	6213      	str	r3, [r2, #32]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbed 	bl	8001070 <__aeabi_fcmplt>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d100      	bne.n	800189e <gc_parse_line+0x4fa>
                break;
 800189c:	e023      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800189e:	2304      	movs	r3, #4
 80018a0:	e02c      	b.n	80018fc <gc_parse_line+0x558>
            case 'P':
                gc_block.values.p = int_value;
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <gc_parse_line+0x560>)
 80018a4:	7cbb      	ldrb	r3, [r7, #18]
 80018a6:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fbdd 	bl	8001070 <__aeabi_fcmplt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d100      	bne.n	80018be <gc_parse_line+0x51a>
                break;
 80018bc:	e013      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018be:	2304      	movs	r3, #4
 80018c0:	e01c      	b.n	80018fc <gc_parse_line+0x558>
            case 'L':
                gc_block.values.l = int_value;
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <gc_parse_line+0x560>)
 80018c4:	7cbb      	ldrb	r3, [r7, #18]
 80018c6:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fbcd 	bl	8001070 <__aeabi_fcmplt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <gc_parse_line+0x53a>
                break;
 80018dc:	e003      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018de:	2304      	movs	r3, #4
 80018e0:	e00c      	b.n	80018fc <gc_parse_line+0x558>
            default:
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80018e2:	2314      	movs	r3, #20
 80018e4:	e00a      	b.n	80018fc <gc_parse_line+0x558>
    while (line[char_counter] != 0) {
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f ad6a 	bne.w	80013ca <gc_parse_line+0x26>
 80018f6:	e000      	b.n	80018fa <gc_parse_line+0x556>
        if (letter == 0) break;  // Fin de línea
 80018f8:	bf00      	nop
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000036c 	.word	0x2000036c

08001908 <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 8001908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800190c:	b09f      	sub	sp, #124	@ 0x7c
 800190e:	af04      	add	r7, sp, #16
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 8001910:	4bab      	ldr	r3, [pc, #684]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001912:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001916:	2b1c      	cmp	r3, #28
 8001918:	dc3c      	bgt.n	8001994 <gc_execute_block+0x8c>
 800191a:	2b04      	cmp	r3, #4
 800191c:	f2c0 80ea 	blt.w	8001af4 <gc_execute_block+0x1ec>
 8001920:	3b04      	subs	r3, #4
 8001922:	2b18      	cmp	r3, #24
 8001924:	f200 80e6 	bhi.w	8001af4 <gc_execute_block+0x1ec>
 8001928:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <gc_execute_block+0x28>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	0800199b 	.word	0x0800199b
 8001934:	08001af5 	.word	0x08001af5
 8001938:	08001af5 	.word	0x08001af5
 800193c:	08001af5 	.word	0x08001af5
 8001940:	08001af5 	.word	0x08001af5
 8001944:	08001af5 	.word	0x08001af5
 8001948:	08001af5 	.word	0x08001af5
 800194c:	08001af5 	.word	0x08001af5
 8001950:	08001af5 	.word	0x08001af5
 8001954:	08001af5 	.word	0x08001af5
 8001958:	08001af5 	.word	0x08001af5
 800195c:	08001af5 	.word	0x08001af5
 8001960:	08001af5 	.word	0x08001af5
 8001964:	08001ad7 	.word	0x08001ad7
 8001968:	08001ae5 	.word	0x08001ae5
 800196c:	08001af5 	.word	0x08001af5
 8001970:	08001af5 	.word	0x08001af5
 8001974:	08001af5 	.word	0x08001af5
 8001978:	08001af5 	.word	0x08001af5
 800197c:	08001af5 	.word	0x08001af5
 8001980:	08001af5 	.word	0x08001af5
 8001984:	08001af5 	.word	0x08001af5
 8001988:	08001af5 	.word	0x08001af5
 800198c:	08001af5 	.word	0x08001af5
 8001990:	080019d1 	.word	0x080019d1
 8001994:	2b5c      	cmp	r3, #92	@ 0x5c
 8001996:	d022      	beq.n	80019de <gc_execute_block+0xd6>
 8001998:	e0ac      	b.n	8001af4 <gc_execute_block+0x1ec>
        case 4:  // G4 - Dwell (pausa)
            if (gc_block.values.p > 0) {
 800199a:	4b89      	ldr	r3, [pc, #548]	@ (8001bc0 <gc_execute_block+0x2b8>)
 800199c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a6 	beq.w	8001af2 <gc_execute_block+0x1ea>
                // Implementar delay aquí si es necesario
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 80019a6:	4b86      	ldr	r3, [pc, #536]	@ (8001bc0 <gc_execute_block+0x2b8>)
 80019a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ac:	461a      	mov	r2, r3
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4984      	ldr	r1, [pc, #528]	@ (8001bc4 <gc_execute_block+0x2bc>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00a fbf8 	bl	800c1a8 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fbc8 	bl	8000150 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f008 fff5 	bl	800a9b8 <CDC_Transmit_FS>
            }
            break;
 80019ce:	e090      	b.n	8001af2 <gc_execute_block+0x1ea>
            
        case 28: // G28 - Home
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 80019d0:	2116      	movs	r1, #22
 80019d2:	487d      	ldr	r0, [pc, #500]	@ (8001bc8 <gc_execute_block+0x2c0>)
 80019d4:	f008 fff0 	bl	800a9b8 <CDC_Transmit_FS>
            performHoming();
 80019d8:	f001 fbb2 	bl	8003140 <performHoming>
            break;
 80019dc:	e08a      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 92: // G92 - Set position
            if (gc_block.values.x_defined) {
 80019de:	4b78      	ldr	r3, [pc, #480]	@ (8001bc0 <gc_execute_block+0x2b8>)
 80019e0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <gc_execute_block+0xfa>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 80019e8:	4b75      	ldr	r3, [pc, #468]	@ (8001bc0 <gc_execute_block+0x2b8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4977      	ldr	r1, [pc, #476]	@ (8001bcc <gc_execute_block+0x2c4>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9a0 	bl	8000d34 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fb78 	bl	80010ec <__aeabi_f2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a74      	ldr	r2, [pc, #464]	@ (8001bd0 <gc_execute_block+0x2c8>)
 8001a00:	6013      	str	r3, [r2, #0]
            }
            if (gc_block.values.y_defined) {
 8001a02:	4b6f      	ldr	r3, [pc, #444]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001a04:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <gc_execute_block+0x11e>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	496e      	ldr	r1, [pc, #440]	@ (8001bcc <gc_execute_block+0x2c4>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f98e 	bl	8000d34 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fb66 	bl	80010ec <__aeabi_f2iz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a6c      	ldr	r2, [pc, #432]	@ (8001bd4 <gc_execute_block+0x2cc>)
 8001a24:	6013      	str	r3, [r2, #0]
            }
            if (gc_block.values.z_defined) {
 8001a26:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <gc_execute_block+0x142>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 8001a30:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4968      	ldr	r1, [pc, #416]	@ (8001bd8 <gc_execute_block+0x2d0>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f97c 	bl	8000d34 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb54 	bl	80010ec <__aeabi_f2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a65      	ldr	r2, [pc, #404]	@ (8001bdc <gc_execute_block+0x2d4>)
 8001a48:	6013      	str	r3, [r2, #0]
            }
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
                   currentX/(float)STEPS_PER_MM_X, 
 8001a4a:	4b61      	ldr	r3, [pc, #388]	@ (8001bd0 <gc_execute_block+0x2c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f91c 	bl	8000c8c <__aeabi_i2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	495d      	ldr	r1, [pc, #372]	@ (8001bcc <gc_execute_block+0x2c4>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa1f 	bl	8000e9c <__aeabi_fdiv>
 8001a5e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fce1 	bl	8000428 <__aeabi_f2d>
 8001a66:	4680      	mov	r8, r0
 8001a68:	4689      	mov	r9, r1
                   currentY/(float)STEPS_PER_MM_Y, 
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd4 <gc_execute_block+0x2cc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f90c 	bl	8000c8c <__aeabi_i2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4955      	ldr	r1, [pc, #340]	@ (8001bcc <gc_execute_block+0x2c4>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa0f 	bl	8000e9c <__aeabi_fdiv>
 8001a7e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fcd1 	bl	8000428 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 8001a8a:	4b54      	ldr	r3, [pc, #336]	@ (8001bdc <gc_execute_block+0x2d4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8fc 	bl	8000c8c <__aeabi_i2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4950      	ldr	r1, [pc, #320]	@ (8001bd8 <gc_execute_block+0x2d0>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9ff 	bl	8000e9c <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcc1 	bl	8000428 <__aeabi_f2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	1d38      	adds	r0, r7, #4
 8001aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	4949      	ldr	r1, [pc, #292]	@ (8001be0 <gc_execute_block+0x2d8>)
 8001aba:	f00a fb75 	bl	800c1a8 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb45 	bl	8000150 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 ff72 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ad4:	e00e      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 17: // M17 - Enable steppers
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 8001ad6:	211b      	movs	r1, #27
 8001ad8:	4842      	ldr	r0, [pc, #264]	@ (8001be4 <gc_execute_block+0x2dc>)
 8001ada:	f008 ff6d 	bl	800a9b8 <CDC_Transmit_FS>
            enableSteppers();
 8001ade:	f001 fce1 	bl	80034a4 <enableSteppers>
            break;
 8001ae2:	e007      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 18: // M18/M84 - Disable steppers
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 8001ae4:	2118      	movs	r1, #24
 8001ae6:	4840      	ldr	r0, [pc, #256]	@ (8001be8 <gc_execute_block+0x2e0>)
 8001ae8:	f008 ff66 	bl	800a9b8 <CDC_Transmit_FS>
            disableSteppers();
 8001aec:	f001 fcf4 	bl	80034d8 <disableSteppers>
            break;
 8001af0:	e000      	b.n	8001af4 <gc_execute_block+0x1ec>
            break;
 8001af2:	bf00      	nop
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	f200 80da 	bhi.w	8001cb2 <gc_execute_block+0x3aa>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <gc_execute_block+0x1fc>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b61 	.word	0x08001b61
 8001b0c:	08001bed 	.word	0x08001bed
 8001b10:	08001c4b 	.word	0x08001c4b
        case MOTION_MODE_SEEK:    // G0 - Movimiento rápido
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001b14:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b16:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <gc_execute_block+0x22c>
 8001b1e:	4b28      	ldr	r3, [pc, #160]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b20:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <gc_execute_block+0x22c>
 8001b28:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80ba 	beq.w	8001ca8 <gc_execute_block+0x3a0>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 8001b34:	4b22      	ldr	r3, [pc, #136]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b36:	68d8      	ldr	r0, [r3, #12]
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b3e:	695c      	ldr	r4, [r3, #20]
 8001b40:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b42:	f893 5026 	ldrb.w	r5, [r3, #38]	@ 0x26
 8001b46:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b48:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b4e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001b52:	9201      	str	r2, [sp, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	462b      	mov	r3, r5
 8001b58:	4622      	mov	r2, r4
 8001b5a:	f001 f8bb 	bl	8002cd4 <moveAxesRapidCallback>
                                     gc_block.values.x_defined, gc_block.values.y_defined, gc_block.values.z_defined);
            }
            break;
 8001b5e:	e0a3      	b.n	8001ca8 <gc_execute_block+0x3a0>
            
        case MOTION_MODE_LINEAR:  // G1 - Movimiento lineal
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001b60:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b62:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10a      	bne.n	8001b80 <gc_execute_block+0x278>
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b6c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <gc_execute_block+0x278>
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8096 	beq.w	8001cac <gc_execute_block+0x3a4>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b82:	68dc      	ldr	r4, [r3, #12]
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b86:	691d      	ldr	r5, [r3, #16]
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b8a:	695e      	ldr	r6, [r3, #20]
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b8e:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8001b92:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b94:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b98:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001b9a:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001ba0:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8001ba4:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <gc_execute_block+0x2b8>)
 8001ba6:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8001baa:	9003      	str	r0, [sp, #12]
 8001bac:	9102      	str	r1, [sp, #8]
 8001bae:	9201      	str	r2, [sp, #4]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	4663      	mov	r3, ip
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f001 f8cd 	bl	8002d58 <moveAxesLinearCallback>
                                      gc_block.values.x_defined, gc_block.values.y_defined, gc_block.values.z_defined, gc_block.values.f_defined);
            }
            break;
 8001bbe:	e075      	b.n	8001cac <gc_execute_block+0x3a4>
 8001bc0:	2000036c 	.word	0x2000036c
 8001bc4:	0800e5c8 	.word	0x0800e5c8
 8001bc8:	0800e5e4 	.word	0x0800e5e4
 8001bcc:	429e0000 	.word	0x429e0000
 8001bd0:	20000470 	.word	0x20000470
 8001bd4:	20000474 	.word	0x20000474
 8001bd8:	4575a000 	.word	0x4575a000
 8001bdc:	20000478 	.word	0x20000478
 8001be0:	0800e5fc 	.word	0x0800e5fc
 8001be4:	0800e628 	.word	0x0800e628
 8001be8:	0800e644 	.word	0x0800e644
            
        case MOTION_MODE_CW_ARC:   // G2 - Arco horario
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <gc_execute_block+0x428>)
 8001bee:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <gc_execute_block+0x302>
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <gc_execute_block+0x428>)
 8001bf8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <gc_execute_block+0x302>
 8001c00:	4b4b      	ldr	r3, [pc, #300]	@ (8001d30 <gc_execute_block+0x428>)
 8001c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01f      	beq.n	8001c4a <gc_execute_block+0x342>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, 1);  // 1 para sentido horario
 8001c0a:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <gc_execute_block+0x428>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc0a 	bl	8000428 <__aeabi_f2d>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	4b45      	ldr	r3, [pc, #276]	@ (8001d30 <gc_execute_block+0x428>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc03 	bl	8000428 <__aeabi_f2d>
 8001c22:	4680      	mov	r8, r0
 8001c24:	4689      	mov	r9, r1
 8001c26:	4b42      	ldr	r3, [pc, #264]	@ (8001d30 <gc_execute_block+0x428>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fbfc 	bl	8000428 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	2101      	movs	r1, #1
 8001c36:	9102      	str	r1, [sp, #8]
 8001c38:	e9cd 2300 	strd	r2, r3, [sp]
 8001c3c:	4642      	mov	r2, r8
 8001c3e:	464b      	mov	r3, r9
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f001 f876 	bl	8002d34 <moveAxesArcCallback>
                break;
 8001c48:	e033      	b.n	8001cb2 <gc_execute_block+0x3aa>
            }
        case MOTION_MODE_CCW_ARC:  // G3 - Arco antihorario
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <gc_execute_block+0x428>)
 8001c4c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <gc_execute_block+0x360>
 8001c54:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <gc_execute_block+0x428>)
 8001c56:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d104      	bne.n	8001c68 <gc_execute_block+0x360>
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <gc_execute_block+0x428>)
 8001c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <gc_execute_block+0x3a8>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, 0);  // 0 para sentido antihorario
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <gc_execute_block+0x428>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4604      	mov	r4, r0
 8001c74:	460d      	mov	r5, r1
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <gc_execute_block+0x428>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fbd4 	bl	8000428 <__aeabi_f2d>
 8001c80:	4680      	mov	r8, r0
 8001c82:	4689      	mov	r9, r1
 8001c84:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <gc_execute_block+0x428>)
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fbcd 	bl	8000428 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	2100      	movs	r1, #0
 8001c94:	9102      	str	r1, [sp, #8]
 8001c96:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9a:	4642      	mov	r2, r8
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	f001 f847 	bl	8002d34 <moveAxesArcCallback>
                break;
 8001ca6:	e004      	b.n	8001cb2 <gc_execute_block+0x3aa>
            break;
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <gc_execute_block+0x3aa>
            break;
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <gc_execute_block+0x3aa>
            }
            break;
 8001cb0:	bf00      	nop
    }
    
    // Ejecutar comandos M
    switch (gc_block.modal.spindle) {
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <gc_execute_block+0x428>)
 8001cb4:	799b      	ldrb	r3, [r3, #6]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d010      	beq.n	8001cdc <gc_execute_block+0x3d4>
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	dc13      	bgt.n	8001ce6 <gc_execute_block+0x3de>
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d002      	beq.n	8001cc8 <gc_execute_block+0x3c0>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d005      	beq.n	8001cd2 <gc_execute_block+0x3ca>
 8001cc6:	e00e      	b.n	8001ce6 <gc_execute_block+0x3de>
        case 3:  // M3 - Spindle CW
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001cc8:	2117      	movs	r1, #23
 8001cca:	481a      	ldr	r0, [pc, #104]	@ (8001d34 <gc_execute_block+0x42c>)
 8001ccc:	f008 fe74 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001cd0:	e009      	b.n	8001ce6 <gc_execute_block+0x3de>
        case 4:  // M4 - Spindle CCW  
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
 8001cd2:	2118      	movs	r1, #24
 8001cd4:	4818      	ldr	r0, [pc, #96]	@ (8001d38 <gc_execute_block+0x430>)
 8001cd6:	f008 fe6f 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001cda:	e004      	b.n	8001ce6 <gc_execute_block+0x3de>
        case 5:  // M5 - Spindle off
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001cdc:	2115      	movs	r1, #21
 8001cde:	4817      	ldr	r0, [pc, #92]	@ (8001d3c <gc_execute_block+0x434>)
 8001ce0:	f008 fe6a 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ce4:	bf00      	nop
    }
    
    switch (gc_block.modal.coolant) {
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <gc_execute_block+0x428>)
 8001ce8:	79db      	ldrb	r3, [r3, #7]
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	d010      	beq.n	8001d10 <gc_execute_block+0x408>
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	dc13      	bgt.n	8001d1a <gc_execute_block+0x412>
 8001cf2:	2b07      	cmp	r3, #7
 8001cf4:	d002      	beq.n	8001cfc <gc_execute_block+0x3f4>
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d005      	beq.n	8001d06 <gc_execute_block+0x3fe>
 8001cfa:	e00e      	b.n	8001d1a <gc_execute_block+0x412>
        case 7:  // M7 - Mist coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante niebla activado\r\n", 30);
 8001cfc:	211e      	movs	r1, #30
 8001cfe:	4810      	ldr	r0, [pc, #64]	@ (8001d40 <gc_execute_block+0x438>)
 8001d00:	f008 fe5a 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001d04:	e009      	b.n	8001d1a <gc_execute_block+0x412>
        case 8:  // M8 - Flood coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
 8001d06:	2122      	movs	r1, #34	@ 0x22
 8001d08:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <gc_execute_block+0x43c>)
 8001d0a:	f008 fe55 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001d0e:	e004      	b.n	8001d1a <gc_execute_block+0x412>
        case 9:  // M9 - Coolant off
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 8001d10:	211a      	movs	r1, #26
 8001d12:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <gc_execute_block+0x440>)
 8001d14:	f008 fe50 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001d18:	bf00      	nop
    }
    
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <gc_execute_block+0x444>)
 8001d1c:	4a04      	ldr	r2, [pc, #16]	@ (8001d30 <gc_execute_block+0x428>)
 8001d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d20:	c303      	stmia	r3!, {r0, r1}
 8001d22:	701a      	strb	r2, [r3, #0]
    
    return STATUS_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	376c      	adds	r7, #108	@ 0x6c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d30:	2000036c 	.word	0x2000036c
 8001d34:	0800e660 	.word	0x0800e660
 8001d38:	0800e678 	.word	0x0800e678
 8001d3c:	0800e694 	.word	0x0800e694
 8001d40:	0800e6ac 	.word	0x0800e6ac
 8001d44:	0800e6cc 	.word	0x0800e6cc
 8001d48:	0800e6f0 	.word	0x0800e6f0
 8001d4c:	2000039c 	.word	0x2000039c

08001d50 <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e018      	b.n	8001d90 <gc_execute_line+0x40>
        if (line[i] >= 'a' && line[i] <= 'z') {
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b60      	cmp	r3, #96	@ 0x60
 8001d68:	d90f      	bls.n	8001d8a <gc_execute_line+0x3a>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b7a      	cmp	r3, #122	@ 0x7a
 8001d74:	d809      	bhi.n	8001d8a <gc_execute_line+0x3a>
            line[i] -= 32;  // Convertir a mayúscula
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	440b      	add	r3, r1
 8001d84:	3a20      	subs	r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    for (int i = 0; line[i] != 0; i++) {
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e0      	bne.n	8001d5e <gc_execute_line+0xe>
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fb01 	bl	80013a4 <gc_parse_line>
 8001da2:	4603      	mov	r3, r0
 8001da4:	72fb      	strb	r3, [r7, #11]
    if (status_code != STATUS_OK) {
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <gc_execute_line+0x60>
        return status_code;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	e009      	b.n	8001dc4 <gc_execute_line+0x74>
    }
    
    // Ejecutar comandos parseados
    status_code = gc_execute_block();
 8001db0:	f7ff fdaa 	bl	8001908 <gc_execute_block>
 8001db4:	4603      	mov	r3, r0
 8001db6:	72fb      	strb	r3, [r7, #11]
    if (status_code != STATUS_OK) {
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <gc_execute_line+0x72>
        return status_code;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	e000      	b.n	8001dc4 <gc_execute_line+0x74>
    }
    
    return STATUS_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
    switch (status_code) {
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b1c      	cmp	r3, #28
 8001dda:	f200 8083 	bhi.w	8001ee4 <report_status_message+0x118>
 8001dde:	a201      	add	r2, pc, #4	@ (adr r2, 8001de4 <report_status_message+0x18>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e59 	.word	0x08001e59
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e6d 	.word	0x08001e6d
 8001df0:	08001e77 	.word	0x08001e77
 8001df4:	08001e81 	.word	0x08001e81
 8001df8:	08001ee5 	.word	0x08001ee5
 8001dfc:	08001ee5 	.word	0x08001ee5
 8001e00:	08001ee5 	.word	0x08001ee5
 8001e04:	08001ee5 	.word	0x08001ee5
 8001e08:	08001ee5 	.word	0x08001ee5
 8001e0c:	08001ee5 	.word	0x08001ee5
 8001e10:	08001ee5 	.word	0x08001ee5
 8001e14:	08001ee5 	.word	0x08001ee5
 8001e18:	08001ee5 	.word	0x08001ee5
 8001e1c:	08001ee5 	.word	0x08001ee5
 8001e20:	08001ee5 	.word	0x08001ee5
 8001e24:	08001ee5 	.word	0x08001ee5
 8001e28:	08001ee5 	.word	0x08001ee5
 8001e2c:	08001ee5 	.word	0x08001ee5
 8001e30:	08001ee5 	.word	0x08001ee5
 8001e34:	08001e8b 	.word	0x08001e8b
 8001e38:	08001e95 	.word	0x08001e95
 8001e3c:	08001e9f 	.word	0x08001e9f
 8001e40:	08001ea9 	.word	0x08001ea9
 8001e44:	08001eb3 	.word	0x08001eb3
 8001e48:	08001ebd 	.word	0x08001ebd
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ed1 	.word	0x08001ed1
 8001e54:	08001edb 	.word	0x08001edb
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8001e58:	2104      	movs	r1, #4
 8001e5a:	482f      	ldr	r0, [pc, #188]	@ (8001f18 <report_status_message+0x14c>)
 8001e5c:	f008 fdac 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e60:	e055      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_EXPECTED_COMMAND_LETTER:
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 8001e62:	2124      	movs	r1, #36	@ 0x24
 8001e64:	482d      	ldr	r0, [pc, #180]	@ (8001f1c <report_status_message+0x150>)
 8001e66:	f008 fda7 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e6a:	e050      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_BAD_NUMBER_FORMAT:
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 8001e6c:	211e      	movs	r1, #30
 8001e6e:	482c      	ldr	r0, [pc, #176]	@ (8001f20 <report_status_message+0x154>)
 8001e70:	f008 fda2 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e74:	e04b      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_INVALID_STATEMENT:
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 8001e76:	211e      	movs	r1, #30
 8001e78:	482a      	ldr	r0, [pc, #168]	@ (8001f24 <report_status_message+0x158>)
 8001e7a:	f008 fd9d 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e7e:	e046      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_NEGATIVE_VALUE:
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 8001e80:	211b      	movs	r1, #27
 8001e82:	4829      	ldr	r0, [pc, #164]	@ (8001f28 <report_status_message+0x15c>)
 8001e84:	f008 fd98 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e88:	e041      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_UNSUPPORTED_COMMAND:
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 8001e8a:	2121      	movs	r1, #33	@ 0x21
 8001e8c:	4827      	ldr	r0, [pc, #156]	@ (8001f2c <report_status_message+0x160>)
 8001e8e:	f008 fd93 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e92:	e03c      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_MODAL_GROUP_VIOLATION:
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 8001e94:	2123      	movs	r1, #35	@ 0x23
 8001e96:	4826      	ldr	r0, [pc, #152]	@ (8001f30 <report_status_message+0x164>)
 8001e98:	f008 fd8e 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001e9c:	e037      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_UNDEFINED_FEED_RATE:
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 8001e9e:	2121      	movs	r1, #33	@ 0x21
 8001ea0:	4824      	ldr	r0, [pc, #144]	@ (8001f34 <report_status_message+0x168>)
 8001ea2:	f008 fd89 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ea6:	e032      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER:
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 8001ea8:	2127      	movs	r1, #39	@ 0x27
 8001eaa:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <report_status_message+0x16c>)
 8001eac:	f008 fd84 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001eb0:	e02d      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_AXIS_COMMAND_CONFLICT:
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 8001eb2:	2123      	movs	r1, #35	@ 0x23
 8001eb4:	4821      	ldr	r0, [pc, #132]	@ (8001f3c <report_status_message+0x170>)
 8001eb6:	f008 fd7f 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001eba:	e028      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_WORD_REPEATED:
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 8001ebc:	211b      	movs	r1, #27
 8001ebe:	4820      	ldr	r0, [pc, #128]	@ (8001f40 <report_status_message+0x174>)
 8001ec0:	f008 fd7a 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ec4:	e023      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_NO_AXIS_WORDS:
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 8001ec6:	211b      	movs	r1, #27
 8001ec8:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <report_status_message+0x178>)
 8001eca:	f008 fd75 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ece:	e01e      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_INVALID_LINE_NUMBER:
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 8001ed0:	2121      	movs	r1, #33	@ 0x21
 8001ed2:	481d      	ldr	r0, [pc, #116]	@ (8001f48 <report_status_message+0x17c>)
 8001ed4:	f008 fd70 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ed8:	e019      	b.n	8001f0e <report_status_message+0x142>
        case STATUS_GCODE_VALUE_WORD_MISSING:
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 8001eda:	2120      	movs	r1, #32
 8001edc:	481b      	ldr	r0, [pc, #108]	@ (8001f4c <report_status_message+0x180>)
 8001ede:	f008 fd6b 	bl	800a9b8 <CDC_Transmit_FS>
            break;
 8001ee2:	e014      	b.n	8001f0e <report_status_message+0x142>
        default:
            {
                char msg[30];
                sprintf(msg, "error:%d\r\n", status_code);
 8001ee4:	79fa      	ldrb	r2, [r7, #7]
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	4919      	ldr	r1, [pc, #100]	@ (8001f50 <report_status_message+0x184>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a f95b 	bl	800c1a8 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f92a 	bl	8000150 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f008 fd56 	bl	800a9b8 <CDC_Transmit_FS>
            }
            break;
 8001f0c:	bf00      	nop
    }
}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	@ 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800e70c 	.word	0x0800e70c
 8001f1c:	0800e714 	.word	0x0800e714
 8001f20:	0800e738 	.word	0x0800e738
 8001f24:	0800e758 	.word	0x0800e758
 8001f28:	0800e778 	.word	0x0800e778
 8001f2c:	0800e794 	.word	0x0800e794
 8001f30:	0800e7b8 	.word	0x0800e7b8
 8001f34:	0800e7dc 	.word	0x0800e7dc
 8001f38:	0800e800 	.word	0x0800e800
 8001f3c:	0800e828 	.word	0x0800e828
 8001f40:	0800e84c 	.word	0x0800e84c
 8001f44:	0800e868 	.word	0x0800e868
 8001f48:	0800e884 	.word	0x0800e884
 8001f4c:	0800e8a8 	.word	0x0800e8a8
 8001f50:	0800e8c8 	.word	0x0800e8c8

08001f54 <sendUSBText>:
} USBTransmitMethod_t;

#define USB_TRANSMIT_METHOD USB_METHOD_QUEUED  // ← Cambiar aquí el método

// Función auxiliar para envío USB según el método configurado
void sendUSBText(const char* message) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe f8f7 	bl	8000150 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	81fb      	strh	r3, [r7, #14]
    CDC_Transmit_Queued((uint8_t*)message, len);
 8001f66:	89fb      	ldrh	r3, [r7, #14]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f008 fe36 	bl	800abdc <CDC_Transmit_Queued>
    //             // Si la cola está llena, usar método directo como fallback
    //             sendUSBText((uint8_t*)message);
    //         }
    //         break;
    // }
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  HAL_Init();
 8001f7c:	f001 fff0 	bl	8003f60 <HAL_Init>
  SystemClock_Config();
 8001f80:	f000 f818 	bl	8001fb4 <SystemClock_Config>
  MX_GPIO_Init();
 8001f84:	f000 f872 	bl	800206c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 8001f88:	f008 fc28 	bl	800a7dc <MX_USB_DEVICE_Init>

  // Inicializar cola de transmisión USB CDC
  CDC_TxQueue_Init();
 8001f8c:	f008 fd3a 	bl	800aa04 <CDC_TxQueue_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 8001f90:	f000 fe7c 	bl	8002c8c <setup>

  // Envío inicial usando cola
  CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14); 
 8001f94:	210e      	movs	r1, #14
 8001f96:	4806      	ldr	r0, [pc, #24]	@ (8001fb0 <main+0x38>)
 8001f98:	f008 fe20 	bl	800abdc <CDC_Transmit_Queued>
  #endif

  while (1)
  {
    // Procesar cola de transmisión USB CDC
    CDC_TxQueue_Process();
 8001f9c:	f008 fdb8 	bl	800ab10 <CDC_TxQueue_Process>
    
    // Equivalente al loop() de Arduino
    loop();
 8001fa0:	f000 fe26 	bl	8002bf0 <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 8001fa4:	2032      	movs	r0, #50	@ 0x32
 8001fa6:	f002 f83d 	bl	8004024 <HAL_Delay>
    CDC_TxQueue_Process();
 8001faa:	bf00      	nop
 8001fac:	e7f6      	b.n	8001f9c <main+0x24>
 8001fae:	bf00      	nop
 8001fb0:	0800e8d4 	.word	0x0800e8d4

08001fb4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	@ 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fbe:	2228      	movs	r2, #40	@ 0x28
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00a f955 	bl	800c272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002000:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002004:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200a:	4618      	mov	r0, r3
 800200c:	f004 f850 	bl	80060b0 <HAL_RCC_OscConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002016:	f001 fe47 	bl	8003ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800201a:	230f      	movs	r3, #15
 800201c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800202a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2101      	movs	r1, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fabc 	bl	80065b4 <HAL_RCC_ClockConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002042:	f001 fe31 	bl	8003ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002046:	2310      	movs	r3, #16
 8002048:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800204a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800204e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4618      	mov	r0, r3
 8002054:	f004 fc0a 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800205e:	f001 fe23 	bl	8003ca8 <Error_Handler>
  }
}
 8002062:	bf00      	nop
 8002064:	3750      	adds	r7, #80	@ 0x50
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002080:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <MX_GPIO_Init+0xd4>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <MX_GPIO_Init+0xd4>)
 8002086:	f043 0320 	orr.w	r3, r3, #32
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b2c      	ldr	r3, [pc, #176]	@ (8002140 <MX_GPIO_Init+0xd4>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <MX_GPIO_Init+0xd4>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <MX_GPIO_Init+0xd4>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <MX_GPIO_Init+0xd4>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <MX_GPIO_Init+0xd4>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <MX_GPIO_Init+0xd4>)
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <MX_GPIO_Init+0xd4>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 80020c8:	2200      	movs	r2, #0
 80020ca:	f240 31d9 	movw	r1, #985	@ 0x3d9
 80020ce:	481d      	ldr	r0, [pc, #116]	@ (8002144 <MX_GPIO_Init+0xd8>)
 80020d0:	f002 fa75 	bl	80045be <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80020da:	481b      	ldr	r0, [pc, #108]	@ (8002148 <MX_GPIO_Init+0xdc>)
 80020dc:	f002 fa6f 	bl	80045be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 80020e0:	f240 33d9 	movw	r3, #985	@ 0x3d9
 80020e4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	4812      	ldr	r0, [pc, #72]	@ (8002144 <MX_GPIO_Init+0xd8>)
 80020fa:	f002 f8c5 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80020fe:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	480c      	ldr	r0, [pc, #48]	@ (8002144 <MX_GPIO_Init+0xd8>)
 8002114:	f002 f8b8 	bl	8004288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002118:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	@ (8002148 <MX_GPIO_Init+0xdc>)
 8002132:	f002 f8a9 	bl	8004288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002136:	bf00      	nop
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40010800 	.word	0x40010800

0800214c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002154:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <delay_us+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <delay_us+0x44>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9a      	lsrs	r2, r3, #18
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <delay_us+0x48>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800216e:	bf00      	nop
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <delay_us+0x48>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	429a      	cmp	r2, r3
 800217c:	d8f8      	bhi.n	8002170 <delay_us+0x24>
}
 800217e:	bf00      	nop
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000000c 	.word	0x2000000c
 8002190:	431bde83 	.word	0x431bde83
 8002194:	e0001000 	.word	0xe0001000

08002198 <X_stepOnce>:

void X_stepOnce(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2140      	movs	r1, #64	@ 0x40
 80021a0:	4806      	ldr	r0, [pc, #24]	@ (80021bc <X_stepOnce+0x24>)
 80021a2:	f002 fa0c 	bl	80045be <HAL_GPIO_WritePin>
    delay_us(2);
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff ffd0 	bl	800214c <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2140      	movs	r1, #64	@ 0x40
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <X_stepOnce+0x24>)
 80021b2:	f002 fa04 	bl	80045be <HAL_GPIO_WritePin>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010c00 	.word	0x40010c00

080021c0 <Y_stepOnce>:

void Y_stepOnce(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ca:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <Y_stepOnce+0x28>)
 80021cc:	f002 f9f7 	bl	80045be <HAL_GPIO_WritePin>
    delay_us(2);
 80021d0:	2002      	movs	r0, #2
 80021d2:	f7ff ffbb 	bl	800214c <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <Y_stepOnce+0x28>)
 80021de:	f002 f9ee 	bl	80045be <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010c00 	.word	0x40010c00

080021ec <Z_stepOnce>:

void Z_stepOnce(void) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f6:	4807      	ldr	r0, [pc, #28]	@ (8002214 <Z_stepOnce+0x28>)
 80021f8:	f002 f9e1 	bl	80045be <HAL_GPIO_WritePin>
    delay_us(2);
 80021fc:	2002      	movs	r0, #2
 80021fe:	f7ff ffa5 	bl	800214c <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <Z_stepOnce+0x28>)
 800220a:	f002 f9d8 	bl	80045be <HAL_GPIO_WritePin>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40010800 	.word	0x40010800

08002218 <calculateStepDelay>:
  * @brief  Calcula el delay entre pasos basado en el feed rate
  * @param  feedRate: Velocidad en mm/min
  * @param  distance_mm: Distancia total del movimiento en mm
  * @retval Delay en microsegundos entre pasos
  */
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe ff2c 	bl	8001084 <__aeabi_fcmple>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <calculateStepDelay+0x20>
 8002232:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002236:	e030      	b.n	800229a <calculateStepDelay+0x82>
    
    // Calcular pasos por segundo para el eje dominante
    // feedRate está en mm/min, convertir a mm/s
    float feedRate_mm_per_sec = feedRate / 60.0;
 8002238:	491d      	ldr	r1, [pc, #116]	@ (80022b0 <calculateStepDelay+0x98>)
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fe2e 	bl	8000e9c <__aeabi_fdiv>
 8002240:	4603      	mov	r3, r0
 8002242:	613b      	str	r3, [r7, #16]
    
    // Usar el eje con mayor resolución (Z) para el cálculo más conservador
    float steps_per_mm = STEPS_PER_MM_Z; // El más alto: 3930 steps/mm
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <calculateStepDelay+0x9c>)
 8002246:	60fb      	str	r3, [r7, #12]
    
    // Calcular pasos por segundo
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002248:	68f9      	ldr	r1, [r7, #12]
 800224a:	6938      	ldr	r0, [r7, #16]
 800224c:	f7fe fd72 	bl	8000d34 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	60bb      	str	r3, [r7, #8]
    
    // Calcular delay en microsegundos entre pasos
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	f7fe ff13 	bl	8001084 <__aeabi_fcmple>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <calculateStepDelay+0x52>
 8002264:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002268:	e017      	b.n	800229a <calculateStepDelay+0x82>
    
    uint32_t delay_us = (uint32_t)(1000000.0 / steps_per_sec);
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	f7fe f8dc 	bl	8000428 <__aeabi_f2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	a10c      	add	r1, pc, #48	@ (adr r1, 80022a8 <calculateStepDelay+0x90>)
 8002276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800227a:	f7fe fa57 	bl	800072c <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fbd7 	bl	8000a38 <__aeabi_d2uiz>
 800228a:	4603      	mov	r3, r0
 800228c:	617b      	str	r3, [r7, #20]
    
    // Limitar delay mínimo para evitar problemas de timing
    if (delay_us < 200) delay_us = 200; // Mínimo 200us = 5000 pasos/segundo máximo
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2bc7      	cmp	r3, #199	@ 0xc7
 8002292:	d801      	bhi.n	8002298 <calculateStepDelay+0x80>
 8002294:	23c8      	movs	r3, #200	@ 0xc8
 8002296:	617b      	str	r3, [r7, #20]
    
    return delay_us;
 8002298:	697b      	ldr	r3, [r7, #20]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	00000000 	.word	0x00000000
 80022ac:	412e8480 	.word	0x412e8480
 80022b0:	42700000 	.word	0x42700000
 80022b4:	4575a000 	.word	0x4575a000

080022b8 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b0b1      	sub	sp, #196	@ 0xc4
 80022bc:	af0c      	add	r7, sp, #48	@ 0x30
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7fe fef9 	bl	80010c0 <__aeabi_fcmpun>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <moveAxesWithFeedRate+0x30>
 80022d4:	49a6      	ldr	r1, [pc, #664]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7fe fd2c 	bl	8000d34 <__aeabi_fmul>
 80022dc:	4603      	mov	r3, r0
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff04 	bl	80010ec <__aeabi_f2iz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	e001      	b.n	80022ec <moveAxesWithFeedRate+0x34>
 80022e8:	4ba2      	ldr	r3, [pc, #648]	@ (8002574 <moveAxesWithFeedRate+0x2bc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	673b      	str	r3, [r7, #112]	@ 0x70
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f7fe fee5 	bl	80010c0 <__aeabi_fcmpun>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <moveAxesWithFeedRate+0x58>
 80022fc:	499c      	ldr	r1, [pc, #624]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f7fe fd18 	bl	8000d34 <__aeabi_fmul>
 8002304:	4603      	mov	r3, r0
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fef0 	bl	80010ec <__aeabi_f2iz>
 800230c:	4603      	mov	r3, r0
 800230e:	e001      	b.n	8002314 <moveAxesWithFeedRate+0x5c>
 8002310:	4b99      	ldr	r3, [pc, #612]	@ (8002578 <moveAxesWithFeedRate+0x2c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7fe fed1 	bl	80010c0 <__aeabi_fcmpun>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <moveAxesWithFeedRate+0x80>
 8002324:	4995      	ldr	r1, [pc, #596]	@ (800257c <moveAxesWithFeedRate+0x2c4>)
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fd04 	bl	8000d34 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fedc 	bl	80010ec <__aeabi_f2iz>
 8002334:	4603      	mov	r3, r0
 8002336:	e001      	b.n	800233c <moveAxesWithFeedRate+0x84>
 8002338:	4b91      	ldr	r3, [pc, #580]	@ (8002580 <moveAxesWithFeedRate+0x2c8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	66bb      	str	r3, [r7, #104]	@ 0x68
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 800233e:	4b8d      	ldr	r3, [pc, #564]	@ (8002574 <moveAxesWithFeedRate+0x2bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
    int32_t deltaY = targetY - currentY;
 8002348:	4b8b      	ldr	r3, [pc, #556]	@ (8002578 <moveAxesWithFeedRate+0x2c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	663b      	str	r3, [r7, #96]	@ 0x60
    int32_t deltaZ = targetZ - currentZ;
 8002352:	4b8b      	ldr	r3, [pc, #556]	@ (8002580 <moveAxesWithFeedRate+0x2c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f7fe feae 	bl	80010c0 <__aeabi_fcmpun>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <moveAxesWithFeedRate+0xd8>
 800236a:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <moveAxesWithFeedRate+0x2bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fc8c 	bl	8000c8c <__aeabi_i2f>
 8002374:	4603      	mov	r3, r0
 8002376:	497e      	ldr	r1, [pc, #504]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fd8f 	bl	8000e9c <__aeabi_fdiv>
 800237e:	4603      	mov	r3, r0
 8002380:	4619      	mov	r1, r3
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7fe fbcc 	bl	8000b20 <__aeabi_fsub>
 8002388:	4603      	mov	r3, r0
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800238e:	e001      	b.n	8002394 <moveAxesWithFeedRate+0xdc>
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	65bb      	str	r3, [r7, #88]	@ 0x58
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	f7fe fe91 	bl	80010c0 <__aeabi_fcmpun>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d112      	bne.n	80023ca <moveAxesWithFeedRate+0x112>
 80023a4:	4b74      	ldr	r3, [pc, #464]	@ (8002578 <moveAxesWithFeedRate+0x2c0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fc6f 	bl	8000c8c <__aeabi_i2f>
 80023ae:	4603      	mov	r3, r0
 80023b0:	496f      	ldr	r1, [pc, #444]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe fd72 	bl	8000e9c <__aeabi_fdiv>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4619      	mov	r1, r3
 80023bc:	68b8      	ldr	r0, [r7, #8]
 80023be:	f7fe fbaf 	bl	8000b20 <__aeabi_fsub>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023c8:	e001      	b.n	80023ce <moveAxesWithFeedRate+0x116>
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	657b      	str	r3, [r7, #84]	@ 0x54
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fe74 	bl	80010c0 <__aeabi_fcmpun>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d112      	bne.n	8002404 <moveAxesWithFeedRate+0x14c>
 80023de:	4b68      	ldr	r3, [pc, #416]	@ (8002580 <moveAxesWithFeedRate+0x2c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc52 	bl	8000c8c <__aeabi_i2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4964      	ldr	r1, [pc, #400]	@ (800257c <moveAxesWithFeedRate+0x2c4>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fd55 	bl	8000e9c <__aeabi_fdiv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fb92 	bl	8000b20 <__aeabi_fsub>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002402:	e001      	b.n	8002408 <moveAxesWithFeedRate+0x150>
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	653b      	str	r3, [r7, #80]	@ 0x50
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 800240a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800240c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800240e:	f7fe fc91 	bl	8000d34 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	461c      	mov	r4, r3
 8002416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002418:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800241a:	f7fe fc8b 	bl	8000d34 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	4619      	mov	r1, r3
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fb7e 	bl	8000b24 <__addsf3>
 8002428:	4603      	mov	r3, r0
 800242a:	461c      	mov	r4, r3
 800242c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800242e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002430:	f7fe fc80 	bl	8000d34 <__aeabi_fmul>
 8002434:	4603      	mov	r3, r0
 8002436:	4619      	mov	r1, r3
 8002438:	4620      	mov	r0, r4
 800243a:	f7fe fb73 	bl	8000b24 <__addsf3>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fff1 	bl	8000428 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f00b ff9f 	bl	800e390 <sqrt>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	f7fe fb0d 	bl	8000a78 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002462:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <moveAxesWithFeedRate+0x1b8>
 800246a:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <moveAxesWithFeedRate+0x2cc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e000      	b.n	8002472 <moveAxesWithFeedRate+0x1ba>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 8002476:	4b44      	ldr	r3, [pc, #272]	@ (8002588 <moveAxesWithFeedRate+0x2d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002480:	f7fe fe14 	bl	80010ac <__aeabi_fcmpgt>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <moveAxesWithFeedRate+0x1da>
        effective_feedrate = maxFeedRate;
 800248a:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <moveAxesWithFeedRate+0x2d0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    }
    
    // Determinar direcciones
    bool dirX = (deltaX >= 0);
 8002492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002494:	43db      	mvns	r3, r3
 8002496:	0fdb      	lsrs	r3, r3, #31
 8002498:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    bool dirY = (deltaY >= 0);
 800249c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800249e:	43db      	mvns	r3, r3
 80024a0:	0fdb      	lsrs	r3, r3, #31
 80024a2:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    bool dirZ = (deltaZ >= 0);
 80024a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024a8:	43db      	mvns	r3, r3
 80024aa:	0fdb      	lsrs	r3, r3, #31
 80024ac:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80024b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <moveAxesWithFeedRate+0x20c>
 80024b6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80024ba:	461a      	mov	r2, r3
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	4833      	ldr	r0, [pc, #204]	@ (800258c <moveAxesWithFeedRate+0x2d4>)
 80024c0:	f002 f87d 	bl	80045be <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80024c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <moveAxesWithFeedRate+0x220>
 80024ca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80024ce:	461a      	mov	r2, r3
 80024d0:	2108      	movs	r1, #8
 80024d2:	482e      	ldr	r0, [pc, #184]	@ (800258c <moveAxesWithFeedRate+0x2d4>)
 80024d4:	f002 f873 	bl	80045be <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80024d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <moveAxesWithFeedRate+0x23c>
 80024de:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ee:	4828      	ldr	r0, [pc, #160]	@ (8002590 <moveAxesWithFeedRate+0x2d8>)
 80024f0:	f002 f865 	bl	80045be <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = abs(deltaX);
 80024f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bfb8      	it	lt
 80024fa:	425b      	neglt	r3, r3
 80024fc:	667b      	str	r3, [r7, #100]	@ 0x64
    deltaY = abs(deltaY);
 80024fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002500:	2b00      	cmp	r3, #0
 8002502:	bfb8      	it	lt
 8002504:	425b      	neglt	r3, r3
 8002506:	663b      	str	r3, [r7, #96]	@ 0x60
    deltaZ = abs(deltaZ);
 8002508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	425b      	neglt	r3, r3
 8002510:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    // Calcular delay basado en feed rate
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002512:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002514:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002518:	f7ff fe7e 	bl	8002218 <calculateStepDelay>
 800251c:	6478      	str	r0, [r7, #68]	@ 0x44
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    #endif
    
    // Mostrar información del movimiento con validación de valores
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7fe fdcd 	bl	80010c0 <__aeabi_fcmpun>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <moveAxesWithFeedRate+0x28c>
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <moveAxesWithFeedRate+0x2bc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fbab 	bl	8000c8c <__aeabi_i2f>
 8002536:	4603      	mov	r3, r0
 8002538:	490d      	ldr	r1, [pc, #52]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fcae 	bl	8000e9c <__aeabi_fdiv>
 8002540:	4603      	mov	r3, r0
 8002542:	e000      	b.n	8002546 <moveAxesWithFeedRate+0x28e>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	643b      	str	r3, [r7, #64]	@ 0x40
    float display_y = !isnan(y) ? y : (currentY / (float)STEPS_PER_MM_Y);
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	f7fe fdb8 	bl	80010c0 <__aeabi_fcmpun>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01e      	beq.n	8002594 <moveAxesWithFeedRate+0x2dc>
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <moveAxesWithFeedRate+0x2c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fb96 	bl	8000c8c <__aeabi_i2f>
 8002560:	4603      	mov	r3, r0
 8002562:	4903      	ldr	r1, [pc, #12]	@ (8002570 <moveAxesWithFeedRate+0x2b8>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fc99 	bl	8000e9c <__aeabi_fdiv>
 800256a:	4603      	mov	r3, r0
 800256c:	e013      	b.n	8002596 <moveAxesWithFeedRate+0x2de>
 800256e:	bf00      	nop
 8002570:	429e0000 	.word	0x429e0000
 8002574:	20000470 	.word	0x20000470
 8002578:	20000474 	.word	0x20000474
 800257c:	4575a000 	.word	0x4575a000
 8002580:	20000478 	.word	0x20000478
 8002584:	20000004 	.word	0x20000004
 8002588:	20000008 	.word	0x20000008
 800258c:	40010c00 	.word	0x40010c00
 8002590:	40010800 	.word	0x40010800
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float display_z = !isnan(z) ? z : (currentZ / (float)STEPS_PER_MM_Z);
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fd90 	bl	80010c0 <__aeabi_fcmpun>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00b      	beq.n	80025be <moveAxesWithFeedRate+0x306>
 80025a6:	4b7e      	ldr	r3, [pc, #504]	@ (80027a0 <moveAxesWithFeedRate+0x4e8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fb6e 	bl	8000c8c <__aeabi_i2f>
 80025b0:	4603      	mov	r3, r0
 80025b2:	497c      	ldr	r1, [pc, #496]	@ (80027a4 <moveAxesWithFeedRate+0x4ec>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fc71 	bl	8000e9c <__aeabi_fdiv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	e000      	b.n	80025c0 <moveAxesWithFeedRate+0x308>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    // Convertir floats a enteros para evitar problemas de printf con floats
    int x_int = (int)display_x;
 80025c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025c4:	f7fe fd92 	bl	80010ec <__aeabi_f2iz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
    int x_dec = (int)((display_x - x_int) * 100);
 80025cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80025ce:	f7fe fb5d 	bl	8000c8c <__aeabi_i2f>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025d8:	f7fe faa2 	bl	8000b20 <__aeabi_fsub>
 80025dc:	4603      	mov	r3, r0
 80025de:	4972      	ldr	r1, [pc, #456]	@ (80027a8 <moveAxesWithFeedRate+0x4f0>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fba7 	bl	8000d34 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fd7f 	bl	80010ec <__aeabi_f2iz>
 80025ee:	4603      	mov	r3, r0
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
    int y_int = (int)display_y;
 80025f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80025f4:	f7fe fd7a 	bl	80010ec <__aeabi_f2iz>
 80025f8:	4603      	mov	r3, r0
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int y_dec = (int)((display_y - y_int) * 100);
 80025fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025fe:	f7fe fb45 	bl	8000c8c <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4619      	mov	r1, r3
 8002606:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002608:	f7fe fa8a 	bl	8000b20 <__aeabi_fsub>
 800260c:	4603      	mov	r3, r0
 800260e:	4966      	ldr	r1, [pc, #408]	@ (80027a8 <moveAxesWithFeedRate+0x4f0>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fb8f 	bl	8000d34 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fd67 	bl	80010ec <__aeabi_f2iz>
 800261e:	4603      	mov	r3, r0
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
    int z_int = (int)display_z;
 8002622:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002624:	f7fe fd62 	bl	80010ec <__aeabi_f2iz>
 8002628:	4603      	mov	r3, r0
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
    int z_dec = (int)((display_z - z_int) * 100);
 800262c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800262e:	f7fe fb2d 	bl	8000c8c <__aeabi_i2f>
 8002632:	4603      	mov	r3, r0
 8002634:	4619      	mov	r1, r3
 8002636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002638:	f7fe fa72 	bl	8000b20 <__aeabi_fsub>
 800263c:	4603      	mov	r3, r0
 800263e:	495a      	ldr	r1, [pc, #360]	@ (80027a8 <moveAxesWithFeedRate+0x4f0>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb77 	bl	8000d34 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fd4f 	bl	80010ec <__aeabi_f2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	623b      	str	r3, [r7, #32]
    int f_int = (int)effective_feedrate;
 8002652:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002656:	f7fe fd49 	bl	80010ec <__aeabi_f2iz>
 800265a:	4603      	mov	r3, r0
 800265c:	61fb      	str	r3, [r7, #28]
    int f_dec = (int)((effective_feedrate - f_int) * 10);
 800265e:	69f8      	ldr	r0, [r7, #28]
 8002660:	f7fe fb14 	bl	8000c8c <__aeabi_i2f>
 8002664:	4603      	mov	r3, r0
 8002666:	4619      	mov	r1, r3
 8002668:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800266c:	f7fe fa58 	bl	8000b20 <__aeabi_fsub>
 8002670:	4603      	mov	r3, r0
 8002672:	494e      	ldr	r1, [pc, #312]	@ (80027ac <moveAxesWithFeedRate+0x4f4>)
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb5d 	bl	8000d34 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fd35 	bl	80010ec <__aeabi_f2iz>
 8002682:	4603      	mov	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]
    int d_int = (int)total_distance;
 8002686:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002688:	f7fe fd30 	bl	80010ec <__aeabi_f2iz>
 800268c:	4603      	mov	r3, r0
 800268e:	617b      	str	r3, [r7, #20]
    int d_dec = (int)((total_distance - d_int) * 100);
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7fe fafb 	bl	8000c8c <__aeabi_i2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4619      	mov	r1, r3
 800269a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800269c:	f7fe fa40 	bl	8000b20 <__aeabi_fsub>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4941      	ldr	r1, [pc, #260]	@ (80027a8 <moveAxesWithFeedRate+0x4f0>)
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fb45 	bl	8000d34 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd1d 	bl	80010ec <__aeabi_f2iz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

    snprintf(outputBuffer, sizeof(outputBuffer), "%s: X=%d.%02d Y=%d.%02d Z=%d.%02d F=%d.%d D=%d.%02dmm T=%lduS\r\n", 
 80026b6:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <moveAxesWithFeedRate+0x40a>
 80026be:	4e3c      	ldr	r6, [pc, #240]	@ (80027b0 <moveAxesWithFeedRate+0x4f8>)
 80026c0:	e000      	b.n	80026c4 <moveAxesWithFeedRate+0x40c>
 80026c2:	4e3c      	ldr	r6, [pc, #240]	@ (80027b4 <moveAxesWithFeedRate+0x4fc>)
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfb8      	it	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	bfb8      	it	lt
 80026d2:	4252      	neglt	r2, r2
 80026d4:	6a39      	ldr	r1, [r7, #32]
 80026d6:	2900      	cmp	r1, #0
 80026d8:	bfb8      	it	lt
 80026da:	4249      	neglt	r1, r1
 80026dc:	69b8      	ldr	r0, [r7, #24]
 80026de:	2800      	cmp	r0, #0
 80026e0:	bfb8      	it	lt
 80026e2:	4240      	neglt	r0, r0
 80026e4:	693c      	ldr	r4, [r7, #16]
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	bfb8      	it	lt
 80026ea:	4264      	neglt	r4, r4
 80026ec:	6c7d      	ldr	r5, [r7, #68]	@ 0x44
 80026ee:	950a      	str	r5, [sp, #40]	@ 0x28
 80026f0:	9409      	str	r4, [sp, #36]	@ 0x24
 80026f2:	697c      	ldr	r4, [r7, #20]
 80026f4:	9408      	str	r4, [sp, #32]
 80026f6:	9007      	str	r0, [sp, #28]
 80026f8:	69f8      	ldr	r0, [r7, #28]
 80026fa:	9006      	str	r0, [sp, #24]
 80026fc:	9105      	str	r1, [sp, #20]
 80026fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002700:	9104      	str	r1, [sp, #16]
 8002702:	9203      	str	r2, [sp, #12]
 8002704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002706:	9202      	str	r2, [sp, #8]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4633      	mov	r3, r6
 8002710:	4a29      	ldr	r2, [pc, #164]	@ (80027b8 <moveAxesWithFeedRate+0x500>)
 8002712:	21c8      	movs	r1, #200	@ 0xc8
 8002714:	4829      	ldr	r0, [pc, #164]	@ (80027bc <moveAxesWithFeedRate+0x504>)
 8002716:	f009 fd11 	bl	800c13c <sniprintf>
           y_int, abs(y_dec), 
           z_int, abs(z_dec),
           f_int, abs(f_dec), 
           d_int, abs(d_dec), 
           (unsigned long)step_delay);
    sendUSBText(outputBuffer);
 800271a:	4828      	ldr	r0, [pc, #160]	@ (80027bc <moveAxesWithFeedRate+0x504>)
 800271c:	f7ff fc1a 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002720:	22c8      	movs	r2, #200	@ 0xc8
 8002722:	2100      	movs	r1, #0
 8002724:	4825      	ldr	r0, [pc, #148]	@ (80027bc <moveAxesWithFeedRate+0x504>)
 8002726:	f009 fda4 	bl	800c272 <memset>
    // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
 800272a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (deltaY > maxSteps) maxSteps = deltaY;
 8002730:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002732:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002736:	429a      	cmp	r2, r3
 8002738:	dd02      	ble.n	8002740 <moveAxesWithFeedRate+0x488>
 800273a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 8002740:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002742:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002746:	429a      	cmp	r2, r3
 8002748:	dd02      	ble.n	8002750 <moveAxesWithFeedRate+0x498>
 800274a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800274c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    
    if (maxSteps == 0) return; // No hay movimiento
 8002750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80ac 	beq.w	80028b2 <moveAxesWithFeedRate+0x5fa>
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 800275a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800275e:	0fda      	lsrs	r2, r3, #31
 8002760:	4413      	add	r3, r2
 8002762:	105b      	asrs	r3, r3, #1
 8002764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    int32_t errorY = maxSteps / 2;
 8002768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800276c:	0fda      	lsrs	r2, r3, #31
 800276e:	4413      	add	r3, r2
 8002770:	105b      	asrs	r3, r3, #1
 8002772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    int32_t errorZ = maxSteps / 2;
 8002776:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800277a:	0fda      	lsrs	r2, r3, #31
 800277c:	4413      	add	r3, r2
 800277e:	105b      	asrs	r3, r3, #1
 8002780:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    // Encender LED indicador de movimiento
    HAL_GPIO_WritePin(GPIOB, isRapid ? LED_ANTIHORARIO : LED_HORARIO, GPIO_PIN_SET);
 8002782:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <moveAxesWithFeedRate+0x4d6>
 800278a:	2302      	movs	r3, #2
 800278c:	e000      	b.n	8002790 <moveAxesWithFeedRate+0x4d8>
 800278e:	2301      	movs	r3, #1
 8002790:	2201      	movs	r2, #1
 8002792:	4619      	mov	r1, r3
 8002794:	480a      	ldr	r0, [pc, #40]	@ (80027c0 <moveAxesWithFeedRate+0x508>)
 8002796:	f001 ff12 	bl	80045be <HAL_GPIO_WritePin>
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 800279a:	2300      	movs	r3, #0
 800279c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800279e:	e06f      	b.n	8002880 <moveAxesWithFeedRate+0x5c8>
 80027a0:	20000478 	.word	0x20000478
 80027a4:	4575a000 	.word	0x4575a000
 80027a8:	42c80000 	.word	0x42c80000
 80027ac:	41200000 	.word	0x41200000
 80027b0:	0800e8e4 	.word	0x0800e8e4
 80027b4:	0800e8f0 	.word	0x0800e8f0
 80027b8:	0800e8fc 	.word	0x0800e8fc
 80027bc:	200003a8 	.word	0x200003a8
 80027c0:	40010c00 	.word	0x40010c00
        bool stepX = false, stepY = false, stepZ = false;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
        
        // Algoritmo de Bresenham para X
        errorX += deltaX;
 80027d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027dc:	4413      	add	r3, r2
 80027de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        if (errorX >= maxSteps) {
 80027e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027ea:	429a      	cmp	r2, r3
 80027ec:	db09      	blt.n	8002802 <moveAxesWithFeedRate+0x54a>
            errorX -= maxSteps;
 80027ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80027f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            stepX = true;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        }
        
        // Algoritmo de Bresenham para Y
        errorY += deltaY;
 8002802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002808:	4413      	add	r3, r2
 800280a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        if (errorY >= maxSteps) {
 800280e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002812:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002816:	429a      	cmp	r2, r3
 8002818:	db09      	blt.n	800282e <moveAxesWithFeedRate+0x576>
            errorY -= maxSteps;
 800281a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800281e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            stepY = true;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        }
        
        // Algoritmo de Bresenham para Z
        errorZ += deltaZ;
 800282e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002832:	4413      	add	r3, r2
 8002834:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (errorZ >= maxSteps) {
 8002836:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800283c:	429a      	cmp	r2, r3
 800283e:	db07      	blt.n	8002850 <moveAxesWithFeedRate+0x598>
            errorZ -= maxSteps;
 8002840:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002842:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
            stepZ = true;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
        }
        
        // Ejecutar pasos simultáneamente
        if (stepX) X_stepOnce();
 8002850:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <moveAxesWithFeedRate+0x5a4>
 8002858:	f7ff fc9e 	bl	8002198 <X_stepOnce>
        if (stepY) Y_stepOnce();
 800285c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <moveAxesWithFeedRate+0x5b0>
 8002864:	f7ff fcac 	bl	80021c0 <Y_stepOnce>
        if (stepZ) Z_stepOnce();
 8002868:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <moveAxesWithFeedRate+0x5bc>
 8002870:	f7ff fcbc 	bl	80021ec <Z_stepOnce>
        
        // Delay controlado por feed rate
        delay_us(step_delay);
 8002874:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002876:	f7ff fc69 	bl	800214c <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 800287a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800287c:	3301      	adds	r3, #1
 800287e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002880:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002882:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002886:	429a      	cmp	r2, r3
 8002888:	db9c      	blt.n	80027c4 <moveAxesWithFeedRate+0x50c>
    }
    
    // Apagar LEDs
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	480b      	ldr	r0, [pc, #44]	@ (80028bc <moveAxesWithFeedRate+0x604>)
 8002890:	f001 fe95 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	4808      	ldr	r0, [pc, #32]	@ (80028bc <moveAxesWithFeedRate+0x604>)
 800289a:	f001 fe90 	bl	80045be <HAL_GPIO_WritePin>
    
    // Actualizar posiciones actuales
    currentX = targetX;
 800289e:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <moveAxesWithFeedRate+0x608>)
 80028a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028a2:	6013      	str	r3, [r2, #0]
    currentY = targetY;
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <moveAxesWithFeedRate+0x60c>)
 80028a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028a8:	6013      	str	r3, [r2, #0]
    currentZ = targetZ;
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <moveAxesWithFeedRate+0x610>)
 80028ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e000      	b.n	80028b4 <moveAxesWithFeedRate+0x5fc>
    if (maxSteps == 0) return; // No hay movimiento
 80028b2:	bf00      	nop
}
 80028b4:	3794      	adds	r7, #148	@ 0x94
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	20000470 	.word	0x20000470
 80028c4:	20000474 	.word	0x20000474
 80028c8:	20000478 	.word	0x20000478

080028cc <arc_move_r>:



void arc_move_r(float x_end, float y_end, float r, int clockwise) {
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
    //     float angle = start_angle + total_angle * ((float)i / SEGMENTS);
    //     float x = cx + r * cos(angle);
    //     float y = cy + r * sin(angle);
    //     moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
    // }
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <processGcode>:


void processGcode(const char* command) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0ac      	sub	sp, #176	@ 0xb0
 80028e8:	af06      	add	r7, sp, #24
 80028ea:	6078      	str	r0, [r7, #4]
    // Comandos especiales para control de programa
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80028ec:	220d      	movs	r2, #13
 80028ee:	49a8      	ldr	r1, [pc, #672]	@ (8002b90 <processGcode+0x2ac>)
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f009 fcc6 	bl	800c282 <strncmp>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <processGcode+0x1e>
        startProgramStorage();
 80028fc:	f000 fe06 	bl	800350c <startProgramStorage>
        return;
 8002900:	e143      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 8002902:	220c      	movs	r2, #12
 8002904:	49a3      	ldr	r1, [pc, #652]	@ (8002b94 <processGcode+0x2b0>)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f009 fcbb 	bl	800c282 <strncmp>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <processGcode+0x34>
        stopProgramStorage();
 8002912:	f000 fe37 	bl	8003584 <stopProgramStorage>
        return;
 8002916:	e138      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 8002918:	220b      	movs	r2, #11
 800291a:	499f      	ldr	r1, [pc, #636]	@ (8002b98 <processGcode+0x2b4>)
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f009 fcb0 	bl	800c282 <strncmp>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <processGcode+0x4a>
        runProgram();
 8002928:	f000 ff28 	bl	800377c <runProgram>
        return;
 800292c:	e12d      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 800292e:	220d      	movs	r2, #13
 8002930:	499a      	ldr	r1, [pc, #616]	@ (8002b9c <processGcode+0x2b8>)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f009 fca5 	bl	800c282 <strncmp>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <processGcode+0x60>
        clearProgram();
 800293e:	f000 fedb 	bl	80036f8 <clearProgram>
        return;
 8002942:	e122      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 8002944:	220d      	movs	r2, #13
 8002946:	4996      	ldr	r1, [pc, #600]	@ (8002ba0 <processGcode+0x2bc>)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f009 fc9a 	bl	800c282 <strncmp>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <processGcode+0x76>
        pauseProgram();
 8002954:	f001 f88e 	bl	8003a74 <pauseProgram>
        return;
 8002958:	e117      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 800295a:	220c      	movs	r2, #12
 800295c:	4991      	ldr	r1, [pc, #580]	@ (8002ba4 <processGcode+0x2c0>)
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f009 fc8f 	bl	800c282 <strncmp>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <processGcode+0x8c>
        runNextLine();
 800296a:	f000 ffdf 	bl	800392c <runNextLine>
        return;
 800296e:	e10c      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 8002970:	2204      	movs	r2, #4
 8002972:	498d      	ldr	r1, [pc, #564]	@ (8002ba8 <processGcode+0x2c4>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f009 fc84 	bl	800c282 <strncmp>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <processGcode+0xac>
 8002980:	2204      	movs	r2, #4
 8002982:	498a      	ldr	r1, [pc, #552]	@ (8002bac <processGcode+0x2c8>)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f009 fc7c 	bl	800c282 <strncmp>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <processGcode+0xb2>
        showHelp();
 8002990:	f001 f898 	bl	8003ac4 <showHelp>
        return;
 8002994:	e0f9      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 8002996:	220c      	movs	r2, #12
 8002998:	4985      	ldr	r1, [pc, #532]	@ (8002bb0 <processGcode+0x2cc>)
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f009 fc71 	bl	800c282 <strncmp>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <processGcode+0xc8>
        showQueueStatus();
 80029a6:	f001 f923 	bl	8003bf0 <showQueueStatus>
        return;
 80029aa:	e0ee      	b.n	8002b8a <processGcode+0x2a6>
    }
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80029ac:	2203      	movs	r2, #3
 80029ae:	4981      	ldr	r1, [pc, #516]	@ (8002bb4 <processGcode+0x2d0>)
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f009 fc66 	bl	800c282 <strncmp>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <processGcode+0xe8>
 80029bc:	2203      	movs	r2, #3
 80029be:	497e      	ldr	r1, [pc, #504]	@ (8002bb8 <processGcode+0x2d4>)
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f009 fc5e 	bl	800c282 <strncmp>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <processGcode+0xf6>
        if (isStoringProgram) {
 80029cc:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <processGcode+0x2d8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <processGcode+0xf6>
            stopProgramStorage();
 80029d4:	f000 fdd6 	bl	8003584 <stopProgramStorage>
            return;
 80029d8:	e0d7      	b.n	8002b8a <processGcode+0x2a6>
        }
    }
    
    // Si estamos en modo almacenamiento, agregar la línea al programa
    if (isStoringProgram) {
 80029da:	4b78      	ldr	r3, [pc, #480]	@ (8002bbc <processGcode+0x2d8>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <processGcode+0x11a>
        if (addLineToProgram(command)) {
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 fe06 	bl	80035f4 <addLineToProgram>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <processGcode+0x112>
            sendUSBText("ok\r\n");
 80029ee:	4874      	ldr	r0, [pc, #464]	@ (8002bc0 <processGcode+0x2dc>)
 80029f0:	f7ff fab0 	bl	8001f54 <sendUSBText>
        } else {
            sendUSBText("error: buffer lleno\r\n");
        }
        return;
 80029f4:	e0c9      	b.n	8002b8a <processGcode+0x2a6>
            sendUSBText("error: buffer lleno\r\n");
 80029f6:	4873      	ldr	r0, [pc, #460]	@ (8002bc4 <processGcode+0x2e0>)
 80029f8:	f7ff faac 	bl	8001f54 <sendUSBText>
        return;
 80029fc:	e0c5      	b.n	8002b8a <processGcode+0x2a6>
    }
    
    // Procesamiento normal de G-code
    char line_copy[100];
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	2263      	movs	r2, #99	@ 0x63
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f009 fc4d 	bl	800c2a6 <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    
    uint8_t status = gc_execute_line(line_copy);
 8002a12:	f107 030c 	add.w	r3, r7, #12
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f99a 	bl	8001d50 <gc_execute_line>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    
    // Enviar respuesta según el estándar GRBL
    if (status == STATUS_OK) {
 8002a22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 80aa 	bne.w	8002b80 <processGcode+0x29c>
        // Verificar si es un comando que requiere respuesta especial
        if (strncmp(command, "M114", 4) == 0) {
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4966      	ldr	r1, [pc, #408]	@ (8002bc8 <processGcode+0x2e4>)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f009 fc26 	bl	800c282 <strncmp>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 8097 	bne.w	8002b6c <processGcode+0x288>
            // M114 - Reportar posición actual
            float xPos = currentX / (float)STEPS_PER_MM_X;
 8002a3e:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <processGcode+0x2e8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f922 	bl	8000c8c <__aeabi_i2f>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4961      	ldr	r1, [pc, #388]	@ (8002bd0 <processGcode+0x2ec>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fa25 	bl	8000e9c <__aeabi_fdiv>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002a58:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd4 <processGcode+0x2f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f915 	bl	8000c8c <__aeabi_i2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	495a      	ldr	r1, [pc, #360]	@ (8002bd0 <processGcode+0x2ec>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fa18 	bl	8000e9c <__aeabi_fdiv>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002a72:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <processGcode+0x2f4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f908 	bl	8000c8c <__aeabi_i2f>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4957      	ldr	r1, [pc, #348]	@ (8002bdc <processGcode+0x2f8>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fa0b 	bl	8000e9c <__aeabi_fdiv>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            
            // Convertir a enteros para evitar problemas con printf float
            int x_int = (int)xPos;
 8002a8c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002a90:	f7fe fb2c 	bl	80010ec <__aeabi_f2iz>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            int x_dec = (int)((xPos - x_int) * 100);
 8002a9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002a9e:	f7fe f8f5 	bl	8000c8c <__aeabi_i2f>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002aaa:	f7fe f839 	bl	8000b20 <__aeabi_fsub>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	494b      	ldr	r1, [pc, #300]	@ (8002be0 <processGcode+0x2fc>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f93e 	bl	8000d34 <__aeabi_fmul>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb16 	bl	80010ec <__aeabi_f2iz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            int y_int = (int)yPos;
 8002ac6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002aca:	f7fe fb0f 	bl	80010ec <__aeabi_f2iz>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            int y_dec = (int)((yPos - y_int) * 100);
 8002ad2:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002ad4:	f7fe f8da 	bl	8000c8c <__aeabi_i2f>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002ae0:	f7fe f81e 	bl	8000b20 <__aeabi_fsub>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	493e      	ldr	r1, [pc, #248]	@ (8002be0 <processGcode+0x2fc>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f923 	bl	8000d34 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fafb 	bl	80010ec <__aeabi_f2iz>
 8002af6:	4603      	mov	r3, r0
 8002af8:	67bb      	str	r3, [r7, #120]	@ 0x78
            int z_int = (int)zPos;
 8002afa:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002afe:	f7fe faf5 	bl	80010ec <__aeabi_f2iz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	677b      	str	r3, [r7, #116]	@ 0x74
            int z_dec = (int)((zPos - z_int) * 100);
 8002b06:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002b08:	f7fe f8c0 	bl	8000c8c <__aeabi_i2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8002b14:	f7fe f804 	bl	8000b20 <__aeabi_fsub>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4931      	ldr	r1, [pc, #196]	@ (8002be0 <processGcode+0x2fc>)
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f909 	bl	8000d34 <__aeabi_fmul>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe fae1 	bl	80010ec <__aeabi_f2iz>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	673b      	str	r3, [r7, #112]	@ 0x70

            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bfb8      	it	lt
 8002b36:	425b      	neglt	r3, r3
 8002b38:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002b3a:	2a00      	cmp	r2, #0
 8002b3c:	bfb8      	it	lt
 8002b3e:	4252      	neglt	r2, r2
 8002b40:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002b42:	2900      	cmp	r1, #0
 8002b44:	bfb8      	it	lt
 8002b46:	4249      	neglt	r1, r1
 8002b48:	9104      	str	r1, [sp, #16]
 8002b4a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002b4c:	9103      	str	r1, [sp, #12]
 8002b4e:	9202      	str	r2, [sp, #8]
 8002b50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002b52:	9201      	str	r2, [sp, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b5a:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <processGcode+0x300>)
 8002b5c:	21c8      	movs	r1, #200	@ 0xc8
 8002b5e:	4822      	ldr	r0, [pc, #136]	@ (8002be8 <processGcode+0x304>)
 8002b60:	f009 faec 	bl	800c13c <sniprintf>
                   x_int, abs(x_dec), y_int, abs(y_dec), z_int, abs(z_dec));
            sendUSBText(outputBuffer);
 8002b64:	4820      	ldr	r0, [pc, #128]	@ (8002be8 <processGcode+0x304>)
 8002b66:	f7ff f9f5 	bl	8001f54 <sendUSBText>
 8002b6a:	e009      	b.n	8002b80 <processGcode+0x29c>

        } else if (strncmp(command, "M503", 4) == 0) {
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	491f      	ldr	r1, [pc, #124]	@ (8002bec <processGcode+0x308>)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f009 fb86 	bl	800c282 <strncmp>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <processGcode+0x29c>
            // M503 - Mostrar configuración
            showConfiguration();
 8002b7c:	f000 f92c 	bl	8002dd8 <showConfiguration>
        }
    }
    
    // Enviar respuesta final usando el parser modular
    report_status_message(status);
 8002b80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f921 	bl	8001dcc <report_status_message>
}
 8002b8a:	3798      	adds	r7, #152	@ 0x98
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800e93c 	.word	0x0800e93c
 8002b94:	0800e94c 	.word	0x0800e94c
 8002b98:	0800e95c 	.word	0x0800e95c
 8002b9c:	0800e968 	.word	0x0800e968
 8002ba0:	0800e978 	.word	0x0800e978
 8002ba4:	0800e988 	.word	0x0800e988
 8002ba8:	0800e998 	.word	0x0800e998
 8002bac:	0800e9a0 	.word	0x0800e9a0
 8002bb0:	0800e9a8 	.word	0x0800e9a8
 8002bb4:	0800e9b8 	.word	0x0800e9b8
 8002bb8:	0800e9bc 	.word	0x0800e9bc
 8002bbc:	20002430 	.word	0x20002430
 8002bc0:	0800e9c0 	.word	0x0800e9c0
 8002bc4:	0800e9c8 	.word	0x0800e9c8
 8002bc8:	0800e9e0 	.word	0x0800e9e0
 8002bcc:	20000470 	.word	0x20000470
 8002bd0:	429e0000 	.word	0x429e0000
 8002bd4:	20000474 	.word	0x20000474
 8002bd8:	20000478 	.word	0x20000478
 8002bdc:	4575a000 	.word	0x4575a000
 8002be0:	42c80000 	.word	0x42c80000
 8002be4:	0800e9e8 	.word	0x0800e9e8
 8002be8:	200003a8 	.word	0x200003a8
 8002bec:	0800ea08 	.word	0x0800ea08

08002bf0 <loop>:

void loop(void) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
        sendUSBText("[HEARTBEAT] Sistema activo\r\n");
    }
    #endif
    
    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <loop+0x90>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03c      	beq.n	8002c78 <loop+0x88>
                usbBufferIndex, usbBuffer);
        sendUSBText(debugStatus);
        #endif
        
        // Verificar que el buffer no esté vacío y contenga algo más que espacios
        bool hasValidCommand = false;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	71fb      	strb	r3, [r7, #7]
        for (int i = 0; i < usbBufferIndex; i++) {
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	e01d      	b.n	8002c44 <loop+0x54>
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8002c08:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <loop+0x94>)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d014      	beq.n	8002c3e <loop+0x4e>
 8002c14:	4a1b      	ldr	r2, [pc, #108]	@ (8002c84 <loop+0x94>)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d00e      	beq.n	8002c3e <loop+0x4e>
 8002c20:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <loop+0x94>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b0d      	cmp	r3, #13
 8002c2a:	d008      	beq.n	8002c3e <loop+0x4e>
 8002c2c:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <loop+0x94>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b0a      	cmp	r3, #10
 8002c36:	d002      	beq.n	8002c3e <loop+0x4e>
                hasValidCommand = true;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	71fb      	strb	r3, [r7, #7]
                break;
 8002c3c:	e007      	b.n	8002c4e <loop+0x5e>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <loop+0x98>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbdc      	blt.n	8002c08 <loop+0x18>
            }
        }
        
        if (hasValidCommand && usbBufferIndex > 0) {
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <loop+0x72>
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <loop+0x98>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd02      	ble.n	8002c62 <loop+0x72>
            sprintf(outputBuffer, ">>> [%s]\r\n", usbBuffer);
            sendUSBText(outputBuffer);
            memset(outputBuffer, 0, sizeof(outputBuffer));
            #endif
            
            processGcode(usbBuffer);
 8002c5c:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <loop+0x94>)
 8002c5e:	f7ff fe41 	bl	80028e4 <processGcode>
        }
        
        // IMPORTANTE: Resetear todo después de procesar (o intentar procesar)
        usbBufferIndex = 0;
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <loop+0x98>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002c68:	2264      	movs	r2, #100	@ 0x64
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <loop+0x94>)
 8002c6e:	f009 fb00 	bl	800c272 <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8002c72:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <loop+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
    }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200004e4 	.word	0x200004e4
 8002c84:	2000047c 	.word	0x2000047c
 8002c88:	200004e0 	.word	0x200004e0

08002c8c <setup>:

void setup(void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <setup+0x3c>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <setup+0x3c>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <setup+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <setup+0x40>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    enableSteppers();
 8002ca8:	f000 fbfc 	bl	80034a4 <enableSteppers>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4807      	ldr	r0, [pc, #28]	@ (8002cd0 <setup+0x44>)
 8002cb2:	f001 fc84 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4805      	ldr	r0, [pc, #20]	@ (8002cd0 <setup+0x44>)
 8002cbc:	f001 fc7f 	bl	80045be <HAL_GPIO_WritePin>
    
    // Inicializar parser G-code modular con callbacks
    gc_init();
 8002cc0:	f7fe fa90 	bl	80011e4 <gc_init>
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000edf0 	.word	0xe000edf0
 8002ccc:	e0001000 	.word	0xe0001000
 8002cd0:	40010c00 	.word	0x40010c00

08002cd4 <moveAxesRapidCallback>:
    // Usar función con feed rate por defecto (para compatibilidad)
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
}

// Callback específico para movimiento rápido G0
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	@ 0x28
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	70fb      	strb	r3, [r7, #3]
    float target_x = x_defined ? x : NAN;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <moveAxesRapidCallback+0x18>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	e000      	b.n	8002cee <moveAxesRapidCallback+0x1a>
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <moveAxesRapidCallback+0x58>)
 8002cee:	61fb      	str	r3, [r7, #28]
    float target_y = y_defined ? y : NAN;
 8002cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <moveAxesRapidCallback+0x28>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	e000      	b.n	8002cfe <moveAxesRapidCallback+0x2a>
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <moveAxesRapidCallback+0x58>)
 8002cfe:	61bb      	str	r3, [r7, #24]
    float target_z = z_defined ? z : NAN;
 8002d00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <moveAxesRapidCallback+0x38>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e000      	b.n	8002d0e <moveAxesRapidCallback+0x3a>
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <moveAxesRapidCallback+0x58>)
 8002d0e:	617b      	str	r3, [r7, #20]
    
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 8002d10:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <moveAxesRapidCallback+0x5c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	9200      	str	r2, [sp, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	69f8      	ldr	r0, [r7, #28]
 8002d1e:	f7ff facb 	bl	80022b8 <moveAxesWithFeedRate>
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	7fc00000 	.word	0x7fc00000
 8002d30:	20000004 	.word	0x20000004

08002d34 <moveAxesArcCallback>:

void moveAxesArcCallback(float x, float y, float r, int clockwise) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
    // Llamar a la función de movimiento de arco
    arc_move_r(x, y, r, clockwise);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fdbf 	bl	80028cc <arc_move_r>
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <moveAxesLinearCallback>:

// Callback específico para movimiento lineal G1 con feed rate
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
    float target_x = x_defined ? x : NAN;
 8002d66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <moveAxesLinearCallback+0x1a>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	e000      	b.n	8002d74 <moveAxesLinearCallback+0x1c>
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <moveAxesLinearCallback+0x78>)
 8002d74:	61fb      	str	r3, [r7, #28]
    float target_y = y_defined ? y : NAN;
 8002d76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <moveAxesLinearCallback+0x2a>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	e000      	b.n	8002d84 <moveAxesLinearCallback+0x2c>
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <moveAxesLinearCallback+0x78>)
 8002d84:	61bb      	str	r3, [r7, #24]
    float target_z = z_defined ? z : NAN;
 8002d86:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <moveAxesLinearCallback+0x3a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e000      	b.n	8002d94 <moveAxesLinearCallback+0x3c>
 8002d92:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <moveAxesLinearCallback+0x78>)
 8002d94:	617b      	str	r3, [r7, #20]
    
    // Actualizar feed rate actual si se especifica
    if (f_defined && feedRate > 0) {
 8002d96:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <moveAxesLinearCallback+0x5c>
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f7fe f982 	bl	80010ac <__aeabi_fcmpgt>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <moveAxesLinearCallback+0x5c>
        currentFeedRate = feedRate;
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <moveAxesLinearCallback+0x7c>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6013      	str	r3, [r2, #0]
    }
    
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8002db4:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <moveAxesLinearCallback+0x7c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	9200      	str	r2, [sp, #0]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	69f8      	ldr	r0, [r7, #28]
 8002dc2:	f7ff fa79 	bl	80022b8 <moveAxesWithFeedRate>
}
 8002dc6:	bf00      	nop
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	7fc00000 	.word	0x7fc00000
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <showConfiguration>:

// Función auxiliar para movimiento genérico (no utilizada actualmente)
// Se mantiene para compatibilidad futura

// Función para mostrar la configuración actual del sistema
void showConfiguration(void) {
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b095      	sub	sp, #84	@ 0x54
 8002ddc:	af04      	add	r7, sp, #16
    
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8002dde:	48a6      	ldr	r0, [pc, #664]	@ (8003078 <showConfiguration+0x2a0>)
 8002de0:	f7ff f8b8 	bl	8001f54 <sendUSBText>

    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8002de4:	224f      	movs	r2, #79	@ 0x4f
 8002de6:	49a5      	ldr	r1, [pc, #660]	@ (800307c <showConfiguration+0x2a4>)
 8002de8:	48a5      	ldr	r0, [pc, #660]	@ (8003080 <showConfiguration+0x2a8>)
 8002dea:	f009 f9dd 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002dee:	48a4      	ldr	r0, [pc, #656]	@ (8003080 <showConfiguration+0x2a8>)
 8002df0:	f7ff f8b0 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002df4:	22c8      	movs	r2, #200	@ 0xc8
 8002df6:	2100      	movs	r1, #0
 8002df8:	48a1      	ldr	r0, [pc, #644]	@ (8003080 <showConfiguration+0x2a8>)
 8002dfa:	f009 fa3a 	bl	800c272 <memset>

    sprintf(outputBuffer, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8002dfe:	224f      	movs	r2, #79	@ 0x4f
 8002e00:	49a0      	ldr	r1, [pc, #640]	@ (8003084 <showConfiguration+0x2ac>)
 8002e02:	489f      	ldr	r0, [pc, #636]	@ (8003080 <showConfiguration+0x2a8>)
 8002e04:	f009 f9d0 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002e08:	489d      	ldr	r0, [pc, #628]	@ (8003080 <showConfiguration+0x2a8>)
 8002e0a:	f7ff f8a3 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002e0e:	22c8      	movs	r2, #200	@ 0xc8
 8002e10:	2100      	movs	r1, #0
 8002e12:	489b      	ldr	r0, [pc, #620]	@ (8003080 <showConfiguration+0x2a8>)
 8002e14:	f009 fa2d 	bl	800c272 <memset>

    sprintf(outputBuffer, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8002e18:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8002e1c:	499a      	ldr	r1, [pc, #616]	@ (8003088 <showConfiguration+0x2b0>)
 8002e1e:	4898      	ldr	r0, [pc, #608]	@ (8003080 <showConfiguration+0x2a8>)
 8002e20:	f009 f9c2 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002e24:	4896      	ldr	r0, [pc, #600]	@ (8003080 <showConfiguration+0x2a8>)
 8002e26:	f7ff f895 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002e2a:	22c8      	movs	r2, #200	@ 0xc8
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4894      	ldr	r0, [pc, #592]	@ (8003080 <showConfiguration+0x2a8>)
 8002e30:	f009 fa1f 	bl	800c272 <memset>

    sprintf(outputBuffer, "Step delay: %d us\r\n", STEP_DELAY_US);
 8002e34:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4994      	ldr	r1, [pc, #592]	@ (800308c <showConfiguration+0x2b4>)
 8002e3c:	4890      	ldr	r0, [pc, #576]	@ (8003080 <showConfiguration+0x2a8>)
 8002e3e:	f009 f9b3 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002e42:	488f      	ldr	r0, [pc, #572]	@ (8003080 <showConfiguration+0x2a8>)
 8002e44:	f7ff f886 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002e48:	22c8      	movs	r2, #200	@ 0xc8
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	488c      	ldr	r0, [pc, #560]	@ (8003080 <showConfiguration+0x2a8>)
 8002e4e:	f009 fa10 	bl	800c272 <memset>
    
    // Convertir feed rate actual a enteros
    int feed_int = (int)currentFeedRate;
 8002e52:	4b8f      	ldr	r3, [pc, #572]	@ (8003090 <showConfiguration+0x2b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f948 	bl	80010ec <__aeabi_f2iz>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8002e60:	4b8b      	ldr	r3, [pc, #556]	@ (8003090 <showConfiguration+0x2b8>)
 8002e62:	681c      	ldr	r4, [r3, #0]
 8002e64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e66:	f7fd ff11 	bl	8000c8c <__aeabi_i2f>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7fd fe56 	bl	8000b20 <__aeabi_fsub>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4987      	ldr	r1, [pc, #540]	@ (8003094 <showConfiguration+0x2bc>)
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ff5b 	bl	8000d34 <__aeabi_fmul>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe f933 	bl	80010ec <__aeabi_f2iz>
 8002e86:	4603      	mov	r3, r0
 8002e88:	63bb      	str	r3, [r7, #56]	@ 0x38
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e8e:	4982      	ldr	r1, [pc, #520]	@ (8003098 <showConfiguration+0x2c0>)
 8002e90:	487b      	ldr	r0, [pc, #492]	@ (8003080 <showConfiguration+0x2a8>)
 8002e92:	f009 f989 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002e96:	487a      	ldr	r0, [pc, #488]	@ (8003080 <showConfiguration+0x2a8>)
 8002e98:	f7ff f85c 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002e9c:	22c8      	movs	r2, #200	@ 0xc8
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4877      	ldr	r0, [pc, #476]	@ (8003080 <showConfiguration+0x2a8>)
 8002ea2:	f009 f9e6 	bl	800c272 <memset>

    // Convertir velocidades a enteros para mostrar
    int rapid_int = (int)rapidRate;
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800309c <showConfiguration+0x2c4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe f91e 	bl	80010ec <__aeabi_f2iz>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8002eb4:	4b79      	ldr	r3, [pc, #484]	@ (800309c <showConfiguration+0x2c4>)
 8002eb6:	681c      	ldr	r4, [r3, #0]
 8002eb8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002eba:	f7fd fee7 	bl	8000c8c <__aeabi_i2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f7fd fe2c 	bl	8000b20 <__aeabi_fsub>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4972      	ldr	r1, [pc, #456]	@ (8003094 <showConfiguration+0x2bc>)
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd ff31 	bl	8000d34 <__aeabi_fmul>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f909 	bl	80010ec <__aeabi_f2iz>
 8002eda:	4603      	mov	r3, r0
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ee2:	496f      	ldr	r1, [pc, #444]	@ (80030a0 <showConfiguration+0x2c8>)
 8002ee4:	4866      	ldr	r0, [pc, #408]	@ (8003080 <showConfiguration+0x2a8>)
 8002ee6:	f009 f95f 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002eea:	4865      	ldr	r0, [pc, #404]	@ (8003080 <showConfiguration+0x2a8>)
 8002eec:	f7ff f832 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002ef0:	22c8      	movs	r2, #200	@ 0xc8
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4862      	ldr	r0, [pc, #392]	@ (8003080 <showConfiguration+0x2a8>)
 8002ef6:	f009 f9bc 	bl	800c272 <memset>
    
    int max_int = (int)maxFeedRate;
 8002efa:	4b6a      	ldr	r3, [pc, #424]	@ (80030a4 <showConfiguration+0x2cc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe f8f4 	bl	80010ec <__aeabi_f2iz>
 8002f04:	4603      	mov	r3, r0
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8002f08:	4b66      	ldr	r3, [pc, #408]	@ (80030a4 <showConfiguration+0x2cc>)
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f0e:	f7fd febd 	bl	8000c8c <__aeabi_i2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4619      	mov	r1, r3
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7fd fe02 	bl	8000b20 <__aeabi_fsub>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	495d      	ldr	r1, [pc, #372]	@ (8003094 <showConfiguration+0x2bc>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd ff07 	bl	8000d34 <__aeabi_fmul>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe f8df 	bl	80010ec <__aeabi_f2iz>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f36:	495c      	ldr	r1, [pc, #368]	@ (80030a8 <showConfiguration+0x2d0>)
 8002f38:	4851      	ldr	r0, [pc, #324]	@ (8003080 <showConfiguration+0x2a8>)
 8002f3a:	f009 f935 	bl	800c1a8 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8002f3e:	4850      	ldr	r0, [pc, #320]	@ (8003080 <showConfiguration+0x2a8>)
 8002f40:	f7ff f808 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002f44:	22c8      	movs	r2, #200	@ 0xc8
 8002f46:	2100      	movs	r1, #0
 8002f48:	484d      	ldr	r0, [pc, #308]	@ (8003080 <showConfiguration+0x2a8>)
 8002f4a:	f009 f992 	bl	800c272 <memset>

    // Mostrar posición actual
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8002f4e:	4b57      	ldr	r3, [pc, #348]	@ (80030ac <showConfiguration+0x2d4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fe9a 	bl	8000c8c <__aeabi_i2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4955      	ldr	r1, [pc, #340]	@ (80030b0 <showConfiguration+0x2d8>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd ff9d 	bl	8000e9c <__aeabi_fdiv>
 8002f62:	4603      	mov	r3, r0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002f66:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <showConfiguration+0x2dc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fe8e 	bl	8000c8c <__aeabi_i2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	494f      	ldr	r1, [pc, #316]	@ (80030b0 <showConfiguration+0x2d8>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd ff91 	bl	8000e9c <__aeabi_fdiv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	623b      	str	r3, [r7, #32]
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80030b8 <showConfiguration+0x2e0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fe82 	bl	8000c8c <__aeabi_i2f>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	494c      	ldr	r1, [pc, #304]	@ (80030bc <showConfiguration+0x2e4>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd ff85 	bl	8000e9c <__aeabi_fdiv>
 8002f92:	4603      	mov	r3, r0
 8002f94:	61fb      	str	r3, [r7, #28]
    
    // Convertir a enteros para evitar problemas con printf float
    int x_int = (int)xPos;
 8002f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f98:	f7fe f8a8 	bl	80010ec <__aeabi_f2iz>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	61bb      	str	r3, [r7, #24]
    int x_dec = (int)((xPos - x_int) * 100);
 8002fa0:	69b8      	ldr	r0, [r7, #24]
 8002fa2:	f7fd fe73 	bl	8000c8c <__aeabi_i2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fac:	f7fd fdb8 	bl	8000b20 <__aeabi_fsub>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4943      	ldr	r1, [pc, #268]	@ (80030c0 <showConfiguration+0x2e8>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd febd 	bl	8000d34 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe f895 	bl	80010ec <__aeabi_f2iz>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	617b      	str	r3, [r7, #20]
    int y_int = (int)yPos;
 8002fc6:	6a38      	ldr	r0, [r7, #32]
 8002fc8:	f7fe f890 	bl	80010ec <__aeabi_f2iz>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	613b      	str	r3, [r7, #16]
    int y_dec = (int)((yPos - y_int) * 100);
 8002fd0:	6938      	ldr	r0, [r7, #16]
 8002fd2:	f7fd fe5b 	bl	8000c8c <__aeabi_i2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6a38      	ldr	r0, [r7, #32]
 8002fdc:	f7fd fda0 	bl	8000b20 <__aeabi_fsub>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <showConfiguration+0x2e8>)
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fea5 	bl	8000d34 <__aeabi_fmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe f87d 	bl	80010ec <__aeabi_f2iz>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	60fb      	str	r3, [r7, #12]
    int z_int = (int)zPos;
 8002ff6:	69f8      	ldr	r0, [r7, #28]
 8002ff8:	f7fe f878 	bl	80010ec <__aeabi_f2iz>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60bb      	str	r3, [r7, #8]
    int z_dec = (int)((zPos - z_int) * 100);
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f7fd fe43 	bl	8000c8c <__aeabi_i2f>
 8003006:	4603      	mov	r3, r0
 8003008:	4619      	mov	r1, r3
 800300a:	69f8      	ldr	r0, [r7, #28]
 800300c:	f7fd fd88 	bl	8000b20 <__aeabi_fsub>
 8003010:	4603      	mov	r3, r0
 8003012:	492b      	ldr	r1, [pc, #172]	@ (80030c0 <showConfiguration+0x2e8>)
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fe8d 	bl	8000d34 <__aeabi_fmul>
 800301a:	4603      	mov	r3, r0
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f865 	bl	80010ec <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	607b      	str	r3, [r7, #4]

    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800302c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	bfb8      	it	lt
 8003036:	425b      	neglt	r3, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	2a00      	cmp	r2, #0
 800303c:	bfb8      	it	lt
 800303e:	4252      	neglt	r2, r2
 8003040:	9203      	str	r2, [sp, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	9202      	str	r2, [sp, #8]
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	460b      	mov	r3, r1
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	491c      	ldr	r1, [pc, #112]	@ (80030c4 <showConfiguration+0x2ec>)
 8003052:	480b      	ldr	r0, [pc, #44]	@ (8003080 <showConfiguration+0x2a8>)
 8003054:	f009 f8a8 	bl	800c1a8 <siprintf>
           x_int, abs(x_dec), y_int, abs(y_dec), z_int, abs(z_dec));
    sendUSBText((uint8_t*)outputBuffer);
 8003058:	4809      	ldr	r0, [pc, #36]	@ (8003080 <showConfiguration+0x2a8>)
 800305a:	f7fe ff7b 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800305e:	22c8      	movs	r2, #200	@ 0xc8
 8003060:	2100      	movs	r1, #0
 8003062:	4807      	ldr	r0, [pc, #28]	@ (8003080 <showConfiguration+0x2a8>)
 8003064:	f009 f905 	bl	800c272 <memset>
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8003068:	4817      	ldr	r0, [pc, #92]	@ (80030c8 <showConfiguration+0x2f0>)
 800306a:	f7fe ff73 	bl	8001f54 <sendUSBText>
}
 800306e:	bf00      	nop
 8003070:	3744      	adds	r7, #68	@ 0x44
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	0800ea44 	.word	0x0800ea44
 800307c:	0800ea64 	.word	0x0800ea64
 8003080:	200003a8 	.word	0x200003a8
 8003084:	0800ea7c 	.word	0x0800ea7c
 8003088:	0800ea94 	.word	0x0800ea94
 800308c:	0800eaac 	.word	0x0800eaac
 8003090:	20000000 	.word	0x20000000
 8003094:	41200000 	.word	0x41200000
 8003098:	0800eac0 	.word	0x0800eac0
 800309c:	20000004 	.word	0x20000004
 80030a0:	0800eae4 	.word	0x0800eae4
 80030a4:	20000008 	.word	0x20000008
 80030a8:	0800eb0c 	.word	0x0800eb0c
 80030ac:	20000470 	.word	0x20000470
 80030b0:	429e0000 	.word	0x429e0000
 80030b4:	20000474 	.word	0x20000474
 80030b8:	20000478 	.word	0x20000478
 80030bc:	4575a000 	.word	0x4575a000
 80030c0:	42c80000 	.word	0x42c80000
 80030c4:	0800eb30 	.word	0x0800eb30
 80030c8:	0800eb64 	.word	0x0800eb64

080030cc <isEndstopPressed>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
    switch(axis) {
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80030da:	d01e      	beq.n	800311a <isEndstopPressed+0x4e>
 80030dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80030de:	dc28      	bgt.n	8003132 <isEndstopPressed+0x66>
 80030e0:	2b58      	cmp	r3, #88	@ 0x58
 80030e2:	d002      	beq.n	80030ea <isEndstopPressed+0x1e>
 80030e4:	2b59      	cmp	r3, #89	@ 0x59
 80030e6:	d00c      	beq.n	8003102 <isEndstopPressed+0x36>
 80030e8:	e023      	b.n	8003132 <isEndstopPressed+0x66>
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 80030ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030ee:	4813      	ldr	r0, [pc, #76]	@ (800313c <isEndstopPressed+0x70>)
 80030f0:	f001 fa4e 	bl	8004590 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e018      	b.n	8003134 <isEndstopPressed+0x68>
        case 'Y':
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8003102:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003106:	480d      	ldr	r0, [pc, #52]	@ (800313c <isEndstopPressed+0x70>)
 8003108:	f001 fa42 	bl	8004590 <HAL_GPIO_ReadPin>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e00c      	b.n	8003134 <isEndstopPressed+0x68>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 800311a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800311e:	4807      	ldr	r0, [pc, #28]	@ (800313c <isEndstopPressed+0x70>)
 8003120:	f001 fa36 	bl	8004590 <HAL_GPIO_ReadPin>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf0c      	ite	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	2300      	movne	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e000      	b.n	8003134 <isEndstopPressed+0x68>
        default:
            return false;
 8003132:	2300      	movs	r3, #0
    }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40010c00 	.word	0x40010c00

08003140 <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b09a      	sub	sp, #104	@ 0x68
 8003144:	af00      	add	r7, sp, #0
    char msg[80];
    
    // Enviar mensaje de inicio de homing
    sendUSBText("Iniciando secuencia de homingg...\r\n");
 8003146:	48b5      	ldr	r0, [pc, #724]	@ (800341c <performHoming+0x2dc>)
 8003148:	f7fe ff04 	bl	8001f54 <sendUSBText>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(outputBuffer, "Fase 1: Buscando finales de carrera...\r\n");
 800314c:	49b4      	ldr	r1, [pc, #720]	@ (8003420 <performHoming+0x2e0>)
 800314e:	48b5      	ldr	r0, [pc, #724]	@ (8003424 <performHoming+0x2e4>)
 8003150:	f009 f82a 	bl	800c1a8 <siprintf>
    // sendUSBText((uint8_t*)msg);
    sendUSBText(outputBuffer);
 8003154:	48b3      	ldr	r0, [pc, #716]	@ (8003424 <performHoming+0x2e4>)
 8003156:	f7fe fefd 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800315a:	22c8      	movs	r2, #200	@ 0xc8
 800315c:	2100      	movs	r1, #0
 800315e:	48b1      	ldr	r0, [pc, #708]	@ (8003424 <performHoming+0x2e4>)
 8003160:	f009 f887 	bl	800c272 <memset>

    // Homing del eje X
    sprintf(outputBuffer, "Homing eje X...\r\n");
 8003164:	49b0      	ldr	r1, [pc, #704]	@ (8003428 <performHoming+0x2e8>)
 8003166:	48af      	ldr	r0, [pc, #700]	@ (8003424 <performHoming+0x2e4>)
 8003168:	f009 f81e 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 800316c:	48ad      	ldr	r0, [pc, #692]	@ (8003424 <performHoming+0x2e4>)
 800316e:	f7fe fef1 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003172:	22c8      	movs	r2, #200	@ 0xc8
 8003174:	2100      	movs	r1, #0
 8003176:	48ab      	ldr	r0, [pc, #684]	@ (8003424 <performHoming+0x2e4>)
 8003178:	f009 f87b 	bl	800c272 <memset>

    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 800317c:	2200      	movs	r2, #0
 800317e:	2180      	movs	r1, #128	@ 0x80
 8003180:	48aa      	ldr	r0, [pc, #680]	@ (800342c <performHoming+0x2ec>)
 8003182:	f001 fa1c 	bl	80045be <HAL_GPIO_WritePin>
    // Mover hacia el final de carrera X (dirección negativa)
    while (!isEndstopPressed('X')) {
 8003186:	e006      	b.n	8003196 <performHoming+0x56>
        X_stepOnce();
 8003188:	f7ff f806 	bl	8002198 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 800318c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe ffdb 	bl	800214c <delay_us>
    while (!isEndstopPressed('X')) {
 8003196:	2058      	movs	r0, #88	@ 0x58
 8003198:	f7ff ff98 	bl	80030cc <isEndstopPressed>
 800319c:	4603      	mov	r3, r0
 800319e:	f083 0301 	eor.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ef      	bne.n	8003188 <performHoming+0x48>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 80031a8:	2201      	movs	r2, #1
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	489f      	ldr	r0, [pc, #636]	@ (800342c <performHoming+0x2ec>)
 80031ae:	f001 fa06 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 80031b2:	2300      	movs	r3, #0
 80031b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80031b6:	e009      	b.n	80031cc <performHoming+0x8c>
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 80031b8:	f7fe ffee 	bl	8002198 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 80031bc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe ffc3 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 80031c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031c8:	3301      	adds	r3, #1
 80031ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80031cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031ce:	2b9d      	cmp	r3, #157	@ 0x9d
 80031d0:	ddf2      	ble.n	80031b8 <performHoming+0x78>
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 80031d2:	2200      	movs	r2, #0
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	4895      	ldr	r0, [pc, #596]	@ (800342c <performHoming+0x2ec>)
 80031d8:	f001 f9f1 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 80031dc:	2300      	movs	r3, #0
 80031de:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e0:	e00d      	b.n	80031fe <performHoming+0xbe>
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 80031e2:	f7fe ffd9 	bl	8002198 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3);
 80031e6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031ea:	461a      	mov	r2, r3
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe ffaa 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 80031f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031fa:	3301      	adds	r3, #1
 80031fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80031fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003200:	2b9d      	cmp	r3, #157	@ 0x9d
 8003202:	ddee      	ble.n	80031e2 <performHoming+0xa2>
    }
    if (!isEndstopPressed('X')) {
 8003204:	2058      	movs	r0, #88	@ 0x58
 8003206:	f7ff ff61 	bl	80030cc <isEndstopPressed>
 800320a:	4603      	mov	r3, r0
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <performHoming+0xf0>
        sprintf(outputBuffer, "Error: Final de carrera X no presionado\r\n");
 8003216:	4986      	ldr	r1, [pc, #536]	@ (8003430 <performHoming+0x2f0>)
 8003218:	4882      	ldr	r0, [pc, #520]	@ (8003424 <performHoming+0x2e4>)
 800321a:	f008 ffc5 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 800321e:	4881      	ldr	r0, [pc, #516]	@ (8003424 <performHoming+0x2e4>)
 8003220:	f7fe fe98 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8003224:	22c8      	movs	r2, #200	@ 0xc8
 8003226:	2100      	movs	r1, #0
 8003228:	487e      	ldr	r0, [pc, #504]	@ (8003424 <performHoming+0x2e4>)
 800322a:	f009 f822 	bl	800c272 <memset>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 800322e:	e12e      	b.n	800348e <performHoming+0x34e>
    }
    
    currentX = 0; // Establecer posición home
 8003230:	4b80      	ldr	r3, [pc, #512]	@ (8003434 <performHoming+0x2f4>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8003236:	4980      	ldr	r1, [pc, #512]	@ (8003438 <performHoming+0x2f8>)
 8003238:	487a      	ldr	r0, [pc, #488]	@ (8003424 <performHoming+0x2e4>)
 800323a:	f008 ffb5 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 800323e:	4879      	ldr	r0, [pc, #484]	@ (8003424 <performHoming+0x2e4>)
 8003240:	f7fe fe88 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003244:	22c8      	movs	r2, #200	@ 0xc8
 8003246:	2100      	movs	r1, #0
 8003248:	4876      	ldr	r0, [pc, #472]	@ (8003424 <performHoming+0x2e4>)
 800324a:	f009 f812 	bl	800c272 <memset>

    // Homing del eje Y
    sprintf(outputBuffer, "Homing eje Y...\r\n");
 800324e:	497b      	ldr	r1, [pc, #492]	@ (800343c <performHoming+0x2fc>)
 8003250:	4874      	ldr	r0, [pc, #464]	@ (8003424 <performHoming+0x2e4>)
 8003252:	f008 ffa9 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003256:	4873      	ldr	r0, [pc, #460]	@ (8003424 <performHoming+0x2e4>)
 8003258:	f7fe fe7c 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800325c:	22c8      	movs	r2, #200	@ 0xc8
 800325e:	2100      	movs	r1, #0
 8003260:	4870      	ldr	r0, [pc, #448]	@ (8003424 <performHoming+0x2e4>)
 8003262:	f009 f806 	bl	800c272 <memset>

    // Mover hacia el final de carrera Y (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8003266:	2200      	movs	r2, #0
 8003268:	2108      	movs	r1, #8
 800326a:	4870      	ldr	r0, [pc, #448]	@ (800342c <performHoming+0x2ec>)
 800326c:	f001 f9a7 	bl	80045be <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8003270:	e006      	b.n	8003280 <performHoming+0x140>
        Y_stepOnce();
 8003272:	f7fe ffa5 	bl	80021c0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8003276:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe ff66 	bl	800214c <delay_us>
    while (!isEndstopPressed('Y')) {
 8003280:	2059      	movs	r0, #89	@ 0x59
 8003282:	f7ff ff23 	bl	80030cc <isEndstopPressed>
 8003286:	4603      	mov	r3, r0
 8003288:	f083 0301 	eor.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ef      	bne.n	8003272 <performHoming+0x132>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8003292:	2201      	movs	r2, #1
 8003294:	2108      	movs	r1, #8
 8003296:	4865      	ldr	r0, [pc, #404]	@ (800342c <performHoming+0x2ec>)
 8003298:	f001 f991 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 800329c:	2300      	movs	r3, #0
 800329e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032a0:	e009      	b.n	80032b6 <performHoming+0x176>
        //if (!isEndstopPressed('Y'));
        Y_stepOnce();
 80032a2:	f7fe ff8d 	bl	80021c0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 80032a6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe ff4e 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 80032b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b2:	3301      	adds	r3, #1
 80032b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b8:	2b9d      	cmp	r3, #157	@ 0x9d
 80032ba:	ddf2      	ble.n	80032a2 <performHoming+0x162>
    }
    
    // FASE 2: Movimiento lento de precisión para Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 80032bc:	2200      	movs	r2, #0
 80032be:	2108      	movs	r1, #8
 80032c0:	485a      	ldr	r0, [pc, #360]	@ (800342c <performHoming+0x2ec>)
 80032c2:	f001 f97c 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 80032c6:	2300      	movs	r3, #0
 80032c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ca:	e00d      	b.n	80032e8 <performHoming+0x1a8>
        //if (!isEndstopPressed('Y'));
        Y_stepOnce();
 80032cc:	f7fe ff78 	bl	80021c0 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 80032d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe ff35 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 80032e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032e4:	3301      	adds	r3, #1
 80032e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ea:	2b9d      	cmp	r3, #157	@ 0x9d
 80032ec:	ddee      	ble.n	80032cc <performHoming+0x18c>
    }
    if (!isEndstopPressed('Y')) {
 80032ee:	2059      	movs	r0, #89	@ 0x59
 80032f0:	f7ff feec 	bl	80030cc <isEndstopPressed>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <performHoming+0x1da>
        sprintf(outputBuffer, "Error: Final de carrera Y no presionado\r\n");
 8003300:	494f      	ldr	r1, [pc, #316]	@ (8003440 <performHoming+0x300>)
 8003302:	4848      	ldr	r0, [pc, #288]	@ (8003424 <performHoming+0x2e4>)
 8003304:	f008 ff50 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 8003308:	4846      	ldr	r0, [pc, #280]	@ (8003424 <performHoming+0x2e4>)
 800330a:	f7fe fe23 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800330e:	22c8      	movs	r2, #200	@ 0xc8
 8003310:	2100      	movs	r1, #0
 8003312:	4844      	ldr	r0, [pc, #272]	@ (8003424 <performHoming+0x2e4>)
 8003314:	f008 ffad 	bl	800c272 <memset>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 8003318:	e0b9      	b.n	800348e <performHoming+0x34e>
    }
    
    currentY = 0; // Establecer posición home
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <performHoming+0x304>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8003320:	4949      	ldr	r1, [pc, #292]	@ (8003448 <performHoming+0x308>)
 8003322:	4840      	ldr	r0, [pc, #256]	@ (8003424 <performHoming+0x2e4>)
 8003324:	f008 ff40 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003328:	483e      	ldr	r0, [pc, #248]	@ (8003424 <performHoming+0x2e4>)
 800332a:	f7fe fe13 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800332e:	22c8      	movs	r2, #200	@ 0xc8
 8003330:	2100      	movs	r1, #0
 8003332:	483c      	ldr	r0, [pc, #240]	@ (8003424 <performHoming+0x2e4>)
 8003334:	f008 ff9d 	bl	800c272 <memset>

    // Homing del eje Z
    sprintf(outputBuffer, "Homing eje Z...\r\n");
 8003338:	4944      	ldr	r1, [pc, #272]	@ (800344c <performHoming+0x30c>)
 800333a:	483a      	ldr	r0, [pc, #232]	@ (8003424 <performHoming+0x2e4>)
 800333c:	f008 ff34 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003340:	4838      	ldr	r0, [pc, #224]	@ (8003424 <performHoming+0x2e4>)
 8003342:	f7fe fe07 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003346:	22c8      	movs	r2, #200	@ 0xc8
 8003348:	2100      	movs	r1, #0
 800334a:	4836      	ldr	r0, [pc, #216]	@ (8003424 <performHoming+0x2e4>)
 800334c:	f008 ff91 	bl	800c272 <memset>

    // Mover hacia el final de carrera Z (dirección negativa)
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8003350:	2201      	movs	r2, #1
 8003352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003356:	483e      	ldr	r0, [pc, #248]	@ (8003450 <performHoming+0x310>)
 8003358:	f001 f931 	bl	80045be <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 800335c:	e008      	b.n	8003370 <performHoming+0x230>
        Z_stepOnce();
 800335e:	f7fe ff45 	bl	80021ec <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 8003362:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe feee 	bl	800214c <delay_us>
    while (!isEndstopPressed('Z')) {
 8003370:	205a      	movs	r0, #90	@ 0x5a
 8003372:	f7ff feab 	bl	80030cc <isEndstopPressed>
 8003376:	4603      	mov	r3, r0
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ed      	bne.n	800335e <performHoming+0x21e>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003388:	4831      	ldr	r0, [pc, #196]	@ (8003450 <performHoming+0x310>)
 800338a:	f001 f918 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 800338e:	2300      	movs	r3, #0
 8003390:	657b      	str	r3, [r7, #84]	@ 0x54
 8003392:	e00b      	b.n	80033ac <performHoming+0x26c>
        // if (!isEndstopPressed('Z'));
        Z_stepOnce();
 8003394:	f7fe ff2a 	bl	80021ec <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 8003398:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe fed3 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	3301      	adds	r3, #1
 80033aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ae:	f641 62b3 	movw	r2, #7859	@ 0x1eb3
 80033b2:	4293      	cmp	r3, r2
 80033b4:	ddee      	ble.n	8003394 <performHoming+0x254>
    }
    
    // FASE 2: Movimiento lento de precisión para Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 80033b6:	2201      	movs	r2, #1
 80033b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033bc:	4824      	ldr	r0, [pc, #144]	@ (8003450 <performHoming+0x310>)
 80033be:	f001 f8fe 	bl	80045be <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 80033c2:	2300      	movs	r3, #0
 80033c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80033c6:	e00d      	b.n	80033e4 <performHoming+0x2a4>
        // if (!isEndstopPressed('Z'));
        Z_stepOnce();
 80033c8:	f7fe ff10 	bl	80021ec <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 80033cc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80033d0:	461a      	mov	r2, r3
 80033d2:	4613      	mov	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4413      	add	r3, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe feb7 	bl	800214c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 80033de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e0:	3301      	adds	r3, #1
 80033e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80033e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033e6:	f641 62b3 	movw	r2, #7859	@ 0x1eb3
 80033ea:	4293      	cmp	r3, r2
 80033ec:	ddec      	ble.n	80033c8 <performHoming+0x288>
    }
    if (!isEndstopPressed('Z')) {
 80033ee:	205a      	movs	r0, #90	@ 0x5a
 80033f0:	f7ff fe6c 	bl	80030cc <isEndstopPressed>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02b      	beq.n	8003458 <performHoming+0x318>
        sprintf(outputBuffer, "Error: Final de carrera Z no presionado\r\n");
 8003400:	4914      	ldr	r1, [pc, #80]	@ (8003454 <performHoming+0x314>)
 8003402:	4808      	ldr	r0, [pc, #32]	@ (8003424 <performHoming+0x2e4>)
 8003404:	f008 fed0 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 8003408:	4806      	ldr	r0, [pc, #24]	@ (8003424 <performHoming+0x2e4>)
 800340a:	f7fe fda3 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800340e:	22c8      	movs	r2, #200	@ 0xc8
 8003410:	2100      	movs	r1, #0
 8003412:	4804      	ldr	r0, [pc, #16]	@ (8003424 <performHoming+0x2e4>)
 8003414:	f008 ff2d 	bl	800c272 <memset>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 8003418:	e039      	b.n	800348e <performHoming+0x34e>
 800341a:	bf00      	nop
 800341c:	0800eb84 	.word	0x0800eb84
 8003420:	0800eba8 	.word	0x0800eba8
 8003424:	200003a8 	.word	0x200003a8
 8003428:	0800ebd4 	.word	0x0800ebd4
 800342c:	40010c00 	.word	0x40010c00
 8003430:	0800ebe8 	.word	0x0800ebe8
 8003434:	20000470 	.word	0x20000470
 8003438:	0800ec14 	.word	0x0800ec14
 800343c:	0800ec30 	.word	0x0800ec30
 8003440:	0800ec44 	.word	0x0800ec44
 8003444:	20000474 	.word	0x20000474
 8003448:	0800ec70 	.word	0x0800ec70
 800344c:	0800ec8c 	.word	0x0800ec8c
 8003450:	40010800 	.word	0x40010800
 8003454:	0800eca0 	.word	0x0800eca0
    }
    
    currentZ = 0; // Establecer posición home
 8003458:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <performHoming+0x354>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 800345e:	490e      	ldr	r1, [pc, #56]	@ (8003498 <performHoming+0x358>)
 8003460:	480e      	ldr	r0, [pc, #56]	@ (800349c <performHoming+0x35c>)
 8003462:	f008 fea1 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003466:	480d      	ldr	r0, [pc, #52]	@ (800349c <performHoming+0x35c>)
 8003468:	f7fe fd74 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800346c:	22c8      	movs	r2, #200	@ 0xc8
 800346e:	2100      	movs	r1, #0
 8003470:	480a      	ldr	r0, [pc, #40]	@ (800349c <performHoming+0x35c>)
 8003472:	f008 fefe 	bl	800c272 <memset>

    // Mensaje final
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8003476:	490a      	ldr	r1, [pc, #40]	@ (80034a0 <performHoming+0x360>)
 8003478:	4808      	ldr	r0, [pc, #32]	@ (800349c <performHoming+0x35c>)
 800347a:	f008 fe95 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 800347e:	4807      	ldr	r0, [pc, #28]	@ (800349c <performHoming+0x35c>)
 8003480:	f7fe fd68 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003484:	22c8      	movs	r2, #200	@ 0xc8
 8003486:	2100      	movs	r1, #0
 8003488:	4804      	ldr	r0, [pc, #16]	@ (800349c <performHoming+0x35c>)
 800348a:	f008 fef2 	bl	800c272 <memset>
}
 800348e:	3768      	adds	r7, #104	@ 0x68
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000478 	.word	0x20000478
 8003498:	0800eccc 	.word	0x0800eccc
 800349c:	200003a8 	.word	0x200003a8
 80034a0:	0800ece8 	.word	0x0800ece8

080034a4 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034ae:	4808      	ldr	r0, [pc, #32]	@ (80034d0 <enableSteppers+0x2c>)
 80034b0:	f001 f885 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 80034b4:	2200      	movs	r2, #0
 80034b6:	2110      	movs	r1, #16
 80034b8:	4805      	ldr	r0, [pc, #20]	@ (80034d0 <enableSteppers+0x2c>)
 80034ba:	f001 f880 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 80034be:	2200      	movs	r2, #0
 80034c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034c4:	4803      	ldr	r0, [pc, #12]	@ (80034d4 <enableSteppers+0x30>)
 80034c6:	f001 f87a 	bl	80045be <HAL_GPIO_WritePin>
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40010c00 	.word	0x40010c00
 80034d4:	40010800 	.word	0x40010800

080034d8 <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 80034dc:	2201      	movs	r2, #1
 80034de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034e2:	4808      	ldr	r0, [pc, #32]	@ (8003504 <disableSteppers+0x2c>)
 80034e4:	f001 f86b 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 80034e8:	2201      	movs	r2, #1
 80034ea:	2110      	movs	r1, #16
 80034ec:	4805      	ldr	r0, [pc, #20]	@ (8003504 <disableSteppers+0x2c>)
 80034ee:	f001 f866 	bl	80045be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034f8:	4803      	ldr	r0, [pc, #12]	@ (8003508 <disableSteppers+0x30>)
 80034fa:	f001 f860 	bl	80045be <HAL_GPIO_WritePin>
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40010c00 	.word	0x40010c00
 8003508:	40010800 	.word	0x40010800

0800350c <startProgramStorage>:

/**
  * @brief  Inicia el modo de almacenamiento de programa
  * @retval None
  */
void startProgramStorage(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
    isStoringProgram = true;
 8003512:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <startProgramStorage+0x5c>)
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 8003518:	4b14      	ldr	r3, [pc, #80]	@ (800356c <startProgramStorage+0x60>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    isProgramLoaded = false;
 800351e:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <startProgramStorage+0x64>)
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
    
    // Limpiar buffer de programa
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	e00e      	b.n	8003548 <startProgramStorage+0x3c>
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4a0f      	ldr	r2, [pc, #60]	@ (8003574 <startProgramStorage+0x68>)
 8003536:	4413      	add	r3, r2
 8003538:	2250      	movs	r2, #80	@ 0x50
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f008 fe98 	bl	800c272 <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3301      	adds	r3, #1
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b63      	cmp	r3, #99	@ 0x63
 800354c:	dded      	ble.n	800352a <startProgramStorage+0x1e>
    }
    
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 800354e:	480a      	ldr	r0, [pc, #40]	@ (8003578 <startProgramStorage+0x6c>)
 8003550:	f7fe fd00 	bl	8001f54 <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 8003554:	4809      	ldr	r0, [pc, #36]	@ (800357c <startProgramStorage+0x70>)
 8003556:	f7fe fcfd 	bl	8001f54 <sendUSBText>
    sendUSBText("ok\r\n");
 800355a:	4809      	ldr	r0, [pc, #36]	@ (8003580 <startProgramStorage+0x74>)
 800355c:	f7fe fcfa 	bl	8001f54 <sendUSBText>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20002430 	.word	0x20002430
 800356c:	20002428 	.word	0x20002428
 8003570:	20002431 	.word	0x20002431
 8003574:	200004e8 	.word	0x200004e8
 8003578:	0800ed20 	.word	0x0800ed20
 800357c:	0800ed58 	.word	0x0800ed58
 8003580:	0800e9c0 	.word	0x0800e9c0

08003584 <stopProgramStorage>:

/**
  * @brief  Detiene el modo de almacenamiento de programa
  * @retval None
  */
void stopProgramStorage(void) {
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
    isStoringProgram = false;
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <stopProgramStorage+0x50>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    
    if (programLineCount > 0) {
 800358e:	4b12      	ldr	r3, [pc, #72]	@ (80035d8 <stopProgramStorage+0x54>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	dd15      	ble.n	80035c2 <stopProgramStorage+0x3e>
        isProgramLoaded = true;
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <stopProgramStorage+0x58>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <stopProgramStorage+0x54>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <stopProgramStorage+0x5c>)
 80035a4:	480f      	ldr	r0, [pc, #60]	@ (80035e4 <stopProgramStorage+0x60>)
 80035a6:	f008 fdff 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 80035aa:	480e      	ldr	r0, [pc, #56]	@ (80035e4 <stopProgramStorage+0x60>)
 80035ac:	f7fe fcd2 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80035b0:	22c8      	movs	r2, #200	@ 0xc8
 80035b2:	2100      	movs	r1, #0
 80035b4:	480b      	ldr	r0, [pc, #44]	@ (80035e4 <stopProgramStorage+0x60>)
 80035b6:	f008 fe5c 	bl	800c272 <memset>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 80035ba:	480b      	ldr	r0, [pc, #44]	@ (80035e8 <stopProgramStorage+0x64>)
 80035bc:	f7fe fcca 	bl	8001f54 <sendUSBText>
 80035c0:	e002      	b.n	80035c8 <stopProgramStorage+0x44>
    } else {
        sendUSBText("No se almacenaron lineas\r\n");
 80035c2:	480a      	ldr	r0, [pc, #40]	@ (80035ec <stopProgramStorage+0x68>)
 80035c4:	f7fe fcc6 	bl	8001f54 <sendUSBText>
    }
    
    sendUSBText("ok\r\n");
 80035c8:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <stopProgramStorage+0x6c>)
 80035ca:	f7fe fcc3 	bl	8001f54 <sendUSBText>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20002430 	.word	0x20002430
 80035d8:	20002428 	.word	0x20002428
 80035dc:	20002431 	.word	0x20002431
 80035e0:	0800ed80 	.word	0x0800ed80
 80035e4:	200003a8 	.word	0x200003a8
 80035e8:	0800edac 	.word	0x0800edac
 80035ec:	0800edf4 	.word	0x0800edf4
 80035f0:	0800e9c0 	.word	0x0800e9c0

080035f4 <addLineToProgram>:
/**
  * @brief  Agrega una línea al programa almacenado
  * @param  line: Línea de G-code a agregar
  * @retval true si se agregó exitosamente, false si el buffer está lleno
  */
bool addLineToProgram(const char* line) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    if (programLineCount >= MAX_GCODE_LINES) {
 80035fc:	4b3c      	ldr	r3, [pc, #240]	@ (80036f0 <addLineToProgram+0xfc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b63      	cmp	r3, #99	@ 0x63
 8003602:	dd01      	ble.n	8003608 <addLineToProgram+0x14>
        return false; // Buffer lleno
 8003604:	2300      	movs	r3, #0
 8003606:	e06e      	b.n	80036e6 <addLineToProgram+0xf2>
    }
    
    // Copiar la línea, eliminando espacios al inicio y final
    const char* start = line;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60fb      	str	r3, [r7, #12]
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 800360c:	e002      	b.n	8003614 <addLineToProgram+0x20>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b20      	cmp	r3, #32
 800361a:	d0f8      	beq.n	800360e <addLineToProgram+0x1a>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d0f4      	beq.n	800360e <addLineToProgram+0x1a>
    
    if (strlen(start) == 0) {
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <addLineToProgram+0x3c>
        return true; // Línea vacía, no la almacenamos pero no es error
 800362c:	2301      	movs	r3, #1
 800362e:	e05a      	b.n	80036e6 <addLineToProgram+0xf2>
    }
    
    strncpy(gcodeProgram[programLineCount], start, MAX_LINE_LENGTH - 1);
 8003630:	4b2f      	ldr	r3, [pc, #188]	@ (80036f0 <addLineToProgram+0xfc>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4a2d      	ldr	r2, [pc, #180]	@ (80036f4 <addLineToProgram+0x100>)
 800363e:	4413      	add	r3, r2
 8003640:	224f      	movs	r2, #79	@ 0x4f
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	4618      	mov	r0, r3
 8003646:	f008 fe2e 	bl	800c2a6 <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 800364a:	4b29      	ldr	r3, [pc, #164]	@ (80036f0 <addLineToProgram+0xfc>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4929      	ldr	r1, [pc, #164]	@ (80036f4 <addLineToProgram+0x100>)
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	440b      	add	r3, r1
 800365a:	334f      	adds	r3, #79	@ 0x4f
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    
    // Eliminar \r\n del final si existen
    int len = strlen(gcodeProgram[programLineCount]);
 8003660:	4b23      	ldr	r3, [pc, #140]	@ (80036f0 <addLineToProgram+0xfc>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <addLineToProgram+0x100>)
 800366e:	4413      	add	r3, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc fd6d 	bl	8000150 <strlen>
 8003676:	4603      	mov	r3, r0
 8003678:	60bb      	str	r3, [r7, #8]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 800367a:	e00f      	b.n	800369c <addLineToProgram+0xa8>
                       gcodeProgram[programLineCount][len-1] == '\n')) {
        gcodeProgram[programLineCount][len-1] = '\0';
 800367c:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <addLineToProgram+0xfc>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1e59      	subs	r1, r3, #1
 8003684:	481b      	ldr	r0, [pc, #108]	@ (80036f4 <addLineToProgram+0x100>)
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4403      	add	r3, r0
 8003690:	440b      	add	r3, r1
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
        len--;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3b01      	subs	r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dd1b      	ble.n	80036da <addLineToProgram+0xe6>
 80036a2:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <addLineToProgram+0xfc>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1e59      	subs	r1, r3, #1
 80036aa:	4812      	ldr	r0, [pc, #72]	@ (80036f4 <addLineToProgram+0x100>)
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	4403      	add	r3, r0
 80036b6:	440b      	add	r3, r1
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b0d      	cmp	r3, #13
 80036bc:	d0de      	beq.n	800367c <addLineToProgram+0x88>
                       gcodeProgram[programLineCount][len-1] == '\n')) {
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <addLineToProgram+0xfc>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1e59      	subs	r1, r3, #1
 80036c6:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <addLineToProgram+0x100>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4403      	add	r3, r0
 80036d2:	440b      	add	r3, r1
 80036d4:	781b      	ldrb	r3, [r3, #0]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d0d0      	beq.n	800367c <addLineToProgram+0x88>
    }
    
    programLineCount++;
 80036da:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <addLineToProgram+0xfc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a03      	ldr	r2, [pc, #12]	@ (80036f0 <addLineToProgram+0xfc>)
 80036e2:	6013      	str	r3, [r2, #0]
    return true;
 80036e4:	2301      	movs	r3, #1
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20002428 	.word	0x20002428
 80036f4:	200004e8 	.word	0x200004e8

080036f8 <clearProgram>:

/**
  * @brief  Limpia el programa almacenado
  * @retval None
  */
void clearProgram(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
    programLineCount = 0;
 80036fe:	4b17      	ldr	r3, [pc, #92]	@ (800375c <clearProgram+0x64>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
    currentExecutingLine = 0;
 8003704:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <clearProgram+0x68>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
    isProgramLoaded = false;
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <clearProgram+0x6c>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
    isProgramRunning = false;
 8003710:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <clearProgram+0x70>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
    isStoringProgram = false;
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <clearProgram+0x74>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
    
    // Limpiar buffer
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 800371c:	2300      	movs	r3, #0
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	e00e      	b.n	8003740 <clearProgram+0x48>
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <clearProgram+0x78>)
 800372e:	4413      	add	r3, r2
 8003730:	2250      	movs	r2, #80	@ 0x50
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f008 fd9c 	bl	800c272 <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3301      	adds	r3, #1
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b63      	cmp	r3, #99	@ 0x63
 8003744:	dded      	ble.n	8003722 <clearProgram+0x2a>
    }
    
    sendUSBText("Programa limpiado\r\n");
 8003746:	480b      	ldr	r0, [pc, #44]	@ (8003774 <clearProgram+0x7c>)
 8003748:	f7fe fc04 	bl	8001f54 <sendUSBText>
    sendUSBText("ok\r\n");
 800374c:	480a      	ldr	r0, [pc, #40]	@ (8003778 <clearProgram+0x80>)
 800374e:	f7fe fc01 	bl	8001f54 <sendUSBText>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20002428 	.word	0x20002428
 8003760:	2000242c 	.word	0x2000242c
 8003764:	20002431 	.word	0x20002431
 8003768:	20002432 	.word	0x20002432
 800376c:	20002430 	.word	0x20002430
 8003770:	200004e8 	.word	0x200004e8
 8003774:	0800ee10 	.word	0x0800ee10
 8003778:	0800e9c0 	.word	0x0800e9c0

0800377c <runProgram>:

/**
  * @brief  Ejecuta el programa completo almacenado
  * @retval None
  */
void runProgram(void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b096      	sub	sp, #88	@ 0x58
 8003780:	af00      	add	r7, sp, #0
    if (!isProgramLoaded || programLineCount == 0) {
 8003782:	4b5d      	ldr	r3, [pc, #372]	@ (80038f8 <runProgram+0x17c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <runProgram+0x1c>
 8003790:	4b5a      	ldr	r3, [pc, #360]	@ (80038fc <runProgram+0x180>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10c      	bne.n	80037b2 <runProgram+0x36>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8003798:	4959      	ldr	r1, [pc, #356]	@ (8003900 <runProgram+0x184>)
 800379a:	485a      	ldr	r0, [pc, #360]	@ (8003904 <runProgram+0x188>)
 800379c:	f008 fd04 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 80037a0:	4858      	ldr	r0, [pc, #352]	@ (8003904 <runProgram+0x188>)
 80037a2:	f7fe fbd7 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80037a6:	22c8      	movs	r2, #200	@ 0xc8
 80037a8:	2100      	movs	r1, #0
 80037aa:	4856      	ldr	r0, [pc, #344]	@ (8003904 <runProgram+0x188>)
 80037ac:	f008 fd61 	bl	800c272 <memset>
        return;
 80037b0:	e09e      	b.n	80038f0 <runProgram+0x174>
    }
    
    isProgramRunning = true;
 80037b2:	4b55      	ldr	r3, [pc, #340]	@ (8003908 <runProgram+0x18c>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
    currentExecutingLine = 0;
 80037b8:	4b54      	ldr	r3, [pc, #336]	@ (800390c <runProgram+0x190>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80037be:	4b4f      	ldr	r3, [pc, #316]	@ (80038fc <runProgram+0x180>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	4952      	ldr	r1, [pc, #328]	@ (8003910 <runProgram+0x194>)
 80037c6:	484f      	ldr	r0, [pc, #316]	@ (8003904 <runProgram+0x188>)
 80037c8:	f008 fcee 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 80037cc:	484d      	ldr	r0, [pc, #308]	@ (8003904 <runProgram+0x188>)
 80037ce:	f7fe fbc1 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80037d2:	22c8      	movs	r2, #200	@ 0xc8
 80037d4:	2100      	movs	r1, #0
 80037d6:	484b      	ldr	r0, [pc, #300]	@ (8003904 <runProgram+0x188>)
 80037d8:	f008 fd4b 	bl	800c272 <memset>

    // Ejecutar todas las líneas secuencialmente
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 80037dc:	4b4b      	ldr	r3, [pc, #300]	@ (800390c <runProgram+0x190>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e067      	b.n	80038b4 <runProgram+0x138>
        if (!isProgramRunning) {
 80037e4:	4b48      	ldr	r3, [pc, #288]	@ (8003908 <runProgram+0x18c>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <runProgram+0x7e>
            sendUSBText((uint8_t*)"Programa detenido por el usuario\r\n");
 80037f2:	4848      	ldr	r0, [pc, #288]	@ (8003914 <runProgram+0x198>)
 80037f4:	f7fe fbae 	bl	8001f54 <sendUSBText>
            break;
 80037f8:	e062      	b.n	80038c0 <runProgram+0x144>
        }

        sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 80037fa:	4b44      	ldr	r3, [pc, #272]	@ (800390c <runProgram+0x190>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	4b42      	ldr	r3, [pc, #264]	@ (800390c <runProgram+0x190>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	4a42      	ldr	r2, [pc, #264]	@ (8003918 <runProgram+0x19c>)
 800380e:	4413      	add	r3, r2
 8003810:	460a      	mov	r2, r1
 8003812:	4942      	ldr	r1, [pc, #264]	@ (800391c <runProgram+0x1a0>)
 8003814:	483b      	ldr	r0, [pc, #236]	@ (8003904 <runProgram+0x188>)
 8003816:	f008 fcc7 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 800381a:	483a      	ldr	r0, [pc, #232]	@ (8003904 <runProgram+0x188>)
 800381c:	f7fe fb9a 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8003820:	22c8      	movs	r2, #200	@ 0xc8
 8003822:	2100      	movs	r1, #0
 8003824:	4837      	ldr	r0, [pc, #220]	@ (8003904 <runProgram+0x188>)
 8003826:	f008 fd24 	bl	800c272 <memset>

        // Crear una copia temporal para evitar recursión
        char temp_command[MAX_LINE_LENGTH];
        strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800382a:	4b38      	ldr	r3, [pc, #224]	@ (800390c <runProgram+0x190>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	4a38      	ldr	r2, [pc, #224]	@ (8003918 <runProgram+0x19c>)
 8003838:	1899      	adds	r1, r3, r2
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	224f      	movs	r2, #79	@ 0x4f
 800383e:	4618      	mov	r0, r3
 8003840:	f008 fd31 	bl	800c2a6 <strncpy>
        temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8003844:	2300      	movs	r3, #0
 8003846:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        
        // Ejecutar el comando directamente usando el parser modular
        uint8_t status = gc_execute_line(temp_command);
 800384a:	1d3b      	adds	r3, r7, #4
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fa7f 	bl	8001d50 <gc_execute_line>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        
        // Mostrar resultado
        if (status == STATUS_OK) {
 8003858:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10c      	bne.n	800387a <runProgram+0xfe>
            sprintf(outputBuffer, "ok\r\n");
 8003860:	492f      	ldr	r1, [pc, #188]	@ (8003920 <runProgram+0x1a4>)
 8003862:	4828      	ldr	r0, [pc, #160]	@ (8003904 <runProgram+0x188>)
 8003864:	f008 fca0 	bl	800c1a8 <siprintf>
            sendUSBText(outputBuffer);
 8003868:	4826      	ldr	r0, [pc, #152]	@ (8003904 <runProgram+0x188>)
 800386a:	f7fe fb73 	bl	8001f54 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 800386e:	22c8      	movs	r2, #200	@ 0xc8
 8003870:	2100      	movs	r1, #0
 8003872:	4824      	ldr	r0, [pc, #144]	@ (8003904 <runProgram+0x188>)
 8003874:	f008 fcfd 	bl	800c272 <memset>
 8003878:	e014      	b.n	80038a4 <runProgram+0x128>
        } else {
            sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 800387a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800387e:	4b23      	ldr	r3, [pc, #140]	@ (800390c <runProgram+0x190>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	4927      	ldr	r1, [pc, #156]	@ (8003924 <runProgram+0x1a8>)
 8003886:	481f      	ldr	r0, [pc, #124]	@ (8003904 <runProgram+0x188>)
 8003888:	f008 fc8e 	bl	800c1a8 <siprintf>
            sendUSBText(outputBuffer);
 800388c:	481d      	ldr	r0, [pc, #116]	@ (8003904 <runProgram+0x188>)
 800388e:	f7fe fb61 	bl	8001f54 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 8003892:	22c8      	movs	r2, #200	@ 0xc8
 8003894:	2100      	movs	r1, #0
 8003896:	481b      	ldr	r0, [pc, #108]	@ (8003904 <runProgram+0x188>)
 8003898:	f008 fceb 	bl	800c272 <memset>
            isProgramRunning = false;
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <runProgram+0x18c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
            break;
 80038a2:	e00d      	b.n	80038c0 <runProgram+0x144>
        }
        
        // Pequeña pausa entre comandos para estabilidad
        HAL_Delay(10);
 80038a4:	200a      	movs	r0, #10
 80038a6:	f000 fbbd 	bl	8004024 <HAL_Delay>
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 80038aa:	4b18      	ldr	r3, [pc, #96]	@ (800390c <runProgram+0x190>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a16      	ldr	r2, [pc, #88]	@ (800390c <runProgram+0x190>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <runProgram+0x190>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b10      	ldr	r3, [pc, #64]	@ (80038fc <runProgram+0x180>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	db91      	blt.n	80037e4 <runProgram+0x68>
    }
    
    isProgramRunning = false;
 80038c0:	4b11      	ldr	r3, [pc, #68]	@ (8003908 <runProgram+0x18c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
    
    if (currentExecutingLine >= programLineCount) {
 80038c6:	4b11      	ldr	r3, [pc, #68]	@ (800390c <runProgram+0x190>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <runProgram+0x180>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	db0b      	blt.n	80038ea <runProgram+0x16e>
        sprintf(outputBuffer, "Programa completado exitosamente\r\n");
 80038d2:	4915      	ldr	r1, [pc, #84]	@ (8003928 <runProgram+0x1ac>)
 80038d4:	480b      	ldr	r0, [pc, #44]	@ (8003904 <runProgram+0x188>)
 80038d6:	f008 fc67 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 80038da:	480a      	ldr	r0, [pc, #40]	@ (8003904 <runProgram+0x188>)
 80038dc:	f7fe fb3a 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80038e0:	22c8      	movs	r2, #200	@ 0xc8
 80038e2:	2100      	movs	r1, #0
 80038e4:	4807      	ldr	r0, [pc, #28]	@ (8003904 <runProgram+0x188>)
 80038e6:	f008 fcc4 	bl	800c272 <memset>
    }

    sendUSBText("ok\r\n");
 80038ea:	480d      	ldr	r0, [pc, #52]	@ (8003920 <runProgram+0x1a4>)
 80038ec:	f7fe fb32 	bl	8001f54 <sendUSBText>
}
 80038f0:	3758      	adds	r7, #88	@ 0x58
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20002431 	.word	0x20002431
 80038fc:	20002428 	.word	0x20002428
 8003900:	0800ee24 	.word	0x0800ee24
 8003904:	200003a8 	.word	0x200003a8
 8003908:	20002432 	.word	0x20002432
 800390c:	2000242c 	.word	0x2000242c
 8003910:	0800ee48 	.word	0x0800ee48
 8003914:	0800ee78 	.word	0x0800ee78
 8003918:	200004e8 	.word	0x200004e8
 800391c:	0800ee9c 	.word	0x0800ee9c
 8003920:	0800e9c0 	.word	0x0800e9c0
 8003924:	0800eeb8 	.word	0x0800eeb8
 8003928:	0800eed8 	.word	0x0800eed8

0800392c <runNextLine>:

/**
  * @brief  Ejecuta la siguiente línea del programa
  * @retval None
  */
void runNextLine(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b096      	sub	sp, #88	@ 0x58
 8003930:	af00      	add	r7, sp, #0
    if (!isProgramLoaded || programLineCount == 0) {
 8003932:	4b45      	ldr	r3, [pc, #276]	@ (8003a48 <runNextLine+0x11c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	f083 0301 	eor.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <runNextLine+0x1c>
 8003940:	4b42      	ldr	r3, [pc, #264]	@ (8003a4c <runNextLine+0x120>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10c      	bne.n	8003962 <runNextLine+0x36>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8003948:	4941      	ldr	r1, [pc, #260]	@ (8003a50 <runNextLine+0x124>)
 800394a:	4842      	ldr	r0, [pc, #264]	@ (8003a54 <runNextLine+0x128>)
 800394c:	f008 fc2c 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 8003950:	4840      	ldr	r0, [pc, #256]	@ (8003a54 <runNextLine+0x128>)
 8003952:	f7fe faff 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8003956:	22c8      	movs	r2, #200	@ 0xc8
 8003958:	2100      	movs	r1, #0
 800395a:	483e      	ldr	r0, [pc, #248]	@ (8003a54 <runNextLine+0x128>)
 800395c:	f008 fc89 	bl	800c272 <memset>
        return;
 8003960:	e06e      	b.n	8003a40 <runNextLine+0x114>
    }
    
    if (currentExecutingLine >= programLineCount) {
 8003962:	4b3d      	ldr	r3, [pc, #244]	@ (8003a58 <runNextLine+0x12c>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <runNextLine+0x120>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	db0f      	blt.n	800398e <runNextLine+0x62>
        sprintf(outputBuffer, "Programa completado\r\n");
 800396e:	493b      	ldr	r1, [pc, #236]	@ (8003a5c <runNextLine+0x130>)
 8003970:	4838      	ldr	r0, [pc, #224]	@ (8003a54 <runNextLine+0x128>)
 8003972:	f008 fc19 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 8003976:	4837      	ldr	r0, [pc, #220]	@ (8003a54 <runNextLine+0x128>)
 8003978:	f7fe faec 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800397c:	22c8      	movs	r2, #200	@ 0xc8
 800397e:	2100      	movs	r1, #0
 8003980:	4834      	ldr	r0, [pc, #208]	@ (8003a54 <runNextLine+0x128>)
 8003982:	f008 fc76 	bl	800c272 <memset>
        isProgramRunning = false;
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <runNextLine+0x134>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
        return;
 800398c:	e058      	b.n	8003a40 <runNextLine+0x114>
    }

    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 800398e:	4b32      	ldr	r3, [pc, #200]	@ (8003a58 <runNextLine+0x12c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	4b30      	ldr	r3, [pc, #192]	@ (8003a58 <runNextLine+0x12c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4a30      	ldr	r2, [pc, #192]	@ (8003a64 <runNextLine+0x138>)
 80039a2:	4413      	add	r3, r2
 80039a4:	460a      	mov	r2, r1
 80039a6:	4930      	ldr	r1, [pc, #192]	@ (8003a68 <runNextLine+0x13c>)
 80039a8:	482a      	ldr	r0, [pc, #168]	@ (8003a54 <runNextLine+0x128>)
 80039aa:	f008 fbfd 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 80039ae:	4829      	ldr	r0, [pc, #164]	@ (8003a54 <runNextLine+0x128>)
 80039b0:	f7fe fad0 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80039b4:	22c8      	movs	r2, #200	@ 0xc8
 80039b6:	2100      	movs	r1, #0
 80039b8:	4826      	ldr	r0, [pc, #152]	@ (8003a54 <runNextLine+0x128>)
 80039ba:	f008 fc5a 	bl	800c272 <memset>
    // Ejecutar el comando
    char temp_command[MAX_LINE_LENGTH];
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 80039be:	4b26      	ldr	r3, [pc, #152]	@ (8003a58 <runNextLine+0x12c>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <runNextLine+0x138>)
 80039cc:	1899      	adds	r1, r3, r2
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	224f      	movs	r2, #79	@ 0x4f
 80039d2:	4618      	mov	r0, r3
 80039d4:	f008 fc67 	bl	800c2a6 <strncpy>
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    
    uint8_t status = gc_execute_line(temp_command);
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe f9b5 	bl	8001d50 <gc_execute_line>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    if (status == STATUS_OK) {
 80039ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d111      	bne.n	8003a18 <runNextLine+0xec>
        sprintf(outputBuffer, "ok\r\n");
 80039f4:	491d      	ldr	r1, [pc, #116]	@ (8003a6c <runNextLine+0x140>)
 80039f6:	4817      	ldr	r0, [pc, #92]	@ (8003a54 <runNextLine+0x128>)
 80039f8:	f008 fbd6 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 80039fc:	4815      	ldr	r0, [pc, #84]	@ (8003a54 <runNextLine+0x128>)
 80039fe:	f7fe faa9 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8003a02:	22c8      	movs	r2, #200	@ 0xc8
 8003a04:	2100      	movs	r1, #0
 8003a06:	4813      	ldr	r0, [pc, #76]	@ (8003a54 <runNextLine+0x128>)
 8003a08:	f008 fc33 	bl	800c272 <memset>
        currentExecutingLine++;
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <runNextLine+0x12c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	4a11      	ldr	r2, [pc, #68]	@ (8003a58 <runNextLine+0x12c>)
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e013      	b.n	8003a40 <runNextLine+0x114>
    } else {
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8003a18:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <runNextLine+0x12c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4913      	ldr	r1, [pc, #76]	@ (8003a70 <runNextLine+0x144>)
 8003a24:	480b      	ldr	r0, [pc, #44]	@ (8003a54 <runNextLine+0x128>)
 8003a26:	f008 fbbf 	bl	800c1a8 <siprintf>
        sendUSBText(outputBuffer);
 8003a2a:	480a      	ldr	r0, [pc, #40]	@ (8003a54 <runNextLine+0x128>)
 8003a2c:	f7fe fa92 	bl	8001f54 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8003a30:	22c8      	movs	r2, #200	@ 0xc8
 8003a32:	2100      	movs	r1, #0
 8003a34:	4807      	ldr	r0, [pc, #28]	@ (8003a54 <runNextLine+0x128>)
 8003a36:	f008 fc1c 	bl	800c272 <memset>
        isProgramRunning = false;
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <runNextLine+0x134>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    }
}
 8003a40:	3758      	adds	r7, #88	@ 0x58
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20002431 	.word	0x20002431
 8003a4c:	20002428 	.word	0x20002428
 8003a50:	0800ee24 	.word	0x0800ee24
 8003a54:	200003a8 	.word	0x200003a8
 8003a58:	2000242c 	.word	0x2000242c
 8003a5c:	0800eefc 	.word	0x0800eefc
 8003a60:	20002432 	.word	0x20002432
 8003a64:	200004e8 	.word	0x200004e8
 8003a68:	0800ee9c 	.word	0x0800ee9c
 8003a6c:	0800e9c0 	.word	0x0800e9c0
 8003a70:	0800eeb8 	.word	0x0800eeb8

08003a74 <pauseProgram>:

/**
  * @brief  Pausa la ejecución del programa
  * @retval None
  */
void pauseProgram(void) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
    isProgramRunning = false;
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <pauseProgram+0x40>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
    sprintf(outputBuffer, "Programa pausado\r\n");
 8003a7e:	490e      	ldr	r1, [pc, #56]	@ (8003ab8 <pauseProgram+0x44>)
 8003a80:	480e      	ldr	r0, [pc, #56]	@ (8003abc <pauseProgram+0x48>)
 8003a82:	f008 fb91 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003a86:	480d      	ldr	r0, [pc, #52]	@ (8003abc <pauseProgram+0x48>)
 8003a88:	f7fe fa64 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003a8c:	22c8      	movs	r2, #200	@ 0xc8
 8003a8e:	2100      	movs	r1, #0
 8003a90:	480a      	ldr	r0, [pc, #40]	@ (8003abc <pauseProgram+0x48>)
 8003a92:	f008 fbee 	bl	800c272 <memset>
    sprintf(outputBuffer, "ok\r\n");
 8003a96:	490a      	ldr	r1, [pc, #40]	@ (8003ac0 <pauseProgram+0x4c>)
 8003a98:	4808      	ldr	r0, [pc, #32]	@ (8003abc <pauseProgram+0x48>)
 8003a9a:	f008 fb85 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003a9e:	4807      	ldr	r0, [pc, #28]	@ (8003abc <pauseProgram+0x48>)
 8003aa0:	f7fe fa58 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003aa4:	22c8      	movs	r2, #200	@ 0xc8
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4804      	ldr	r0, [pc, #16]	@ (8003abc <pauseProgram+0x48>)
 8003aaa:	f008 fbe2 	bl	800c272 <memset>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20002432 	.word	0x20002432
 8003ab8:	0800ef14 	.word	0x0800ef14
 8003abc:	200003a8 	.word	0x200003a8
 8003ac0:	0800e9c0 	.word	0x0800e9c0

08003ac4 <showHelp>:

/**
  * @brief  Muestra la ayuda del sistema de programas G-code
  * @retval None
  */
void showHelp(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 8003ac8:	482c      	ldr	r0, [pc, #176]	@ (8003b7c <showHelp+0xb8>)
 8003aca:	f7fe fa43 	bl	8001f54 <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 8003ace:	482c      	ldr	r0, [pc, #176]	@ (8003b80 <showHelp+0xbc>)
 8003ad0:	f7fe fa40 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 8003ad4:	482b      	ldr	r0, [pc, #172]	@ (8003b84 <showHelp+0xc0>)
 8003ad6:	f7fe fa3d 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 8003ada:	482b      	ldr	r0, [pc, #172]	@ (8003b88 <showHelp+0xc4>)
 8003adc:	f7fe fa3a 	bl	8001f54 <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 8003ae0:	482a      	ldr	r0, [pc, #168]	@ (8003b8c <showHelp+0xc8>)
 8003ae2:	f7fe fa37 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 8003ae6:	482a      	ldr	r0, [pc, #168]	@ (8003b90 <showHelp+0xcc>)
 8003ae8:	f7fe fa34 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 8003aec:	4829      	ldr	r0, [pc, #164]	@ (8003b94 <showHelp+0xd0>)
 8003aee:	f7fe fa31 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 8003af2:	4829      	ldr	r0, [pc, #164]	@ (8003b98 <showHelp+0xd4>)
 8003af4:	f7fe fa2e 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 8003af8:	4828      	ldr	r0, [pc, #160]	@ (8003b9c <showHelp+0xd8>)
 8003afa:	f7fe fa2b 	bl	8001f54 <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 8003afe:	4828      	ldr	r0, [pc, #160]	@ (8003ba0 <showHelp+0xdc>)
 8003b00:	f7fe fa28 	bl	8001f54 <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 8003b04:	4827      	ldr	r0, [pc, #156]	@ (8003ba4 <showHelp+0xe0>)
 8003b06:	f7fe fa25 	bl	8001f54 <sendUSBText>
    
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 8003b0a:	4827      	ldr	r0, [pc, #156]	@ (8003ba8 <showHelp+0xe4>)
 8003b0c:	f7fe fa22 	bl	8001f54 <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 8003b10:	4826      	ldr	r0, [pc, #152]	@ (8003bac <showHelp+0xe8>)
 8003b12:	f7fe fa1f 	bl	8001f54 <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 8003b16:	4826      	ldr	r0, [pc, #152]	@ (8003bb0 <showHelp+0xec>)
 8003b18:	f7fe fa1c 	bl	8001f54 <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 8003b1c:	4825      	ldr	r0, [pc, #148]	@ (8003bb4 <showHelp+0xf0>)
 8003b1e:	f7fe fa19 	bl	8001f54 <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 8003b22:	4825      	ldr	r0, [pc, #148]	@ (8003bb8 <showHelp+0xf4>)
 8003b24:	f7fe fa16 	bl	8001f54 <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 8003b28:	4824      	ldr	r0, [pc, #144]	@ (8003bbc <showHelp+0xf8>)
 8003b2a:	f7fe fa13 	bl	8001f54 <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 8003b2e:	4824      	ldr	r0, [pc, #144]	@ (8003bc0 <showHelp+0xfc>)
 8003b30:	f7fe fa10 	bl	8001f54 <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 8003b34:	4823      	ldr	r0, [pc, #140]	@ (8003bc4 <showHelp+0x100>)
 8003b36:	f7fe fa0d 	bl	8001f54 <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 8003b3a:	4823      	ldr	r0, [pc, #140]	@ (8003bc8 <showHelp+0x104>)
 8003b3c:	f7fe fa0a 	bl	8001f54 <sendUSBText>
    
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 8003b40:	4822      	ldr	r0, [pc, #136]	@ (8003bcc <showHelp+0x108>)
 8003b42:	f7fe fa07 	bl	8001f54 <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 8003b46:	4822      	ldr	r0, [pc, #136]	@ (8003bd0 <showHelp+0x10c>)
 8003b48:	f7fe fa04 	bl	8001f54 <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 8003b4c:	4821      	ldr	r0, [pc, #132]	@ (8003bd4 <showHelp+0x110>)
 8003b4e:	f7fe fa01 	bl	8001f54 <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 8003b52:	4821      	ldr	r0, [pc, #132]	@ (8003bd8 <showHelp+0x114>)
 8003b54:	f7fe f9fe 	bl	8001f54 <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 8003b58:	4820      	ldr	r0, [pc, #128]	@ (8003bdc <showHelp+0x118>)
 8003b5a:	f7fe f9fb 	bl	8001f54 <sendUSBText>
    sendUSBText("5. FIN\r\n");
 8003b5e:	4820      	ldr	r0, [pc, #128]	@ (8003be0 <showHelp+0x11c>)
 8003b60:	f7fe f9f8 	bl	8001f54 <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 8003b64:	481f      	ldr	r0, [pc, #124]	@ (8003be4 <showHelp+0x120>)
 8003b66:	f7fe f9f5 	bl	8001f54 <sendUSBText>
    
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 8003b6a:	481f      	ldr	r0, [pc, #124]	@ (8003be8 <showHelp+0x124>)
 8003b6c:	f7fe f9f2 	bl	8001f54 <sendUSBText>
    sendUSBText("ok\r\n");
 8003b70:	481e      	ldr	r0, [pc, #120]	@ (8003bec <showHelp+0x128>)
 8003b72:	f7fe f9ef 	bl	8001f54 <sendUSBText>
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0800ef3c 	.word	0x0800ef3c
 8003b80:	0800ef60 	.word	0x0800ef60
 8003b84:	0800ef7c 	.word	0x0800ef7c
 8003b88:	0800efb8 	.word	0x0800efb8
 8003b8c:	0800efe4 	.word	0x0800efe4
 8003b90:	0800f01c 	.word	0x0800f01c
 8003b94:	0800f04c 	.word	0x0800f04c
 8003b98:	0800f078 	.word	0x0800f078
 8003b9c:	0800f09c 	.word	0x0800f09c
 8003ba0:	0800f0d0 	.word	0x0800f0d0
 8003ba4:	0800f100 	.word	0x0800f100
 8003ba8:	0800f138 	.word	0x0800f138
 8003bac:	0800f158 	.word	0x0800f158
 8003bb0:	0800f180 	.word	0x0800f180
 8003bb4:	0800f1b4 	.word	0x0800f1b4
 8003bb8:	0800f1dc 	.word	0x0800f1dc
 8003bbc:	0800f20c 	.word	0x0800f20c
 8003bc0:	0800f234 	.word	0x0800f234
 8003bc4:	0800f25c 	.word	0x0800f25c
 8003bc8:	0800f288 	.word	0x0800f288
 8003bcc:	0800f2b4 	.word	0x0800f2b4
 8003bd0:	0800f2c8 	.word	0x0800f2c8
 8003bd4:	0800f2dc 	.word	0x0800f2dc
 8003bd8:	0800f2f0 	.word	0x0800f2f0
 8003bdc:	0800f30c 	.word	0x0800f30c
 8003be0:	0800f32c 	.word	0x0800f32c
 8003be4:	0800f338 	.word	0x0800f338
 8003be8:	0800f34c 	.word	0x0800f34c
 8003bec:	0800e9c0 	.word	0x0800e9c0

08003bf0 <showQueueStatus>:

/**
  * @brief  Muestra el estado de la cola de transmisión USB CDC
  * @retval None
  */
void showQueueStatus(void) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0

    sprintf(outputBuffer, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 8003bf4:	4923      	ldr	r1, [pc, #140]	@ (8003c84 <showQueueStatus+0x94>)
 8003bf6:	4824      	ldr	r0, [pc, #144]	@ (8003c88 <showQueueStatus+0x98>)
 8003bf8:	f008 fad6 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003bfc:	4822      	ldr	r0, [pc, #136]	@ (8003c88 <showQueueStatus+0x98>)
 8003bfe:	f7fe f9a9 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003c02:	22c8      	movs	r2, #200	@ 0xc8
 8003c04:	2100      	movs	r1, #0
 8003c06:	4820      	ldr	r0, [pc, #128]	@ (8003c88 <showQueueStatus+0x98>)
 8003c08:	f008 fb33 	bl	800c272 <memset>

    sprintf(outputBuffer, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 8003c0c:	f006 fff6 	bl	800abfc <CDC_TxQueue_GetCount>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	230a      	movs	r3, #10
 8003c16:	491d      	ldr	r1, [pc, #116]	@ (8003c8c <showQueueStatus+0x9c>)
 8003c18:	481b      	ldr	r0, [pc, #108]	@ (8003c88 <showQueueStatus+0x98>)
 8003c1a:	f008 fac5 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003c1e:	481a      	ldr	r0, [pc, #104]	@ (8003c88 <showQueueStatus+0x98>)
 8003c20:	f7fe f998 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003c24:	22c8      	movs	r2, #200	@ 0xc8
 8003c26:	2100      	movs	r1, #0
 8003c28:	4817      	ldr	r0, [pc, #92]	@ (8003c88 <showQueueStatus+0x98>)
 8003c2a:	f008 fb22 	bl	800c272 <memset>

    sprintf(outputBuffer, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 8003c2e:	f006 fff1 	bl	800ac14 <CDC_TxQueue_IsFull>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <showQueueStatus+0x4c>
 8003c38:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <showQueueStatus+0xa0>)
 8003c3a:	e000      	b.n	8003c3e <showQueueStatus+0x4e>
 8003c3c:	4b15      	ldr	r3, [pc, #84]	@ (8003c94 <showQueueStatus+0xa4>)
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4915      	ldr	r1, [pc, #84]	@ (8003c98 <showQueueStatus+0xa8>)
 8003c42:	4811      	ldr	r0, [pc, #68]	@ (8003c88 <showQueueStatus+0x98>)
 8003c44:	f008 fab0 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003c48:	480f      	ldr	r0, [pc, #60]	@ (8003c88 <showQueueStatus+0x98>)
 8003c4a:	f7fe f983 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003c4e:	22c8      	movs	r2, #200	@ 0xc8
 8003c50:	2100      	movs	r1, #0
 8003c52:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <showQueueStatus+0x98>)
 8003c54:	f008 fb0d 	bl	800c272 <memset>

    sprintf(outputBuffer, "Método transmisión: ");
 8003c58:	4910      	ldr	r1, [pc, #64]	@ (8003c9c <showQueueStatus+0xac>)
 8003c5a:	480b      	ldr	r0, [pc, #44]	@ (8003c88 <showQueueStatus+0x98>)
 8003c5c:	f008 faa4 	bl	800c1a8 <siprintf>
    sendUSBText(outputBuffer);
 8003c60:	4809      	ldr	r0, [pc, #36]	@ (8003c88 <showQueueStatus+0x98>)
 8003c62:	f7fe f977 	bl	8001f54 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8003c66:	22c8      	movs	r2, #200	@ 0xc8
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4807      	ldr	r0, [pc, #28]	@ (8003c88 <showQueueStatus+0x98>)
 8003c6c:	f008 fb01 	bl	800c272 <memset>
            break;
        case USB_METHOD_RETRY:
            sendUSBText("REINTENTOS\r\n");
            break;
        case USB_METHOD_QUEUED:
            sendUSBText("COLA\r\n");
 8003c70:	480b      	ldr	r0, [pc, #44]	@ (8003ca0 <showQueueStatus+0xb0>)
 8003c72:	f7fe f96f 	bl	8001f54 <sendUSBText>
            break;
 8003c76:	bf00      	nop
    }
    
    sendUSBText("===========================\r\n");
 8003c78:	480a      	ldr	r0, [pc, #40]	@ (8003ca4 <showQueueStatus+0xb4>)
 8003c7a:	f7fe f96b 	bl	8001f54 <sendUSBText>
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	0800f364 	.word	0x0800f364
 8003c88:	200003a8 	.word	0x200003a8
 8003c8c:	0800f384 	.word	0x0800f384
 8003c90:	0800f3a0 	.word	0x0800f3a0
 8003c94:	0800f3a4 	.word	0x0800f3a4
 8003c98:	0800f3a8 	.word	0x0800f3a8
 8003c9c:	0800f3bc 	.word	0x0800f3bc
 8003ca0:	0800f3d4 	.word	0x0800f3d4
 8003ca4:	0800f3dc 	.word	0x0800f3dc

08003ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
}
 8003cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <Error_Handler+0x8>

08003cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cba:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6193      	str	r3, [r2, #24]
 8003cc6:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cdc:	61d3      	str	r3, [r2, #28]
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <HAL_MspInit+0x5c>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_MspInit+0x60>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <HAL_MspInit+0x60>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40010000 	.word	0x40010000

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <NMI_Handler+0x4>

08003d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <HardFault_Handler+0x4>

08003d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <MemManage_Handler+0x4>

08003d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d68:	f000 f940 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d74:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d76:	f000 fd56 	bl	8004826 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20004080 	.word	0x20004080

08003d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return 1;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <_kill>:

int _kill(int pid, int sig)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d9c:	f008 fadc 	bl	800c358 <__errno>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2216      	movs	r2, #22
 8003da4:	601a      	str	r2, [r3, #0]
  return -1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_exit>:

void _exit (int status)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dba:	f04f 31ff 	mov.w	r1, #4294967295
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ffe7 	bl	8003d92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <_exit+0x12>

08003dc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e00a      	b.n	8003df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dda:	f3af 8000 	nop.w
 8003dde:	4601      	mov	r1, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	60ba      	str	r2, [r7, #8]
 8003de6:	b2ca      	uxtb	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3301      	adds	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dbf0      	blt.n	8003dda <_read+0x12>
  }

  return len;
 8003df8:	687b      	ldr	r3, [r7, #4]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e009      	b.n	8003e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	60ba      	str	r2, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	3301      	adds	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	dbf1      	blt.n	8003e14 <_write+0x12>
  }
  return len;
 8003e30:	687b      	ldr	r3, [r7, #4]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_close>:

int _close(int file)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e60:	605a      	str	r2, [r3, #4]
  return 0;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <_isatty>:

int _isatty(int file)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
	...

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	@ (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f008 fa44 	bl	800c358 <__errno>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4a05      	ldr	r2, [pc, #20]	@ (8003f00 <_sbrk+0x64>)
 8003eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20005000 	.word	0x20005000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	20002434 	.word	0x20002434
 8003f04:	200046c8 	.word	0x200046c8

08003f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f14:	f7ff fff8 	bl	8003f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f18:	480b      	ldr	r0, [pc, #44]	@ (8003f48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f1a:	490c      	ldr	r1, [pc, #48]	@ (8003f4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f20:	e002      	b.n	8003f28 <LoopCopyDataInit>

08003f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f26:	3304      	adds	r3, #4

08003f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f2c:	d3f9      	bcc.n	8003f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f30:	4c09      	ldr	r4, [pc, #36]	@ (8003f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f34:	e001      	b.n	8003f3a <LoopFillZerobss>

08003f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f38:	3204      	adds	r2, #4

08003f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f3c:	d3fb      	bcc.n	8003f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f3e:	f008 fa11 	bl	800c364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f42:	f7fe f819 	bl	8001f78 <main>
  bx lr
 8003f46:	4770      	bx	lr
  ldr r0, =_sdata
 8003f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f4c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003f50:	0800f848 	.word	0x0800f848
  ldr r2, =_sbss
 8003f54:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003f58:	200046c4 	.word	0x200046c4

08003f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC1_2_IRQHandler>
	...

08003f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f64:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_Init+0x28>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_Init+0x28>)
 8003f6a:	f043 0310 	orr.w	r3, r3, #16
 8003f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f70:	2003      	movs	r0, #3
 8003f72:	f000 f947 	bl	8004204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f76:	200f      	movs	r0, #15
 8003f78:	f000 f808 	bl	8003f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7c:	f7ff fe9a 	bl	8003cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f94:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_InitTick+0x54>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b12      	ldr	r3, [pc, #72]	@ (8003fe4 <HAL_InitTick+0x58>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f95f 	bl	800426e <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f000 f927 	bl	800421a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	@ (8003fe8 <HAL_InitTick+0x5c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2000000c 	.word	0x2000000c
 8003fe4:	20000014 	.word	0x20000014
 8003fe8:	20000010 	.word	0x20000010

08003fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_IncTick+0x1c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_IncTick+0x20>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a03      	ldr	r2, [pc, #12]	@ (800400c <HAL_IncTick+0x20>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	20000014 	.word	0x20000014
 800400c:	20002438 	.word	0x20002438

08004010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return uwTick;
 8004014:	4b02      	ldr	r3, [pc, #8]	@ (8004020 <HAL_GetTick+0x10>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	20002438 	.word	0x20002438

08004024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7ff fff0 	bl	8004010 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d005      	beq.n	800404a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403e:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <HAL_Delay+0x44>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800404a:	bf00      	nop
 800404c:	f7ff ffe0 	bl	8004010 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d8f7      	bhi.n	800404c <HAL_Delay+0x28>
  {
  }
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000014 	.word	0x20000014

0800406c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800407c:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004088:	4013      	ands	r3, r2
 800408a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800409e:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <__NVIC_SetPriorityGrouping+0x44>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	60d3      	str	r3, [r2, #12]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <__NVIC_GetPriorityGrouping+0x18>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	f003 0307 	and.w	r3, r3, #7
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	db0b      	blt.n	80040fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	f003 021f 	and.w	r2, r3, #31
 80040e8:	4906      	ldr	r1, [pc, #24]	@ (8004104 <__NVIC_EnableIRQ+0x34>)
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2001      	movs	r0, #1
 80040f2:	fa00 f202 	lsl.w	r2, r0, r2
 80040f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	e000e100 	.word	0xe000e100

08004108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db0a      	blt.n	8004132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	490c      	ldr	r1, [pc, #48]	@ (8004154 <__NVIC_SetPriority+0x4c>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	0112      	lsls	r2, r2, #4
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	440b      	add	r3, r1
 800412c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004130:	e00a      	b.n	8004148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4908      	ldr	r1, [pc, #32]	@ (8004158 <__NVIC_SetPriority+0x50>)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	3b04      	subs	r3, #4
 8004140:	0112      	lsls	r2, r2, #4
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	440b      	add	r3, r1
 8004146:	761a      	strb	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e100 	.word	0xe000e100
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	@ 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f1c3 0307 	rsb	r3, r3, #7
 8004176:	2b04      	cmp	r3, #4
 8004178:	bf28      	it	cs
 800417a:	2304      	movcs	r3, #4
 800417c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	3304      	adds	r3, #4
 8004182:	2b06      	cmp	r3, #6
 8004184:	d902      	bls.n	800418c <NVIC_EncodePriority+0x30>
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3b03      	subs	r3, #3
 800418a:	e000      	b.n	800418e <NVIC_EncodePriority+0x32>
 800418c:	2300      	movs	r3, #0
 800418e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	f04f 32ff 	mov.w	r2, #4294967295
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	401a      	ands	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a4:	f04f 31ff 	mov.w	r1, #4294967295
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	4313      	orrs	r3, r2
         );
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3724      	adds	r7, #36	@ 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d0:	d301      	bcc.n	80041d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <SysTick_Config+0x40>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041de:	210f      	movs	r1, #15
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f7ff ff90 	bl	8004108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <SysTick_Config+0x40>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ee:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <SysTick_Config+0x40>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000e010 	.word	0xe000e010

08004204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff2d 	bl	800406c <__NVIC_SetPriorityGrouping>
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	4603      	mov	r3, r0
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800422c:	f7ff ff42 	bl	80040b4 <__NVIC_GetPriorityGrouping>
 8004230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff90 	bl	800415c <NVIC_EncodePriority>
 800423c:	4602      	mov	r2, r0
 800423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff5f 	bl	8004108 <__NVIC_SetPriority>
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff35 	bl	80040d0 <__NVIC_EnableIRQ>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ffa2 	bl	80041c0 <SysTick_Config>
 800427c:	4603      	mov	r3, r0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004288:	b480      	push	{r7}
 800428a:	b08b      	sub	sp, #44	@ 0x2c
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429a:	e169      	b.n	8004570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800429c:	2201      	movs	r2, #1
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	f040 8158 	bne.w	800456a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a9a      	ldr	r2, [pc, #616]	@ (8004528 <HAL_GPIO_Init+0x2a0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d05e      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
 80042c4:	4a98      	ldr	r2, [pc, #608]	@ (8004528 <HAL_GPIO_Init+0x2a0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d875      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 80042ca:	4a98      	ldr	r2, [pc, #608]	@ (800452c <HAL_GPIO_Init+0x2a4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d058      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
 80042d0:	4a96      	ldr	r2, [pc, #600]	@ (800452c <HAL_GPIO_Init+0x2a4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d86f      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 80042d6:	4a96      	ldr	r2, [pc, #600]	@ (8004530 <HAL_GPIO_Init+0x2a8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d052      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
 80042dc:	4a94      	ldr	r2, [pc, #592]	@ (8004530 <HAL_GPIO_Init+0x2a8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d869      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 80042e2:	4a94      	ldr	r2, [pc, #592]	@ (8004534 <HAL_GPIO_Init+0x2ac>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d04c      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
 80042e8:	4a92      	ldr	r2, [pc, #584]	@ (8004534 <HAL_GPIO_Init+0x2ac>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d863      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 80042ee:	4a92      	ldr	r2, [pc, #584]	@ (8004538 <HAL_GPIO_Init+0x2b0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d046      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
 80042f4:	4a90      	ldr	r2, [pc, #576]	@ (8004538 <HAL_GPIO_Init+0x2b0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d85d      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 80042fa:	2b12      	cmp	r3, #18
 80042fc:	d82a      	bhi.n	8004354 <HAL_GPIO_Init+0xcc>
 80042fe:	2b12      	cmp	r3, #18
 8004300:	d859      	bhi.n	80043b6 <HAL_GPIO_Init+0x12e>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_GPIO_Init+0x80>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004383 	.word	0x08004383
 800430c:	0800435d 	.word	0x0800435d
 8004310:	0800436f 	.word	0x0800436f
 8004314:	080043b1 	.word	0x080043b1
 8004318:	080043b7 	.word	0x080043b7
 800431c:	080043b7 	.word	0x080043b7
 8004320:	080043b7 	.word	0x080043b7
 8004324:	080043b7 	.word	0x080043b7
 8004328:	080043b7 	.word	0x080043b7
 800432c:	080043b7 	.word	0x080043b7
 8004330:	080043b7 	.word	0x080043b7
 8004334:	080043b7 	.word	0x080043b7
 8004338:	080043b7 	.word	0x080043b7
 800433c:	080043b7 	.word	0x080043b7
 8004340:	080043b7 	.word	0x080043b7
 8004344:	080043b7 	.word	0x080043b7
 8004348:	080043b7 	.word	0x080043b7
 800434c:	08004365 	.word	0x08004365
 8004350:	08004379 	.word	0x08004379
 8004354:	4a79      	ldr	r2, [pc, #484]	@ (800453c <HAL_GPIO_Init+0x2b4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800435a:	e02c      	b.n	80043b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	623b      	str	r3, [r7, #32]
          break;
 8004362:	e029      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	3304      	adds	r3, #4
 800436a:	623b      	str	r3, [r7, #32]
          break;
 800436c:	e024      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	3308      	adds	r3, #8
 8004374:	623b      	str	r3, [r7, #32]
          break;
 8004376:	e01f      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	330c      	adds	r3, #12
 800437e:	623b      	str	r3, [r7, #32]
          break;
 8004380:	e01a      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800438a:	2304      	movs	r3, #4
 800438c:	623b      	str	r3, [r7, #32]
          break;
 800438e:	e013      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004398:	2308      	movs	r3, #8
 800439a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	611a      	str	r2, [r3, #16]
          break;
 80043a2:	e009      	b.n	80043b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043a4:	2308      	movs	r3, #8
 80043a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	615a      	str	r2, [r3, #20]
          break;
 80043ae:	e003      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043b0:	2300      	movs	r3, #0
 80043b2:	623b      	str	r3, [r7, #32]
          break;
 80043b4:	e000      	b.n	80043b8 <HAL_GPIO_Init+0x130>
          break;
 80043b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2bff      	cmp	r3, #255	@ 0xff
 80043bc:	d801      	bhi.n	80043c2 <HAL_GPIO_Init+0x13a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	e001      	b.n	80043c6 <HAL_GPIO_Init+0x13e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2bff      	cmp	r3, #255	@ 0xff
 80043cc:	d802      	bhi.n	80043d4 <HAL_GPIO_Init+0x14c>
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	e002      	b.n	80043da <HAL_GPIO_Init+0x152>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	3b08      	subs	r3, #8
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	210f      	movs	r1, #15
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80b1 	beq.w	800456a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004408:	4b4d      	ldr	r3, [pc, #308]	@ (8004540 <HAL_GPIO_Init+0x2b8>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4a4c      	ldr	r2, [pc, #304]	@ (8004540 <HAL_GPIO_Init+0x2b8>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6193      	str	r3, [r2, #24]
 8004414:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <HAL_GPIO_Init+0x2b8>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004420:	4a48      	ldr	r2, [pc, #288]	@ (8004544 <HAL_GPIO_Init+0x2bc>)
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	3302      	adds	r3, #2
 8004428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800442c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	220f      	movs	r2, #15
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <HAL_GPIO_Init+0x2c0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_GPIO_Init+0x1ec>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <HAL_GPIO_Init+0x2c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00d      	beq.n	8004470 <HAL_GPIO_Init+0x1e8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3e      	ldr	r2, [pc, #248]	@ (8004550 <HAL_GPIO_Init+0x2c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <HAL_GPIO_Init+0x1e4>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3d      	ldr	r2, [pc, #244]	@ (8004554 <HAL_GPIO_Init+0x2cc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_GPIO_Init+0x1e0>
 8004464:	2303      	movs	r3, #3
 8004466:	e006      	b.n	8004476 <HAL_GPIO_Init+0x1ee>
 8004468:	2304      	movs	r3, #4
 800446a:	e004      	b.n	8004476 <HAL_GPIO_Init+0x1ee>
 800446c:	2302      	movs	r3, #2
 800446e:	e002      	b.n	8004476 <HAL_GPIO_Init+0x1ee>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_GPIO_Init+0x1ee>
 8004474:	2300      	movs	r3, #0
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	f002 0203 	and.w	r2, r2, #3
 800447c:	0092      	lsls	r2, r2, #2
 800447e:	4093      	lsls	r3, r2
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004486:	492f      	ldr	r1, [pc, #188]	@ (8004544 <HAL_GPIO_Init+0x2bc>)
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	089b      	lsrs	r3, r3, #2
 800448c:	3302      	adds	r3, #2
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	492c      	ldr	r1, [pc, #176]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]
 80044ac:	e006      	b.n	80044bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	4928      	ldr	r1, [pc, #160]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044c8:	4b23      	ldr	r3, [pc, #140]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	4922      	ldr	r1, [pc, #136]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
 80044d4:	e006      	b.n	80044e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044d6:	4b20      	ldr	r3, [pc, #128]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	43db      	mvns	r3, r3
 80044de:	491e      	ldr	r1, [pc, #120]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	4918      	ldr	r1, [pc, #96]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e006      	b.n	800450c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044fe:	4b16      	ldr	r3, [pc, #88]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	43db      	mvns	r3, r3
 8004506:	4914      	ldr	r1, [pc, #80]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 8004508:	4013      	ands	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d021      	beq.n	800455c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004518:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	490e      	ldr	r1, [pc, #56]	@ (8004558 <HAL_GPIO_Init+0x2d0>)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	e021      	b.n	800456a <HAL_GPIO_Init+0x2e2>
 8004526:	bf00      	nop
 8004528:	10320000 	.word	0x10320000
 800452c:	10310000 	.word	0x10310000
 8004530:	10220000 	.word	0x10220000
 8004534:	10210000 	.word	0x10210000
 8004538:	10120000 	.word	0x10120000
 800453c:	10110000 	.word	0x10110000
 8004540:	40021000 	.word	0x40021000
 8004544:	40010000 	.word	0x40010000
 8004548:	40010800 	.word	0x40010800
 800454c:	40010c00 	.word	0x40010c00
 8004550:	40011000 	.word	0x40011000
 8004554:	40011400 	.word	0x40011400
 8004558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_GPIO_Init+0x304>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	43db      	mvns	r3, r3
 8004564:	4909      	ldr	r1, [pc, #36]	@ (800458c <HAL_GPIO_Init+0x304>)
 8004566:	4013      	ands	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	3301      	adds	r3, #1
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	fa22 f303 	lsr.w	r3, r2, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	f47f ae8e 	bne.w	800429c <HAL_GPIO_Init+0x14>
  }
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	372c      	adds	r7, #44	@ 0x2c
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr
 800458c:	40010400 	.word	0x40010400

08004590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e001      	b.n	80045b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
 80045ca:	4613      	mov	r3, r2
 80045cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ce:	787b      	ldrb	r3, [r7, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045da:	e003      	b.n	80045e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045dc:	887b      	ldrh	r3, [r7, #2]
 80045de:	041a      	lsls	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	611a      	str	r2, [r3, #16]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0e8      	b.n	80047d2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f006 fc1b 	bl	800ae50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2203      	movs	r2, #3
 800461e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f002 f9f6 	bl	8006a1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800463c:	f002 f9cc 	bl	80069d8 <USB_CoreInit>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0bf      	b.n	80047d2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f002 f9fa 	bl	8006a52 <USB_SetCurrentMode>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b0      	b.n	80047d2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e03e      	b.n	80046f4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	3311      	adds	r3, #17
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3310      	adds	r3, #16
 800469a:	7bfa      	ldrb	r2, [r7, #15]
 800469c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3313      	adds	r3, #19
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	3320      	adds	r3, #32
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	3324      	adds	r3, #36	@ 0x24
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	3301      	adds	r3, #1
 80046f2:	73fb      	strb	r3, [r7, #15]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	791b      	ldrb	r3, [r3, #4]
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3bb      	bcc.n	8004676 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	e044      	b.n	800478e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004704:	7bfa      	ldrb	r2, [r7, #15]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	440b      	add	r3, r1
 8004712:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	440b      	add	r3, r1
 800473e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	440b      	add	r3, r1
 800476a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	440b      	add	r3, r1
 8004780:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	3301      	adds	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	791b      	ldrb	r3, [r3, #4]
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	429a      	cmp	r2, r3
 8004796:	d3b5      	bcc.n	8004704 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a2:	f002 f962 	bl	8006a6a <USB_DevInit>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e00c      	b.n	80047d2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f004 fbe1 	bl	8008f92 <USB_DevDisconnect>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_PCD_Start+0x16>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e016      	b.n	800481e <HAL_PCD_Start+0x44>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f002 f8f8 	bl	80069f2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004802:	2101      	movs	r1, #1
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f006 fd96 	bl	800b336 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fbb5 	bl	8008f7e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f004 fbb7 	bl	8008fa6 <USB_ReadInterrupts>
 8004838:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb1a 	bl	8004e7e <PCD_EP_ISR_Handler>

    return;
 800484a:	e119      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004852:	2b00      	cmp	r3, #0
 8004854:	d013      	beq.n	800487e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004868:	b292      	uxth	r2, r2
 800486a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f006 fb69 	bl	800af46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004874:	2100      	movs	r1, #0
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f905 	bl	8004a86 <HAL_PCD_SetAddress>

    return;
 800487c:	e100      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00c      	beq.n	80048a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800489a:	b292      	uxth	r2, r2
 800489c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048a0:	e0ee      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00c      	beq.n	80048c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048be:	b292      	uxth	r2, r2
 80048c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048c4:	e0dc      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d027      	beq.n	8004920 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	b292      	uxth	r2, r2
 80048e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0208 	bic.w	r2, r2, #8
 80048fa:	b292      	uxth	r2, r2
 80048fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f006 fb59 	bl	800afb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004918:	b292      	uxth	r2, r2
 800491a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800491e:	e0af      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8083 	beq.w	8004a32 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e010      	b.n	8004954 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	b292      	uxth	r2, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	3320      	adds	r3, #32
 8004948:	443b      	add	r3, r7
 800494a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	3301      	adds	r3, #1
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b07      	cmp	r3, #7
 8004958:	d9eb      	bls.n	8004932 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	b292      	uxth	r2, r2
 800496e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	b292      	uxth	r2, r2
 8004986:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800498a:	bf00      	nop
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004994:	b29b      	uxth	r3, r3
 8004996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f6      	beq.n	800498c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b0:	b292      	uxth	r2, r2
 80049b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e00f      	b.n	80049dc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80049bc:	7ffb      	ldrb	r3, [r7, #31]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	4611      	mov	r1, r2
 80049c4:	7ffa      	ldrb	r2, [r7, #31]
 80049c6:	0092      	lsls	r2, r2, #2
 80049c8:	440a      	add	r2, r1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	3320      	adds	r3, #32
 80049ce:	443b      	add	r3, r7
 80049d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80049d4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80049d6:	7ffb      	ldrb	r3, [r7, #31]
 80049d8:	3301      	adds	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	7ffb      	ldrb	r3, [r7, #31]
 80049de:	2b07      	cmp	r3, #7
 80049e0:	d9ec      	bls.n	80049bc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0208 	orr.w	r2, r2, #8
 80049f4:	b292      	uxth	r2, r2
 80049f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a0c:	b292      	uxth	r2, r2
 8004a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0204 	orr.w	r2, r2, #4
 8004a24:	b292      	uxth	r2, r2
 8004a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f006 faaa 	bl	800af84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a30:	e026      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00f      	beq.n	8004a5c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f006 fa68 	bl	800af2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a5a:	e011      	b.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004a7e:	bf00      	nop
  }
}
 8004a80:	3720      	adds	r7, #32
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_PCD_SetAddress+0x1a>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e012      	b.n	8004ac6 <HAL_PCD_SetAddress+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fa4e 	bl	8008f58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	461a      	mov	r2, r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	70fb      	strb	r3, [r7, #3]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	803b      	strh	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da0e      	bge.n	8004b12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	3310      	adds	r3, #16
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	705a      	strb	r2, [r3, #1]
 8004b10:	e00e      	b.n	8004b30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 0207 	and.w	r2, r3, #7
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b3c:	883a      	ldrh	r2, [r7, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	78ba      	ldrb	r2, [r7, #2]
 8004b46:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b48:	78bb      	ldrb	r3, [r7, #2]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d102      	bne.n	8004b54 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_PCD_EP_Open+0x94>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e00e      	b.n	8004b80 <HAL_PCD_EP_Open+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 ff97 	bl	8006aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da0e      	bge.n	8004bba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 0207 	and.w	r2, r3, #7
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	3310      	adds	r3, #16
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	705a      	strb	r2, [r3, #1]
 8004bb8:	e00e      	b.n	8004bd8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	f003 0207 	and.w	r2, r3, #7
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_PCD_EP_Close+0x6a>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e00e      	b.n	8004c10 <HAL_PCD_EP_Close+0x88>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f002 fb0f 	bl	8007224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	460b      	mov	r3, r1
 8004c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6979      	ldr	r1, [r7, #20]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 fcc6 	bl	80075fc <USB_EPStartXfer>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f003 0207 	and.w	r2, r3, #7
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004c9c:	681b      	ldr	r3, [r3, #0]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf4:	7afb      	ldrb	r3, [r7, #11]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f002 fc78 	bl	80075fc <USB_EPStartXfer>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	7912      	ldrb	r2, [r2, #4]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e04c      	b.n	8004dce <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da0e      	bge.n	8004d5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	3310      	adds	r3, #16
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4413      	add	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	705a      	strb	r2, [r3, #1]
 8004d58:	e00c      	b.n	8004d74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_PCD_EP_SetStall+0x7e>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e01c      	b.n	8004dce <HAL_PCD_EP_SetStall+0xb8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f003 ffdb 	bl	8008d5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f004 f900 	bl	8008fc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	7912      	ldrb	r2, [r2, #4]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e040      	b.n	8004e76 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da0e      	bge.n	8004e1a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	705a      	strb	r2, [r3, #1]
 8004e18:	e00e      	b.n	8004e38 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	f003 0207 	and.w	r2, r3, #7
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_PCD_EP_ClrStall+0x82>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e00e      	b.n	8004e76 <HAL_PCD_EP_ClrStall+0xa0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 ffc9 	bl	8008dfe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b096      	sub	sp, #88	@ 0x58
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e86:	e3bb      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004ea2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 8175 	bne.w	8005196 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d14e      	bne.n	8004f56 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	81fb      	strh	r3, [r7, #14]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3310      	adds	r3, #16
 8004ee0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3302      	adds	r3, #2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	441a      	add	r2, r3
 8004f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f005 ffe9 	bl	800aef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7b5b      	ldrb	r3, [r3, #13]
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8368 	beq.w	8005600 <PCD_EP_ISR_Handler+0x782>
 8004f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 8363 	bne.w	8005600 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	7b5b      	ldrb	r3, [r3, #13]
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	735a      	strb	r2, [r3, #13]
 8004f54:	e354      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f5c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d034      	beq.n	8004fde <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	3306      	adds	r3, #6
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f004 f857 	bl	8009066 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	823b      	strh	r3, [r7, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	8a3a      	ldrh	r2, [r7, #16]
 8004fce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fd2:	b292      	uxth	r2, r2
 8004fd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f005 ff60 	bl	800ae9c <HAL_PCD_SetupStageCallback>
 8004fdc:	e310      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fde:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f280 830c 	bge.w	8005600 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	83fb      	strh	r3, [r7, #30]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	8bfa      	ldrh	r2, [r7, #30]
 8004ffe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005002:	b292      	uxth	r2, r2
 8005004:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800500e:	b29b      	uxth	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	3306      	adds	r3, #6
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <PCD_EP_ISR_Handler+0x1f0>
 800503a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d015      	beq.n	800506e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005048:	6959      	ldr	r1, [r3, #20]
 800504a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800504e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005050:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005052:	b29b      	uxth	r3, r3
 8005054:	f004 f807 	bl	8009066 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	441a      	add	r2, r3
 8005062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005064:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f005 ff29 	bl	800aec0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005078:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800507c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 82bd 	bne.w	8005600 <PCD_EP_ISR_Handler+0x782>
 8005086:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800508a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800508e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005092:	f000 82b5 	beq.w	8005600 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	4413      	add	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	801a      	strh	r2, [r3, #0]
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80050cc:	d91d      	bls.n	800510a <PCD_EP_ISR_Handler+0x28c>
 80050ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <PCD_EP_ISR_Handler+0x26a>
 80050e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e4:	3b01      	subs	r3, #1
 80050e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005102:	b29a      	uxth	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e026      	b.n	8005158 <PCD_EP_ISR_Handler+0x2da>
 800510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <PCD_EP_ISR_Handler+0x2aa>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005120:	b29a      	uxth	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	e017      	b.n	8005158 <PCD_EP_ISR_Handler+0x2da>
 8005128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <PCD_EP_ISR_Handler+0x2c4>
 800513c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513e:	3301      	adds	r3, #1
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29a      	uxth	r2, r3
 8005148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514a:	b29b      	uxth	r3, r3
 800514c:	029b      	lsls	r3, r3, #10
 800514e:	b29b      	uxth	r3, r3
 8005150:	4313      	orrs	r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005164:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005168:	827b      	strh	r3, [r7, #18]
 800516a:	8a7b      	ldrh	r3, [r7, #18]
 800516c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005170:	827b      	strh	r3, [r7, #18]
 8005172:	8a7b      	ldrh	r3, [r7, #18]
 8005174:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005178:	827b      	strh	r3, [r7, #18]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	8a7b      	ldrh	r3, [r7, #18]
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800518c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
 8005194:	e234      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f280 80fc 	bge.w	80053ac <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80051ca:	4013      	ands	r3, r2
 80051cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80051e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051e6:	b292      	uxth	r2, r2
 80051e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80051ea:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005202:	7b1b      	ldrb	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d125      	bne.n	8005254 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005210:	b29b      	uxth	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	3306      	adds	r3, #6
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005230:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005234:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8092 	beq.w	8005362 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005244:	6959      	ldr	r1, [r3, #20]
 8005246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005248:	88da      	ldrh	r2, [r3, #6]
 800524a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800524e:	f003 ff0a 	bl	8009066 <USB_ReadPMA>
 8005252:	e086      	b.n	8005362 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005256:	78db      	ldrb	r3, [r3, #3]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d10a      	bne.n	8005272 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800525c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005260:	461a      	mov	r2, r3
 8005262:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f9d9 	bl	800561c <HAL_PCD_EP_DB_Receive>
 800526a:	4603      	mov	r3, r0
 800526c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005270:	e077      	b.n	8005362 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d024      	beq.n	800531a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4413      	add	r3, r2
 80052e4:	3302      	adds	r3, #2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80052fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02e      	beq.n	8005362 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530a:	6959      	ldr	r1, [r3, #20]
 800530c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530e:	891a      	ldrh	r2, [r3, #8]
 8005310:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005314:	f003 fea7 	bl	8009066 <USB_ReadPMA>
 8005318:	e023      	b.n	8005362 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	3306      	adds	r3, #6
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005346:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005354:	6959      	ldr	r1, [r3, #20]
 8005356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005358:	895a      	ldrh	r2, [r3, #10]
 800535a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800535e:	f003 fe82 	bl	8009066 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800536a:	441a      	add	r2, r3
 800536c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005378:	441a      	add	r2, r3
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800537e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <PCD_EP_ISR_Handler+0x514>
 8005386:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	d206      	bcs.n	80053a0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f005 fd91 	bl	800aec0 <HAL_PCD_DataOutStageCallback>
 800539e:	e005      	b.n	80053ac <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053a6:	4618      	mov	r0, r3
 80053a8:	f002 f928 	bl	80075fc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8123 	beq.w	8005600 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80053ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	3310      	adds	r3, #16
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80053e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80053fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	78db      	ldrb	r3, [r3, #3]
 800540e:	2b01      	cmp	r3, #1
 8005410:	f040 80a2 	bne.w	8005558 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005416:	2200      	movs	r2, #0
 8005418:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800541a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541c:	7b1b      	ldrb	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8093 	beq.w	800554a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005424:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d046      	beq.n	80054be <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d126      	bne.n	8005486 <PCD_EP_ISR_Handler+0x608>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005446:	b29b      	uxth	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	4413      	add	r3, r2
 800544e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	011a      	lsls	r2, r3, #4
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	4413      	add	r3, r2
 800545a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800545e:	623b      	str	r3, [r7, #32]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546a:	b29a      	uxth	r2, r3
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547e:	b29a      	uxth	r2, r3
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	e061      	b.n	800554a <PCD_EP_ISR_Handler+0x6cc>
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d15d      	bne.n	800554a <PCD_EP_ISR_Handler+0x6cc>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a2:	4413      	add	r3, r2
 80054a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	011a      	lsls	r2, r3, #4
 80054ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	2200      	movs	r2, #0
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e045      	b.n	800554a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d126      	bne.n	800551a <PCD_EP_ISR_Handler+0x69c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	4413      	add	r3, r2
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	011a      	lsls	r2, r3, #4
 80054ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005512:	b29a      	uxth	r2, r3
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e017      	b.n	800554a <PCD_EP_ISR_Handler+0x6cc>
 800551a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d113      	bne.n	800554a <PCD_EP_ISR_Handler+0x6cc>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005530:	4413      	add	r3, r2
 8005532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	011a      	lsls	r2, r3, #4
 800553a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800553c:	4413      	add	r3, r2
 800553e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005542:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	2200      	movs	r2, #0
 8005548:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800554a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	4619      	mov	r1, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f005 fcd0 	bl	800aef6 <HAL_PCD_DataInStageCallback>
 8005556:	e053      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005558:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d146      	bne.n	80055f2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	3302      	adds	r3, #2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800558c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005598:	429a      	cmp	r2, r3
 800559a:	d907      	bls.n	80055ac <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800559c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a8:	619a      	str	r2, [r3, #24]
 80055aa:	e002      	b.n	80055b2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80055ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80055b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f005 fc98 	bl	800aef6 <HAL_PCD_DataInStageCallback>
 80055c6:	e01b      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80055c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055d0:	441a      	add	r2, r3
 80055d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80055d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d8:	69da      	ldr	r2, [r3, #28]
 80055da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055de:	441a      	add	r2, r3
 80055e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 f806 	bl	80075fc <USB_EPStartXfer>
 80055f0:	e006      	b.n	8005600 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80055f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80055f6:	461a      	mov	r2, r3
 80055f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f91b 	bl	8005836 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21b      	sxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	f6ff ac3b 	blt.w	8004e88 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3758      	adds	r7, #88	@ 0x58
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d07e      	beq.n	8005732 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	3302      	adds	r3, #2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699a      	ldr	r2, [r3, #24]
 8005662:	8b7b      	ldrh	r3, [r7, #26]
 8005664:	429a      	cmp	r2, r3
 8005666:	d306      	bcc.n	8005676 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	8b7b      	ldrh	r3, [r7, #26]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	619a      	str	r2, [r3, #24]
 8005674:	e002      	b.n	800567c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d123      	bne.n	80056cc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800569a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569e:	833b      	strh	r3, [r7, #24]
 80056a0:	8b3b      	ldrh	r3, [r7, #24]
 80056a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056a6:	833b      	strh	r3, [r7, #24]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	441a      	add	r2, r3
 80056b6:	8b3b      	ldrh	r3, [r7, #24]
 80056b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01f      	beq.n	8005716 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f0:	82fb      	strh	r3, [r7, #22]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8afb      	ldrh	r3, [r7, #22]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800570e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005716:	8b7b      	ldrh	r3, [r7, #26]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8087 	beq.w	800582c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6959      	ldr	r1, [r3, #20]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	891a      	ldrh	r2, [r3, #8]
 800572a:	8b7b      	ldrh	r3, [r7, #26]
 800572c:	f003 fc9b 	bl	8009066 <USB_ReadPMA>
 8005730:	e07c      	b.n	800582c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	3306      	adds	r3, #6
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	8b7b      	ldrh	r3, [r7, #26]
 8005762:	429a      	cmp	r2, r3
 8005764:	d306      	bcc.n	8005774 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	8b7b      	ldrh	r3, [r7, #26]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	619a      	str	r2, [r3, #24]
 8005772:	e002      	b.n	800577a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d123      	bne.n	80057ca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	83fb      	strh	r3, [r7, #30]
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057a4:	83fb      	strh	r3, [r7, #30]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11f      	bne.n	8005814 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	83bb      	strh	r3, [r7, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	8bbb      	ldrh	r3, [r7, #28]
 8005800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005814:	8b7b      	ldrh	r3, [r7, #26]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	895a      	ldrh	r2, [r3, #10]
 8005826:	8b7b      	ldrh	r3, [r7, #26]
 8005828:	f003 fc1d 	bl	8009066 <USB_ReadPMA>
    }
  }

  return count;
 800582c:	8b7b      	ldrh	r3, [r7, #26]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b0a4      	sub	sp, #144	@ 0x90
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	4613      	mov	r3, r2
 8005842:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 81dd 	beq.w	8005c0a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005858:	b29b      	uxth	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	3302      	adds	r3, #2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005878:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005884:	429a      	cmp	r2, r3
 8005886:	d907      	bls.n	8005898 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	619a      	str	r2, [r3, #24]
 8005896:	e002      	b.n	800589e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 80b9 	bne.w	8005a1a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d126      	bne.n	80058fe <HAL_PCD_EP_DB_Transmit+0xc8>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c4:	4413      	add	r3, r2
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	e01a      	b.n	8005934 <HAL_PCD_EP_DB_Transmit+0xfe>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d116      	bne.n	8005934 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	4413      	add	r3, r2
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	011a      	lsls	r2, r3, #4
 8005924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005926:	4413      	add	r3, r2
 8005928:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	2200      	movs	r2, #0
 8005932:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d126      	bne.n	8005990 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005950:	b29b      	uxth	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005974:	b29a      	uxth	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e017      	b.n	80059c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a6:	4413      	add	r3, r2
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2200      	movs	r2, #0
 80059be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	4619      	mov	r1, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f005 fa95 	bl	800aef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 82fc 	beq.w	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	82fb      	strh	r3, [r7, #22]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	8afb      	ldrh	r3, [r7, #22]
 8005a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]
 8005a18:	e2da      	b.n	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d021      	beq.n	8005a68 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	f040 82ae 	bne.w	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a7c:	441a      	add	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d30b      	bcc.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	621a      	str	r2, [r3, #32]
 8005ab2:	e017      	b.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005abc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005acc:	e00a      	b.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d165      	bne.n	8005bb8 <HAL_PCD_EP_DB_Transmit+0x382>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b00:	4413      	add	r3, r2
 8005b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	011a      	lsls	r2, r3, #4
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b28:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b2a:	d91d      	bls.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x332>
 8005b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <HAL_PCD_EP_DB_Transmit+0x310>
 8005b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b42:	3b01      	subs	r3, #1
 8005b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e044      	b.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <HAL_PCD_EP_DB_Transmit+0x350>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e035      	b.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e01c      	b.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d118      	bne.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd4:	4413      	add	r3, r2
 8005bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	011a      	lsls	r2, r3, #4
 8005bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6959      	ldr	r1, [r3, #20]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	891a      	ldrh	r2, [r3, #8]
 8005bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f003 f9e9 	bl	8008fda <USB_WritePMA>
 8005c08:	e1e2      	b.n	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3306      	adds	r3, #6
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c32:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d307      	bcc.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	619a      	str	r2, [r3, #24]
 8005c50:	e002      	b.n	8005c58 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 80c0 	bne.w	8005de2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d126      	bne.n	8005cb8 <HAL_PCD_EP_DB_Transmit+0x482>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c7e:	4413      	add	r3, r2
 8005c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	011a      	lsls	r2, r3, #4
 8005c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	e01a      	b.n	8005cee <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d116      	bne.n	8005cee <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd4:	4413      	add	r3, r2
 8005cd6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ce6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cea:	2200      	movs	r2, #0
 8005cec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d12b      	bne.n	8005d54 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d10:	4413      	add	r3, r2
 8005d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e017      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d113      	bne.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d6a:	4413      	add	r3, r2
 8005d6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	011a      	lsls	r2, r3, #4
 8005d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d76:	4413      	add	r3, r2
 8005d78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d80:	2200      	movs	r2, #0
 8005d82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f005 f8b3 	bl	800aef6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 811a 	bne.w	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
 8005de0:	e0f6      	b.n	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d121      	bne.n	8005e30 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 80ca 	bne.w	8005fd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e44:	441a      	add	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e52:	441a      	add	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d30b      	bcc.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	621a      	str	r2, [r3, #32]
 8005e7a:	e017      	b.n	8005eac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005e84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005e94:	e00a      	b.n	8005eac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d165      	bne.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x750>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ece:	4413      	add	r3, r2
 8005ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	011a      	lsls	r2, r3, #4
 8005ed8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ef8:	d91d      	bls.n	8005f36 <HAL_PCD_EP_DB_Transmit+0x700>
 8005efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f10:	3b01      	subs	r3, #1
 8005f12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	e041      	b.n	8005fba <HAL_PCD_EP_DB_Transmit+0x784>
 8005f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	e032      	b.n	8005fba <HAL_PCD_EP_DB_Transmit+0x784>
 8005f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_PCD_EP_DB_Transmit+0x738>
 8005f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e019      	b.n	8005fba <HAL_PCD_EP_DB_Transmit+0x784>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d115      	bne.n	8005fba <HAL_PCD_EP_DB_Transmit+0x784>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9c:	4413      	add	r3, r2
 8005f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	4413      	add	r3, r2
 8005faa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6959      	ldr	r1, [r3, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	895a      	ldrh	r2, [r3, #10]
 8005fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f003 f805 	bl	8008fda <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fea:	82bb      	strh	r3, [r7, #20]
 8005fec:	8abb      	ldrh	r3, [r7, #20]
 8005fee:	f083 0310 	eor.w	r3, r3, #16
 8005ff2:	82bb      	strh	r3, [r7, #20]
 8005ff4:	8abb      	ldrh	r3, [r7, #20]
 8005ff6:	f083 0320 	eor.w	r3, r3, #32
 8005ffa:	82bb      	strh	r3, [r7, #20]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	8abb      	ldrh	r3, [r7, #20]
 800600c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601c:	b29b      	uxth	r3, r3
 800601e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3790      	adds	r7, #144	@ 0x90
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	817b      	strh	r3, [r7, #10]
 8006038:	4613      	mov	r3, r2
 800603a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800603c:	897b      	ldrh	r3, [r7, #10]
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006048:	897b      	ldrh	r3, [r7, #10]
 800604a:	f003 0207 	and.w	r2, r3, #7
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	3310      	adds	r3, #16
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e009      	b.n	8006074 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006060:	897a      	ldrh	r2, [r7, #10]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006074:	893b      	ldrh	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	b29a      	uxth	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	80da      	strh	r2, [r3, #6]
 8006088:	e00b      	b.n	80060a2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2201      	movs	r2, #1
 800608e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	b29a      	uxth	r2, r3
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	b29a      	uxth	r2, r3
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bc80      	pop	{r7}
 80060ac:	4770      	bx	lr
	...

080060b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e272      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8087 	beq.w	80061de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d0:	4b92      	ldr	r3, [pc, #584]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d00c      	beq.n	80060f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060dc:	4b8f      	ldr	r3, [pc, #572]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 030c 	and.w	r3, r3, #12
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d112      	bne.n	800610e <HAL_RCC_OscConfig+0x5e>
 80060e8:	4b8c      	ldr	r3, [pc, #560]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d10b      	bne.n	800610e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f6:	4b89      	ldr	r3, [pc, #548]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d06c      	beq.n	80061dc <HAL_RCC_OscConfig+0x12c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d168      	bne.n	80061dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e24c      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006116:	d106      	bne.n	8006126 <HAL_RCC_OscConfig+0x76>
 8006118:	4b80      	ldr	r3, [pc, #512]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a7f      	ldr	r2, [pc, #508]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800611e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e02e      	b.n	8006184 <HAL_RCC_OscConfig+0xd4>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <HAL_RCC_OscConfig+0x98>
 800612e:	4b7b      	ldr	r3, [pc, #492]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a7a      	ldr	r2, [pc, #488]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4b78      	ldr	r3, [pc, #480]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a77      	ldr	r2, [pc, #476]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e01d      	b.n	8006184 <HAL_RCC_OscConfig+0xd4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006150:	d10c      	bne.n	800616c <HAL_RCC_OscConfig+0xbc>
 8006152:	4b72      	ldr	r3, [pc, #456]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a71      	ldr	r2, [pc, #452]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4b6f      	ldr	r3, [pc, #444]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a6e      	ldr	r2, [pc, #440]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e00b      	b.n	8006184 <HAL_RCC_OscConfig+0xd4>
 800616c:	4b6b      	ldr	r3, [pc, #428]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6a      	ldr	r2, [pc, #424]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	4b68      	ldr	r3, [pc, #416]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a67      	ldr	r2, [pc, #412]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 800617e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d013      	beq.n	80061b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fd ff40 	bl	8004010 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006194:	f7fd ff3c 	bl	8004010 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	@ 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e200      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a6:	4b5d      	ldr	r3, [pc, #372]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0xe4>
 80061b2:	e014      	b.n	80061de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b4:	f7fd ff2c 	bl	8004010 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061bc:	f7fd ff28 	bl	8004010 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b64      	cmp	r3, #100	@ 0x64
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e1ec      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ce:	4b53      	ldr	r3, [pc, #332]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x10c>
 80061da:	e000      	b.n	80061de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d063      	beq.n	80062b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061ea:	4b4c      	ldr	r3, [pc, #304]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061f6:	4b49      	ldr	r3, [pc, #292]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d11c      	bne.n	800623c <HAL_RCC_OscConfig+0x18c>
 8006202:	4b46      	ldr	r3, [pc, #280]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800620e:	4b43      	ldr	r3, [pc, #268]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_RCC_OscConfig+0x176>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d001      	beq.n	8006226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e1c0      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006226:	4b3d      	ldr	r3, [pc, #244]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4939      	ldr	r1, [pc, #228]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800623a:	e03a      	b.n	80062b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d020      	beq.n	8006286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006244:	4b36      	ldr	r3, [pc, #216]	@ (8006320 <HAL_RCC_OscConfig+0x270>)
 8006246:	2201      	movs	r2, #1
 8006248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624a:	f7fd fee1 	bl	8004010 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006252:	f7fd fedd 	bl	8004010 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e1a1      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006264:	4b2d      	ldr	r3, [pc, #180]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006270:	4b2a      	ldr	r3, [pc, #168]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	4927      	ldr	r1, [pc, #156]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	600b      	str	r3, [r1, #0]
 8006284:	e015      	b.n	80062b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006286:	4b26      	ldr	r3, [pc, #152]	@ (8006320 <HAL_RCC_OscConfig+0x270>)
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fd fec0 	bl	8004010 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006294:	f7fd febc 	bl	8004010 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e180      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a6:	4b1d      	ldr	r3, [pc, #116]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d03a      	beq.n	8006334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d019      	beq.n	80062fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c6:	4b17      	ldr	r3, [pc, #92]	@ (8006324 <HAL_RCC_OscConfig+0x274>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062cc:	f7fd fea0 	bl	8004010 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d4:	f7fd fe9c 	bl	8004010 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e160      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <HAL_RCC_OscConfig+0x26c>)
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062f2:	2001      	movs	r0, #1
 80062f4:	f000 fa9c 	bl	8006830 <RCC_Delay>
 80062f8:	e01c      	b.n	8006334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006324 <HAL_RCC_OscConfig+0x274>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006300:	f7fd fe86 	bl	8004010 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006306:	e00f      	b.n	8006328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006308:	f7fd fe82 	bl	8004010 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d908      	bls.n	8006328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e146      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000
 8006320:	42420000 	.word	0x42420000
 8006324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006328:	4b92      	ldr	r3, [pc, #584]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e9      	bne.n	8006308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80a6 	beq.w	800648e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006346:	4b8b      	ldr	r3, [pc, #556]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006352:	4b88      	ldr	r3, [pc, #544]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	4a87      	ldr	r2, [pc, #540]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	61d3      	str	r3, [r2, #28]
 800635e:	4b85      	ldr	r3, [pc, #532]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636e:	4b82      	ldr	r3, [pc, #520]	@ (8006578 <HAL_RCC_OscConfig+0x4c8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d118      	bne.n	80063ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637a:	4b7f      	ldr	r3, [pc, #508]	@ (8006578 <HAL_RCC_OscConfig+0x4c8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a7e      	ldr	r2, [pc, #504]	@ (8006578 <HAL_RCC_OscConfig+0x4c8>)
 8006380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006386:	f7fd fe43 	bl	8004010 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638e:	f7fd fe3f 	bl	8004010 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b64      	cmp	r3, #100	@ 0x64
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e103      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a0:	4b75      	ldr	r3, [pc, #468]	@ (8006578 <HAL_RCC_OscConfig+0x4c8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d106      	bne.n	80063c2 <HAL_RCC_OscConfig+0x312>
 80063b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6213      	str	r3, [r2, #32]
 80063c0:	e02d      	b.n	800641e <HAL_RCC_OscConfig+0x36e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x334>
 80063ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4a69      	ldr	r2, [pc, #420]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6213      	str	r3, [r2, #32]
 80063d6:	4b67      	ldr	r3, [pc, #412]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	4a66      	ldr	r2, [pc, #408]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063dc:	f023 0304 	bic.w	r3, r3, #4
 80063e0:	6213      	str	r3, [r2, #32]
 80063e2:	e01c      	b.n	800641e <HAL_RCC_OscConfig+0x36e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b05      	cmp	r3, #5
 80063ea:	d10c      	bne.n	8006406 <HAL_RCC_OscConfig+0x356>
 80063ec:	4b61      	ldr	r3, [pc, #388]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	4a60      	ldr	r2, [pc, #384]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063f2:	f043 0304 	orr.w	r3, r3, #4
 80063f6:	6213      	str	r3, [r2, #32]
 80063f8:	4b5e      	ldr	r3, [pc, #376]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	6213      	str	r3, [r2, #32]
 8006404:	e00b      	b.n	800641e <HAL_RCC_OscConfig+0x36e>
 8006406:	4b5b      	ldr	r3, [pc, #364]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4a5a      	ldr	r2, [pc, #360]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	6213      	str	r3, [r2, #32]
 8006412:	4b58      	ldr	r3, [pc, #352]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	4a57      	ldr	r2, [pc, #348]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006418:	f023 0304 	bic.w	r3, r3, #4
 800641c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d015      	beq.n	8006452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fd fdf3 	bl	8004010 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800642c:	e00a      	b.n	8006444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642e:	f7fd fdef 	bl	8004010 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e0b1      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006444:	4b4b      	ldr	r3, [pc, #300]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ee      	beq.n	800642e <HAL_RCC_OscConfig+0x37e>
 8006450:	e014      	b.n	800647c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006452:	f7fd fddd 	bl	8004010 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fd fdd9 	bl	8004010 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e09b      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006470:	4b40      	ldr	r3, [pc, #256]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1ee      	bne.n	800645a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006482:	4b3c      	ldr	r3, [pc, #240]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	4a3b      	ldr	r2, [pc, #236]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800648c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8087 	beq.w	80065a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006498:	4b36      	ldr	r3, [pc, #216]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d061      	beq.n	8006568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d146      	bne.n	800653a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ac:	4b33      	ldr	r3, [pc, #204]	@ (800657c <HAL_RCC_OscConfig+0x4cc>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b2:	f7fd fdad 	bl	8004010 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ba:	f7fd fda9 	bl	8004010 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e06d      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064cc:	4b29      	ldr	r3, [pc, #164]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064e0:	d108      	bne.n	80064f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064e2:	4b24      	ldr	r3, [pc, #144]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	4921      	ldr	r1, [pc, #132]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a19      	ldr	r1, [r3, #32]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	430b      	orrs	r3, r1
 8006506:	491b      	ldr	r1, [pc, #108]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800650c:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <HAL_RCC_OscConfig+0x4cc>)
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fd fd7d 	bl	8004010 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651a:	f7fd fd79 	bl	8004010 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e03d      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0f0      	beq.n	800651a <HAL_RCC_OscConfig+0x46a>
 8006538:	e035      	b.n	80065a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653a:	4b10      	ldr	r3, [pc, #64]	@ (800657c <HAL_RCC_OscConfig+0x4cc>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006540:	f7fd fd66 	bl	8004010 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006548:	f7fd fd62 	bl	8004010 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e026      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800655a:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <HAL_RCC_OscConfig+0x4c4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x498>
 8006566:	e01e      	b.n	80065a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d107      	bne.n	8006580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e019      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
 8006574:	40021000 	.word	0x40021000
 8006578:	40007000 	.word	0x40007000
 800657c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_RCC_OscConfig+0x500>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	429a      	cmp	r2, r3
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659e:	429a      	cmp	r2, r3
 80065a0:	d001      	beq.n	80065a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40021000 	.word	0x40021000

080065b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0d0      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d910      	bls.n	80065f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b67      	ldr	r3, [pc, #412]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 0207 	bic.w	r2, r3, #7
 80065de:	4965      	ldr	r1, [pc, #404]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b63      	ldr	r3, [pc, #396]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0b8      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006610:	4b59      	ldr	r3, [pc, #356]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a58      	ldr	r2, [pc, #352]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800661a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006628:	4b53      	ldr	r3, [pc, #332]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a52      	ldr	r2, [pc, #328]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006634:	4b50      	ldr	r3, [pc, #320]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	494d      	ldr	r1, [pc, #308]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d040      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d107      	bne.n	800666a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665a:	4b47      	ldr	r3, [pc, #284]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d115      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e07f      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006672:	4b41      	ldr	r3, [pc, #260]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e073      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006682:	4b3d      	ldr	r3, [pc, #244]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e06b      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006692:	4b39      	ldr	r3, [pc, #228]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f023 0203 	bic.w	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4936      	ldr	r1, [pc, #216]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a4:	f7fd fcb4 	bl	8004010 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ac:	f7fd fcb0 	bl	8004010 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e053      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 020c 	and.w	r2, r3, #12
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1eb      	bne.n	80066ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d4:	4b27      	ldr	r3, [pc, #156]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d210      	bcs.n	8006704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 0207 	bic.w	r2, r3, #7
 80066ea:	4922      	ldr	r1, [pc, #136]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b20      	ldr	r3, [pc, #128]	@ (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e032      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006710:	4b19      	ldr	r3, [pc, #100]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4916      	ldr	r1, [pc, #88]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800672e:	4b12      	ldr	r3, [pc, #72]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	490e      	ldr	r1, [pc, #56]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006742:	f000 f821 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 8006746:	4602      	mov	r2, r0
 8006748:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	490a      	ldr	r1, [pc, #40]	@ (800677c <HAL_RCC_ClockConfig+0x1c8>)
 8006754:	5ccb      	ldrb	r3, [r1, r3]
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	4a09      	ldr	r2, [pc, #36]	@ (8006780 <HAL_RCC_ClockConfig+0x1cc>)
 800675c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800675e:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <HAL_RCC_ClockConfig+0x1d0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fd fc12 	bl	8003f8c <HAL_InitTick>

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40022000 	.word	0x40022000
 8006778:	40021000 	.word	0x40021000
 800677c:	0800f444 	.word	0x0800f444
 8006780:	2000000c 	.word	0x2000000c
 8006784:	20000010 	.word	0x20000010

08006788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <HAL_RCC_GetSysClockFreq+0x94>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d002      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x30>
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d003      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x36>
 80067b6:	e027      	b.n	8006808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067b8:	4b19      	ldr	r3, [pc, #100]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x98>)
 80067ba:	613b      	str	r3, [r7, #16]
      break;
 80067bc:	e027      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	0c9b      	lsrs	r3, r3, #18
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	4a17      	ldr	r2, [pc, #92]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067c8:	5cd3      	ldrb	r3, [r2, r3]
 80067ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067d6:	4b11      	ldr	r3, [pc, #68]	@ (800681c <HAL_RCC_GetSysClockFreq+0x94>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	0c5b      	lsrs	r3, r3, #17
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	4a11      	ldr	r2, [pc, #68]	@ (8006828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80067e2:	5cd3      	ldrb	r3, [r2, r3]
 80067e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x98>)
 80067ea:	fb03 f202 	mul.w	r2, r3, r2
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e004      	b.n	8006802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0c      	ldr	r2, [pc, #48]	@ (800682c <HAL_RCC_GetSysClockFreq+0xa4>)
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	613b      	str	r3, [r7, #16]
      break;
 8006806:	e002      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006808:	4b05      	ldr	r3, [pc, #20]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x98>)
 800680a:	613b      	str	r3, [r7, #16]
      break;
 800680c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800680e:	693b      	ldr	r3, [r7, #16]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40021000 	.word	0x40021000
 8006820:	007a1200 	.word	0x007a1200
 8006824:	0800f454 	.word	0x0800f454
 8006828:	0800f464 	.word	0x0800f464
 800682c:	003d0900 	.word	0x003d0900

08006830 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006838:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <RCC_Delay+0x34>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0a      	ldr	r2, [pc, #40]	@ (8006868 <RCC_Delay+0x38>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	0a5b      	lsrs	r3, r3, #9
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800684c:	bf00      	nop
  }
  while (Delay --);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	60fa      	str	r2, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f9      	bne.n	800684c <RCC_Delay+0x1c>
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr
 8006864:	2000000c 	.word	0x2000000c
 8006868:	10624dd3 	.word	0x10624dd3

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d07d      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006888:	2300      	movs	r3, #0
 800688a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800688c:	4b4f      	ldr	r3, [pc, #316]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10d      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006898:	4b4c      	ldr	r3, [pc, #304]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	4a4b      	ldr	r2, [pc, #300]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	61d3      	str	r3, [r2, #28]
 80068a4:	4b49      	ldr	r3, [pc, #292]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b4:	4b46      	ldr	r3, [pc, #280]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d118      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068c0:	4b43      	ldr	r3, [pc, #268]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a42      	ldr	r2, [pc, #264]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068cc:	f7fd fba0 	bl	8004010 <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d2:	e008      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d4:	f7fd fb9c 	bl	8004010 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e06d      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e6:	4b3a      	ldr	r3, [pc, #232]	@ (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068f2:	4b36      	ldr	r3, [pc, #216]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d02e      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	429a      	cmp	r2, r3
 800690e:	d027      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006910:	4b2e      	ldr	r3, [pc, #184]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006918:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800691a:	4b2e      	ldr	r3, [pc, #184]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006920:	4b2c      	ldr	r3, [pc, #176]	@ (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006926:	4a29      	ldr	r2, [pc, #164]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d014      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006936:	f7fd fb6b 	bl	8004010 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fd fb67 	bl	8004010 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e036      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006954:	4b1d      	ldr	r3, [pc, #116]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ee      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006960:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	4917      	ldr	r1, [pc, #92]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800696e:	4313      	orrs	r3, r2
 8006970:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d105      	bne.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006982:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006990:	4b0e      	ldr	r3, [pc, #56]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	490b      	ldr	r1, [pc, #44]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069ae:	4b07      	ldr	r3, [pc, #28]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	4904      	ldr	r1, [pc, #16]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40007000 	.word	0x40007000
 80069d4:	42420440 	.word	0x42420440

080069d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	4638      	mov	r0, r7
 80069e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr

080069f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a02:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006a06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a26:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006a2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	4638      	mov	r0, r7
 8006a74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b09d      	sub	sp, #116	@ 0x74
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	78db      	ldrb	r3, [r3, #3]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d81f      	bhi.n	8006b16 <USB_ActivateEndpoint+0x72>
 8006ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8006adc <USB_ActivateEndpoint+0x38>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006aed 	.word	0x08006aed
 8006ae0:	08006b09 	.word	0x08006b09
 8006ae4:	08006b1f 	.word	0x08006b1f
 8006ae8:	08006afb 	.word	0x08006afb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006aec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006af0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006af4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006af8:	e012      	b.n	8006b20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006afa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006afe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006b02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006b06:	e00b      	b.n	8006b20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006b14:	e004      	b.n	8006b20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006b1c:	e000      	b.n	8006b20 <USB_ActivateEndpoint+0x7c>
      break;
 8006b1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	441a      	add	r2, r3
 8006b6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006b72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	7b1b      	ldrb	r3, [r3, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 8178 	bne.w	8006e80 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8084 	beq.w	8006ca2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	4413      	add	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	011a      	lsls	r2, r3, #4
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	827b      	strh	r3, [r7, #18]
 8006bdc:	8a7b      	ldrh	r3, [r7, #18]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01b      	beq.n	8006c1e <USB_ActivateEndpoint+0x17a>
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfc:	823b      	strh	r3, [r7, #16]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	441a      	add	r2, r3
 8006c08:	8a3b      	ldrh	r3, [r7, #16]
 8006c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	78db      	ldrb	r3, [r3, #3]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d020      	beq.n	8006c68 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c3c:	81bb      	strh	r3, [r7, #12]
 8006c3e:	89bb      	ldrh	r3, [r7, #12]
 8006c40:	f083 0320 	eor.w	r3, r3, #32
 8006c44:	81bb      	strh	r3, [r7, #12]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	89bb      	ldrh	r3, [r7, #12]
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]
 8006c66:	e2d5      	b.n	8007214 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c7e:	81fb      	strh	r3, [r7, #14]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	441a      	add	r2, r3
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
 8006c8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	8013      	strh	r3, [r2, #0]
 8006ca0:	e2b8      	b.n	8007214 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	4413      	add	r3, r2
 8006cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	011a      	lsls	r2, r3, #4
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	88db      	ldrh	r3, [r3, #6]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	4413      	add	r3, r2
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	011a      	lsls	r2, r3, #4
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d10:	d91d      	bls.n	8006d4e <USB_ActivateEndpoint+0x2aa>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d102      	bne.n	8006d2c <USB_ActivateEndpoint+0x288>
 8006d26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e026      	b.n	8006d9c <USB_ActivateEndpoint+0x2f8>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <USB_ActivateEndpoint+0x2c8>
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e017      	b.n	8006d9c <USB_ActivateEndpoint+0x2f8>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <USB_ActivateEndpoint+0x2e2>
 8006d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d82:	3301      	adds	r3, #1
 8006d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	029b      	lsls	r3, r3, #10
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	4313      	orrs	r3, r2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006daa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <USB_ActivateEndpoint+0x348>
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dca:	843b      	strh	r3, [r7, #32]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	8c3b      	ldrh	r3, [r7, #32]
 8006dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d124      	bne.n	8006e3e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e0a:	83bb      	strh	r3, [r7, #28]
 8006e0c:	8bbb      	ldrh	r3, [r7, #28]
 8006e0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e12:	83bb      	strh	r3, [r7, #28]
 8006e14:	8bbb      	ldrh	r3, [r7, #28]
 8006e16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e1a:	83bb      	strh	r3, [r7, #28]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8bbb      	ldrh	r3, [r7, #28]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
 8006e3c:	e1ea      	b.n	8007214 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e54:	83fb      	strh	r3, [r7, #30]
 8006e56:	8bfb      	ldrh	r3, [r7, #30]
 8006e58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e5c:	83fb      	strh	r3, [r7, #30]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	441a      	add	r2, r3
 8006e68:	8bfb      	ldrh	r3, [r7, #30]
 8006e6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	8013      	strh	r3, [r2, #0]
 8006e7e:	e1c9      	b.n	8007214 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	78db      	ldrb	r3, [r3, #3]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d11e      	bne.n	8006ec6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e9e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	441a      	add	r2, r3
 8006eac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
 8006ec4:	e01d      	b.n	8006f02 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006edc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	441a      	add	r2, r3
 8006eea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f12:	4413      	add	r3, r2
 8006f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	011a      	lsls	r2, r3, #4
 8006f1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	891b      	ldrh	r3, [r3, #8]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f46:	4413      	add	r3, r2
 8006f48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	011a      	lsls	r2, r3, #4
 8006f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006f58:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	895b      	ldrh	r3, [r3, #10]
 8006f5e:	085b      	lsrs	r3, r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f68:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f040 8093 	bne.w	800709a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006f84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006f88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01b      	beq.n	8006fc8 <USB_ActivateEndpoint+0x524>
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006fb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006fd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01b      	beq.n	8007018 <USB_ActivateEndpoint+0x574>
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	441a      	add	r2, r3
 8007002:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800700c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007010:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007014:	b29b      	uxth	r3, r3
 8007016:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800702a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007030:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007032:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007036:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007038:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800703a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800703e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800704c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007050:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800705c:	b29b      	uxth	r3, r3
 800705e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007076:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800708c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007094:	b29b      	uxth	r3, r3
 8007096:	8013      	strh	r3, [r2, #0]
 8007098:	e0bc      	b.n	8007214 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80070aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80070ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01d      	beq.n	80070f2 <USB_ActivateEndpoint+0x64e>
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070cc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80070de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007102:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01d      	beq.n	800714a <USB_ActivateEndpoint+0x6a6>
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007124:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007142:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	78db      	ldrb	r3, [r3, #3]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d024      	beq.n	800719c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007168:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800716c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007170:	f083 0320 	eor.w	r3, r3, #32
 8007174:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	441a      	add	r2, r3
 8007182:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
 800719a:	e01d      	b.n	80071d8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	441a      	add	r2, r3
 80071fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007210:	b29b      	uxth	r3, r3
 8007212:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007214:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007218:	4618      	mov	r0, r3
 800721a:	3774      	adds	r7, #116	@ 0x74
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop

08007224 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007224:	b480      	push	{r7}
 8007226:	b08d      	sub	sp, #52	@ 0x34
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	7b1b      	ldrb	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 808e 	bne.w	8007354 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d044      	beq.n	80072ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	81bb      	strh	r3, [r7, #12]
 800724e:	89bb      	ldrh	r3, [r7, #12]
 8007250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01b      	beq.n	8007290 <USB_DeactivateEndpoint+0x6c>
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800726a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726e:	817b      	strh	r3, [r7, #10]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	897b      	ldrh	r3, [r7, #10]
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007288:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	b29b      	uxth	r3, r3
 800729e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a6:	813b      	strh	r3, [r7, #8]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	441a      	add	r2, r3
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	8013      	strh	r3, [r2, #0]
 80072c8:	e192      	b.n	80075f0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	827b      	strh	r3, [r7, #18]
 80072d8:	8a7b      	ldrh	r3, [r7, #18]
 80072da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <USB_DeactivateEndpoint+0xf6>
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f8:	823b      	strh	r3, [r7, #16]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	441a      	add	r2, r3
 8007304:	8a3b      	ldrh	r3, [r7, #16]
 8007306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800730a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800730e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800732c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007330:	81fb      	strh	r3, [r7, #14]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	441a      	add	r2, r3
 800733c:	89fb      	ldrh	r3, [r7, #14]
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]
 8007352:	e14d      	b.n	80075f0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f040 80a5 	bne.w	80074a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	843b      	strh	r3, [r7, #32]
 800736c:	8c3b      	ldrh	r3, [r7, #32]
 800736e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <USB_DeactivateEndpoint+0x18a>
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800738c:	83fb      	strh	r3, [r7, #30]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	441a      	add	r2, r3
 8007398:	8bfb      	ldrh	r3, [r7, #30]
 800739a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800739e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	83bb      	strh	r3, [r7, #28]
 80073bc:	8bbb      	ldrh	r3, [r7, #28]
 80073be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d01b      	beq.n	80073fe <USB_DeactivateEndpoint+0x1da>
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073dc:	837b      	strh	r3, [r7, #26]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	441a      	add	r2, r3
 80073e8:	8b7b      	ldrh	r3, [r7, #26]
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	833b      	strh	r3, [r7, #24]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	8b3b      	ldrh	r3, [r7, #24]
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	82fb      	strh	r3, [r7, #22]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	441a      	add	r2, r3
 8007458:	8afb      	ldrh	r3, [r7, #22]
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007484:	82bb      	strh	r3, [r7, #20]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	441a      	add	r2, r3
 8007490:	8abb      	ldrh	r3, [r7, #20]
 8007492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800749a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800749e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	8013      	strh	r3, [r2, #0]
 80074a6:	e0a3      	b.n	80075f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80074b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80074b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01b      	beq.n	80074f8 <USB_DeactivateEndpoint+0x2d4>
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	441a      	add	r2, r3
 80074e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80074e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007506:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01b      	beq.n	8007548 <USB_DeactivateEndpoint+0x324>
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007526:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	441a      	add	r2, r3
 8007532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007540:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007544:	b29b      	uxth	r3, r3
 8007546:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800755a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	441a      	add	r2, r3
 800756a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800756c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800757c:	b29b      	uxth	r3, r3
 800757e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007596:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	441a      	add	r2, r3
 80075a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	441a      	add	r2, r3
 80075da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80075dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3734      	adds	r7, #52	@ 0x34
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b0c2      	sub	sp, #264	@ 0x108
 8007600:	af00      	add	r7, sp, #0
 8007602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760a:	6018      	str	r0, [r3, #0]
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b01      	cmp	r3, #1
 8007624:	f040 86b7 	bne.w	8008396 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	429a      	cmp	r2, r3
 8007642:	d908      	bls.n	8007656 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007654:	e007      	b.n	8007666 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	7b1b      	ldrb	r3, [r3, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d13a      	bne.n	80076ec <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6959      	ldr	r1, [r3, #20]
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	88da      	ldrh	r2, [r3, #6]
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007692:	b29b      	uxth	r3, r3
 8007694:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007698:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f001 fc9c 	bl	8008fda <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	011a      	lsls	r2, r3, #4
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	4413      	add	r3, r2
 80076d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	801a      	strh	r2, [r3, #0]
 80076e8:	f000 be1f 	b.w	800832a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	78db      	ldrb	r3, [r3, #3]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	f040 8462 	bne.w	8007fc2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80076fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	429a      	cmp	r2, r3
 8007718:	f240 83df 	bls.w	8007eda <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	441a      	add	r2, r3
 8007760:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800776c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007774:	b29b      	uxth	r3, r3
 8007776:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	1ad2      	subs	r2, r2, r3
 800778a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 81c7 	beq.w	8007b4c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	785b      	ldrb	r3, [r3, #1]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d177      	bne.n	80078ca <USB_EPStartXfer+0x2ce>
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fa:	4413      	add	r3, r2
 80077fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	011a      	lsls	r2, r3, #4
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	4413      	add	r3, r2
 8007810:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	b29b      	uxth	r3, r3
 800781c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007820:	b29a      	uxth	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	2b3e      	cmp	r3, #62	@ 0x3e
 800782c:	d921      	bls.n	8007872 <USB_EPStartXfer+0x276>
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <USB_EPStartXfer+0x252>
 8007844:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007848:	3b01      	subs	r3, #1
 800784a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	b29a      	uxth	r2, r3
 8007854:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007858:	b29b      	uxth	r3, r3
 800785a:	029b      	lsls	r3, r3, #10
 800785c:	b29b      	uxth	r3, r3
 800785e:	4313      	orrs	r3, r2
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e050      	b.n	8007914 <USB_EPStartXfer+0x318>
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <USB_EPStartXfer+0x294>
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e041      	b.n	8007914 <USB_EPStartXfer+0x318>
 8007890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800789a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d004      	beq.n	80078b0 <USB_EPStartXfer+0x2b4>
 80078a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80078aa:	3301      	adds	r3, #1
 80078ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	029b      	lsls	r3, r3, #10
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	e024      	b.n	8007914 <USB_EPStartXfer+0x318>
 80078ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d11c      	bne.n	8007914 <USB_EPStartXfer+0x318>
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ee:	4413      	add	r3, r2
 80078f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	011a      	lsls	r2, r3, #4
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	4413      	add	r3, r2
 8007904:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800790a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790e:	b29a      	uxth	r2, r3
 8007910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007912:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	895b      	ldrh	r3, [r3, #10]
 8007920:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6959      	ldr	r1, [r3, #20]
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007934:	b29b      	uxth	r3, r3
 8007936:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800793a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800793e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007942:	6800      	ldr	r0, [r0, #0]
 8007944:	f001 fb49 	bl	8008fda <USB_WritePMA>
            ep->xfer_buff += len;
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695a      	ldr	r2, [r3, #20]
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	441a      	add	r2, r3
 800795a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	429a      	cmp	r2, r3
 8007980:	d90f      	bls.n	80079a2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a1a      	ldr	r2, [r3, #32]
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	621a      	str	r2, [r3, #32]
 80079a0:	e00e      	b.n	80079c0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80079a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80079b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2200      	movs	r2, #0
 80079be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d177      	bne.n	8007ac0 <USB_EPStartXfer+0x4c4>
 80079d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	4413      	add	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	011a      	lsls	r2, r3, #4
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	4413      	add	r3, r2
 8007a06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a22:	d921      	bls.n	8007a68 <USB_EPStartXfer+0x46c>
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <USB_EPStartXfer+0x448>
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	029b      	lsls	r3, r3, #10
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4313      	orrs	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e056      	b.n	8007b16 <USB_EPStartXfer+0x51a>
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <USB_EPStartXfer+0x48a>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	e047      	b.n	8007b16 <USB_EPStartXfer+0x51a>
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <USB_EPStartXfer+0x4aa>
 8007a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e02a      	b.n	8007b16 <USB_EPStartXfer+0x51a>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d122      	bne.n	8007b16 <USB_EPStartXfer+0x51a>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	4413      	add	r3, r2
 8007af2:	623b      	str	r3, [r7, #32]
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	4413      	add	r3, r2
 8007b06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b0a:	61fb      	str	r3, [r7, #28]
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	891b      	ldrh	r3, [r3, #8]
 8007b22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6959      	ldr	r1, [r3, #20]
 8007b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b44:	6800      	ldr	r0, [r0, #0]
 8007b46:	f001 fa48 	bl	8008fda <USB_WritePMA>
 8007b4a:	e3ee      	b.n	800832a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d177      	bne.n	8007c4c <USB_EPStartXfer+0x650>
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b7c:	4413      	add	r3, r2
 8007b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	011a      	lsls	r2, r3, #4
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b90:	4413      	add	r3, r2
 8007b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bae:	d921      	bls.n	8007bf4 <USB_EPStartXfer+0x5f8>
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbe:	f003 031f 	and.w	r3, r3, #31
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <USB_EPStartXfer+0x5d4>
 8007bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	029b      	lsls	r3, r3, #10
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	e056      	b.n	8007ca2 <USB_EPStartXfer+0x6a6>
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <USB_EPStartXfer+0x616>
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	e047      	b.n	8007ca2 <USB_EPStartXfer+0x6a6>
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <USB_EPStartXfer+0x636>
 8007c28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	029b      	lsls	r3, r3, #10
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e02a      	b.n	8007ca2 <USB_EPStartXfer+0x6a6>
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d122      	bne.n	8007ca2 <USB_EPStartXfer+0x6a6>
 8007c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7c:	4413      	add	r3, r2
 8007c7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	011a      	lsls	r2, r3, #4
 8007c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c90:	4413      	add	r3, r2
 8007c92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	891b      	ldrh	r3, [r3, #8]
 8007cae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6959      	ldr	r1, [r3, #20]
 8007cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ccc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007cd0:	6800      	ldr	r0, [r0, #0]
 8007cd2:	f001 f982 	bl	8008fda <USB_WritePMA>
            ep->xfer_buff += len;
 8007cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce6:	441a      	add	r2, r3
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d90f      	bls.n	8007d30 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6a1a      	ldr	r2, [r3, #32]
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	1ad2      	subs	r2, r2, r3
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	621a      	str	r2, [r3, #32]
 8007d2e:	e00e      	b.n	8007d4e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d177      	bne.n	8007e5a <USB_EPStartXfer+0x85e>
 8007d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	461a      	mov	r2, r3
 8007d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8a:	4413      	add	r3, r2
 8007d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	011a      	lsls	r2, r3, #4
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	4413      	add	r3, r2
 8007da0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dba:	2b3e      	cmp	r3, #62	@ 0x3e
 8007dbc:	d921      	bls.n	8007e02 <USB_EPStartXfer+0x806>
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d104      	bne.n	8007dde <USB_EPStartXfer+0x7e2>
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	029b      	lsls	r3, r3, #10
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e050      	b.n	8007ea4 <USB_EPStartXfer+0x8a8>
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10a      	bne.n	8007e20 <USB_EPStartXfer+0x824>
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	e041      	b.n	8007ea4 <USB_EPStartXfer+0x8a8>
 8007e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <USB_EPStartXfer+0x844>
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	029b      	lsls	r3, r3, #10
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e56:	801a      	strh	r2, [r3, #0]
 8007e58:	e024      	b.n	8007ea4 <USB_EPStartXfer+0x8a8>
 8007e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d11c      	bne.n	8007ea4 <USB_EPStartXfer+0x8a8>
 8007e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e7e:	4413      	add	r3, r2
 8007e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	011a      	lsls	r2, r3, #4
 8007e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e92:	4413      	add	r3, r2
 8007e94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ea2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	895b      	ldrh	r3, [r3, #10]
 8007eb0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6959      	ldr	r1, [r3, #20]
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007ece:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	f001 f881 	bl	8008fda <USB_WritePMA>
 8007ed8:	e227      	b.n	800832a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f10:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	441a      	add	r2, r3
 8007f2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f66:	4413      	add	r3, r2
 8007f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	011a      	lsls	r2, r3, #4
 8007f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6959      	ldr	r1, [r3, #20]
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007fb2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007fb6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	f001 f80d 	bl	8008fda <USB_WritePMA>
 8007fc0:	e1b3      	b.n	800832a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6a1a      	ldr	r2, [r3, #32]
 8007fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 80c6 	beq.w	8008194 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800800c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	673b      	str	r3, [r7, #112]	@ 0x70
 8008014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d177      	bne.n	8008114 <USB_EPStartXfer+0xb18>
 8008024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008044:	4413      	add	r3, r2
 8008046:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	011a      	lsls	r2, r3, #4
 8008056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008058:	4413      	add	r3, r2
 800805a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800805e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800806a:	b29a      	uxth	r2, r3
 800806c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	2b3e      	cmp	r3, #62	@ 0x3e
 8008076:	d921      	bls.n	80080bc <USB_EPStartXfer+0xac0>
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008086:	f003 031f 	and.w	r3, r3, #31
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <USB_EPStartXfer+0xa9c>
 800808e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008092:	3b01      	subs	r3, #1
 8008094:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29a      	uxth	r2, r3
 800809e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4313      	orrs	r3, r2
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080b8:	801a      	strh	r2, [r3, #0]
 80080ba:	e050      	b.n	800815e <USB_EPStartXfer+0xb62>
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <USB_EPStartXfer+0xade>
 80080c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e041      	b.n	800815e <USB_EPStartXfer+0xb62>
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <USB_EPStartXfer+0xafe>
 80080f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80080f4:	3301      	adds	r3, #1
 80080f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80080fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008104:	b29b      	uxth	r3, r3
 8008106:	029b      	lsls	r3, r3, #10
 8008108:	b29b      	uxth	r3, r3
 800810a:	4313      	orrs	r3, r2
 800810c:	b29a      	uxth	r2, r3
 800810e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e024      	b.n	800815e <USB_EPStartXfer+0xb62>
 8008114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d11c      	bne.n	800815e <USB_EPStartXfer+0xb62>
 8008124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008138:	4413      	add	r3, r2
 800813a:	673b      	str	r3, [r7, #112]	@ 0x70
 800813c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	011a      	lsls	r2, r3, #4
 800814a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800814c:	4413      	add	r3, r2
 800814e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008152:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008158:	b29a      	uxth	r2, r3
 800815a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800815c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800815e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6959      	ldr	r1, [r3, #20]
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817e:	b29b      	uxth	r3, r3
 8008180:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008184:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008188:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f000 ff24 	bl	8008fda <USB_WritePMA>
 8008192:	e0ca      	b.n	800832a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d177      	bne.n	8008294 <USB_EPStartXfer+0xc98>
 80081a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081be:	b29b      	uxth	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081c4:	4413      	add	r3, r2
 80081c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	011a      	lsls	r2, r3, #4
 80081d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081d8:	4413      	add	r3, r2
 80081da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80081de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081ee:	801a      	strh	r2, [r3, #0]
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80081f6:	d921      	bls.n	800823c <USB_EPStartXfer+0xc40>
 80081f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008206:	f003 031f 	and.w	r3, r3, #31
 800820a:	2b00      	cmp	r3, #0
 800820c:	d104      	bne.n	8008218 <USB_EPStartXfer+0xc1c>
 800820e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008212:	3b01      	subs	r3, #1
 8008214:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008218:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008234:	b29a      	uxth	r2, r3
 8008236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	e05c      	b.n	80082f6 <USB_EPStartXfer+0xcfa>
 800823c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <USB_EPStartXfer+0xc5e>
 8008244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008252:	b29a      	uxth	r2, r3
 8008254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e04d      	b.n	80082f6 <USB_EPStartXfer+0xcfa>
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <USB_EPStartXfer+0xc7e>
 8008270:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008274:	3301      	adds	r3, #1
 8008276:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800827a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29a      	uxth	r2, r3
 8008280:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008284:	b29b      	uxth	r3, r3
 8008286:	029b      	lsls	r3, r3, #10
 8008288:	b29b      	uxth	r3, r3
 800828a:	4313      	orrs	r3, r2
 800828c:	b29a      	uxth	r2, r3
 800828e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e030      	b.n	80082f6 <USB_EPStartXfer+0xcfa>
 8008294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d128      	bne.n	80082f6 <USB_EPStartXfer+0xcfa>
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082c8:	4413      	add	r3, r2
 80082ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	011a      	lsls	r2, r3, #4
 80082dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e0:	4413      	add	r3, r2
 80082e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80082f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	891b      	ldrh	r3, [r3, #8]
 8008302:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6959      	ldr	r1, [r3, #20]
 8008312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008316:	b29b      	uxth	r3, r3
 8008318:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800831c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008320:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008324:	6800      	ldr	r0, [r0, #0]
 8008326:	f000 fe58 	bl	8008fda <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800832a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800834c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008350:	817b      	strh	r3, [r7, #10]
 8008352:	897b      	ldrh	r3, [r7, #10]
 8008354:	f083 0310 	eor.w	r3, r3, #16
 8008358:	817b      	strh	r3, [r7, #10]
 800835a:	897b      	ldrh	r3, [r7, #10]
 800835c:	f083 0320 	eor.w	r3, r3, #32
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	441a      	add	r2, r3
 800837c:	897b      	ldrh	r3, [r7, #10]
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800838a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
 8008392:	f000 bcde 	b.w	8008d52 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	7b1b      	ldrb	r3, [r3, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 80bb 	bne.w	800851e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80083a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	699a      	ldr	r2, [r3, #24]
 80083b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d917      	bls.n	80083f4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	619a      	str	r2, [r3, #24]
 80083f2:	e00e      	b.n	8008412 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80083f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800842e:	b29b      	uxth	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008436:	4413      	add	r3, r2
 8008438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800843c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	011a      	lsls	r2, r3, #4
 800844a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800844e:	4413      	add	r3, r2
 8008450:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008464:	b29a      	uxth	r2, r3
 8008466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008470:	2b3e      	cmp	r3, #62	@ 0x3e
 8008472:	d924      	bls.n	80084be <USB_EPStartXfer+0xec2>
 8008474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800847e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <USB_EPStartXfer+0xe98>
 800848a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800848e:	3b01      	subs	r3, #1
 8008490:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29a      	uxth	r2, r3
 800849c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	029b      	lsls	r3, r3, #10
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4313      	orrs	r3, r2
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084b8:	801a      	strh	r2, [r3, #0]
 80084ba:	f000 bc10 	b.w	8008cde <USB_EPStartXfer+0x16e2>
 80084be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10c      	bne.n	80084e0 <USB_EPStartXfer+0xee4>
 80084c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e3fe      	b.n	8008cde <USB_EPStartXfer+0x16e2>
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d004      	beq.n	8008500 <USB_EPStartXfer+0xf04>
 80084f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80084fa:	3301      	adds	r3, #1
 80084fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29a      	uxth	r2, r3
 8008508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800850c:	b29b      	uxth	r3, r3
 800850e:	029b      	lsls	r3, r3, #10
 8008510:	b29b      	uxth	r3, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	e3df      	b.n	8008cde <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800851e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	2b02      	cmp	r3, #2
 800852c:	f040 8218 	bne.w	8008960 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 809d 	bne.w	800867c <USB_EPStartXfer+0x1080>
 8008542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800855e:	b29b      	uxth	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008566:	4413      	add	r3, r2
 8008568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800856c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	011a      	lsls	r2, r3, #4
 800857a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800857e:	4413      	add	r3, r2
 8008580:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	b29b      	uxth	r3, r3
 8008590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008594:	b29a      	uxth	r2, r3
 8008596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80085aa:	d92b      	bls.n	8008604 <USB_EPStartXfer+0x1008>
 80085ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <USB_EPStartXfer+0xfe0>
 80085d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d6:	3b01      	subs	r3, #1
 80085d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e070      	b.n	80086e6 <USB_EPStartXfer+0x10ea>
 8008604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10c      	bne.n	800862e <USB_EPStartXfer+0x1032>
 8008614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008624:	b29a      	uxth	r2, r3
 8008626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800862a:	801a      	strh	r2, [r3, #0]
 800862c:	e05b      	b.n	80086e6 <USB_EPStartXfer+0x10ea>
 800862e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <USB_EPStartXfer+0x1062>
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008658:	3301      	adds	r3, #1
 800865a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800865e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29a      	uxth	r2, r3
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866a:	b29b      	uxth	r3, r3
 800866c:	029b      	lsls	r3, r3, #10
 800866e:	b29b      	uxth	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	e034      	b.n	80086e6 <USB_EPStartXfer+0x10ea>
 800867c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d12c      	bne.n	80086e6 <USB_EPStartXfer+0x10ea>
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086b0:	4413      	add	r3, r2
 80086b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	011a      	lsls	r2, r3, #4
 80086c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80086ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	b29a      	uxth	r2, r3
 80086e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 809d 	bne.w	8008840 <USB_EPStartXfer+0x1244>
 8008706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008722:	b29b      	uxth	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800872a:	4413      	add	r3, r2
 800872c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	011a      	lsls	r2, r3, #4
 800873e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008742:	4413      	add	r3, r2
 8008744:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800874c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008758:	b29a      	uxth	r2, r3
 800875a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b3e      	cmp	r3, #62	@ 0x3e
 800876e:	d92b      	bls.n	80087c8 <USB_EPStartXfer+0x11cc>
 8008770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <USB_EPStartXfer+0x11a4>
 8008796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800879a:	3b01      	subs	r3, #1
 800879c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	029b      	lsls	r3, r3, #10
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	4313      	orrs	r3, r2
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e069      	b.n	800889c <USB_EPStartXfer+0x12a0>
 80087c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10c      	bne.n	80087f2 <USB_EPStartXfer+0x11f6>
 80087d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e054      	b.n	800889c <USB_EPStartXfer+0x12a0>
 80087f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <USB_EPStartXfer+0x1226>
 8008818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881c:	3301      	adds	r3, #1
 800881e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008822:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29a      	uxth	r2, r3
 800882a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882e:	b29b      	uxth	r3, r3
 8008830:	029b      	lsls	r3, r3, #10
 8008832:	b29b      	uxth	r3, r3
 8008834:	4313      	orrs	r3, r2
 8008836:	b29a      	uxth	r2, r3
 8008838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e02d      	b.n	800889c <USB_EPStartXfer+0x12a0>
 8008840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d125      	bne.n	800889c <USB_EPStartXfer+0x12a0>
 8008850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800885e:	b29b      	uxth	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008866:	4413      	add	r3, r2
 8008868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800886c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	011a      	lsls	r2, r3, #4
 800887a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800887e:	4413      	add	r3, r2
 8008880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800889a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800889c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8218 	beq.w	8008cde <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80088ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <USB_EPStartXfer+0x12ea>
 80088da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10d      	bne.n	8008902 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f040 81f5 	bne.w	8008cde <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80088f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80088f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 81ee 	bne.w	8008cde <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008928:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800892c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800893a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	441a      	add	r2, r3
 8008946:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800894a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800894e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008956:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800895a:	b29b      	uxth	r3, r3
 800895c:	8013      	strh	r3, [r2, #0]
 800895e:	e1be      	b.n	8008cde <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	78db      	ldrb	r3, [r3, #3]
 800896c:	2b01      	cmp	r3, #1
 800896e:	f040 81b4 	bne.w	8008cda <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	429a      	cmp	r2, r3
 800898c:	d917      	bls.n	80089be <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	619a      	str	r2, [r3, #24]
 80089bc:	e00e      	b.n	80089dc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80089be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80089ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80089dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f040 8085 	bne.w	8008af8 <USB_EPStartXfer+0x14fc>
 80089ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a12:	4413      	add	r3, r2
 8008a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	011a      	lsls	r2, r3, #4
 8008a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a46:	801a      	strh	r2, [r3, #0]
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a4e:	d923      	bls.n	8008a98 <USB_EPStartXfer+0x149c>
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d104      	bne.n	8008a70 <USB_EPStartXfer+0x1474>
 8008a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	e060      	b.n	8008b5a <USB_EPStartXfer+0x155e>
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10c      	bne.n	8008aba <USB_EPStartXfer+0x14be>
 8008aa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e04f      	b.n	8008b5a <USB_EPStartXfer+0x155e>
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <USB_EPStartXfer+0x14de>
 8008ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	029b      	lsls	r3, r3, #10
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	4313      	orrs	r3, r2
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008af4:	801a      	strh	r2, [r3, #0]
 8008af6:	e030      	b.n	8008b5a <USB_EPStartXfer+0x155e>
 8008af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	785b      	ldrb	r3, [r3, #1]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d128      	bne.n	8008b5a <USB_EPStartXfer+0x155e>
 8008b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	011a      	lsls	r2, r3, #4
 8008b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008b58:	801a      	strh	r2, [r3, #0]
 8008b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f040 8085 	bne.w	8008c84 <USB_EPStartXfer+0x1688>
 8008b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	011a      	lsls	r2, r3, #4
 8008bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bda:	d923      	bls.n	8008c24 <USB_EPStartXfer+0x1628>
 8008bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be0:	095b      	lsrs	r3, r3, #5
 8008be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bea:	f003 031f 	and.w	r3, r3, #31
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d104      	bne.n	8008bfc <USB_EPStartXfer+0x1600>
 8008bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	029b      	lsls	r3, r3, #10
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	e05c      	b.n	8008cde <USB_EPStartXfer+0x16e2>
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <USB_EPStartXfer+0x164a>
 8008c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	e04b      	b.n	8008cde <USB_EPStartXfer+0x16e2>
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4a:	085b      	lsrs	r3, r3, #1
 8008c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c54:	f003 0301 	and.w	r3, r3, #1
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <USB_EPStartXfer+0x166a>
 8008c5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c60:	3301      	adds	r3, #1
 8008c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	029b      	lsls	r3, r3, #10
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c80:	801a      	strh	r2, [r3, #0]
 8008c82:	e02c      	b.n	8008cde <USB_EPStartXfer+0x16e2>
 8008c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d124      	bne.n	8008cde <USB_EPStartXfer+0x16e2>
 8008c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008caa:	4413      	add	r3, r2
 8008cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	011a      	lsls	r2, r3, #4
 8008cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008cd6:	801a      	strh	r2, [r3, #0]
 8008cd8:	e001      	b.n	8008cde <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e03a      	b.n	8008d54 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	441a      	add	r2, r3
 8008d3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	785b      	ldrb	r3, [r3, #1]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d020      	beq.n	8008db2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d86:	81bb      	strh	r3, [r7, #12]
 8008d88:	89bb      	ldrh	r3, [r7, #12]
 8008d8a:	f083 0310 	eor.w	r3, r3, #16
 8008d8e:	81bb      	strh	r3, [r7, #12]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	89bb      	ldrh	r3, [r7, #12]
 8008d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	8013      	strh	r3, [r2, #0]
 8008db0:	e01f      	b.n	8008df2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc8:	81fb      	strh	r3, [r7, #14]
 8008dca:	89fb      	ldrh	r3, [r7, #14]
 8008dcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008dd0:	81fb      	strh	r3, [r7, #14]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	441a      	add	r2, r3
 8008ddc:	89fb      	ldrh	r3, [r7, #14]
 8008dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b087      	sub	sp, #28
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	7b1b      	ldrb	r3, [r3, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f040 809d 	bne.w	8008f4c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d04c      	beq.n	8008eb4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	823b      	strh	r3, [r7, #16]
 8008e28:	8a3b      	ldrh	r3, [r7, #16]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d01b      	beq.n	8008e6a <USB_EPClearStall+0x6c>
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e48:	81fb      	strh	r3, [r7, #14]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	441a      	add	r2, r3
 8008e54:	89fb      	ldrh	r3, [r7, #14]
 8008e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d06c      	beq.n	8008f4c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e88:	81bb      	strh	r3, [r7, #12]
 8008e8a:	89bb      	ldrh	r3, [r7, #12]
 8008e8c:	f083 0320 	eor.w	r3, r3, #32
 8008e90:	81bb      	strh	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	441a      	add	r2, r3
 8008e9c:	89bb      	ldrh	r3, [r7, #12]
 8008e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]
 8008eb2:	e04b      	b.n	8008f4c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	82fb      	strh	r3, [r7, #22]
 8008ec2:	8afb      	ldrh	r3, [r7, #22]
 8008ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <USB_EPClearStall+0x106>
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee2:	82bb      	strh	r3, [r7, #20]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	8abb      	ldrh	r3, [r7, #20]
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1a:	827b      	strh	r3, [r7, #18]
 8008f1c:	8a7b      	ldrh	r3, [r7, #18]
 8008f1e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f22:	827b      	strh	r3, [r7, #18]
 8008f24:	8a7b      	ldrh	r3, [r7, #18]
 8008f26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f2a:	827b      	strh	r3, [r7, #18]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	8a7b      	ldrh	r3, [r7, #18]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr

08008f58 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2280      	movs	r2, #128	@ 0x80
 8008f6e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr

08008f92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bc80      	pop	{r7}
 8008fd8:	4770      	bx	lr

08008fda <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b08b      	sub	sp, #44	@ 0x2c
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	460b      	mov	r3, r1
 8008fea:	80fb      	strh	r3, [r7, #6]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ff0:	88bb      	ldrh	r3, [r7, #4]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	085b      	lsrs	r3, r3, #1
 8008ff6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	005a      	lsls	r2, r3, #1
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800900c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
 8009012:	e01f      	b.n	8009054 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	3301      	adds	r3, #1
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	b21b      	sxth	r3, r3
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	b21a      	sxth	r2, r3
 8009026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800902a:	4313      	orrs	r3, r2
 800902c:	b21b      	sxth	r3, r3
 800902e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	8a7a      	ldrh	r2, [r7, #18]
 8009034:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	3302      	adds	r3, #2
 800903a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	3302      	adds	r3, #2
 8009040:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	3301      	adds	r3, #1
 8009046:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	3301      	adds	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	3b01      	subs	r3, #1
 8009052:	627b      	str	r3, [r7, #36]	@ 0x24
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1dc      	bne.n	8009014 <USB_WritePMA+0x3a>
  }
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	372c      	adds	r7, #44	@ 0x2c
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009066:	b480      	push	{r7}
 8009068:	b08b      	sub	sp, #44	@ 0x2c
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	4611      	mov	r1, r2
 8009072:	461a      	mov	r2, r3
 8009074:	460b      	mov	r3, r1
 8009076:	80fb      	strh	r3, [r7, #6]
 8009078:	4613      	mov	r3, r2
 800907a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800907c:	88bb      	ldrh	r3, [r7, #4]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800908c:	88fb      	ldrh	r3, [r7, #6]
 800908e:	005a      	lsls	r2, r3, #1
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009098:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	627b      	str	r3, [r7, #36]	@ 0x24
 800909e:	e01b      	b.n	80090d8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	3302      	adds	r3, #2
 80090ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	3301      	adds	r3, #1
 80090ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	3301      	adds	r3, #1
 80090ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	3302      	adds	r3, #2
 80090d0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	3b01      	subs	r3, #1
 80090d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e0      	bne.n	80090a0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80090de:	88bb      	ldrh	r3, [r7, #4]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	701a      	strb	r2, [r3, #0]
  }
}
 80090fa:	bf00      	nop
 80090fc:	372c      	adds	r7, #44	@ 0x2c
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr

08009104 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	7c1b      	ldrb	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d115      	bne.n	8009148 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800911c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009120:	2202      	movs	r2, #2
 8009122:	2181      	movs	r1, #129	@ 0x81
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 ffca 	bl	800b0be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009130:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009134:	2202      	movs	r2, #2
 8009136:	2101      	movs	r1, #1
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 ffc0 	bl	800b0be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009146:	e012      	b.n	800916e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009148:	2340      	movs	r3, #64	@ 0x40
 800914a:	2202      	movs	r2, #2
 800914c:	2181      	movs	r1, #129	@ 0x81
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 ffb5 	bl	800b0be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800915a:	2340      	movs	r3, #64	@ 0x40
 800915c:	2202      	movs	r2, #2
 800915e:	2101      	movs	r1, #1
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 ffac 	bl	800b0be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800916e:	2308      	movs	r3, #8
 8009170:	2203      	movs	r2, #3
 8009172:	2182      	movs	r1, #130	@ 0x82
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 ffa2 	bl	800b0be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009180:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009184:	f002 f8c2 	bl	800b30c <USBD_static_malloc>
 8009188:	4602      	mov	r2, r0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d102      	bne.n	80091a0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e026      	b.n	80091ee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7c1b      	ldrb	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091d4:	2101      	movs	r1, #1
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f002 f861 	bl	800b29e <USBD_LL_PrepareReceive>
 80091dc:	e007      	b.n	80091ee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091e4:	2340      	movs	r3, #64	@ 0x40
 80091e6:	2101      	movs	r1, #1
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f002 f858 	bl	800b29e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009208:	2181      	movs	r1, #129	@ 0x81
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 ff7d 	bl	800b10a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009216:	2101      	movs	r1, #1
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f001 ff76 	bl	800b10a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009226:	2182      	movs	r1, #130	@ 0x82
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 ff6e 	bl	800b10a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00e      	beq.n	800925c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924e:	4618      	mov	r0, r3
 8009250:	f002 f868 	bl	800b324 <USBD_static_free>
    pdev->pClassData = NULL;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b086      	sub	sp, #24
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009276:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800928c:	2b00      	cmp	r3, #0
 800928e:	d039      	beq.n	8009304 <USBD_CDC_Setup+0x9e>
 8009290:	2b20      	cmp	r3, #32
 8009292:	d17f      	bne.n	8009394 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d029      	beq.n	80092f0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b25b      	sxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da11      	bge.n	80092ca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80092b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	88d2      	ldrh	r2, [r2, #6]
 80092b8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092ba:	6939      	ldr	r1, [r7, #16]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	88db      	ldrh	r3, [r3, #6]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 fa06 	bl	800a6d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80092c8:	e06b      	b.n	80093a2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	785a      	ldrb	r2, [r3, #1]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092e0:	6939      	ldr	r1, [r7, #16]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	88db      	ldrh	r3, [r3, #6]
 80092e6:	461a      	mov	r2, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fa21 	bl	800a730 <USBD_CtlPrepareRx>
      break;
 80092ee:	e058      	b.n	80093a2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	7850      	ldrb	r0, [r2, #1]
 80092fc:	2200      	movs	r2, #0
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	4798      	blx	r3
      break;
 8009302:	e04e      	b.n	80093a2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b0b      	cmp	r3, #11
 800930a:	d02e      	beq.n	800936a <USBD_CDC_Setup+0x104>
 800930c:	2b0b      	cmp	r3, #11
 800930e:	dc38      	bgt.n	8009382 <USBD_CDC_Setup+0x11c>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <USBD_CDC_Setup+0xb4>
 8009314:	2b0a      	cmp	r3, #10
 8009316:	d014      	beq.n	8009342 <USBD_CDC_Setup+0xdc>
 8009318:	e033      	b.n	8009382 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009320:	2b03      	cmp	r3, #3
 8009322:	d107      	bne.n	8009334 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009324:	f107 030c 	add.w	r3, r7, #12
 8009328:	2202      	movs	r2, #2
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f9d1 	bl	800a6d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009332:	e02e      	b.n	8009392 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 f962 	bl	800a600 <USBD_CtlError>
            ret = USBD_FAIL;
 800933c:	2302      	movs	r3, #2
 800933e:	75fb      	strb	r3, [r7, #23]
          break;
 8009340:	e027      	b.n	8009392 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009348:	2b03      	cmp	r3, #3
 800934a:	d107      	bne.n	800935c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800934c:	f107 030f 	add.w	r3, r7, #15
 8009350:	2201      	movs	r2, #1
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 f9bd 	bl	800a6d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800935a:	e01a      	b.n	8009392 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 f94e 	bl	800a600 <USBD_CtlError>
            ret = USBD_FAIL;
 8009364:	2302      	movs	r3, #2
 8009366:	75fb      	strb	r3, [r7, #23]
          break;
 8009368:	e013      	b.n	8009392 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	2b03      	cmp	r3, #3
 8009372:	d00d      	beq.n	8009390 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 f942 	bl	800a600 <USBD_CtlError>
            ret = USBD_FAIL;
 800937c:	2302      	movs	r3, #2
 800937e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009380:	e006      	b.n	8009390 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f93b 	bl	800a600 <USBD_CtlError>
          ret = USBD_FAIL;
 800938a:	2302      	movs	r3, #2
 800938c:	75fb      	strb	r3, [r7, #23]
          break;
 800938e:	e000      	b.n	8009392 <USBD_CDC_Setup+0x12c>
          break;
 8009390:	bf00      	nop
      }
      break;
 8009392:	e006      	b.n	80093a2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f932 	bl	800a600 <USBD_CtlError>
      ret = USBD_FAIL;
 800939c:	2302      	movs	r3, #2
 800939e:	75fb      	strb	r3, [r7, #23]
      break;
 80093a0:	bf00      	nop
  }

  return ret;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093c6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d03a      	beq.n	8009448 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	331c      	adds	r3, #28
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d029      	beq.n	800943c <USBD_CDC_DataIn+0x90>
 80093e8:	78fa      	ldrb	r2, [r7, #3]
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	331c      	adds	r3, #28
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	78f9      	ldrb	r1, [r7, #3]
 80093fc:	68b8      	ldr	r0, [r7, #8]
 80093fe:	460b      	mov	r3, r1
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	4403      	add	r3, r0
 8009408:	3320      	adds	r3, #32
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009410:	fb01 f303 	mul.w	r3, r1, r3
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d110      	bne.n	800943c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	331c      	adds	r3, #28
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800942e:	78f9      	ldrb	r1, [r7, #3]
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 ff0f 	bl	800b258 <USBD_LL_Transmit>
 800943a:	e003      	b.n	8009444 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	e000      	b.n	800944a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009448:	2302      	movs	r3, #2
  }
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009464:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 ff3a 	bl	800b2e4 <USBD_LL_GetRxDataSize>
 8009470:	4602      	mov	r2, r0
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00d      	beq.n	800949e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009496:	4611      	mov	r1, r2
 8009498:	4798      	blx	r3

    return USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e000      	b.n	80094a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800949e:	2302      	movs	r3, #2
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d014      	beq.n	80094ec <USBD_CDC_EP0_RxReady+0x44>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80094c8:	2bff      	cmp	r3, #255	@ 0xff
 80094ca:	d00f      	beq.n	80094ec <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80094da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	22ff      	movs	r2, #255	@ 0xff
 80094e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2243      	movs	r2, #67	@ 0x43
 8009504:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009506:	4b03      	ldr	r3, [pc, #12]	@ (8009514 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	200000a0 	.word	0x200000a0

08009518 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2243      	movs	r2, #67	@ 0x43
 8009524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009526:	4b03      	ldr	r3, [pc, #12]	@ (8009534 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	2000005c 	.word	0x2000005c

08009538 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2243      	movs	r2, #67	@ 0x43
 8009544:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009546:	4b03      	ldr	r3, [pc, #12]	@ (8009554 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	bc80      	pop	{r7}
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	200000e4 	.word	0x200000e4

08009558 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	220a      	movs	r2, #10
 8009564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009566:	4b03      	ldr	r3, [pc, #12]	@ (8009574 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20000018 	.word	0x20000018

08009578 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009582:	2302      	movs	r3, #2
 8009584:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d005      	beq.n	8009598 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr

080095a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b087      	sub	sp, #28
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	371c      	adds	r7, #28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr

080095d6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800960a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01c      	beq.n	8009650 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800961c:	2b00      	cmp	r3, #0
 800961e:	d115      	bne.n	800964c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800963e:	b29b      	uxth	r3, r3
 8009640:	2181      	movs	r1, #129	@ 0x81
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 fe08 	bl	800b258 <USBD_LL_Transmit>

      return USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e002      	b.n	8009652 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009650:	2302      	movs	r3, #2
  }
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009668:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d017      	beq.n	80096a4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	7c1b      	ldrb	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d109      	bne.n	8009690 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009686:	2101      	movs	r1, #1
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 fe08 	bl	800b29e <USBD_LL_PrepareReceive>
 800968e:	e007      	b.n	80096a0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009696:	2340      	movs	r3, #64	@ 0x40
 8009698:	2101      	movs	r1, #1
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fdff 	bl	800b29e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	4613      	mov	r3, r2
 80096ba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096c2:	2302      	movs	r3, #2
 80096c4:	e01a      	b.n	80096fc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	79fa      	ldrb	r2, [r7, #7]
 80096f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f001 fc6d 	bl	800afd4 <USBD_LL_Init>

  return USBD_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d006      	beq.n	8009726 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
 8009724:	e001      	b.n	800972a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 fca2 	bl	800b088 <USBD_LL_Start>

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr

08009762 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800976e:	2302      	movs	r3, #2
 8009770:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00c      	beq.n	8009796 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	4611      	mov	r1, r2
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	78fa      	ldrb	r2, [r7, #3]
 80097b6:	4611      	mov	r1, r2
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	4798      	blx	r3

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fed8 	bl	800a58e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097ec:	461a      	mov	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80097fa:	f003 031f 	and.w	r3, r3, #31
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d016      	beq.n	8009830 <USBD_LL_SetupStage+0x6a>
 8009802:	2b02      	cmp	r3, #2
 8009804:	d81c      	bhi.n	8009840 <USBD_LL_SetupStage+0x7a>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <USBD_LL_SetupStage+0x4a>
 800980a:	2b01      	cmp	r3, #1
 800980c:	d008      	beq.n	8009820 <USBD_LL_SetupStage+0x5a>
 800980e:	e017      	b.n	8009840 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f9cb 	bl	8009bb4 <USBD_StdDevReq>
      break;
 800981e:	e01a      	b.n	8009856 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fa2d 	bl	8009c88 <USBD_StdItfReq>
      break;
 800982e:	e012      	b.n	8009856 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fa6d 	bl	8009d18 <USBD_StdEPReq>
      break;
 800983e:	e00a      	b.n	8009856 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009846:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800984a:	b2db      	uxtb	r3, r3
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 fc7a 	bl	800b148 <USBD_LL_StallEP>
      break;
 8009854:	bf00      	nop
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3708      	adds	r7, #8
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	460b      	mov	r3, r1
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d14b      	bne.n	800990c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800987a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009882:	2b03      	cmp	r3, #3
 8009884:	d134      	bne.n	80098f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	429a      	cmp	r2, r3
 8009890:	d919      	bls.n	80098c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d203      	bcs.n	80098b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	e002      	b.n	80098ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	461a      	mov	r2, r3
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 ff54 	bl	800a76c <USBD_CtlContinueRx>
 80098c4:	e038      	b.n	8009938 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00a      	beq.n	80098e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d105      	bne.n	80098e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 ff51 	bl	800a790 <USBD_CtlSendStatus>
 80098ee:	e023      	b.n	8009938 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	d11e      	bne.n	8009938 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009902:	2100      	movs	r1, #0
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f001 fc1f 	bl	800b148 <USBD_LL_StallEP>
 800990a:	e015      	b.n	8009938 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00d      	beq.n	8009934 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800991e:	2b03      	cmp	r3, #3
 8009920:	d108      	bne.n	8009934 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	7afa      	ldrb	r2, [r7, #11]
 800992c:	4611      	mov	r1, r2
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	4798      	blx	r3
 8009932:	e001      	b.n	8009938 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009934:	2302      	movs	r3, #2
 8009936:	e000      	b.n	800993a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	460b      	mov	r3, r1
 800994c:	607a      	str	r2, [r7, #4]
 800994e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d17f      	bne.n	8009a56 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3314      	adds	r3, #20
 800995a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009962:	2b02      	cmp	r3, #2
 8009964:	d15c      	bne.n	8009a20 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d915      	bls.n	800999e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	1ad2      	subs	r2, r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	b29b      	uxth	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 febe 	bl	800a70c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009990:	2300      	movs	r3, #0
 8009992:	2200      	movs	r2, #0
 8009994:	2100      	movs	r1, #0
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f001 fc81 	bl	800b29e <USBD_LL_PrepareReceive>
 800999c:	e04e      	b.n	8009a3c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	6912      	ldr	r2, [r2, #16]
 80099a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80099aa:	fb01 f202 	mul.w	r2, r1, r2
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11c      	bne.n	80099ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099bc:	429a      	cmp	r2, r3
 80099be:	d316      	bcc.n	80099ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d20f      	bcs.n	80099ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fe9a 	bl	800a70c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099e0:	2300      	movs	r3, #0
 80099e2:	2200      	movs	r2, #0
 80099e4:	2100      	movs	r1, #0
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f001 fc59 	bl	800b29e <USBD_LL_PrepareReceive>
 80099ec:	e026      	b.n	8009a3c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00a      	beq.n	8009a10 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d105      	bne.n	8009a10 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a10:	2180      	movs	r1, #128	@ 0x80
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f001 fb98 	bl	800b148 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fecc 	bl	800a7b6 <USBD_CtlReceiveStatus>
 8009a1e:	e00d      	b.n	8009a3c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d004      	beq.n	8009a34 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d103      	bne.n	8009a3c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a34:	2180      	movs	r1, #128	@ 0x80
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f001 fb86 	bl	800b148 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d11d      	bne.n	8009a82 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7ff fe81 	bl	800974e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a54:	e015      	b.n	8009a82 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00d      	beq.n	8009a7e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d108      	bne.n	8009a7e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	7afa      	ldrb	r2, [r7, #11]
 8009a76:	4611      	mov	r1, r2
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	4798      	blx	r3
 8009a7c:	e001      	b.n	8009a82 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e000      	b.n	8009a84 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a94:	2340      	movs	r3, #64	@ 0x40
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fb0f 	bl	800b0be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2240      	movs	r2, #64	@ 0x40
 8009aac:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ab0:	2340      	movs	r3, #64	@ 0x40
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2180      	movs	r1, #128	@ 0x80
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 fb01 	bl	800b0be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2240      	movs	r2, #64	@ 0x40
 8009ac6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d009      	beq.n	8009b04 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6852      	ldr	r2, [r2, #4]
 8009afc:	b2d2      	uxtb	r2, r2
 8009afe:	4611      	mov	r1, r2
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	4798      	blx	r3
  }

  return USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b083      	sub	sp, #12
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bc80      	pop	{r7}
 8009b2a:	4770      	bx	lr

08009b2c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2204      	movs	r2, #4
 8009b44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr

08009b54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d105      	bne.n	8009b72 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr

08009b7e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d10b      	bne.n	8009ba8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
	...

08009bb4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bca:	2b40      	cmp	r3, #64	@ 0x40
 8009bcc:	d005      	beq.n	8009bda <USBD_StdDevReq+0x26>
 8009bce:	2b40      	cmp	r3, #64	@ 0x40
 8009bd0:	d84f      	bhi.n	8009c72 <USBD_StdDevReq+0xbe>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <USBD_StdDevReq+0x36>
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d14b      	bne.n	8009c72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
      break;
 8009be8:	e048      	b.n	8009c7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d839      	bhi.n	8009c66 <USBD_StdDevReq+0xb2>
 8009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf8 <USBD_StdDevReq+0x44>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c49 	.word	0x08009c49
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	08009c67 	.word	0x08009c67
 8009c04:	08009c53 	.word	0x08009c53
 8009c08:	08009c67 	.word	0x08009c67
 8009c0c:	08009c2b 	.word	0x08009c2b
 8009c10:	08009c21 	.word	0x08009c21
 8009c14:	08009c67 	.word	0x08009c67
 8009c18:	08009c3f 	.word	0x08009c3f
 8009c1c:	08009c35 	.word	0x08009c35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f9dc 	bl	8009fe0 <USBD_GetDescriptor>
          break;
 8009c28:	e022      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c2a:	6839      	ldr	r1, [r7, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fb3f 	bl	800a2b0 <USBD_SetAddress>
          break;
 8009c32:	e01d      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fb7e 	bl	800a338 <USBD_SetConfig>
          break;
 8009c3c:	e018      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fc07 	bl	800a454 <USBD_GetConfig>
          break;
 8009c46:	e013      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fc37 	bl	800a4be <USBD_GetStatus>
          break;
 8009c50:	e00e      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fc65 	bl	800a524 <USBD_SetFeature>
          break;
 8009c5a:	e009      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fc74 	bl	800a54c <USBD_ClrFeature>
          break;
 8009c64:	e004      	b.n	8009c70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fcc9 	bl	800a600 <USBD_CtlError>
          break;
 8009c6e:	bf00      	nop
      }
      break;
 8009c70:	e004      	b.n	8009c7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fcc3 	bl	800a600 <USBD_CtlError>
      break;
 8009c7a:	bf00      	nop
  }

  return ret;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop

08009c88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ca0:	d005      	beq.n	8009cae <USBD_StdItfReq+0x26>
 8009ca2:	2b40      	cmp	r3, #64	@ 0x40
 8009ca4:	d82e      	bhi.n	8009d04 <USBD_StdItfReq+0x7c>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <USBD_StdItfReq+0x26>
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	d12a      	bne.n	8009d04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d81d      	bhi.n	8009cf6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	889b      	ldrh	r3, [r3, #4]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d813      	bhi.n	8009cec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	88db      	ldrh	r3, [r3, #6]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d110      	bne.n	8009d00 <USBD_StdItfReq+0x78>
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10d      	bne.n	8009d00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fd53 	bl	800a790 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cea:	e009      	b.n	8009d00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fc86 	bl	800a600 <USBD_CtlError>
          break;
 8009cf4:	e004      	b.n	8009d00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fc81 	bl	800a600 <USBD_CtlError>
          break;
 8009cfe:	e000      	b.n	8009d02 <USBD_StdItfReq+0x7a>
          break;
 8009d00:	bf00      	nop
      }
      break;
 8009d02:	e004      	b.n	8009d0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fc7a 	bl	800a600 <USBD_CtlError>
      break;
 8009d0c:	bf00      	nop
  }

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	889b      	ldrh	r3, [r3, #4]
 8009d2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d34:	2b40      	cmp	r3, #64	@ 0x40
 8009d36:	d007      	beq.n	8009d48 <USBD_StdEPReq+0x30>
 8009d38:	2b40      	cmp	r3, #64	@ 0x40
 8009d3a:	f200 8146 	bhi.w	8009fca <USBD_StdEPReq+0x2b2>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00a      	beq.n	8009d58 <USBD_StdEPReq+0x40>
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	f040 8141 	bne.w	8009fca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
      break;
 8009d56:	e13d      	b.n	8009fd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d10a      	bne.n	8009d7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	e12d      	b.n	8009fd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d007      	beq.n	8009d92 <USBD_StdEPReq+0x7a>
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	f300 811b 	bgt.w	8009fbe <USBD_StdEPReq+0x2a6>
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d072      	beq.n	8009e72 <USBD_StdEPReq+0x15a>
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d03a      	beq.n	8009e06 <USBD_StdEPReq+0xee>
 8009d90:	e115      	b.n	8009fbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d002      	beq.n	8009da2 <USBD_StdEPReq+0x8a>
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d015      	beq.n	8009dcc <USBD_StdEPReq+0xb4>
 8009da0:	e02b      	b.n	8009dfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00c      	beq.n	8009dc2 <USBD_StdEPReq+0xaa>
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b80      	cmp	r3, #128	@ 0x80
 8009dac:	d009      	beq.n	8009dc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 f9c8 	bl	800b148 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009db8:	2180      	movs	r1, #128	@ 0x80
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 f9c4 	bl	800b148 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dc0:	e020      	b.n	8009e04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fc1b 	bl	800a600 <USBD_CtlError>
              break;
 8009dca:	e01b      	b.n	8009e04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	885b      	ldrh	r3, [r3, #2]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10e      	bne.n	8009df2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00b      	beq.n	8009df2 <USBD_StdEPReq+0xda>
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b80      	cmp	r3, #128	@ 0x80
 8009dde:	d008      	beq.n	8009df2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	88db      	ldrh	r3, [r3, #6]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d104      	bne.n	8009df2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 f9ab 	bl	800b148 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fccc 	bl	800a790 <USBD_CtlSendStatus>

              break;
 8009df8:	e004      	b.n	8009e04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fbff 	bl	800a600 <USBD_CtlError>
              break;
 8009e02:	bf00      	nop
          }
          break;
 8009e04:	e0e0      	b.n	8009fc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d002      	beq.n	8009e16 <USBD_StdEPReq+0xfe>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d015      	beq.n	8009e40 <USBD_StdEPReq+0x128>
 8009e14:	e026      	b.n	8009e64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00c      	beq.n	8009e36 <USBD_StdEPReq+0x11e>
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b80      	cmp	r3, #128	@ 0x80
 8009e20:	d009      	beq.n	8009e36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	4619      	mov	r1, r3
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 f98e 	bl	800b148 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e2c:	2180      	movs	r1, #128	@ 0x80
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f98a 	bl	800b148 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e34:	e01c      	b.n	8009e70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbe1 	bl	800a600 <USBD_CtlError>
              break;
 8009e3e:	e017      	b.n	8009e70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	885b      	ldrh	r3, [r3, #2]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d112      	bne.n	8009e6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f995 	bl	800b186 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc97 	bl	800a790 <USBD_CtlSendStatus>
              }
              break;
 8009e62:	e004      	b.n	8009e6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fbca 	bl	800a600 <USBD_CtlError>
              break;
 8009e6c:	e000      	b.n	8009e70 <USBD_StdEPReq+0x158>
              break;
 8009e6e:	bf00      	nop
          }
          break;
 8009e70:	e0aa      	b.n	8009fc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d002      	beq.n	8009e82 <USBD_StdEPReq+0x16a>
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d032      	beq.n	8009ee6 <USBD_StdEPReq+0x1ce>
 8009e80:	e097      	b.n	8009fb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d007      	beq.n	8009e98 <USBD_StdEPReq+0x180>
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b80      	cmp	r3, #128	@ 0x80
 8009e8c:	d004      	beq.n	8009e98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fbb5 	bl	800a600 <USBD_CtlError>
                break;
 8009e96:	e091      	b.n	8009fbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	da0b      	bge.n	8009eb8 <USBD_StdEPReq+0x1a0>
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	3310      	adds	r3, #16
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	e00b      	b.n	8009ed0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	3304      	adds	r3, #4
 8009ed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2202      	movs	r2, #2
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fbf8 	bl	800a6d4 <USBD_CtlSendData>
              break;
 8009ee4:	e06a      	b.n	8009fbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da11      	bge.n	8009f12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	f003 020f 	and.w	r2, r3, #15
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	440b      	add	r3, r1
 8009f00:	3318      	adds	r3, #24
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d117      	bne.n	8009f38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fb78 	bl	800a600 <USBD_CtlError>
                  break;
 8009f10:	e054      	b.n	8009fbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	f003 020f 	and.w	r2, r3, #15
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fb65 	bl	800a600 <USBD_CtlError>
                  break;
 8009f36:	e041      	b.n	8009fbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da0b      	bge.n	8009f58 <USBD_StdEPReq+0x240>
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
 8009f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	3310      	adds	r3, #16
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	3304      	adds	r3, #4
 8009f56:	e00b      	b.n	8009f70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	3304      	adds	r3, #4
 8009f70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <USBD_StdEPReq+0x266>
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b80      	cmp	r3, #128	@ 0x80
 8009f7c:	d103      	bne.n	8009f86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	e00e      	b.n	8009fa4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f91a 	bl	800b1c4 <USBD_LL_IsStallEP>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]
 8009f9c:	e002      	b.n	8009fa4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fb92 	bl	800a6d4 <USBD_CtlSendData>
              break;
 8009fb0:	e004      	b.n	8009fbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fb23 	bl	800a600 <USBD_CtlError>
              break;
 8009fba:	bf00      	nop
          }
          break;
 8009fbc:	e004      	b.n	8009fc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fb1d 	bl	800a600 <USBD_CtlError>
          break;
 8009fc6:	bf00      	nop
      }
      break;
 8009fc8:	e004      	b.n	8009fd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fb17 	bl	800a600 <USBD_CtlError>
      break;
 8009fd2:	bf00      	nop
  }

  return ret;
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fea:	2300      	movs	r3, #0
 8009fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	885b      	ldrh	r3, [r3, #2]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b06      	cmp	r3, #6
 800a002:	f200 8128 	bhi.w	800a256 <USBD_GetDescriptor+0x276>
 800a006:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <USBD_GetDescriptor+0x2c>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a029 	.word	0x0800a029
 800a010:	0800a041 	.word	0x0800a041
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a257 	.word	0x0800a257
 800a01c:	0800a257 	.word	0x0800a257
 800a020:	0800a1f7 	.word	0x0800a1f7
 800a024:	0800a223 	.word	0x0800a223
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7c12      	ldrb	r2, [r2, #16]
 800a034:	f107 0108 	add.w	r1, r7, #8
 800a038:	4610      	mov	r0, r2
 800a03a:	4798      	blx	r3
 800a03c:	60f8      	str	r0, [r7, #12]
      break;
 800a03e:	e112      	b.n	800a266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7c1b      	ldrb	r3, [r3, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10d      	bne.n	800a064 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a050:	f107 0208 	add.w	r2, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3301      	adds	r3, #1
 800a05e:	2202      	movs	r2, #2
 800a060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a062:	e100      	b.n	800a266 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06c:	f107 0208 	add.w	r2, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	2202      	movs	r2, #2
 800a07c:	701a      	strb	r2, [r3, #0]
      break;
 800a07e:	e0f2      	b.n	800a266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	885b      	ldrh	r3, [r3, #2]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b05      	cmp	r3, #5
 800a088:	f200 80ac 	bhi.w	800a1e4 <USBD_GetDescriptor+0x204>
 800a08c:	a201      	add	r2, pc, #4	@ (adr r2, 800a094 <USBD_GetDescriptor+0xb4>)
 800a08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a092:	bf00      	nop
 800a094:	0800a0ad 	.word	0x0800a0ad
 800a098:	0800a0e1 	.word	0x0800a0e1
 800a09c:	0800a115 	.word	0x0800a115
 800a0a0:	0800a149 	.word	0x0800a149
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a1b1 	.word	0x0800a1b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e091      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa94 	bl	800a600 <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e089      	b.n	800a1f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	7c12      	ldrb	r2, [r2, #16]
 800a0f8:	f107 0108 	add.w	r1, r7, #8
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	4798      	blx	r3
 800a100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a102:	e077      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fa7a 	bl	800a600 <USBD_CtlError>
            err++;
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	3301      	adds	r3, #1
 800a110:	72fb      	strb	r3, [r7, #11]
          break;
 800a112:	e06f      	b.n	800a1f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	7c12      	ldrb	r2, [r2, #16]
 800a12c:	f107 0108 	add.w	r1, r7, #8
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a136:	e05d      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fa60 	bl	800a600 <USBD_CtlError>
            err++;
 800a140:	7afb      	ldrb	r3, [r7, #11]
 800a142:	3301      	adds	r3, #1
 800a144:	72fb      	strb	r3, [r7, #11]
          break;
 800a146:	e055      	b.n	800a1f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	7c12      	ldrb	r2, [r2, #16]
 800a160:	f107 0108 	add.w	r1, r7, #8
 800a164:	4610      	mov	r0, r2
 800a166:	4798      	blx	r3
 800a168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a16a:	e043      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa46 	bl	800a600 <USBD_CtlError>
            err++;
 800a174:	7afb      	ldrb	r3, [r7, #11]
 800a176:	3301      	adds	r3, #1
 800a178:	72fb      	strb	r3, [r7, #11]
          break;
 800a17a:	e03b      	b.n	800a1f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00b      	beq.n	800a1a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	7c12      	ldrb	r2, [r2, #16]
 800a194:	f107 0108 	add.w	r1, r7, #8
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
 800a19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a19e:	e029      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fa2c 	bl	800a600 <USBD_CtlError>
            err++;
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ae:	e021      	b.n	800a1f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00b      	beq.n	800a1d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	7c12      	ldrb	r2, [r2, #16]
 800a1c8:	f107 0108 	add.w	r1, r7, #8
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4798      	blx	r3
 800a1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1d2:	e00f      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fa12 	bl	800a600 <USBD_CtlError>
            err++;
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1e2:	e007      	b.n	800a1f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fa0a 	bl	800a600 <USBD_CtlError>
          err++;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a1f2:	e038      	b.n	800a266 <USBD_GetDescriptor+0x286>
 800a1f4:	e037      	b.n	800a266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7c1b      	ldrb	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d109      	bne.n	800a212 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a206:	f107 0208 	add.w	r2, r7, #8
 800a20a:	4610      	mov	r0, r2
 800a20c:	4798      	blx	r3
 800a20e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a210:	e029      	b.n	800a266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f9f3 	bl	800a600 <USBD_CtlError>
        err++;
 800a21a:	7afb      	ldrb	r3, [r7, #11]
 800a21c:	3301      	adds	r3, #1
 800a21e:	72fb      	strb	r3, [r7, #11]
      break;
 800a220:	e021      	b.n	800a266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	7c1b      	ldrb	r3, [r3, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10d      	bne.n	800a246 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a232:	f107 0208 	add.w	r2, r7, #8
 800a236:	4610      	mov	r0, r2
 800a238:	4798      	blx	r3
 800a23a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3301      	adds	r3, #1
 800a240:	2207      	movs	r2, #7
 800a242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a244:	e00f      	b.n	800a266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f9d9 	bl	800a600 <USBD_CtlError>
        err++;
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	3301      	adds	r3, #1
 800a252:	72fb      	strb	r3, [r7, #11]
      break;
 800a254:	e007      	b.n	800a266 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f9d1 	bl	800a600 <USBD_CtlError>
      err++;
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	3301      	adds	r3, #1
 800a262:	72fb      	strb	r3, [r7, #11]
      break;
 800a264:	bf00      	nop
  }

  if (err != 0U)
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d11c      	bne.n	800a2a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a26c:	893b      	ldrh	r3, [r7, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d011      	beq.n	800a296 <USBD_GetDescriptor+0x2b6>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	88db      	ldrh	r3, [r3, #6]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	88da      	ldrh	r2, [r3, #6]
 800a27e:	893b      	ldrh	r3, [r7, #8]
 800a280:	4293      	cmp	r3, r2
 800a282:	bf28      	it	cs
 800a284:	4613      	movcs	r3, r2
 800a286:	b29b      	uxth	r3, r3
 800a288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a28a:	893b      	ldrh	r3, [r7, #8]
 800a28c:	461a      	mov	r2, r3
 800a28e:	68f9      	ldr	r1, [r7, #12]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fa1f 	bl	800a6d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	88db      	ldrh	r3, [r3, #6]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fa76 	bl	800a790 <USBD_CtlSendStatus>
 800a2a4:	e000      	b.n	800a2a8 <USBD_GetDescriptor+0x2c8>
    return;
 800a2a6:	bf00      	nop
    }
  }
}
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop

0800a2b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	889b      	ldrh	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d130      	bne.n	800a324 <USBD_SetAddress+0x74>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d12c      	bne.n	800a324 <USBD_SetAddress+0x74>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2d0:	d828      	bhi.n	800a324 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	885b      	ldrh	r3, [r3, #2]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d104      	bne.n	800a2f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f988 	bl	800a600 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f0:	e01d      	b.n	800a32e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	7bfa      	ldrb	r2, [r7, #15]
 800a2f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 ff8b 	bl	800b21a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa43 	bl	800a790 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	e009      	b.n	800a32e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a322:	e004      	b.n	800a32e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f96a 	bl	800a600 <USBD_CtlError>
  }
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	885b      	ldrh	r3, [r3, #2]
 800a346:	b2da      	uxtb	r2, r3
 800a348:	4b41      	ldr	r3, [pc, #260]	@ (800a450 <USBD_SetConfig+0x118>)
 800a34a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a34c:	4b40      	ldr	r3, [pc, #256]	@ (800a450 <USBD_SetConfig+0x118>)
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d904      	bls.n	800a35e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f952 	bl	800a600 <USBD_CtlError>
 800a35c:	e075      	b.n	800a44a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a364:	2b02      	cmp	r3, #2
 800a366:	d002      	beq.n	800a36e <USBD_SetConfig+0x36>
 800a368:	2b03      	cmp	r3, #3
 800a36a:	d023      	beq.n	800a3b4 <USBD_SetConfig+0x7c>
 800a36c:	e062      	b.n	800a434 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a36e:	4b38      	ldr	r3, [pc, #224]	@ (800a450 <USBD_SetConfig+0x118>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d01a      	beq.n	800a3ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a376:	4b36      	ldr	r3, [pc, #216]	@ (800a450 <USBD_SetConfig+0x118>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2203      	movs	r2, #3
 800a384:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a388:	4b31      	ldr	r3, [pc, #196]	@ (800a450 <USBD_SetConfig+0x118>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff f9e7 	bl	8009762 <USBD_SetClassConfig>
 800a394:	4603      	mov	r3, r0
 800a396:	2b02      	cmp	r3, #2
 800a398:	d104      	bne.n	800a3a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 f92f 	bl	800a600 <USBD_CtlError>
            return;
 800a3a2:	e052      	b.n	800a44a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f9f3 	bl	800a790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3aa:	e04e      	b.n	800a44a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f9ef 	bl	800a790 <USBD_CtlSendStatus>
        break;
 800a3b2:	e04a      	b.n	800a44a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3b4:	4b26      	ldr	r3, [pc, #152]	@ (800a450 <USBD_SetConfig+0x118>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d112      	bne.n	800a3e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a3c4:	4b22      	ldr	r3, [pc, #136]	@ (800a450 <USBD_SetConfig+0x118>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a3ce:	4b20      	ldr	r3, [pc, #128]	@ (800a450 <USBD_SetConfig+0x118>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f7ff f9e3 	bl	80097a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f9d8 	bl	800a790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3e0:	e033      	b.n	800a44a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a450 <USBD_SetConfig+0x118>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d01d      	beq.n	800a42c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff f9d1 	bl	80097a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a3fe:	4b14      	ldr	r3, [pc, #80]	@ (800a450 <USBD_SetConfig+0x118>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a408:	4b11      	ldr	r3, [pc, #68]	@ (800a450 <USBD_SetConfig+0x118>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff f9a7 	bl	8009762 <USBD_SetClassConfig>
 800a414:	4603      	mov	r3, r0
 800a416:	2b02      	cmp	r3, #2
 800a418:	d104      	bne.n	800a424 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f8ef 	bl	800a600 <USBD_CtlError>
            return;
 800a422:	e012      	b.n	800a44a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f9b3 	bl	800a790 <USBD_CtlSendStatus>
        break;
 800a42a:	e00e      	b.n	800a44a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f9af 	bl	800a790 <USBD_CtlSendStatus>
        break;
 800a432:	e00a      	b.n	800a44a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f8e2 	bl	800a600 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a43c:	4b04      	ldr	r3, [pc, #16]	@ (800a450 <USBD_SetConfig+0x118>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff f9ac 	bl	80097a0 <USBD_ClrClassConfig>
        break;
 800a448:	bf00      	nop
    }
  }
}
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	2000243c 	.word	0x2000243c

0800a454 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	88db      	ldrh	r3, [r3, #6]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d004      	beq.n	800a470 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f8c9 	bl	800a600 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a46e:	e022      	b.n	800a4b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a476:	2b02      	cmp	r3, #2
 800a478:	dc02      	bgt.n	800a480 <USBD_GetConfig+0x2c>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	dc03      	bgt.n	800a486 <USBD_GetConfig+0x32>
 800a47e:	e015      	b.n	800a4ac <USBD_GetConfig+0x58>
 800a480:	2b03      	cmp	r3, #3
 800a482:	d00b      	beq.n	800a49c <USBD_GetConfig+0x48>
 800a484:	e012      	b.n	800a4ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3308      	adds	r3, #8
 800a490:	2201      	movs	r2, #1
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f91d 	bl	800a6d4 <USBD_CtlSendData>
        break;
 800a49a:	e00c      	b.n	800a4b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f915 	bl	800a6d4 <USBD_CtlSendData>
        break;
 800a4aa:	e004      	b.n	800a4b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8a6 	bl	800a600 <USBD_CtlError>
        break;
 800a4b4:	bf00      	nop
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
 800a4c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d81e      	bhi.n	800a512 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	88db      	ldrh	r3, [r3, #6]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d004      	beq.n	800a4e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f88e 	bl	800a600 <USBD_CtlError>
        break;
 800a4e4:	e01a      	b.n	800a51c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d005      	beq.n	800a502 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f043 0202 	orr.w	r2, r3, #2
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	330c      	adds	r3, #12
 800a506:	2202      	movs	r2, #2
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f8e2 	bl	800a6d4 <USBD_CtlSendData>
      break;
 800a510:	e004      	b.n	800a51c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f873 	bl	800a600 <USBD_CtlError>
      break;
 800a51a:	bf00      	nop
  }
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	885b      	ldrh	r3, [r3, #2]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d106      	bne.n	800a544 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f926 	bl	800a790 <USBD_CtlSendStatus>
  }
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a55c:	3b01      	subs	r3, #1
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d80b      	bhi.n	800a57a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	885b      	ldrh	r3, [r3, #2]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d10c      	bne.n	800a584 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f90c 	bl	800a790 <USBD_CtlSendStatus>
      }
      break;
 800a578:	e004      	b.n	800a584 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f83f 	bl	800a600 <USBD_CtlError>
      break;
 800a582:	e000      	b.n	800a586 <USBD_ClrFeature+0x3a>
      break;
 800a584:	bf00      	nop
  }
}
 800a586:	bf00      	nop
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	785a      	ldrb	r2, [r3, #1]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	3302      	adds	r3, #2
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	3303      	adds	r3, #3
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	4413      	add	r3, r2
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	3305      	adds	r3, #5
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	3306      	adds	r3, #6
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	3307      	adds	r3, #7
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	4413      	add	r3, r2
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	80da      	strh	r2, [r3, #6]

}
 800a5f6:	bf00      	nop
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr

0800a600 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a60a:	2180      	movs	r1, #128	@ 0x80
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fd9b 	bl	800b148 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a612:	2100      	movs	r1, #0
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fd97 	bl	800b148 <USBD_LL_StallEP>
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b086      	sub	sp, #24
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a62e:	2300      	movs	r3, #0
 800a630:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d032      	beq.n	800a69e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 f834 	bl	800a6a6 <USBD_GetLen>
 800a63e:	4603      	mov	r3, r0
 800a640:	3301      	adds	r3, #1
 800a642:	b29b      	uxth	r3, r3
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	75fa      	strb	r2, [r7, #23]
 800a652:	461a      	mov	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4413      	add	r3, r2
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	7812      	ldrb	r2, [r2, #0]
 800a65c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	75fa      	strb	r2, [r7, #23]
 800a664:	461a      	mov	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4413      	add	r3, r2
 800a66a:	2203      	movs	r2, #3
 800a66c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a66e:	e012      	b.n	800a696 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	60fa      	str	r2, [r7, #12]
 800a676:	7dfa      	ldrb	r2, [r7, #23]
 800a678:	1c51      	adds	r1, r2, #1
 800a67a:	75f9      	strb	r1, [r7, #23]
 800a67c:	4611      	mov	r1, r2
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	440a      	add	r2, r1
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	75fa      	strb	r2, [r7, #23]
 800a68c:	461a      	mov	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4413      	add	r3, r2
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e8      	bne.n	800a670 <USBD_GetString+0x4e>
    }
  }
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6b2:	e005      	b.n	800a6c0 <USBD_GetLen+0x1a>
  {
    len++;
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1f5      	bne.n	800a6b4 <USBD_GetLen+0xe>
  }

  return len;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6ea:	88fa      	ldrh	r2, [r7, #6]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a6f0:	88fa      	ldrh	r2, [r7, #6]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6f6:	88fb      	ldrh	r3, [r7, #6]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 fdab 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	2100      	movs	r1, #0
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fd99 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2203      	movs	r2, #3
 800a742:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a74e:	88fa      	ldrh	r2, [r7, #6]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a756:	88fb      	ldrh	r3, [r7, #6]
 800a758:	68ba      	ldr	r2, [r7, #8]
 800a75a:	2100      	movs	r1, #0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 fd9e 	bl	800b29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	2100      	movs	r1, #0
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 fd8c 	bl	800b29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2204      	movs	r2, #4
 800a79c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fd56 	bl	800b258 <USBD_LL_Transmit>

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fd66 	bl	800b29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4912      	ldr	r1, [pc, #72]	@ (800a82c <MX_USB_DEVICE_Init+0x50>)
 800a7e4:	4812      	ldr	r0, [pc, #72]	@ (800a830 <MX_USB_DEVICE_Init+0x54>)
 800a7e6:	f7fe ff62 	bl	80096ae <USBD_Init>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7f0:	f7f9 fa5a 	bl	8003ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7f4:	490f      	ldr	r1, [pc, #60]	@ (800a834 <MX_USB_DEVICE_Init+0x58>)
 800a7f6:	480e      	ldr	r0, [pc, #56]	@ (800a830 <MX_USB_DEVICE_Init+0x54>)
 800a7f8:	f7fe ff84 	bl	8009704 <USBD_RegisterClass>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a802:	f7f9 fa51 	bl	8003ca8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a806:	490c      	ldr	r1, [pc, #48]	@ (800a838 <MX_USB_DEVICE_Init+0x5c>)
 800a808:	4809      	ldr	r0, [pc, #36]	@ (800a830 <MX_USB_DEVICE_Init+0x54>)
 800a80a:	f7fe feb5 	bl	8009578 <USBD_CDC_RegisterInterface>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a814:	f7f9 fa48 	bl	8003ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a818:	4805      	ldr	r0, [pc, #20]	@ (800a830 <MX_USB_DEVICE_Init+0x54>)
 800a81a:	f7fe ff8c 	bl	8009736 <USBD_Start>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a824:	f7f9 fa40 	bl	8003ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a828:	bf00      	nop
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	20000138 	.word	0x20000138
 800a830:	20002440 	.word	0x20002440
 800a834:	20000024 	.word	0x20000024
 800a838:	20000128 	.word	0x20000128

0800a83c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a840:	2200      	movs	r2, #0
 800a842:	4905      	ldr	r1, [pc, #20]	@ (800a858 <CDC_Init_FS+0x1c>)
 800a844:	4805      	ldr	r0, [pc, #20]	@ (800a85c <CDC_Init_FS+0x20>)
 800a846:	f7fe fead 	bl	80095a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a84a:	4905      	ldr	r1, [pc, #20]	@ (800a860 <CDC_Init_FS+0x24>)
 800a84c:	4803      	ldr	r0, [pc, #12]	@ (800a85c <CDC_Init_FS+0x20>)
 800a84e:	f7fe fec2 	bl	80095d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a852:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a854:	4618      	mov	r0, r3
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20002b04 	.word	0x20002b04
 800a85c:	20002440 	.word	0x20002440
 800a860:	20002704 	.word	0x20002704

0800a864 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a864:	b480      	push	{r7}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a868:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bc80      	pop	{r7}
 800a870:	4770      	bx	lr
	...

0800a874 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	6039      	str	r1, [r7, #0]
 800a87e:	71fb      	strb	r3, [r7, #7]
 800a880:	4613      	mov	r3, r2
 800a882:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b23      	cmp	r3, #35	@ 0x23
 800a888:	d84a      	bhi.n	800a920 <CDC_Control_FS+0xac>
 800a88a:	a201      	add	r2, pc, #4	@ (adr r2, 800a890 <CDC_Control_FS+0x1c>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a921 	.word	0x0800a921
 800a894:	0800a921 	.word	0x0800a921
 800a898:	0800a921 	.word	0x0800a921
 800a89c:	0800a921 	.word	0x0800a921
 800a8a0:	0800a921 	.word	0x0800a921
 800a8a4:	0800a921 	.word	0x0800a921
 800a8a8:	0800a921 	.word	0x0800a921
 800a8ac:	0800a921 	.word	0x0800a921
 800a8b0:	0800a921 	.word	0x0800a921
 800a8b4:	0800a921 	.word	0x0800a921
 800a8b8:	0800a921 	.word	0x0800a921
 800a8bc:	0800a921 	.word	0x0800a921
 800a8c0:	0800a921 	.word	0x0800a921
 800a8c4:	0800a921 	.word	0x0800a921
 800a8c8:	0800a921 	.word	0x0800a921
 800a8cc:	0800a921 	.word	0x0800a921
 800a8d0:	0800a921 	.word	0x0800a921
 800a8d4:	0800a921 	.word	0x0800a921
 800a8d8:	0800a921 	.word	0x0800a921
 800a8dc:	0800a921 	.word	0x0800a921
 800a8e0:	0800a921 	.word	0x0800a921
 800a8e4:	0800a921 	.word	0x0800a921
 800a8e8:	0800a921 	.word	0x0800a921
 800a8ec:	0800a921 	.word	0x0800a921
 800a8f0:	0800a921 	.word	0x0800a921
 800a8f4:	0800a921 	.word	0x0800a921
 800a8f8:	0800a921 	.word	0x0800a921
 800a8fc:	0800a921 	.word	0x0800a921
 800a900:	0800a921 	.word	0x0800a921
 800a904:	0800a921 	.word	0x0800a921
 800a908:	0800a921 	.word	0x0800a921
 800a90c:	0800a921 	.word	0x0800a921
 800a910:	0800a921 	.word	0x0800a921
 800a914:	0800a921 	.word	0x0800a921
 800a918:	0800a921 	.word	0x0800a921
 800a91c:	0800a921 	.word	0x0800a921
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a920:	bf00      	nop
  }

  return (USBD_OK);
 800a922:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a924:	4618      	mov	r0, r3
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc80      	pop	{r7}
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop

0800a930 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
 800a93e:	e022      	b.n	800a986 <CDC_Receive_FS+0x56>
    char receivedChar = Buf[i];
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d108      	bne.n	800a962 <CDC_Receive_FS+0x32>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 800a950:	4b15      	ldr	r3, [pc, #84]	@ (800a9a8 <CDC_Receive_FS+0x78>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a15      	ldr	r2, [pc, #84]	@ (800a9ac <CDC_Receive_FS+0x7c>)
 800a956:	2100      	movs	r1, #0
 800a958:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 800a95a:	4b15      	ldr	r3, [pc, #84]	@ (800a9b0 <CDC_Receive_FS+0x80>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	701a      	strb	r2, [r3, #0]
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
 800a960:	e016      	b.n	800a990 <CDC_Receive_FS+0x60>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 800a962:	7afb      	ldrb	r3, [r7, #11]
 800a964:	2b0d      	cmp	r3, #13
 800a966:	d00b      	beq.n	800a980 <CDC_Receive_FS+0x50>
 800a968:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a8 <CDC_Receive_FS+0x78>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b62      	cmp	r3, #98	@ 0x62
 800a96e:	d807      	bhi.n	800a980 <CDC_Receive_FS+0x50>
      usbBuffer[usbBufferIndex++] = receivedChar;
 800a970:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <CDC_Receive_FS+0x78>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	1c5a      	adds	r2, r3, #1
 800a976:	490c      	ldr	r1, [pc, #48]	@ (800a9a8 <CDC_Receive_FS+0x78>)
 800a978:	600a      	str	r2, [r1, #0]
 800a97a:	490c      	ldr	r1, [pc, #48]	@ (800a9ac <CDC_Receive_FS+0x7c>)
 800a97c:	7afa      	ldrb	r2, [r7, #11]
 800a97e:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d3d7      	bcc.n	800a940 <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	4808      	ldr	r0, [pc, #32]	@ (800a9b4 <CDC_Receive_FS+0x84>)
 800a994:	f7fe fe1f 	bl	80095d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a998:	4806      	ldr	r0, [pc, #24]	@ (800a9b4 <CDC_Receive_FS+0x84>)
 800a99a:	f7fe fe5e 	bl	800965a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a99e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	200004e0 	.word	0x200004e0
 800a9ac:	2000047c 	.word	0x2000047c
 800a9b0:	200004e4 	.word	0x200004e4
 800a9b4:	20002440 	.word	0x20002440

0800a9b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <CDC_Transmit_FS+0x48>)
 800a9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e00b      	b.n	800a9f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9de:	887b      	ldrh	r3, [r7, #2]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	6879      	ldr	r1, [r7, #4]
 800a9e4:	4806      	ldr	r0, [pc, #24]	@ (800aa00 <CDC_Transmit_FS+0x48>)
 800a9e6:	f7fe fddd 	bl	80095a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9ea:	4805      	ldr	r0, [pc, #20]	@ (800aa00 <CDC_Transmit_FS+0x48>)
 800a9ec:	f7fe fe06 	bl	80095fc <USBD_CDC_TransmitPacket>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20002440 	.word	0x20002440

0800aa04 <CDC_TxQueue_Init>:

/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
    txQueue.head = 0;
 800aa0a:	4b19      	ldr	r3, [pc, #100]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2f78 	strb.w	r2, [r3, #3960]	@ 0xf78
    txQueue.tail = 0;
 800aa12:	4b17      	ldr	r3, [pc, #92]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2f79 	strb.w	r2, [r3, #3961]	@ 0xf79
    txQueue.count = 0;
 800aa1a:	4b15      	ldr	r3, [pc, #84]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2f7a 	strb.w	r2, [r3, #3962]	@ 0xf7a
    txQueue.transmitting = false;
 800aa22:	4b13      	ldr	r3, [pc, #76]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2f7b 	strb.w	r2, [r3, #3963]	@ 0xf7b
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	607b      	str	r3, [r7, #4]
 800aa2e:	e016      	b.n	800aa5e <CDC_TxQueue_Init+0x5a>
        txQueue.messages[i].used = false;
 800aa30:	490f      	ldr	r1, [pc, #60]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	015b      	lsls	r3, r3, #5
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3382      	adds	r3, #130	@ 0x82
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
        txQueue.messages[i].length = 0;
 800aa44:	490a      	ldr	r1, [pc, #40]	@ (800aa70 <CDC_TxQueue_Init+0x6c>)
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	015b      	lsls	r3, r3, #5
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	3380      	adds	r3, #128	@ 0x80
 800aa54:	2200      	movs	r2, #0
 800aa56:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	607b      	str	r3, [r7, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b1d      	cmp	r3, #29
 800aa62:	dde5      	ble.n	800aa30 <CDC_TxQueue_Init+0x2c>
    }
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr
 800aa70:	20002f04 	.word	0x20002f04

0800aa74 <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	807b      	strh	r3, [r7, #2]
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 800aa80:	4b21      	ldr	r3, [pc, #132]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aa82:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
 800aa86:	2b1d      	cmp	r3, #29
 800aa88:	d802      	bhi.n	800aa90 <CDC_TxQueue_Add+0x1c>
 800aa8a:	887b      	ldrh	r3, [r7, #2]
 800aa8c:	2b80      	cmp	r3, #128	@ 0x80
 800aa8e:	d901      	bls.n	800aa94 <CDC_TxQueue_Add+0x20>
        return false;
 800aa90:	2300      	movs	r3, #0
 800aa92:	e035      	b.n	800ab00 <CDC_TxQueue_Add+0x8c>
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 800aa94:	4b1c      	ldr	r3, [pc, #112]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aa96:	f893 3f78 	ldrb.w	r3, [r3, #3960]	@ 0xf78
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	015b      	lsls	r3, r3, #5
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4a18      	ldr	r2, [pc, #96]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aaa6:	4413      	add	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
    memcpy(msg->data, data, length);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	887a      	ldrh	r2, [r7, #2]
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fc7e 	bl	800c3b2 <memcpy>
    msg->length = length;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	887a      	ldrh	r2, [r7, #2]
 800aaba:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    msg->used = true;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 800aac6:	4b10      	ldr	r3, [pc, #64]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aac8:	f893 3f78 	ldrb.w	r3, [r3, #3960]	@ 0xf78
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	4b0f      	ldr	r3, [pc, #60]	@ (800ab0c <CDC_TxQueue_Add+0x98>)
 800aad0:	fb83 1302 	smull	r1, r3, r3, r2
 800aad4:	4413      	add	r3, r2
 800aad6:	1119      	asrs	r1, r3, #4
 800aad8:	17d3      	asrs	r3, r2, #31
 800aada:	1ac9      	subs	r1, r1, r3
 800aadc:	460b      	mov	r3, r1
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	1a5b      	subs	r3, r3, r1
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	1ad1      	subs	r1, r2, r3
 800aae6:	b2ca      	uxtb	r2, r1
 800aae8:	4b07      	ldr	r3, [pc, #28]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aaea:	f883 2f78 	strb.w	r2, [r3, #3960]	@ 0xf78
    txQueue.count++;
 800aaee:	4b06      	ldr	r3, [pc, #24]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aaf0:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b03      	ldr	r3, [pc, #12]	@ (800ab08 <CDC_TxQueue_Add+0x94>)
 800aafa:	f883 2f7a 	strb.w	r2, [r3, #3962]	@ 0xf7a
    
    return true;
 800aafe:	2301      	movs	r3, #1
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20002f04 	.word	0x20002f04
 800ab0c:	88888889 	.word	0x88888889

0800ab10 <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 800ab16:	4b2f      	ldr	r3, [pc, #188]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab18:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d053      	beq.n	800abc8 <CDC_TxQueue_Process+0xb8>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 800ab20:	4b2c      	ldr	r3, [pc, #176]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab22:	f893 3f7b 	ldrb.w	r3, [r3, #3963]	@ 0xf7b
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <CDC_TxQueue_Process+0x34>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	f7ff ff43 	bl	800a9b8 <CDC_Transmit_FS>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73fb      	strb	r3, [r7, #15]
        if (result != USBD_BUSY) {
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d047      	beq.n	800abcc <CDC_TxQueue_Process+0xbc>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 800ab3c:	4b25      	ldr	r3, [pc, #148]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2f7b 	strb.w	r2, [r3, #3963]	@ 0xf7b
            return;
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 800ab44:	4b23      	ldr	r3, [pc, #140]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab46:	f893 3f79 	ldrb.w	r3, [r3, #3961]	@ 0xf79
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	015b      	lsls	r3, r3, #5
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4a1f      	ldr	r2, [pc, #124]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab56:	4413      	add	r3, r2
 800ab58:	60bb      	str	r3, [r7, #8]
    if (msg->used) {
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d034      	beq.n	800abce <CDC_TxQueue_Process+0xbe>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7ff ff22 	bl	800a9b8 <CDC_Transmit_FS>
 800ab74:	4603      	mov	r3, r0
 800ab76:	71fb      	strb	r3, [r7, #7]
        
        if (result == USBD_OK) {
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d127      	bne.n	800abce <CDC_TxQueue_Process+0xbe>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800ab7e:	4b15      	ldr	r3, [pc, #84]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2f7b 	strb.w	r2, [r3, #3963]	@ 0xf7b
            msg->used = false;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800ab8e:	4b11      	ldr	r3, [pc, #68]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800ab90:	f893 3f79 	ldrb.w	r3, [r3, #3961]	@ 0xf79
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	4b10      	ldr	r3, [pc, #64]	@ (800abd8 <CDC_TxQueue_Process+0xc8>)
 800ab98:	fb83 1302 	smull	r1, r3, r3, r2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	1119      	asrs	r1, r3, #4
 800aba0:	17d3      	asrs	r3, r2, #31
 800aba2:	1ac9      	subs	r1, r1, r3
 800aba4:	460b      	mov	r3, r1
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	1a5b      	subs	r3, r3, r1
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	1ad1      	subs	r1, r2, r3
 800abae:	b2ca      	uxtb	r2, r1
 800abb0:	4b08      	ldr	r3, [pc, #32]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800abb2:	f883 2f79 	strb.w	r2, [r3, #3961]	@ 0xf79
            txQueue.count--;
 800abb6:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800abb8:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <CDC_TxQueue_Process+0xc4>)
 800abc2:	f883 2f7a 	strb.w	r2, [r3, #3962]	@ 0xf7a
 800abc6:	e002      	b.n	800abce <CDC_TxQueue_Process+0xbe>
        return;
 800abc8:	bf00      	nop
 800abca:	e000      	b.n	800abce <CDC_TxQueue_Process+0xbe>
            return;
 800abcc:	bf00      	nop
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20002f04 	.word	0x20002f04
 800abd8:	88888889 	.word	0x88888889

0800abdc <CDC_Transmit_Queued>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	807b      	strh	r3, [r7, #2]
    return CDC_TxQueue_Add(data, length);
 800abe8:	887b      	ldrh	r3, [r7, #2]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ff41 	bl	800aa74 <CDC_TxQueue_Add>
 800abf2:	4603      	mov	r3, r0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <CDC_TxQueue_GetCount>:
/**
 * @brief Obtiene el número de mensajes en cola
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	af00      	add	r7, sp, #0
    return txQueue.count;
 800ac00:	4b03      	ldr	r3, [pc, #12]	@ (800ac10 <CDC_TxQueue_GetCount+0x14>)
 800ac02:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bc80      	pop	{r7}
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	20002f04 	.word	0x20002f04

0800ac14 <CDC_TxQueue_IsFull>:
/**
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
 800ac14:	b480      	push	{r7}
 800ac16:	af00      	add	r7, sp, #0
    return (txQueue.count >= TX_QUEUE_SIZE);
 800ac18:	4b05      	ldr	r3, [pc, #20]	@ (800ac30 <CDC_TxQueue_IsFull+0x1c>)
 800ac1a:	f893 3f7a 	ldrb.w	r3, [r3, #3962]	@ 0xf7a
 800ac1e:	2b1d      	cmp	r3, #29
 800ac20:	bf8c      	ite	hi
 800ac22:	2301      	movhi	r3, #1
 800ac24:	2300      	movls	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr
 800ac30:	20002f04 	.word	0x20002f04

0800ac34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2212      	movs	r2, #18
 800ac44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac46:	4b03      	ldr	r3, [pc, #12]	@ (800ac54 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bc80      	pop	{r7}
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000154 	.word	0x20000154

0800ac58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	6039      	str	r1, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2204      	movs	r2, #4
 800ac68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac6a:	4b03      	ldr	r3, [pc, #12]	@ (800ac78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20000168 	.word	0x20000168

0800ac7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	6039      	str	r1, [r7, #0]
 800ac86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac88:	79fb      	ldrb	r3, [r7, #7]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4907      	ldr	r1, [pc, #28]	@ (800acb0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac92:	4808      	ldr	r0, [pc, #32]	@ (800acb4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac94:	f7ff fcc5 	bl	800a622 <USBD_GetString>
 800ac98:	e004      	b.n	800aca4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4904      	ldr	r1, [pc, #16]	@ (800acb0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac9e:	4805      	ldr	r0, [pc, #20]	@ (800acb4 <USBD_FS_ProductStrDescriptor+0x38>)
 800aca0:	f7ff fcbf 	bl	800a622 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aca4:	4b02      	ldr	r3, [pc, #8]	@ (800acb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20003e80 	.word	0x20003e80
 800acb4:	0800f3fc 	.word	0x0800f3fc

0800acb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	4904      	ldr	r1, [pc, #16]	@ (800acd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acc8:	4804      	ldr	r0, [pc, #16]	@ (800acdc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acca:	f7ff fcaa 	bl	800a622 <USBD_GetString>
  return USBD_StrDesc;
 800acce:	4b02      	ldr	r3, [pc, #8]	@ (800acd8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20003e80 	.word	0x20003e80
 800acdc:	0800f414 	.word	0x0800f414

0800ace0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	221a      	movs	r2, #26
 800acf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acf2:	f000 f843 	bl	800ad7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800acf6:	4b02      	ldr	r3, [pc, #8]	@ (800ad00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	2000016c 	.word	0x2000016c

0800ad04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	6039      	str	r1, [r7, #0]
 800ad0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d105      	bne.n	800ad22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	4907      	ldr	r1, [pc, #28]	@ (800ad38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad1a:	4808      	ldr	r0, [pc, #32]	@ (800ad3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad1c:	f7ff fc81 	bl	800a622 <USBD_GetString>
 800ad20:	e004      	b.n	800ad2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4904      	ldr	r1, [pc, #16]	@ (800ad38 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad26:	4805      	ldr	r0, [pc, #20]	@ (800ad3c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad28:	f7ff fc7b 	bl	800a622 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad2c:	4b02      	ldr	r3, [pc, #8]	@ (800ad38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20003e80 	.word	0x20003e80
 800ad3c:	0800f428 	.word	0x0800f428

0800ad40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	6039      	str	r1, [r7, #0]
 800ad4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d105      	bne.n	800ad5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4907      	ldr	r1, [pc, #28]	@ (800ad74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad56:	4808      	ldr	r0, [pc, #32]	@ (800ad78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad58:	f7ff fc63 	bl	800a622 <USBD_GetString>
 800ad5c:	e004      	b.n	800ad68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	4904      	ldr	r1, [pc, #16]	@ (800ad74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad62:	4805      	ldr	r0, [pc, #20]	@ (800ad78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad64:	f7ff fc5d 	bl	800a622 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad68:	4b02      	ldr	r3, [pc, #8]	@ (800ad74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20003e80 	.word	0x20003e80
 800ad78:	0800f434 	.word	0x0800f434

0800ad7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad82:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <Get_SerialNum+0x44>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad88:	4b0e      	ldr	r3, [pc, #56]	@ (800adc4 <Get_SerialNum+0x48>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad8e:	4b0e      	ldr	r3, [pc, #56]	@ (800adc8 <Get_SerialNum+0x4c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4413      	add	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d009      	beq.n	800adb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ada2:	2208      	movs	r2, #8
 800ada4:	4909      	ldr	r1, [pc, #36]	@ (800adcc <Get_SerialNum+0x50>)
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f814 	bl	800add4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800adac:	2204      	movs	r2, #4
 800adae:	4908      	ldr	r1, [pc, #32]	@ (800add0 <Get_SerialNum+0x54>)
 800adb0:	68b8      	ldr	r0, [r7, #8]
 800adb2:	f000 f80f 	bl	800add4 <IntToUnicode>
  }
}
 800adb6:	bf00      	nop
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	1ffff7e8 	.word	0x1ffff7e8
 800adc4:	1ffff7ec 	.word	0x1ffff7ec
 800adc8:	1ffff7f0 	.word	0x1ffff7f0
 800adcc:	2000016e 	.word	0x2000016e
 800add0:	2000017e 	.word	0x2000017e

0800add4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ade6:	2300      	movs	r3, #0
 800ade8:	75fb      	strb	r3, [r7, #23]
 800adea:	e027      	b.n	800ae3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	0f1b      	lsrs	r3, r3, #28
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d80b      	bhi.n	800ae0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	0f1b      	lsrs	r3, r3, #28
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4619      	mov	r1, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	440b      	add	r3, r1
 800ae04:	3230      	adds	r2, #48	@ 0x30
 800ae06:	b2d2      	uxtb	r2, r2
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	e00a      	b.n	800ae22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0f1b      	lsrs	r3, r3, #28
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4619      	mov	r1, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3237      	adds	r2, #55	@ 0x37
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	011b      	lsls	r3, r3, #4
 800ae26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	4413      	add	r3, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	75fb      	strb	r3, [r7, #23]
 800ae3c:	7dfa      	ldrb	r2, [r7, #23]
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d3d3      	bcc.n	800adec <IntToUnicode+0x18>
  }
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	371c      	adds	r7, #28
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bc80      	pop	{r7}
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae94 <HAL_PCD_MspInit+0x44>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d113      	bne.n	800ae8a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae62:	4b0d      	ldr	r3, [pc, #52]	@ (800ae98 <HAL_PCD_MspInit+0x48>)
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	4a0c      	ldr	r2, [pc, #48]	@ (800ae98 <HAL_PCD_MspInit+0x48>)
 800ae68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae6c:	61d3      	str	r3, [r2, #28]
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae98 <HAL_PCD_MspInit+0x48>)
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae76:	60fb      	str	r3, [r7, #12]
 800ae78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	2014      	movs	r0, #20
 800ae80:	f7f9 f9cb 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ae84:	2014      	movs	r0, #20
 800ae86:	f7f9 f9e4 	bl	8004252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae8a:	bf00      	nop
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	40005c00 	.word	0x40005c00
 800ae98:	40021000 	.word	0x40021000

0800ae9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f7fe fc87 	bl	80097c6 <USBD_LL_SetupStage>
}
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aed2:	78fa      	ldrb	r2, [r7, #3]
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	4613      	mov	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	440b      	add	r3, r1
 800aee0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	78fb      	ldrb	r3, [r7, #3]
 800aee8:	4619      	mov	r1, r3
 800aeea:	f7fe fcb9 	bl	8009860 <USBD_LL_DataOutStage>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	460b      	mov	r3, r1
 800af00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800af08:	78fa      	ldrb	r2, [r7, #3]
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	440b      	add	r3, r1
 800af16:	3324      	adds	r3, #36	@ 0x24
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	4619      	mov	r1, r3
 800af1e:	f7fe fd10 	bl	8009942 <USBD_LL_DataInStage>
}
 800af22:	bf00      	nop
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fe20 	bl	8009b7e <USBD_LL_SOF>
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af4e:	2301      	movs	r3, #1
 800af50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	799b      	ldrb	r3, [r3, #6]
 800af56:	2b02      	cmp	r3, #2
 800af58:	d001      	beq.n	800af5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af5a:	f7f8 fea5 	bl	8003ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af64:	7bfa      	ldrb	r2, [r7, #15]
 800af66:	4611      	mov	r1, r2
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fdd0 	bl	8009b0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe fd89 	bl	8009a8c <USBD_LL_Reset>
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af92:	4618      	mov	r0, r3
 800af94:	f7fe fdca 	bl	8009b2c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7a9b      	ldrb	r3, [r3, #10]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afa0:	4b04      	ldr	r3, [pc, #16]	@ (800afb4 <HAL_PCD_SuspendCallback+0x30>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	4a03      	ldr	r2, [pc, #12]	@ (800afb4 <HAL_PCD_SuspendCallback+0x30>)
 800afa6:	f043 0306 	orr.w	r3, r3, #6
 800afaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	e000ed00 	.word	0xe000ed00

0800afb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fe fdc4 	bl	8009b54 <USBD_LL_Resume>
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800afdc:	4a28      	ldr	r2, [pc, #160]	@ (800b080 <USBD_LL_Init+0xac>)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a26      	ldr	r2, [pc, #152]	@ (800b080 <USBD_LL_Init+0xac>)
 800afe8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800afec:	4b24      	ldr	r3, [pc, #144]	@ (800b080 <USBD_LL_Init+0xac>)
 800afee:	4a25      	ldr	r2, [pc, #148]	@ (800b084 <USBD_LL_Init+0xb0>)
 800aff0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aff2:	4b23      	ldr	r3, [pc, #140]	@ (800b080 <USBD_LL_Init+0xac>)
 800aff4:	2208      	movs	r2, #8
 800aff6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aff8:	4b21      	ldr	r3, [pc, #132]	@ (800b080 <USBD_LL_Init+0xac>)
 800affa:	2202      	movs	r2, #2
 800affc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800affe:	4b20      	ldr	r3, [pc, #128]	@ (800b080 <USBD_LL_Init+0xac>)
 800b000:	2200      	movs	r2, #0
 800b002:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b004:	4b1e      	ldr	r3, [pc, #120]	@ (800b080 <USBD_LL_Init+0xac>)
 800b006:	2200      	movs	r2, #0
 800b008:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b00a:	4b1d      	ldr	r3, [pc, #116]	@ (800b080 <USBD_LL_Init+0xac>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b010:	481b      	ldr	r0, [pc, #108]	@ (800b080 <USBD_LL_Init+0xac>)
 800b012:	f7f9 faec 	bl	80045ee <HAL_PCD_Init>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b01c:	f7f8 fe44 	bl	8003ca8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b026:	2318      	movs	r3, #24
 800b028:	2200      	movs	r2, #0
 800b02a:	2100      	movs	r1, #0
 800b02c:	f7fa fffd 	bl	800602a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b036:	2358      	movs	r3, #88	@ 0x58
 800b038:	2200      	movs	r2, #0
 800b03a:	2180      	movs	r1, #128	@ 0x80
 800b03c:	f7fa fff5 	bl	800602a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b046:	23c0      	movs	r3, #192	@ 0xc0
 800b048:	2200      	movs	r2, #0
 800b04a:	2181      	movs	r1, #129	@ 0x81
 800b04c:	f7fa ffed 	bl	800602a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b056:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b05a:	2200      	movs	r2, #0
 800b05c:	2101      	movs	r1, #1
 800b05e:	f7fa ffe4 	bl	800602a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b06c:	2200      	movs	r2, #0
 800b06e:	2182      	movs	r1, #130	@ 0x82
 800b070:	f7fa ffdb 	bl	800602a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20004080 	.word	0x20004080
 800b084:	40005c00 	.word	0x40005c00

0800b088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f9 fb9b 	bl	80047da <HAL_PCD_Start>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f94e 	bl	800b34c <USBD_Get_USB_Status>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	70fb      	strb	r3, [r7, #3]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70bb      	strb	r3, [r7, #2]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b0e6:	78bb      	ldrb	r3, [r7, #2]
 800b0e8:	883a      	ldrh	r2, [r7, #0]
 800b0ea:	78f9      	ldrb	r1, [r7, #3]
 800b0ec:	f7f9 fcef 	bl	8004ace <HAL_PCD_EP_Open>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f928 	bl	800b34c <USBD_Get_USB_Status>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b100:	7bbb      	ldrb	r3, [r7, #14]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b124:	78fa      	ldrb	r2, [r7, #3]
 800b126:	4611      	mov	r1, r2
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f9 fd2d 	bl	8004b88 <HAL_PCD_EP_Close>
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 f909 	bl	800b34c <USBD_Get_USB_Status>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7f9 fdd5 	bl	8004d16 <HAL_PCD_EP_SetStall>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f8ea 	bl	800b34c <USBD_Get_USB_Status>
 800b178:	4603      	mov	r3, r0
 800b17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1a0:	78fa      	ldrb	r2, [r7, #3]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f7f9 fe16 	bl	8004dd6 <HAL_PCD_EP_ClrStall>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f8cb 	bl	800b34c <USBD_Get_USB_Status>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	da0b      	bge.n	800b1f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1e6:	68f9      	ldr	r1, [r7, #12]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	440b      	add	r3, r1
 800b1f2:	3312      	adds	r3, #18
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	e00b      	b.n	800b210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	00db      	lsls	r3, r3, #3
 800b208:	440b      	add	r3, r1
 800b20a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b234:	78fa      	ldrb	r2, [r7, #3]
 800b236:	4611      	mov	r1, r2
 800b238:	4618      	mov	r0, r3
 800b23a:	f7f9 fc24 	bl	8004a86 <HAL_PCD_SetAddress>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 f881 	bl	800b34c <USBD_Get_USB_Status>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	461a      	mov	r2, r3
 800b264:	460b      	mov	r3, r1
 800b266:	72fb      	strb	r3, [r7, #11]
 800b268:	4613      	mov	r3, r2
 800b26a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b27a:	893b      	ldrh	r3, [r7, #8]
 800b27c:	7af9      	ldrb	r1, [r7, #11]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	f7f9 fd12 	bl	8004ca8 <HAL_PCD_EP_Transmit>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 f85e 	bl	800b34c <USBD_Get_USB_Status>
 800b290:	4603      	mov	r3, r0
 800b292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b294:	7dbb      	ldrb	r3, [r7, #22]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3718      	adds	r7, #24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b086      	sub	sp, #24
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	72fb      	strb	r3, [r7, #11]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2c0:	893b      	ldrh	r3, [r7, #8]
 800b2c2:	7af9      	ldrb	r1, [r7, #11]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	f7f9 fca7 	bl	8004c18 <HAL_PCD_EP_Receive>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f83b 	bl	800b34c <USBD_Get_USB_Status>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2da:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2f6:	78fa      	ldrb	r2, [r7, #3]
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7f9 fcbd 	bl	8004c7a <HAL_PCD_EP_GetRxCount>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
	...

0800b30c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b314:	4b02      	ldr	r3, [pc, #8]	@ (800b320 <USBD_static_malloc+0x14>)
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bc80      	pop	{r7}
 800b31e:	4770      	bx	lr
 800b320:	20004358 	.word	0x20004358

0800b324 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]

}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr

0800b336 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	460b      	mov	r3, r1
 800b340:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b342:	bf00      	nop
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	bc80      	pop	{r7}
 800b34a:	4770      	bx	lr

0800b34c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	4603      	mov	r3, r0
 800b354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	2b03      	cmp	r3, #3
 800b35e:	d817      	bhi.n	800b390 <USBD_Get_USB_Status+0x44>
 800b360:	a201      	add	r2, pc, #4	@ (adr r2, 800b368 <USBD_Get_USB_Status+0x1c>)
 800b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b366:	bf00      	nop
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b37f 	.word	0x0800b37f
 800b370:	0800b385 	.word	0x0800b385
 800b374:	0800b38b 	.word	0x0800b38b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]
    break;
 800b37c:	e00b      	b.n	800b396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b37e:	2302      	movs	r3, #2
 800b380:	73fb      	strb	r3, [r7, #15]
    break;
 800b382:	e008      	b.n	800b396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
    break;
 800b388:	e005      	b.n	800b396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b38a:	2302      	movs	r3, #2
 800b38c:	73fb      	strb	r3, [r7, #15]
    break;
 800b38e:	e002      	b.n	800b396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b390:	2302      	movs	r3, #2
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	bf00      	nop
  }
  return usb_status;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop

0800b3a4 <atof>:
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	f000 bdfb 	b.w	800bfa0 <strtod>

0800b3aa <sulp>:
 800b3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	4690      	mov	r8, r2
 800b3b2:	f001 ffc1 	bl	800d338 <__ulp>
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	f1b8 0f00 	cmp.w	r8, #0
 800b3be:	d011      	beq.n	800b3e4 <sulp+0x3a>
 800b3c0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b3c4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dd0b      	ble.n	800b3e4 <sulp+0x3a>
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	051b      	lsls	r3, r3, #20
 800b3d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3d4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3d8:	4622      	mov	r2, r4
 800b3da:	462b      	mov	r3, r5
 800b3dc:	f7f5 f87c 	bl	80004d8 <__aeabi_dmul>
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <_strtod_l>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	b09f      	sub	sp, #124	@ 0x7c
 800b3f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b3fe:	f04f 0a00 	mov.w	sl, #0
 800b402:	f04f 0b00 	mov.w	fp, #0
 800b406:	460a      	mov	r2, r1
 800b408:	9005      	str	r0, [sp, #20]
 800b40a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b40c:	7811      	ldrb	r1, [r2, #0]
 800b40e:	292b      	cmp	r1, #43	@ 0x2b
 800b410:	d048      	beq.n	800b4a4 <_strtod_l+0xb4>
 800b412:	d836      	bhi.n	800b482 <_strtod_l+0x92>
 800b414:	290d      	cmp	r1, #13
 800b416:	d830      	bhi.n	800b47a <_strtod_l+0x8a>
 800b418:	2908      	cmp	r1, #8
 800b41a:	d830      	bhi.n	800b47e <_strtod_l+0x8e>
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d039      	beq.n	800b494 <_strtod_l+0xa4>
 800b420:	2200      	movs	r2, #0
 800b422:	920e      	str	r2, [sp, #56]	@ 0x38
 800b424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b426:	782a      	ldrb	r2, [r5, #0]
 800b428:	2a30      	cmp	r2, #48	@ 0x30
 800b42a:	f040 80b0 	bne.w	800b58e <_strtod_l+0x19e>
 800b42e:	786a      	ldrb	r2, [r5, #1]
 800b430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b434:	2a58      	cmp	r2, #88	@ 0x58
 800b436:	d16c      	bne.n	800b512 <_strtod_l+0x122>
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b43c:	4a8f      	ldr	r2, [pc, #572]	@ (800b67c <_strtod_l+0x28c>)
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	ab1a      	add	r3, sp, #104	@ 0x68
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b448:	a919      	add	r1, sp, #100	@ 0x64
 800b44a:	f001 f877 	bl	800c53c <__gethex>
 800b44e:	f010 060f 	ands.w	r6, r0, #15
 800b452:	4604      	mov	r4, r0
 800b454:	d005      	beq.n	800b462 <_strtod_l+0x72>
 800b456:	2e06      	cmp	r6, #6
 800b458:	d126      	bne.n	800b4a8 <_strtod_l+0xb8>
 800b45a:	2300      	movs	r3, #0
 800b45c:	3501      	adds	r5, #1
 800b45e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b460:	930e      	str	r3, [sp, #56]	@ 0x38
 800b462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 8582 	bne.w	800bf6e <_strtod_l+0xb7e>
 800b46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b46c:	b1bb      	cbz	r3, 800b49e <_strtod_l+0xae>
 800b46e:	4650      	mov	r0, sl
 800b470:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b474:	b01f      	add	sp, #124	@ 0x7c
 800b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47a:	2920      	cmp	r1, #32
 800b47c:	d1d0      	bne.n	800b420 <_strtod_l+0x30>
 800b47e:	3201      	adds	r2, #1
 800b480:	e7c3      	b.n	800b40a <_strtod_l+0x1a>
 800b482:	292d      	cmp	r1, #45	@ 0x2d
 800b484:	d1cc      	bne.n	800b420 <_strtod_l+0x30>
 800b486:	2101      	movs	r1, #1
 800b488:	910e      	str	r1, [sp, #56]	@ 0x38
 800b48a:	1c51      	adds	r1, r2, #1
 800b48c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b48e:	7852      	ldrb	r2, [r2, #1]
 800b490:	2a00      	cmp	r2, #0
 800b492:	d1c7      	bne.n	800b424 <_strtod_l+0x34>
 800b494:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b496:	9419      	str	r4, [sp, #100]	@ 0x64
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f040 8566 	bne.w	800bf6a <_strtod_l+0xb7a>
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	e7e7      	b.n	800b474 <_strtod_l+0x84>
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	e7ef      	b.n	800b488 <_strtod_l+0x98>
 800b4a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4aa:	b13a      	cbz	r2, 800b4bc <_strtod_l+0xcc>
 800b4ac:	2135      	movs	r1, #53	@ 0x35
 800b4ae:	a81c      	add	r0, sp, #112	@ 0x70
 800b4b0:	f002 f832 	bl	800d518 <__copybits>
 800b4b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4b6:	9805      	ldr	r0, [sp, #20]
 800b4b8:	f001 fc12 	bl	800cce0 <_Bfree>
 800b4bc:	3e01      	subs	r6, #1
 800b4be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4c0:	2e04      	cmp	r6, #4
 800b4c2:	d806      	bhi.n	800b4d2 <_strtod_l+0xe2>
 800b4c4:	e8df f006 	tbb	[pc, r6]
 800b4c8:	201d0314 	.word	0x201d0314
 800b4cc:	14          	.byte	0x14
 800b4cd:	00          	.byte	0x00
 800b4ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4d2:	05e1      	lsls	r1, r4, #23
 800b4d4:	bf48      	it	mi
 800b4d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4de:	0d1b      	lsrs	r3, r3, #20
 800b4e0:	051b      	lsls	r3, r3, #20
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1bd      	bne.n	800b462 <_strtod_l+0x72>
 800b4e6:	f000 ff37 	bl	800c358 <__errno>
 800b4ea:	2322      	movs	r3, #34	@ 0x22
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	e7b8      	b.n	800b462 <_strtod_l+0x72>
 800b4f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b4f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b4f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b4fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b500:	e7e7      	b.n	800b4d2 <_strtod_l+0xe2>
 800b502:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b680 <_strtod_l+0x290>
 800b506:	e7e4      	b.n	800b4d2 <_strtod_l+0xe2>
 800b508:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b50c:	f04f 3aff 	mov.w	sl, #4294967295
 800b510:	e7df      	b.n	800b4d2 <_strtod_l+0xe2>
 800b512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	9219      	str	r2, [sp, #100]	@ 0x64
 800b518:	785b      	ldrb	r3, [r3, #1]
 800b51a:	2b30      	cmp	r3, #48	@ 0x30
 800b51c:	d0f9      	beq.n	800b512 <_strtod_l+0x122>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d09f      	beq.n	800b462 <_strtod_l+0x72>
 800b522:	2301      	movs	r3, #1
 800b524:	2700      	movs	r7, #0
 800b526:	220a      	movs	r2, #10
 800b528:	46b9      	mov	r9, r7
 800b52a:	9308      	str	r3, [sp, #32]
 800b52c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b52e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b530:	930c      	str	r3, [sp, #48]	@ 0x30
 800b532:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b534:	7805      	ldrb	r5, [r0, #0]
 800b536:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b53a:	b2d9      	uxtb	r1, r3
 800b53c:	2909      	cmp	r1, #9
 800b53e:	d928      	bls.n	800b592 <_strtod_l+0x1a2>
 800b540:	2201      	movs	r2, #1
 800b542:	4950      	ldr	r1, [pc, #320]	@ (800b684 <_strtod_l+0x294>)
 800b544:	f000 fe9d 	bl	800c282 <strncmp>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d032      	beq.n	800b5b2 <_strtod_l+0x1c2>
 800b54c:	2000      	movs	r0, #0
 800b54e:	462a      	mov	r2, r5
 800b550:	4603      	mov	r3, r0
 800b552:	464d      	mov	r5, r9
 800b554:	900a      	str	r0, [sp, #40]	@ 0x28
 800b556:	2a65      	cmp	r2, #101	@ 0x65
 800b558:	d001      	beq.n	800b55e <_strtod_l+0x16e>
 800b55a:	2a45      	cmp	r2, #69	@ 0x45
 800b55c:	d114      	bne.n	800b588 <_strtod_l+0x198>
 800b55e:	b91d      	cbnz	r5, 800b568 <_strtod_l+0x178>
 800b560:	9a08      	ldr	r2, [sp, #32]
 800b562:	4302      	orrs	r2, r0
 800b564:	d096      	beq.n	800b494 <_strtod_l+0xa4>
 800b566:	2500      	movs	r5, #0
 800b568:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b56a:	1c62      	adds	r2, r4, #1
 800b56c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b56e:	7862      	ldrb	r2, [r4, #1]
 800b570:	2a2b      	cmp	r2, #43	@ 0x2b
 800b572:	d07a      	beq.n	800b66a <_strtod_l+0x27a>
 800b574:	2a2d      	cmp	r2, #45	@ 0x2d
 800b576:	d07e      	beq.n	800b676 <_strtod_l+0x286>
 800b578:	f04f 0c00 	mov.w	ip, #0
 800b57c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b580:	2909      	cmp	r1, #9
 800b582:	f240 8085 	bls.w	800b690 <_strtod_l+0x2a0>
 800b586:	9419      	str	r4, [sp, #100]	@ 0x64
 800b588:	f04f 0800 	mov.w	r8, #0
 800b58c:	e0a5      	b.n	800b6da <_strtod_l+0x2ea>
 800b58e:	2300      	movs	r3, #0
 800b590:	e7c8      	b.n	800b524 <_strtod_l+0x134>
 800b592:	f1b9 0f08 	cmp.w	r9, #8
 800b596:	bfd8      	it	le
 800b598:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b59a:	f100 0001 	add.w	r0, r0, #1
 800b59e:	bfd6      	itet	le
 800b5a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5a4:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b5a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b5aa:	f109 0901 	add.w	r9, r9, #1
 800b5ae:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5b0:	e7bf      	b.n	800b532 <_strtod_l+0x142>
 800b5b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5b8:	785a      	ldrb	r2, [r3, #1]
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	d03b      	beq.n	800b638 <_strtod_l+0x248>
 800b5c0:	464d      	mov	r5, r9
 800b5c2:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5c4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b5c8:	2b09      	cmp	r3, #9
 800b5ca:	d912      	bls.n	800b5f2 <_strtod_l+0x202>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e7c2      	b.n	800b556 <_strtod_l+0x166>
 800b5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5d8:	785a      	ldrb	r2, [r3, #1]
 800b5da:	2a30      	cmp	r2, #48	@ 0x30
 800b5dc:	d0f8      	beq.n	800b5d0 <_strtod_l+0x1e0>
 800b5de:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	f200 84c8 	bhi.w	800bf78 <_strtod_l+0xb88>
 800b5e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5f2:	3a30      	subs	r2, #48	@ 0x30
 800b5f4:	f100 0301 	add.w	r3, r0, #1
 800b5f8:	d018      	beq.n	800b62c <_strtod_l+0x23c>
 800b5fa:	462e      	mov	r6, r5
 800b5fc:	f04f 0e0a 	mov.w	lr, #10
 800b600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b602:	4419      	add	r1, r3
 800b604:	910a      	str	r1, [sp, #40]	@ 0x28
 800b606:	1c71      	adds	r1, r6, #1
 800b608:	eba1 0c05 	sub.w	ip, r1, r5
 800b60c:	4563      	cmp	r3, ip
 800b60e:	dc15      	bgt.n	800b63c <_strtod_l+0x24c>
 800b610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b614:	182b      	adds	r3, r5, r0
 800b616:	2b08      	cmp	r3, #8
 800b618:	f105 0501 	add.w	r5, r5, #1
 800b61c:	4405      	add	r5, r0
 800b61e:	dc1a      	bgt.n	800b656 <_strtod_l+0x266>
 800b620:	230a      	movs	r3, #10
 800b622:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b624:	fb03 2301 	mla	r3, r3, r1, r2
 800b628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b62a:	2300      	movs	r3, #0
 800b62c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b62e:	4618      	mov	r0, r3
 800b630:	1c51      	adds	r1, r2, #1
 800b632:	9119      	str	r1, [sp, #100]	@ 0x64
 800b634:	7852      	ldrb	r2, [r2, #1]
 800b636:	e7c5      	b.n	800b5c4 <_strtod_l+0x1d4>
 800b638:	4648      	mov	r0, r9
 800b63a:	e7ce      	b.n	800b5da <_strtod_l+0x1ea>
 800b63c:	2e08      	cmp	r6, #8
 800b63e:	dc05      	bgt.n	800b64c <_strtod_l+0x25c>
 800b640:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b642:	fb0e f606 	mul.w	r6, lr, r6
 800b646:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b648:	460e      	mov	r6, r1
 800b64a:	e7dc      	b.n	800b606 <_strtod_l+0x216>
 800b64c:	2910      	cmp	r1, #16
 800b64e:	bfd8      	it	le
 800b650:	fb0e f707 	mulle.w	r7, lr, r7
 800b654:	e7f8      	b.n	800b648 <_strtod_l+0x258>
 800b656:	2b0f      	cmp	r3, #15
 800b658:	bfdc      	itt	le
 800b65a:	230a      	movle	r3, #10
 800b65c:	fb03 2707 	mlale	r7, r3, r7, r2
 800b660:	e7e3      	b.n	800b62a <_strtod_l+0x23a>
 800b662:	2300      	movs	r3, #0
 800b664:	930a      	str	r3, [sp, #40]	@ 0x28
 800b666:	2301      	movs	r3, #1
 800b668:	e77a      	b.n	800b560 <_strtod_l+0x170>
 800b66a:	f04f 0c00 	mov.w	ip, #0
 800b66e:	1ca2      	adds	r2, r4, #2
 800b670:	9219      	str	r2, [sp, #100]	@ 0x64
 800b672:	78a2      	ldrb	r2, [r4, #2]
 800b674:	e782      	b.n	800b57c <_strtod_l+0x18c>
 800b676:	f04f 0c01 	mov.w	ip, #1
 800b67a:	e7f8      	b.n	800b66e <_strtod_l+0x27e>
 800b67c:	0800f5e0 	.word	0x0800f5e0
 800b680:	7ff00000 	.word	0x7ff00000
 800b684:	0800f466 	.word	0x0800f466
 800b688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b68a:	1c51      	adds	r1, r2, #1
 800b68c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b68e:	7852      	ldrb	r2, [r2, #1]
 800b690:	2a30      	cmp	r2, #48	@ 0x30
 800b692:	d0f9      	beq.n	800b688 <_strtod_l+0x298>
 800b694:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b698:	2908      	cmp	r1, #8
 800b69a:	f63f af75 	bhi.w	800b588 <_strtod_l+0x198>
 800b69e:	f04f 080a 	mov.w	r8, #10
 800b6a2:	3a30      	subs	r2, #48	@ 0x30
 800b6a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6ac:	1c56      	adds	r6, r2, #1
 800b6ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6b0:	7852      	ldrb	r2, [r2, #1]
 800b6b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6b6:	f1be 0f09 	cmp.w	lr, #9
 800b6ba:	d939      	bls.n	800b730 <_strtod_l+0x340>
 800b6bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6be:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6c2:	1a76      	subs	r6, r6, r1
 800b6c4:	2e08      	cmp	r6, #8
 800b6c6:	dc03      	bgt.n	800b6d0 <_strtod_l+0x2e0>
 800b6c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6ca:	4588      	cmp	r8, r1
 800b6cc:	bfa8      	it	ge
 800b6ce:	4688      	movge	r8, r1
 800b6d0:	f1bc 0f00 	cmp.w	ip, #0
 800b6d4:	d001      	beq.n	800b6da <_strtod_l+0x2ea>
 800b6d6:	f1c8 0800 	rsb	r8, r8, #0
 800b6da:	2d00      	cmp	r5, #0
 800b6dc:	d14e      	bne.n	800b77c <_strtod_l+0x38c>
 800b6de:	9908      	ldr	r1, [sp, #32]
 800b6e0:	4308      	orrs	r0, r1
 800b6e2:	f47f aebe 	bne.w	800b462 <_strtod_l+0x72>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f47f aed4 	bne.w	800b494 <_strtod_l+0xa4>
 800b6ec:	2a69      	cmp	r2, #105	@ 0x69
 800b6ee:	d028      	beq.n	800b742 <_strtod_l+0x352>
 800b6f0:	dc25      	bgt.n	800b73e <_strtod_l+0x34e>
 800b6f2:	2a49      	cmp	r2, #73	@ 0x49
 800b6f4:	d025      	beq.n	800b742 <_strtod_l+0x352>
 800b6f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b6f8:	f47f aecc 	bne.w	800b494 <_strtod_l+0xa4>
 800b6fc:	4999      	ldr	r1, [pc, #612]	@ (800b964 <_strtod_l+0x574>)
 800b6fe:	a819      	add	r0, sp, #100	@ 0x64
 800b700:	f001 f93e 	bl	800c980 <__match>
 800b704:	2800      	cmp	r0, #0
 800b706:	f43f aec5 	beq.w	800b494 <_strtod_l+0xa4>
 800b70a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b28      	cmp	r3, #40	@ 0x28
 800b710:	d12e      	bne.n	800b770 <_strtod_l+0x380>
 800b712:	4995      	ldr	r1, [pc, #596]	@ (800b968 <_strtod_l+0x578>)
 800b714:	aa1c      	add	r2, sp, #112	@ 0x70
 800b716:	a819      	add	r0, sp, #100	@ 0x64
 800b718:	f001 f946 	bl	800c9a8 <__hexnan>
 800b71c:	2805      	cmp	r0, #5
 800b71e:	d127      	bne.n	800b770 <_strtod_l+0x380>
 800b720:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b722:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b726:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b72a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b72e:	e698      	b.n	800b462 <_strtod_l+0x72>
 800b730:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b732:	fb08 2101 	mla	r1, r8, r1, r2
 800b736:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b73c:	e7b5      	b.n	800b6aa <_strtod_l+0x2ba>
 800b73e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b740:	e7da      	b.n	800b6f8 <_strtod_l+0x308>
 800b742:	498a      	ldr	r1, [pc, #552]	@ (800b96c <_strtod_l+0x57c>)
 800b744:	a819      	add	r0, sp, #100	@ 0x64
 800b746:	f001 f91b 	bl	800c980 <__match>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	f43f aea2 	beq.w	800b494 <_strtod_l+0xa4>
 800b750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b752:	4987      	ldr	r1, [pc, #540]	@ (800b970 <_strtod_l+0x580>)
 800b754:	3b01      	subs	r3, #1
 800b756:	a819      	add	r0, sp, #100	@ 0x64
 800b758:	9319      	str	r3, [sp, #100]	@ 0x64
 800b75a:	f001 f911 	bl	800c980 <__match>
 800b75e:	b910      	cbnz	r0, 800b766 <_strtod_l+0x376>
 800b760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b762:	3301      	adds	r3, #1
 800b764:	9319      	str	r3, [sp, #100]	@ 0x64
 800b766:	f04f 0a00 	mov.w	sl, #0
 800b76a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800b974 <_strtod_l+0x584>
 800b76e:	e678      	b.n	800b462 <_strtod_l+0x72>
 800b770:	4881      	ldr	r0, [pc, #516]	@ (800b978 <_strtod_l+0x588>)
 800b772:	f000 fe2d 	bl	800c3d0 <nan>
 800b776:	4682      	mov	sl, r0
 800b778:	468b      	mov	fp, r1
 800b77a:	e672      	b.n	800b462 <_strtod_l+0x72>
 800b77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b77e:	f1b9 0f00 	cmp.w	r9, #0
 800b782:	bf08      	it	eq
 800b784:	46a9      	moveq	r9, r5
 800b786:	eba8 0303 	sub.w	r3, r8, r3
 800b78a:	2d10      	cmp	r5, #16
 800b78c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b78e:	462c      	mov	r4, r5
 800b790:	9309      	str	r3, [sp, #36]	@ 0x24
 800b792:	bfa8      	it	ge
 800b794:	2410      	movge	r4, #16
 800b796:	f7f4 fe25 	bl	80003e4 <__aeabi_ui2d>
 800b79a:	2d09      	cmp	r5, #9
 800b79c:	4682      	mov	sl, r0
 800b79e:	468b      	mov	fp, r1
 800b7a0:	dc11      	bgt.n	800b7c6 <_strtod_l+0x3d6>
 800b7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f43f ae5c 	beq.w	800b462 <_strtod_l+0x72>
 800b7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ac:	dd76      	ble.n	800b89c <_strtod_l+0x4ac>
 800b7ae:	2b16      	cmp	r3, #22
 800b7b0:	dc5d      	bgt.n	800b86e <_strtod_l+0x47e>
 800b7b2:	4972      	ldr	r1, [pc, #456]	@ (800b97c <_strtod_l+0x58c>)
 800b7b4:	4652      	mov	r2, sl
 800b7b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c0:	f7f4 fe8a 	bl	80004d8 <__aeabi_dmul>
 800b7c4:	e7d7      	b.n	800b776 <_strtod_l+0x386>
 800b7c6:	4b6d      	ldr	r3, [pc, #436]	@ (800b97c <_strtod_l+0x58c>)
 800b7c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7d0:	f7f4 fe82 	bl	80004d8 <__aeabi_dmul>
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	468b      	mov	fp, r1
 800b7da:	f7f4 fe03 	bl	80003e4 <__aeabi_ui2d>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	f7f4 fcc1 	bl	800016c <__adddf3>
 800b7ea:	2d0f      	cmp	r5, #15
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	ddd7      	ble.n	800b7a2 <_strtod_l+0x3b2>
 800b7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f4:	1b2c      	subs	r4, r5, r4
 800b7f6:	441c      	add	r4, r3
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	f340 8093 	ble.w	800b924 <_strtod_l+0x534>
 800b7fe:	f014 030f 	ands.w	r3, r4, #15
 800b802:	d00a      	beq.n	800b81a <_strtod_l+0x42a>
 800b804:	495d      	ldr	r1, [pc, #372]	@ (800b97c <_strtod_l+0x58c>)
 800b806:	4652      	mov	r2, sl
 800b808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b810:	465b      	mov	r3, fp
 800b812:	f7f4 fe61 	bl	80004d8 <__aeabi_dmul>
 800b816:	4682      	mov	sl, r0
 800b818:	468b      	mov	fp, r1
 800b81a:	f034 040f 	bics.w	r4, r4, #15
 800b81e:	d073      	beq.n	800b908 <_strtod_l+0x518>
 800b820:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b824:	dd49      	ble.n	800b8ba <_strtod_l+0x4ca>
 800b826:	2400      	movs	r4, #0
 800b828:	46a0      	mov	r8, r4
 800b82a:	46a1      	mov	r9, r4
 800b82c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b82e:	2322      	movs	r3, #34	@ 0x22
 800b830:	f04f 0a00 	mov.w	sl, #0
 800b834:	9a05      	ldr	r2, [sp, #20]
 800b836:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800b974 <_strtod_l+0x584>
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f43f ae0f 	beq.w	800b462 <_strtod_l+0x72>
 800b844:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b846:	9805      	ldr	r0, [sp, #20]
 800b848:	f001 fa4a 	bl	800cce0 <_Bfree>
 800b84c:	4649      	mov	r1, r9
 800b84e:	9805      	ldr	r0, [sp, #20]
 800b850:	f001 fa46 	bl	800cce0 <_Bfree>
 800b854:	4641      	mov	r1, r8
 800b856:	9805      	ldr	r0, [sp, #20]
 800b858:	f001 fa42 	bl	800cce0 <_Bfree>
 800b85c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b85e:	9805      	ldr	r0, [sp, #20]
 800b860:	f001 fa3e 	bl	800cce0 <_Bfree>
 800b864:	4621      	mov	r1, r4
 800b866:	9805      	ldr	r0, [sp, #20]
 800b868:	f001 fa3a 	bl	800cce0 <_Bfree>
 800b86c:	e5f9      	b.n	800b462 <_strtod_l+0x72>
 800b86e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b870:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b874:	4293      	cmp	r3, r2
 800b876:	dbbc      	blt.n	800b7f2 <_strtod_l+0x402>
 800b878:	4c40      	ldr	r4, [pc, #256]	@ (800b97c <_strtod_l+0x58c>)
 800b87a:	f1c5 050f 	rsb	r5, r5, #15
 800b87e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b882:	4652      	mov	r2, sl
 800b884:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b888:	465b      	mov	r3, fp
 800b88a:	f7f4 fe25 	bl	80004d8 <__aeabi_dmul>
 800b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b890:	1b5d      	subs	r5, r3, r5
 800b892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b89a:	e791      	b.n	800b7c0 <_strtod_l+0x3d0>
 800b89c:	3316      	adds	r3, #22
 800b89e:	dba8      	blt.n	800b7f2 <_strtod_l+0x402>
 800b8a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	eba3 0808 	sub.w	r8, r3, r8
 800b8a8:	4b34      	ldr	r3, [pc, #208]	@ (800b97c <_strtod_l+0x58c>)
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8b0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b8b4:	f7f4 ff3a 	bl	800072c <__aeabi_ddiv>
 800b8b8:	e75d      	b.n	800b776 <_strtod_l+0x386>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4650      	mov	r0, sl
 800b8be:	4659      	mov	r1, fp
 800b8c0:	461e      	mov	r6, r3
 800b8c2:	4f2f      	ldr	r7, [pc, #188]	@ (800b980 <_strtod_l+0x590>)
 800b8c4:	1124      	asrs	r4, r4, #4
 800b8c6:	2c01      	cmp	r4, #1
 800b8c8:	dc21      	bgt.n	800b90e <_strtod_l+0x51e>
 800b8ca:	b10b      	cbz	r3, 800b8d0 <_strtod_l+0x4e0>
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	468b      	mov	fp, r1
 800b8d0:	492b      	ldr	r1, [pc, #172]	@ (800b980 <_strtod_l+0x590>)
 800b8d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8da:	4652      	mov	r2, sl
 800b8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	f7f4 fdf9 	bl	80004d8 <__aeabi_dmul>
 800b8e6:	4b23      	ldr	r3, [pc, #140]	@ (800b974 <_strtod_l+0x584>)
 800b8e8:	460a      	mov	r2, r1
 800b8ea:	400b      	ands	r3, r1
 800b8ec:	4925      	ldr	r1, [pc, #148]	@ (800b984 <_strtod_l+0x594>)
 800b8ee:	4682      	mov	sl, r0
 800b8f0:	428b      	cmp	r3, r1
 800b8f2:	d898      	bhi.n	800b826 <_strtod_l+0x436>
 800b8f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	bf86      	itte	hi
 800b8fc:	f04f 3aff 	movhi.w	sl, #4294967295
 800b900:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800b988 <_strtod_l+0x598>
 800b904:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b908:	2300      	movs	r3, #0
 800b90a:	9308      	str	r3, [sp, #32]
 800b90c:	e076      	b.n	800b9fc <_strtod_l+0x60c>
 800b90e:	07e2      	lsls	r2, r4, #31
 800b910:	d504      	bpl.n	800b91c <_strtod_l+0x52c>
 800b912:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b916:	f7f4 fddf 	bl	80004d8 <__aeabi_dmul>
 800b91a:	2301      	movs	r3, #1
 800b91c:	3601      	adds	r6, #1
 800b91e:	1064      	asrs	r4, r4, #1
 800b920:	3708      	adds	r7, #8
 800b922:	e7d0      	b.n	800b8c6 <_strtod_l+0x4d6>
 800b924:	d0f0      	beq.n	800b908 <_strtod_l+0x518>
 800b926:	4264      	negs	r4, r4
 800b928:	f014 020f 	ands.w	r2, r4, #15
 800b92c:	d00a      	beq.n	800b944 <_strtod_l+0x554>
 800b92e:	4b13      	ldr	r3, [pc, #76]	@ (800b97c <_strtod_l+0x58c>)
 800b930:	4650      	mov	r0, sl
 800b932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b936:	4659      	mov	r1, fp
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f7f4 fef6 	bl	800072c <__aeabi_ddiv>
 800b940:	4682      	mov	sl, r0
 800b942:	468b      	mov	fp, r1
 800b944:	1124      	asrs	r4, r4, #4
 800b946:	d0df      	beq.n	800b908 <_strtod_l+0x518>
 800b948:	2c1f      	cmp	r4, #31
 800b94a:	dd1f      	ble.n	800b98c <_strtod_l+0x59c>
 800b94c:	2400      	movs	r4, #0
 800b94e:	46a0      	mov	r8, r4
 800b950:	46a1      	mov	r9, r4
 800b952:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b954:	2322      	movs	r3, #34	@ 0x22
 800b956:	9a05      	ldr	r2, [sp, #20]
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	f04f 0b00 	mov.w	fp, #0
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	e76b      	b.n	800b83c <_strtod_l+0x44c>
 800b964:	0800f471 	.word	0x0800f471
 800b968:	0800f5cc 	.word	0x0800f5cc
 800b96c:	0800f468 	.word	0x0800f468
 800b970:	0800f46b 	.word	0x0800f46b
 800b974:	7ff00000 	.word	0x7ff00000
 800b978:	0800f5cb 	.word	0x0800f5cb
 800b97c:	0800f658 	.word	0x0800f658
 800b980:	0800f630 	.word	0x0800f630
 800b984:	7ca00000 	.word	0x7ca00000
 800b988:	7fefffff 	.word	0x7fefffff
 800b98c:	f014 0310 	ands.w	r3, r4, #16
 800b990:	bf18      	it	ne
 800b992:	236a      	movne	r3, #106	@ 0x6a
 800b994:	4650      	mov	r0, sl
 800b996:	9308      	str	r3, [sp, #32]
 800b998:	4659      	mov	r1, fp
 800b99a:	2300      	movs	r3, #0
 800b99c:	4e77      	ldr	r6, [pc, #476]	@ (800bb7c <_strtod_l+0x78c>)
 800b99e:	07e7      	lsls	r7, r4, #31
 800b9a0:	d504      	bpl.n	800b9ac <_strtod_l+0x5bc>
 800b9a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9a6:	f7f4 fd97 	bl	80004d8 <__aeabi_dmul>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	1064      	asrs	r4, r4, #1
 800b9ae:	f106 0608 	add.w	r6, r6, #8
 800b9b2:	d1f4      	bne.n	800b99e <_strtod_l+0x5ae>
 800b9b4:	b10b      	cbz	r3, 800b9ba <_strtod_l+0x5ca>
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	468b      	mov	fp, r1
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	b1b3      	cbz	r3, 800b9ec <_strtod_l+0x5fc>
 800b9be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b9c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	dd0f      	ble.n	800b9ec <_strtod_l+0x5fc>
 800b9cc:	2b1f      	cmp	r3, #31
 800b9ce:	dd58      	ble.n	800ba82 <_strtod_l+0x692>
 800b9d0:	2b34      	cmp	r3, #52	@ 0x34
 800b9d2:	bfd8      	it	le
 800b9d4:	f04f 33ff 	movle.w	r3, #4294967295
 800b9d8:	f04f 0a00 	mov.w	sl, #0
 800b9dc:	bfcf      	iteee	gt
 800b9de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b9e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9e6:	4093      	lslle	r3, r2
 800b9e8:	ea03 0b01 	andle.w	fp, r3, r1
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	f7f4 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d1a7      	bne.n	800b94c <_strtod_l+0x55c>
 800b9fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9fe:	464a      	mov	r2, r9
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba04:	462b      	mov	r3, r5
 800ba06:	9805      	ldr	r0, [sp, #20]
 800ba08:	f001 f9d2 	bl	800cdb0 <__s2b>
 800ba0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	f43f af09 	beq.w	800b826 <_strtod_l+0x436>
 800ba14:	2400      	movs	r4, #0
 800ba16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	eba3 0308 	sub.w	r3, r3, r8
 800ba20:	bfa8      	it	ge
 800ba22:	2300      	movge	r3, #0
 800ba24:	46a0      	mov	r8, r4
 800ba26:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba28:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba2c:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba30:	9805      	ldr	r0, [sp, #20]
 800ba32:	6859      	ldr	r1, [r3, #4]
 800ba34:	f001 f914 	bl	800cc60 <_Balloc>
 800ba38:	4681      	mov	r9, r0
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	f43f aef7 	beq.w	800b82e <_strtod_l+0x43e>
 800ba40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba42:	300c      	adds	r0, #12
 800ba44:	691a      	ldr	r2, [r3, #16]
 800ba46:	f103 010c 	add.w	r1, r3, #12
 800ba4a:	3202      	adds	r2, #2
 800ba4c:	0092      	lsls	r2, r2, #2
 800ba4e:	f000 fcb0 	bl	800c3b2 <memcpy>
 800ba52:	ab1c      	add	r3, sp, #112	@ 0x70
 800ba54:	9301      	str	r3, [sp, #4]
 800ba56:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	465b      	mov	r3, fp
 800ba5e:	9805      	ldr	r0, [sp, #20]
 800ba60:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba64:	f001 fcd0 	bl	800d408 <__d2b>
 800ba68:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	f43f aedf 	beq.w	800b82e <_strtod_l+0x43e>
 800ba70:	2101      	movs	r1, #1
 800ba72:	9805      	ldr	r0, [sp, #20]
 800ba74:	f001 fa32 	bl	800cedc <__i2b>
 800ba78:	4680      	mov	r8, r0
 800ba7a:	b948      	cbnz	r0, 800ba90 <_strtod_l+0x6a0>
 800ba7c:	f04f 0800 	mov.w	r8, #0
 800ba80:	e6d5      	b.n	800b82e <_strtod_l+0x43e>
 800ba82:	f04f 32ff 	mov.w	r2, #4294967295
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	ea03 0a0a 	and.w	sl, r3, sl
 800ba8e:	e7ad      	b.n	800b9ec <_strtod_l+0x5fc>
 800ba90:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba92:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	bfab      	itete	ge
 800ba98:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba9a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba9c:	18ef      	addge	r7, r5, r3
 800ba9e:	1b5e      	sublt	r6, r3, r5
 800baa0:	9b08      	ldr	r3, [sp, #32]
 800baa2:	bfa8      	it	ge
 800baa4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800baa6:	eba5 0503 	sub.w	r5, r5, r3
 800baaa:	4415      	add	r5, r2
 800baac:	4b34      	ldr	r3, [pc, #208]	@ (800bb80 <_strtod_l+0x790>)
 800baae:	f105 35ff 	add.w	r5, r5, #4294967295
 800bab2:	bfb8      	it	lt
 800bab4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bab6:	429d      	cmp	r5, r3
 800bab8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800babc:	da50      	bge.n	800bb60 <_strtod_l+0x770>
 800babe:	1b5b      	subs	r3, r3, r5
 800bac0:	2b1f      	cmp	r3, #31
 800bac2:	f04f 0101 	mov.w	r1, #1
 800bac6:	eba2 0203 	sub.w	r2, r2, r3
 800baca:	dc3d      	bgt.n	800bb48 <_strtod_l+0x758>
 800bacc:	fa01 f303 	lsl.w	r3, r1, r3
 800bad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bad2:	2300      	movs	r3, #0
 800bad4:	9310      	str	r3, [sp, #64]	@ 0x40
 800bad6:	18bd      	adds	r5, r7, r2
 800bad8:	9b08      	ldr	r3, [sp, #32]
 800bada:	42af      	cmp	r7, r5
 800badc:	4416      	add	r6, r2
 800bade:	441e      	add	r6, r3
 800bae0:	463b      	mov	r3, r7
 800bae2:	bfa8      	it	ge
 800bae4:	462b      	movge	r3, r5
 800bae6:	42b3      	cmp	r3, r6
 800bae8:	bfa8      	it	ge
 800baea:	4633      	movge	r3, r6
 800baec:	2b00      	cmp	r3, #0
 800baee:	bfc2      	ittt	gt
 800baf0:	1aed      	subgt	r5, r5, r3
 800baf2:	1af6      	subgt	r6, r6, r3
 800baf4:	1aff      	subgt	r7, r7, r3
 800baf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dd16      	ble.n	800bb2a <_strtod_l+0x73a>
 800bafc:	4641      	mov	r1, r8
 800bafe:	461a      	mov	r2, r3
 800bb00:	9805      	ldr	r0, [sp, #20]
 800bb02:	f001 faa3 	bl	800d04c <__pow5mult>
 800bb06:	4680      	mov	r8, r0
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d0b7      	beq.n	800ba7c <_strtod_l+0x68c>
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb10:	9805      	ldr	r0, [sp, #20]
 800bb12:	f001 f9f9 	bl	800cf08 <__multiply>
 800bb16:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	f43f ae88 	beq.w	800b82e <_strtod_l+0x43e>
 800bb1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb20:	9805      	ldr	r0, [sp, #20]
 800bb22:	f001 f8dd 	bl	800cce0 <_Bfree>
 800bb26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb28:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb2a:	2d00      	cmp	r5, #0
 800bb2c:	dc1d      	bgt.n	800bb6a <_strtod_l+0x77a>
 800bb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	dd27      	ble.n	800bb84 <_strtod_l+0x794>
 800bb34:	4649      	mov	r1, r9
 800bb36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb38:	9805      	ldr	r0, [sp, #20]
 800bb3a:	f001 fa87 	bl	800d04c <__pow5mult>
 800bb3e:	4681      	mov	r9, r0
 800bb40:	bb00      	cbnz	r0, 800bb84 <_strtod_l+0x794>
 800bb42:	f04f 0900 	mov.w	r9, #0
 800bb46:	e672      	b.n	800b82e <_strtod_l+0x43e>
 800bb48:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb4c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb50:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb54:	35e2      	adds	r5, #226	@ 0xe2
 800bb56:	fa01 f305 	lsl.w	r3, r1, r5
 800bb5a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb5c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb5e:	e7ba      	b.n	800bad6 <_strtod_l+0x6e6>
 800bb60:	2300      	movs	r3, #0
 800bb62:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb64:	2301      	movs	r3, #1
 800bb66:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb68:	e7b5      	b.n	800bad6 <_strtod_l+0x6e6>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	f001 fac6 	bl	800d100 <__lshift>
 800bb74:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d1d9      	bne.n	800bb2e <_strtod_l+0x73e>
 800bb7a:	e658      	b.n	800b82e <_strtod_l+0x43e>
 800bb7c:	0800f5f8 	.word	0x0800f5f8
 800bb80:	fffffc02 	.word	0xfffffc02
 800bb84:	2e00      	cmp	r6, #0
 800bb86:	dd07      	ble.n	800bb98 <_strtod_l+0x7a8>
 800bb88:	4649      	mov	r1, r9
 800bb8a:	4632      	mov	r2, r6
 800bb8c:	9805      	ldr	r0, [sp, #20]
 800bb8e:	f001 fab7 	bl	800d100 <__lshift>
 800bb92:	4681      	mov	r9, r0
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d0d4      	beq.n	800bb42 <_strtod_l+0x752>
 800bb98:	2f00      	cmp	r7, #0
 800bb9a:	dd08      	ble.n	800bbae <_strtod_l+0x7be>
 800bb9c:	4641      	mov	r1, r8
 800bb9e:	463a      	mov	r2, r7
 800bba0:	9805      	ldr	r0, [sp, #20]
 800bba2:	f001 faad 	bl	800d100 <__lshift>
 800bba6:	4680      	mov	r8, r0
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	f43f ae40 	beq.w	800b82e <_strtod_l+0x43e>
 800bbae:	464a      	mov	r2, r9
 800bbb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbb2:	9805      	ldr	r0, [sp, #20]
 800bbb4:	f001 fb2c 	bl	800d210 <__mdiff>
 800bbb8:	4604      	mov	r4, r0
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f43f ae37 	beq.w	800b82e <_strtod_l+0x43e>
 800bbc0:	68c3      	ldr	r3, [r0, #12]
 800bbc2:	4641      	mov	r1, r8
 800bbc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60c3      	str	r3, [r0, #12]
 800bbca:	f001 fb05 	bl	800d1d8 <__mcmp>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	da3d      	bge.n	800bc4e <_strtod_l+0x85e>
 800bbd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd4:	ea53 030a 	orrs.w	r3, r3, sl
 800bbd8:	d163      	bne.n	800bca2 <_strtod_l+0x8b2>
 800bbda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d15f      	bne.n	800bca2 <_strtod_l+0x8b2>
 800bbe2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbe6:	0d1b      	lsrs	r3, r3, #20
 800bbe8:	051b      	lsls	r3, r3, #20
 800bbea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbee:	d958      	bls.n	800bca2 <_strtod_l+0x8b2>
 800bbf0:	6963      	ldr	r3, [r4, #20]
 800bbf2:	b913      	cbnz	r3, 800bbfa <_strtod_l+0x80a>
 800bbf4:	6923      	ldr	r3, [r4, #16]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	dd53      	ble.n	800bca2 <_strtod_l+0x8b2>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	9805      	ldr	r0, [sp, #20]
 800bc00:	f001 fa7e 	bl	800d100 <__lshift>
 800bc04:	4641      	mov	r1, r8
 800bc06:	4604      	mov	r4, r0
 800bc08:	f001 fae6 	bl	800d1d8 <__mcmp>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	dd48      	ble.n	800bca2 <_strtod_l+0x8b2>
 800bc10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc14:	9a08      	ldr	r2, [sp, #32]
 800bc16:	0d1b      	lsrs	r3, r3, #20
 800bc18:	051b      	lsls	r3, r3, #20
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	d062      	beq.n	800bce4 <_strtod_l+0x8f4>
 800bc1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc22:	d85f      	bhi.n	800bce4 <_strtod_l+0x8f4>
 800bc24:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc28:	f67f ae94 	bls.w	800b954 <_strtod_l+0x564>
 800bc2c:	4650      	mov	r0, sl
 800bc2e:	4659      	mov	r1, fp
 800bc30:	4ba3      	ldr	r3, [pc, #652]	@ (800bec0 <_strtod_l+0xad0>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	f7f4 fc50 	bl	80004d8 <__aeabi_dmul>
 800bc38:	4ba2      	ldr	r3, [pc, #648]	@ (800bec4 <_strtod_l+0xad4>)
 800bc3a:	4682      	mov	sl, r0
 800bc3c:	400b      	ands	r3, r1
 800bc3e:	468b      	mov	fp, r1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f47f adff 	bne.w	800b844 <_strtod_l+0x454>
 800bc46:	2322      	movs	r3, #34	@ 0x22
 800bc48:	9a05      	ldr	r2, [sp, #20]
 800bc4a:	6013      	str	r3, [r2, #0]
 800bc4c:	e5fa      	b.n	800b844 <_strtod_l+0x454>
 800bc4e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bc52:	d165      	bne.n	800bd20 <_strtod_l+0x930>
 800bc54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc5a:	b35a      	cbz	r2, 800bcb4 <_strtod_l+0x8c4>
 800bc5c:	4a9a      	ldr	r2, [pc, #616]	@ (800bec8 <_strtod_l+0xad8>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d12b      	bne.n	800bcba <_strtod_l+0x8ca>
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	4651      	mov	r1, sl
 800bc66:	b303      	cbz	r3, 800bcaa <_strtod_l+0x8ba>
 800bc68:	465a      	mov	r2, fp
 800bc6a:	4b96      	ldr	r3, [pc, #600]	@ (800bec4 <_strtod_l+0xad4>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc72:	f04f 32ff 	mov.w	r2, #4294967295
 800bc76:	d81b      	bhi.n	800bcb0 <_strtod_l+0x8c0>
 800bc78:	0d1b      	lsrs	r3, r3, #20
 800bc7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc82:	4299      	cmp	r1, r3
 800bc84:	d119      	bne.n	800bcba <_strtod_l+0x8ca>
 800bc86:	4b91      	ldr	r3, [pc, #580]	@ (800becc <_strtod_l+0xadc>)
 800bc88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d102      	bne.n	800bc94 <_strtod_l+0x8a4>
 800bc8e:	3101      	adds	r1, #1
 800bc90:	f43f adcd 	beq.w	800b82e <_strtod_l+0x43e>
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	4b8a      	ldr	r3, [pc, #552]	@ (800bec4 <_strtod_l+0xad4>)
 800bc9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc9c:	401a      	ands	r2, r3
 800bc9e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bca2:	9b08      	ldr	r3, [sp, #32]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1c1      	bne.n	800bc2c <_strtod_l+0x83c>
 800bca8:	e5cc      	b.n	800b844 <_strtod_l+0x454>
 800bcaa:	f04f 33ff 	mov.w	r3, #4294967295
 800bcae:	e7e8      	b.n	800bc82 <_strtod_l+0x892>
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	e7e6      	b.n	800bc82 <_strtod_l+0x892>
 800bcb4:	ea53 030a 	orrs.w	r3, r3, sl
 800bcb8:	d0aa      	beq.n	800bc10 <_strtod_l+0x820>
 800bcba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcbc:	b1db      	cbz	r3, 800bcf6 <_strtod_l+0x906>
 800bcbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcc0:	4213      	tst	r3, r2
 800bcc2:	d0ee      	beq.n	800bca2 <_strtod_l+0x8b2>
 800bcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	4659      	mov	r1, fp
 800bcca:	9a08      	ldr	r2, [sp, #32]
 800bccc:	b1bb      	cbz	r3, 800bcfe <_strtod_l+0x90e>
 800bcce:	f7ff fb6c 	bl	800b3aa <sulp>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcda:	f7f4 fa47 	bl	800016c <__adddf3>
 800bcde:	4682      	mov	sl, r0
 800bce0:	468b      	mov	fp, r1
 800bce2:	e7de      	b.n	800bca2 <_strtod_l+0x8b2>
 800bce4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bce8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcec:	f04f 3aff 	mov.w	sl, #4294967295
 800bcf0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcf4:	e7d5      	b.n	800bca2 <_strtod_l+0x8b2>
 800bcf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcf8:	ea13 0f0a 	tst.w	r3, sl
 800bcfc:	e7e1      	b.n	800bcc2 <_strtod_l+0x8d2>
 800bcfe:	f7ff fb54 	bl	800b3aa <sulp>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd0a:	f7f4 fa2d 	bl	8000168 <__aeabi_dsub>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2300      	movs	r3, #0
 800bd12:	4682      	mov	sl, r0
 800bd14:	468b      	mov	fp, r1
 800bd16:	f7f4 fe47 	bl	80009a8 <__aeabi_dcmpeq>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d0c1      	beq.n	800bca2 <_strtod_l+0x8b2>
 800bd1e:	e619      	b.n	800b954 <_strtod_l+0x564>
 800bd20:	4641      	mov	r1, r8
 800bd22:	4620      	mov	r0, r4
 800bd24:	f001 fbc8 	bl	800d4b8 <__ratio>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd2e:	4606      	mov	r6, r0
 800bd30:	460f      	mov	r7, r1
 800bd32:	f7f4 fe4d 	bl	80009d0 <__aeabi_dcmple>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d06d      	beq.n	800be16 <_strtod_l+0xa26>
 800bd3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d178      	bne.n	800be32 <_strtod_l+0xa42>
 800bd40:	f1ba 0f00 	cmp.w	sl, #0
 800bd44:	d156      	bne.n	800bdf4 <_strtod_l+0xa04>
 800bd46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d158      	bne.n	800be02 <_strtod_l+0xa12>
 800bd50:	2200      	movs	r2, #0
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	4b5e      	ldr	r3, [pc, #376]	@ (800bed0 <_strtod_l+0xae0>)
 800bd58:	f7f4 fe30 	bl	80009bc <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d157      	bne.n	800be10 <_strtod_l+0xa20>
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	2200      	movs	r2, #0
 800bd66:	4b5b      	ldr	r3, [pc, #364]	@ (800bed4 <_strtod_l+0xae4>)
 800bd68:	f7f4 fbb6 	bl	80004d8 <__aeabi_dmul>
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd74:	9606      	str	r6, [sp, #24]
 800bd76:	9307      	str	r3, [sp, #28]
 800bd78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd7c:	4d51      	ldr	r5, [pc, #324]	@ (800bec4 <_strtod_l+0xad4>)
 800bd7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd84:	401d      	ands	r5, r3
 800bd86:	4b54      	ldr	r3, [pc, #336]	@ (800bed8 <_strtod_l+0xae8>)
 800bd88:	429d      	cmp	r5, r3
 800bd8a:	f040 80ab 	bne.w	800bee4 <_strtod_l+0xaf4>
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd90:	4650      	mov	r0, sl
 800bd92:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd96:	4659      	mov	r1, fp
 800bd98:	f001 face 	bl	800d338 <__ulp>
 800bd9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bda0:	f7f4 fb9a 	bl	80004d8 <__aeabi_dmul>
 800bda4:	4652      	mov	r2, sl
 800bda6:	465b      	mov	r3, fp
 800bda8:	f7f4 f9e0 	bl	800016c <__adddf3>
 800bdac:	460b      	mov	r3, r1
 800bdae:	4945      	ldr	r1, [pc, #276]	@ (800bec4 <_strtod_l+0xad4>)
 800bdb0:	4a4a      	ldr	r2, [pc, #296]	@ (800bedc <_strtod_l+0xaec>)
 800bdb2:	4019      	ands	r1, r3
 800bdb4:	4291      	cmp	r1, r2
 800bdb6:	4682      	mov	sl, r0
 800bdb8:	d942      	bls.n	800be40 <_strtod_l+0xa50>
 800bdba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdbc:	4b43      	ldr	r3, [pc, #268]	@ (800becc <_strtod_l+0xadc>)
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d103      	bne.n	800bdca <_strtod_l+0x9da>
 800bdc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	f43f ad32 	beq.w	800b82e <_strtod_l+0x43e>
 800bdca:	f04f 3aff 	mov.w	sl, #4294967295
 800bdce:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800becc <_strtod_l+0xadc>
 800bdd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdd4:	9805      	ldr	r0, [sp, #20]
 800bdd6:	f000 ff83 	bl	800cce0 <_Bfree>
 800bdda:	4649      	mov	r1, r9
 800bddc:	9805      	ldr	r0, [sp, #20]
 800bdde:	f000 ff7f 	bl	800cce0 <_Bfree>
 800bde2:	4641      	mov	r1, r8
 800bde4:	9805      	ldr	r0, [sp, #20]
 800bde6:	f000 ff7b 	bl	800cce0 <_Bfree>
 800bdea:	4621      	mov	r1, r4
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	f000 ff77 	bl	800cce0 <_Bfree>
 800bdf2:	e61c      	b.n	800ba2e <_strtod_l+0x63e>
 800bdf4:	f1ba 0f01 	cmp.w	sl, #1
 800bdf8:	d103      	bne.n	800be02 <_strtod_l+0xa12>
 800bdfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f43f ada9 	beq.w	800b954 <_strtod_l+0x564>
 800be02:	2200      	movs	r2, #0
 800be04:	4b36      	ldr	r3, [pc, #216]	@ (800bee0 <_strtod_l+0xaf0>)
 800be06:	2600      	movs	r6, #0
 800be08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be0c:	4f30      	ldr	r7, [pc, #192]	@ (800bed0 <_strtod_l+0xae0>)
 800be0e:	e7b3      	b.n	800bd78 <_strtod_l+0x988>
 800be10:	2600      	movs	r6, #0
 800be12:	4f30      	ldr	r7, [pc, #192]	@ (800bed4 <_strtod_l+0xae4>)
 800be14:	e7ac      	b.n	800bd70 <_strtod_l+0x980>
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	4b2e      	ldr	r3, [pc, #184]	@ (800bed4 <_strtod_l+0xae4>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	f7f4 fb5b 	bl	80004d8 <__aeabi_dmul>
 800be22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0a1      	beq.n	800bd70 <_strtod_l+0x980>
 800be2c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be30:	e7a2      	b.n	800bd78 <_strtod_l+0x988>
 800be32:	2200      	movs	r2, #0
 800be34:	4b26      	ldr	r3, [pc, #152]	@ (800bed0 <_strtod_l+0xae0>)
 800be36:	4616      	mov	r6, r2
 800be38:	461f      	mov	r7, r3
 800be3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be3e:	e79b      	b.n	800bd78 <_strtod_l+0x988>
 800be40:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be44:	9b08      	ldr	r3, [sp, #32]
 800be46:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1c1      	bne.n	800bdd2 <_strtod_l+0x9e2>
 800be4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be52:	0d1b      	lsrs	r3, r3, #20
 800be54:	051b      	lsls	r3, r3, #20
 800be56:	429d      	cmp	r5, r3
 800be58:	d1bb      	bne.n	800bdd2 <_strtod_l+0x9e2>
 800be5a:	4630      	mov	r0, r6
 800be5c:	4639      	mov	r1, r7
 800be5e:	f7f5 f98b 	bl	8001178 <__aeabi_d2lz>
 800be62:	f7f4 fb0b 	bl	800047c <__aeabi_l2d>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4630      	mov	r0, r6
 800be6c:	4639      	mov	r1, r7
 800be6e:	f7f4 f97b 	bl	8000168 <__aeabi_dsub>
 800be72:	460b      	mov	r3, r1
 800be74:	4602      	mov	r2, r0
 800be76:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be80:	ea46 060a 	orr.w	r6, r6, sl
 800be84:	431e      	orrs	r6, r3
 800be86:	d06a      	beq.n	800bf5e <_strtod_l+0xb6e>
 800be88:	a309      	add	r3, pc, #36	@ (adr r3, 800beb0 <_strtod_l+0xac0>)
 800be8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8e:	f7f4 fd95 	bl	80009bc <__aeabi_dcmplt>
 800be92:	2800      	cmp	r0, #0
 800be94:	f47f acd6 	bne.w	800b844 <_strtod_l+0x454>
 800be98:	a307      	add	r3, pc, #28	@ (adr r3, 800beb8 <_strtod_l+0xac8>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea2:	f7f4 fda9 	bl	80009f8 <__aeabi_dcmpgt>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d093      	beq.n	800bdd2 <_strtod_l+0x9e2>
 800beaa:	e4cb      	b.n	800b844 <_strtod_l+0x454>
 800beac:	f3af 8000 	nop.w
 800beb0:	94a03595 	.word	0x94a03595
 800beb4:	3fdfffff 	.word	0x3fdfffff
 800beb8:	35afe535 	.word	0x35afe535
 800bebc:	3fe00000 	.word	0x3fe00000
 800bec0:	39500000 	.word	0x39500000
 800bec4:	7ff00000 	.word	0x7ff00000
 800bec8:	000fffff 	.word	0x000fffff
 800becc:	7fefffff 	.word	0x7fefffff
 800bed0:	3ff00000 	.word	0x3ff00000
 800bed4:	3fe00000 	.word	0x3fe00000
 800bed8:	7fe00000 	.word	0x7fe00000
 800bedc:	7c9fffff 	.word	0x7c9fffff
 800bee0:	bff00000 	.word	0xbff00000
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	b323      	cbz	r3, 800bf32 <_strtod_l+0xb42>
 800bee8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800beec:	d821      	bhi.n	800bf32 <_strtod_l+0xb42>
 800beee:	a328      	add	r3, pc, #160	@ (adr r3, 800bf90 <_strtod_l+0xba0>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	4630      	mov	r0, r6
 800bef6:	4639      	mov	r1, r7
 800bef8:	f7f4 fd6a 	bl	80009d0 <__aeabi_dcmple>
 800befc:	b1a0      	cbz	r0, 800bf28 <_strtod_l+0xb38>
 800befe:	4639      	mov	r1, r7
 800bf00:	4630      	mov	r0, r6
 800bf02:	f7f4 fd99 	bl	8000a38 <__aeabi_d2uiz>
 800bf06:	2801      	cmp	r0, #1
 800bf08:	bf38      	it	cc
 800bf0a:	2001      	movcc	r0, #1
 800bf0c:	f7f4 fa6a 	bl	80003e4 <__aeabi_ui2d>
 800bf10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	b9fb      	cbnz	r3, 800bf58 <_strtod_l+0xb68>
 800bf18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf1c:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf1e:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf2e:	1b5b      	subs	r3, r3, r5
 800bf30:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf3a:	f001 f9fd 	bl	800d338 <__ulp>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4650      	mov	r0, sl
 800bf44:	4659      	mov	r1, fp
 800bf46:	f7f4 fac7 	bl	80004d8 <__aeabi_dmul>
 800bf4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf4e:	f7f4 f90d 	bl	800016c <__adddf3>
 800bf52:	4682      	mov	sl, r0
 800bf54:	468b      	mov	fp, r1
 800bf56:	e775      	b.n	800be44 <_strtod_l+0xa54>
 800bf58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf5c:	e7e0      	b.n	800bf20 <_strtod_l+0xb30>
 800bf5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf98 <_strtod_l+0xba8>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7f4 fd2a 	bl	80009bc <__aeabi_dcmplt>
 800bf68:	e79d      	b.n	800bea6 <_strtod_l+0xab6>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf70:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	f7ff ba79 	b.w	800b46a <_strtod_l+0x7a>
 800bf78:	2a65      	cmp	r2, #101	@ 0x65
 800bf7a:	f43f ab72 	beq.w	800b662 <_strtod_l+0x272>
 800bf7e:	2a45      	cmp	r2, #69	@ 0x45
 800bf80:	f43f ab6f 	beq.w	800b662 <_strtod_l+0x272>
 800bf84:	2301      	movs	r3, #1
 800bf86:	f7ff bbaa 	b.w	800b6de <_strtod_l+0x2ee>
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w
 800bf90:	ffc00000 	.word	0xffc00000
 800bf94:	41dfffff 	.word	0x41dfffff
 800bf98:	94a03595 	.word	0x94a03595
 800bf9c:	3fcfffff 	.word	0x3fcfffff

0800bfa0 <strtod>:
 800bfa0:	460a      	mov	r2, r1
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	4802      	ldr	r0, [pc, #8]	@ (800bfb0 <strtod+0x10>)
 800bfa6:	4b03      	ldr	r3, [pc, #12]	@ (800bfb4 <strtod+0x14>)
 800bfa8:	6800      	ldr	r0, [r0, #0]
 800bfaa:	f7ff ba21 	b.w	800b3f0 <_strtod_l>
 800bfae:	bf00      	nop
 800bfb0:	20000300 	.word	0x20000300
 800bfb4:	20000194 	.word	0x20000194

0800bfb8 <std>:
 800bfb8:	2300      	movs	r3, #0
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	e9c0 3300 	strd	r3, r3, [r0]
 800bfc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfc6:	6083      	str	r3, [r0, #8]
 800bfc8:	8181      	strh	r1, [r0, #12]
 800bfca:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfcc:	81c2      	strh	r2, [r0, #14]
 800bfce:	6183      	str	r3, [r0, #24]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	2208      	movs	r2, #8
 800bfd4:	305c      	adds	r0, #92	@ 0x5c
 800bfd6:	f000 f94c 	bl	800c272 <memset>
 800bfda:	4b0d      	ldr	r3, [pc, #52]	@ (800c010 <std+0x58>)
 800bfdc:	6224      	str	r4, [r4, #32]
 800bfde:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfe0:	4b0c      	ldr	r3, [pc, #48]	@ (800c014 <std+0x5c>)
 800bfe2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfe4:	4b0c      	ldr	r3, [pc, #48]	@ (800c018 <std+0x60>)
 800bfe6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfe8:	4b0c      	ldr	r3, [pc, #48]	@ (800c01c <std+0x64>)
 800bfea:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfec:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <std+0x68>)
 800bfee:	429c      	cmp	r4, r3
 800bff0:	d006      	beq.n	800c000 <std+0x48>
 800bff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bff6:	4294      	cmp	r4, r2
 800bff8:	d002      	beq.n	800c000 <std+0x48>
 800bffa:	33d0      	adds	r3, #208	@ 0xd0
 800bffc:	429c      	cmp	r4, r3
 800bffe:	d105      	bne.n	800c00c <std+0x54>
 800c000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c008:	f000 b9d0 	b.w	800c3ac <__retarget_lock_init_recursive>
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	0800c1ed 	.word	0x0800c1ed
 800c014:	0800c20f 	.word	0x0800c20f
 800c018:	0800c247 	.word	0x0800c247
 800c01c:	0800c26b 	.word	0x0800c26b
 800c020:	20004578 	.word	0x20004578

0800c024 <stdio_exit_handler>:
 800c024:	4a02      	ldr	r2, [pc, #8]	@ (800c030 <stdio_exit_handler+0xc>)
 800c026:	4903      	ldr	r1, [pc, #12]	@ (800c034 <stdio_exit_handler+0x10>)
 800c028:	4803      	ldr	r0, [pc, #12]	@ (800c038 <stdio_exit_handler+0x14>)
 800c02a:	f000 b869 	b.w	800c100 <_fwalk_sglue>
 800c02e:	bf00      	nop
 800c030:	20000188 	.word	0x20000188
 800c034:	0800dc89 	.word	0x0800dc89
 800c038:	20000304 	.word	0x20000304

0800c03c <cleanup_stdio>:
 800c03c:	6841      	ldr	r1, [r0, #4]
 800c03e:	4b0c      	ldr	r3, [pc, #48]	@ (800c070 <cleanup_stdio+0x34>)
 800c040:	b510      	push	{r4, lr}
 800c042:	4299      	cmp	r1, r3
 800c044:	4604      	mov	r4, r0
 800c046:	d001      	beq.n	800c04c <cleanup_stdio+0x10>
 800c048:	f001 fe1e 	bl	800dc88 <_fflush_r>
 800c04c:	68a1      	ldr	r1, [r4, #8]
 800c04e:	4b09      	ldr	r3, [pc, #36]	@ (800c074 <cleanup_stdio+0x38>)
 800c050:	4299      	cmp	r1, r3
 800c052:	d002      	beq.n	800c05a <cleanup_stdio+0x1e>
 800c054:	4620      	mov	r0, r4
 800c056:	f001 fe17 	bl	800dc88 <_fflush_r>
 800c05a:	68e1      	ldr	r1, [r4, #12]
 800c05c:	4b06      	ldr	r3, [pc, #24]	@ (800c078 <cleanup_stdio+0x3c>)
 800c05e:	4299      	cmp	r1, r3
 800c060:	d004      	beq.n	800c06c <cleanup_stdio+0x30>
 800c062:	4620      	mov	r0, r4
 800c064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c068:	f001 be0e 	b.w	800dc88 <_fflush_r>
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	bf00      	nop
 800c070:	20004578 	.word	0x20004578
 800c074:	200045e0 	.word	0x200045e0
 800c078:	20004648 	.word	0x20004648

0800c07c <global_stdio_init.part.0>:
 800c07c:	b510      	push	{r4, lr}
 800c07e:	4b0b      	ldr	r3, [pc, #44]	@ (800c0ac <global_stdio_init.part.0+0x30>)
 800c080:	4c0b      	ldr	r4, [pc, #44]	@ (800c0b0 <global_stdio_init.part.0+0x34>)
 800c082:	4a0c      	ldr	r2, [pc, #48]	@ (800c0b4 <global_stdio_init.part.0+0x38>)
 800c084:	4620      	mov	r0, r4
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	2104      	movs	r1, #4
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7ff ff94 	bl	800bfb8 <std>
 800c090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c094:	2201      	movs	r2, #1
 800c096:	2109      	movs	r1, #9
 800c098:	f7ff ff8e 	bl	800bfb8 <std>
 800c09c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a6:	2112      	movs	r1, #18
 800c0a8:	f7ff bf86 	b.w	800bfb8 <std>
 800c0ac:	200046b0 	.word	0x200046b0
 800c0b0:	20004578 	.word	0x20004578
 800c0b4:	0800c025 	.word	0x0800c025

0800c0b8 <__sfp_lock_acquire>:
 800c0b8:	4801      	ldr	r0, [pc, #4]	@ (800c0c0 <__sfp_lock_acquire+0x8>)
 800c0ba:	f000 b978 	b.w	800c3ae <__retarget_lock_acquire_recursive>
 800c0be:	bf00      	nop
 800c0c0:	200046b9 	.word	0x200046b9

0800c0c4 <__sfp_lock_release>:
 800c0c4:	4801      	ldr	r0, [pc, #4]	@ (800c0cc <__sfp_lock_release+0x8>)
 800c0c6:	f000 b973 	b.w	800c3b0 <__retarget_lock_release_recursive>
 800c0ca:	bf00      	nop
 800c0cc:	200046b9 	.word	0x200046b9

0800c0d0 <__sinit>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	f7ff fff0 	bl	800c0b8 <__sfp_lock_acquire>
 800c0d8:	6a23      	ldr	r3, [r4, #32]
 800c0da:	b11b      	cbz	r3, 800c0e4 <__sinit+0x14>
 800c0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e0:	f7ff bff0 	b.w	800c0c4 <__sfp_lock_release>
 800c0e4:	4b04      	ldr	r3, [pc, #16]	@ (800c0f8 <__sinit+0x28>)
 800c0e6:	6223      	str	r3, [r4, #32]
 800c0e8:	4b04      	ldr	r3, [pc, #16]	@ (800c0fc <__sinit+0x2c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1f5      	bne.n	800c0dc <__sinit+0xc>
 800c0f0:	f7ff ffc4 	bl	800c07c <global_stdio_init.part.0>
 800c0f4:	e7f2      	b.n	800c0dc <__sinit+0xc>
 800c0f6:	bf00      	nop
 800c0f8:	0800c03d 	.word	0x0800c03d
 800c0fc:	200046b0 	.word	0x200046b0

0800c100 <_fwalk_sglue>:
 800c100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c104:	4607      	mov	r7, r0
 800c106:	4688      	mov	r8, r1
 800c108:	4614      	mov	r4, r2
 800c10a:	2600      	movs	r6, #0
 800c10c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c110:	f1b9 0901 	subs.w	r9, r9, #1
 800c114:	d505      	bpl.n	800c122 <_fwalk_sglue+0x22>
 800c116:	6824      	ldr	r4, [r4, #0]
 800c118:	2c00      	cmp	r4, #0
 800c11a:	d1f7      	bne.n	800c10c <_fwalk_sglue+0xc>
 800c11c:	4630      	mov	r0, r6
 800c11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c122:	89ab      	ldrh	r3, [r5, #12]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d907      	bls.n	800c138 <_fwalk_sglue+0x38>
 800c128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c12c:	3301      	adds	r3, #1
 800c12e:	d003      	beq.n	800c138 <_fwalk_sglue+0x38>
 800c130:	4629      	mov	r1, r5
 800c132:	4638      	mov	r0, r7
 800c134:	47c0      	blx	r8
 800c136:	4306      	orrs	r6, r0
 800c138:	3568      	adds	r5, #104	@ 0x68
 800c13a:	e7e9      	b.n	800c110 <_fwalk_sglue+0x10>

0800c13c <sniprintf>:
 800c13c:	b40c      	push	{r2, r3}
 800c13e:	b530      	push	{r4, r5, lr}
 800c140:	4b18      	ldr	r3, [pc, #96]	@ (800c1a4 <sniprintf+0x68>)
 800c142:	1e0c      	subs	r4, r1, #0
 800c144:	681d      	ldr	r5, [r3, #0]
 800c146:	b09d      	sub	sp, #116	@ 0x74
 800c148:	da08      	bge.n	800c15c <sniprintf+0x20>
 800c14a:	238b      	movs	r3, #139	@ 0x8b
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	b01d      	add	sp, #116	@ 0x74
 800c154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c158:	b002      	add	sp, #8
 800c15a:	4770      	bx	lr
 800c15c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c160:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c164:	f04f 0300 	mov.w	r3, #0
 800c168:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c16a:	bf0c      	ite	eq
 800c16c:	4623      	moveq	r3, r4
 800c16e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	9307      	str	r3, [sp, #28]
 800c176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c17a:	9002      	str	r0, [sp, #8]
 800c17c:	9006      	str	r0, [sp, #24]
 800c17e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c182:	4628      	mov	r0, r5
 800c184:	ab21      	add	r3, sp, #132	@ 0x84
 800c186:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c188:	a902      	add	r1, sp, #8
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	f001 fa70 	bl	800d670 <_svfiprintf_r>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	bfbc      	itt	lt
 800c194:	238b      	movlt	r3, #139	@ 0x8b
 800c196:	602b      	strlt	r3, [r5, #0]
 800c198:	2c00      	cmp	r4, #0
 800c19a:	d0da      	beq.n	800c152 <sniprintf+0x16>
 800c19c:	2200      	movs	r2, #0
 800c19e:	9b02      	ldr	r3, [sp, #8]
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e7d6      	b.n	800c152 <sniprintf+0x16>
 800c1a4:	20000300 	.word	0x20000300

0800c1a8 <siprintf>:
 800c1a8:	b40e      	push	{r1, r2, r3}
 800c1aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c1ae:	b510      	push	{r4, lr}
 800c1b0:	2400      	movs	r4, #0
 800c1b2:	b09d      	sub	sp, #116	@ 0x74
 800c1b4:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c1b6:	9002      	str	r0, [sp, #8]
 800c1b8:	9006      	str	r0, [sp, #24]
 800c1ba:	9107      	str	r1, [sp, #28]
 800c1bc:	9104      	str	r1, [sp, #16]
 800c1be:	4809      	ldr	r0, [pc, #36]	@ (800c1e4 <siprintf+0x3c>)
 800c1c0:	4909      	ldr	r1, [pc, #36]	@ (800c1e8 <siprintf+0x40>)
 800c1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c6:	9105      	str	r1, [sp, #20]
 800c1c8:	6800      	ldr	r0, [r0, #0]
 800c1ca:	a902      	add	r1, sp, #8
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c1d0:	f001 fa4e 	bl	800d670 <_svfiprintf_r>
 800c1d4:	9b02      	ldr	r3, [sp, #8]
 800c1d6:	701c      	strb	r4, [r3, #0]
 800c1d8:	b01d      	add	sp, #116	@ 0x74
 800c1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1de:	b003      	add	sp, #12
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000300 	.word	0x20000300
 800c1e8:	ffff0208 	.word	0xffff0208

0800c1ec <__sread>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f4:	f000 f88c 	bl	800c310 <_read_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	bfab      	itete	ge
 800c1fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c1fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c200:	181b      	addge	r3, r3, r0
 800c202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c206:	bfac      	ite	ge
 800c208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c20a:	81a3      	strhlt	r3, [r4, #12]
 800c20c:	bd10      	pop	{r4, pc}

0800c20e <__swrite>:
 800c20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c212:	461f      	mov	r7, r3
 800c214:	898b      	ldrh	r3, [r1, #12]
 800c216:	4605      	mov	r5, r0
 800c218:	05db      	lsls	r3, r3, #23
 800c21a:	460c      	mov	r4, r1
 800c21c:	4616      	mov	r6, r2
 800c21e:	d505      	bpl.n	800c22c <__swrite+0x1e>
 800c220:	2302      	movs	r3, #2
 800c222:	2200      	movs	r2, #0
 800c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c228:	f000 f860 	bl	800c2ec <_lseek_r>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	4632      	mov	r2, r6
 800c230:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	4628      	mov	r0, r5
 800c238:	463b      	mov	r3, r7
 800c23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c23e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	f000 b877 	b.w	800c334 <_write_r>

0800c246 <__sseek>:
 800c246:	b510      	push	{r4, lr}
 800c248:	460c      	mov	r4, r1
 800c24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24e:	f000 f84d 	bl	800c2ec <_lseek_r>
 800c252:	1c43      	adds	r3, r0, #1
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	bf15      	itete	ne
 800c258:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c25a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c25e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c262:	81a3      	strheq	r3, [r4, #12]
 800c264:	bf18      	it	ne
 800c266:	81a3      	strhne	r3, [r4, #12]
 800c268:	bd10      	pop	{r4, pc}

0800c26a <__sclose>:
 800c26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c26e:	f000 b82d 	b.w	800c2cc <_close_r>

0800c272 <memset>:
 800c272:	4603      	mov	r3, r0
 800c274:	4402      	add	r2, r0
 800c276:	4293      	cmp	r3, r2
 800c278:	d100      	bne.n	800c27c <memset+0xa>
 800c27a:	4770      	bx	lr
 800c27c:	f803 1b01 	strb.w	r1, [r3], #1
 800c280:	e7f9      	b.n	800c276 <memset+0x4>

0800c282 <strncmp>:
 800c282:	b510      	push	{r4, lr}
 800c284:	b16a      	cbz	r2, 800c2a2 <strncmp+0x20>
 800c286:	3901      	subs	r1, #1
 800c288:	1884      	adds	r4, r0, r2
 800c28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c292:	429a      	cmp	r2, r3
 800c294:	d103      	bne.n	800c29e <strncmp+0x1c>
 800c296:	42a0      	cmp	r0, r4
 800c298:	d001      	beq.n	800c29e <strncmp+0x1c>
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	d1f5      	bne.n	800c28a <strncmp+0x8>
 800c29e:	1ad0      	subs	r0, r2, r3
 800c2a0:	bd10      	pop	{r4, pc}
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	e7fc      	b.n	800c2a0 <strncmp+0x1e>

0800c2a6 <strncpy>:
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	3901      	subs	r1, #1
 800c2ac:	b132      	cbz	r2, 800c2bc <strncpy+0x16>
 800c2ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2b2:	3a01      	subs	r2, #1
 800c2b4:	f803 4b01 	strb.w	r4, [r3], #1
 800c2b8:	2c00      	cmp	r4, #0
 800c2ba:	d1f7      	bne.n	800c2ac <strncpy+0x6>
 800c2bc:	2100      	movs	r1, #0
 800c2be:	441a      	add	r2, r3
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d100      	bne.n	800c2c6 <strncpy+0x20>
 800c2c4:	bd10      	pop	{r4, pc}
 800c2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ca:	e7f9      	b.n	800c2c0 <strncpy+0x1a>

0800c2cc <_close_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4d05      	ldr	r5, [pc, #20]	@ (800c2e8 <_close_r+0x1c>)
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f7 fdaf 	bl	8003e3a <_close>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_close_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_close_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	200046b4 	.word	0x200046b4

0800c2ec <_lseek_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	4d05      	ldr	r5, [pc, #20]	@ (800c30c <_lseek_r+0x20>)
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7f7 fdc1 	bl	8003e82 <_lseek>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_lseek_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_lseek_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200046b4 	.word	0x200046b4

0800c310 <_read_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	4611      	mov	r1, r2
 800c318:	2200      	movs	r2, #0
 800c31a:	4d05      	ldr	r5, [pc, #20]	@ (800c330 <_read_r+0x20>)
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f7 fd52 	bl	8003dc8 <_read>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_read_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_read_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	200046b4 	.word	0x200046b4

0800c334 <_write_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	2200      	movs	r2, #0
 800c33e:	4d05      	ldr	r5, [pc, #20]	@ (800c354 <_write_r+0x20>)
 800c340:	602a      	str	r2, [r5, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	f7f7 fd5d 	bl	8003e02 <_write>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_write_r+0x1e>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_write_r+0x1e>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	200046b4 	.word	0x200046b4

0800c358 <__errno>:
 800c358:	4b01      	ldr	r3, [pc, #4]	@ (800c360 <__errno+0x8>)
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20000300 	.word	0x20000300

0800c364 <__libc_init_array>:
 800c364:	b570      	push	{r4, r5, r6, lr}
 800c366:	2600      	movs	r6, #0
 800c368:	4d0c      	ldr	r5, [pc, #48]	@ (800c39c <__libc_init_array+0x38>)
 800c36a:	4c0d      	ldr	r4, [pc, #52]	@ (800c3a0 <__libc_init_array+0x3c>)
 800c36c:	1b64      	subs	r4, r4, r5
 800c36e:	10a4      	asrs	r4, r4, #2
 800c370:	42a6      	cmp	r6, r4
 800c372:	d109      	bne.n	800c388 <__libc_init_array+0x24>
 800c374:	f002 f91c 	bl	800e5b0 <_init>
 800c378:	2600      	movs	r6, #0
 800c37a:	4d0a      	ldr	r5, [pc, #40]	@ (800c3a4 <__libc_init_array+0x40>)
 800c37c:	4c0a      	ldr	r4, [pc, #40]	@ (800c3a8 <__libc_init_array+0x44>)
 800c37e:	1b64      	subs	r4, r4, r5
 800c380:	10a4      	asrs	r4, r4, #2
 800c382:	42a6      	cmp	r6, r4
 800c384:	d105      	bne.n	800c392 <__libc_init_array+0x2e>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	f855 3b04 	ldr.w	r3, [r5], #4
 800c38c:	4798      	blx	r3
 800c38e:	3601      	adds	r6, #1
 800c390:	e7ee      	b.n	800c370 <__libc_init_array+0xc>
 800c392:	f855 3b04 	ldr.w	r3, [r5], #4
 800c396:	4798      	blx	r3
 800c398:	3601      	adds	r6, #1
 800c39a:	e7f2      	b.n	800c382 <__libc_init_array+0x1e>
 800c39c:	0800f840 	.word	0x0800f840
 800c3a0:	0800f840 	.word	0x0800f840
 800c3a4:	0800f840 	.word	0x0800f840
 800c3a8:	0800f844 	.word	0x0800f844

0800c3ac <__retarget_lock_init_recursive>:
 800c3ac:	4770      	bx	lr

0800c3ae <__retarget_lock_acquire_recursive>:
 800c3ae:	4770      	bx	lr

0800c3b0 <__retarget_lock_release_recursive>:
 800c3b0:	4770      	bx	lr

0800c3b2 <memcpy>:
 800c3b2:	440a      	add	r2, r1
 800c3b4:	4291      	cmp	r1, r2
 800c3b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3ba:	d100      	bne.n	800c3be <memcpy+0xc>
 800c3bc:	4770      	bx	lr
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3c4:	4291      	cmp	r1, r2
 800c3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ca:	d1f9      	bne.n	800c3c0 <memcpy+0xe>
 800c3cc:	bd10      	pop	{r4, pc}
	...

0800c3d0 <nan>:
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	4901      	ldr	r1, [pc, #4]	@ (800c3d8 <nan+0x8>)
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	7ff80000 	.word	0x7ff80000

0800c3dc <_free_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4605      	mov	r5, r0
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	d040      	beq.n	800c466 <_free_r+0x8a>
 800c3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e8:	1f0c      	subs	r4, r1, #4
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	bfb8      	it	lt
 800c3ee:	18e4      	addlt	r4, r4, r3
 800c3f0:	f000 fc2a 	bl	800cc48 <__malloc_lock>
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c468 <_free_r+0x8c>)
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	b933      	cbnz	r3, 800c408 <_free_r+0x2c>
 800c3fa:	6063      	str	r3, [r4, #4]
 800c3fc:	6014      	str	r4, [r2, #0]
 800c3fe:	4628      	mov	r0, r5
 800c400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c404:	f000 bc26 	b.w	800cc54 <__malloc_unlock>
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d908      	bls.n	800c41e <_free_r+0x42>
 800c40c:	6820      	ldr	r0, [r4, #0]
 800c40e:	1821      	adds	r1, r4, r0
 800c410:	428b      	cmp	r3, r1
 800c412:	bf01      	itttt	eq
 800c414:	6819      	ldreq	r1, [r3, #0]
 800c416:	685b      	ldreq	r3, [r3, #4]
 800c418:	1809      	addeq	r1, r1, r0
 800c41a:	6021      	streq	r1, [r4, #0]
 800c41c:	e7ed      	b.n	800c3fa <_free_r+0x1e>
 800c41e:	461a      	mov	r2, r3
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	b10b      	cbz	r3, 800c428 <_free_r+0x4c>
 800c424:	42a3      	cmp	r3, r4
 800c426:	d9fa      	bls.n	800c41e <_free_r+0x42>
 800c428:	6811      	ldr	r1, [r2, #0]
 800c42a:	1850      	adds	r0, r2, r1
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d10b      	bne.n	800c448 <_free_r+0x6c>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	4401      	add	r1, r0
 800c434:	1850      	adds	r0, r2, r1
 800c436:	4283      	cmp	r3, r0
 800c438:	6011      	str	r1, [r2, #0]
 800c43a:	d1e0      	bne.n	800c3fe <_free_r+0x22>
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	4408      	add	r0, r1
 800c442:	6010      	str	r0, [r2, #0]
 800c444:	6053      	str	r3, [r2, #4]
 800c446:	e7da      	b.n	800c3fe <_free_r+0x22>
 800c448:	d902      	bls.n	800c450 <_free_r+0x74>
 800c44a:	230c      	movs	r3, #12
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	e7d6      	b.n	800c3fe <_free_r+0x22>
 800c450:	6820      	ldr	r0, [r4, #0]
 800c452:	1821      	adds	r1, r4, r0
 800c454:	428b      	cmp	r3, r1
 800c456:	bf01      	itttt	eq
 800c458:	6819      	ldreq	r1, [r3, #0]
 800c45a:	685b      	ldreq	r3, [r3, #4]
 800c45c:	1809      	addeq	r1, r1, r0
 800c45e:	6021      	streq	r1, [r4, #0]
 800c460:	6063      	str	r3, [r4, #4]
 800c462:	6054      	str	r4, [r2, #4]
 800c464:	e7cb      	b.n	800c3fe <_free_r+0x22>
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200046c0 	.word	0x200046c0

0800c46c <rshift>:
 800c46c:	6903      	ldr	r3, [r0, #16]
 800c46e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c472:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c476:	f100 0414 	add.w	r4, r0, #20
 800c47a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c47e:	dd46      	ble.n	800c50e <rshift+0xa2>
 800c480:	f011 011f 	ands.w	r1, r1, #31
 800c484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c48c:	d10c      	bne.n	800c4a8 <rshift+0x3c>
 800c48e:	4629      	mov	r1, r5
 800c490:	f100 0710 	add.w	r7, r0, #16
 800c494:	42b1      	cmp	r1, r6
 800c496:	d335      	bcc.n	800c504 <rshift+0x98>
 800c498:	1a9b      	subs	r3, r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	1eea      	subs	r2, r5, #3
 800c49e:	4296      	cmp	r6, r2
 800c4a0:	bf38      	it	cc
 800c4a2:	2300      	movcc	r3, #0
 800c4a4:	4423      	add	r3, r4
 800c4a6:	e015      	b.n	800c4d4 <rshift+0x68>
 800c4a8:	46a1      	mov	r9, r4
 800c4aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4ae:	f1c1 0820 	rsb	r8, r1, #32
 800c4b2:	40cf      	lsrs	r7, r1
 800c4b4:	f105 0e04 	add.w	lr, r5, #4
 800c4b8:	4576      	cmp	r6, lr
 800c4ba:	46f4      	mov	ip, lr
 800c4bc:	d816      	bhi.n	800c4ec <rshift+0x80>
 800c4be:	1a9a      	subs	r2, r3, r2
 800c4c0:	0092      	lsls	r2, r2, #2
 800c4c2:	3a04      	subs	r2, #4
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	42ae      	cmp	r6, r5
 800c4c8:	bf38      	it	cc
 800c4ca:	2200      	movcc	r2, #0
 800c4cc:	18a3      	adds	r3, r4, r2
 800c4ce:	50a7      	str	r7, [r4, r2]
 800c4d0:	b107      	cbz	r7, 800c4d4 <rshift+0x68>
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	eba3 0204 	sub.w	r2, r3, r4
 800c4da:	bf08      	it	eq
 800c4dc:	2300      	moveq	r3, #0
 800c4de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4e2:	6102      	str	r2, [r0, #16]
 800c4e4:	bf08      	it	eq
 800c4e6:	6143      	streq	r3, [r0, #20]
 800c4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ec:	f8dc c000 	ldr.w	ip, [ip]
 800c4f0:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4f4:	ea4c 0707 	orr.w	r7, ip, r7
 800c4f8:	f849 7b04 	str.w	r7, [r9], #4
 800c4fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c500:	40cf      	lsrs	r7, r1
 800c502:	e7d9      	b.n	800c4b8 <rshift+0x4c>
 800c504:	f851 cb04 	ldr.w	ip, [r1], #4
 800c508:	f847 cf04 	str.w	ip, [r7, #4]!
 800c50c:	e7c2      	b.n	800c494 <rshift+0x28>
 800c50e:	4623      	mov	r3, r4
 800c510:	e7e0      	b.n	800c4d4 <rshift+0x68>

0800c512 <__hexdig_fun>:
 800c512:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c516:	2b09      	cmp	r3, #9
 800c518:	d802      	bhi.n	800c520 <__hexdig_fun+0xe>
 800c51a:	3820      	subs	r0, #32
 800c51c:	b2c0      	uxtb	r0, r0
 800c51e:	4770      	bx	lr
 800c520:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c524:	2b05      	cmp	r3, #5
 800c526:	d801      	bhi.n	800c52c <__hexdig_fun+0x1a>
 800c528:	3847      	subs	r0, #71	@ 0x47
 800c52a:	e7f7      	b.n	800c51c <__hexdig_fun+0xa>
 800c52c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c530:	2b05      	cmp	r3, #5
 800c532:	d801      	bhi.n	800c538 <__hexdig_fun+0x26>
 800c534:	3827      	subs	r0, #39	@ 0x27
 800c536:	e7f1      	b.n	800c51c <__hexdig_fun+0xa>
 800c538:	2000      	movs	r0, #0
 800c53a:	4770      	bx	lr

0800c53c <__gethex>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	468a      	mov	sl, r1
 800c542:	4690      	mov	r8, r2
 800c544:	b085      	sub	sp, #20
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	680b      	ldr	r3, [r1, #0]
 800c54a:	9001      	str	r0, [sp, #4]
 800c54c:	1c9c      	adds	r4, r3, #2
 800c54e:	46a1      	mov	r9, r4
 800c550:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c554:	2830      	cmp	r0, #48	@ 0x30
 800c556:	d0fa      	beq.n	800c54e <__gethex+0x12>
 800c558:	eba9 0303 	sub.w	r3, r9, r3
 800c55c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c560:	f7ff ffd7 	bl	800c512 <__hexdig_fun>
 800c564:	4605      	mov	r5, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d168      	bne.n	800c63c <__gethex+0x100>
 800c56a:	2201      	movs	r2, #1
 800c56c:	4648      	mov	r0, r9
 800c56e:	499f      	ldr	r1, [pc, #636]	@ (800c7ec <__gethex+0x2b0>)
 800c570:	f7ff fe87 	bl	800c282 <strncmp>
 800c574:	4607      	mov	r7, r0
 800c576:	2800      	cmp	r0, #0
 800c578:	d167      	bne.n	800c64a <__gethex+0x10e>
 800c57a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c57e:	4626      	mov	r6, r4
 800c580:	f7ff ffc7 	bl	800c512 <__hexdig_fun>
 800c584:	2800      	cmp	r0, #0
 800c586:	d062      	beq.n	800c64e <__gethex+0x112>
 800c588:	4623      	mov	r3, r4
 800c58a:	7818      	ldrb	r0, [r3, #0]
 800c58c:	4699      	mov	r9, r3
 800c58e:	2830      	cmp	r0, #48	@ 0x30
 800c590:	f103 0301 	add.w	r3, r3, #1
 800c594:	d0f9      	beq.n	800c58a <__gethex+0x4e>
 800c596:	f7ff ffbc 	bl	800c512 <__hexdig_fun>
 800c59a:	fab0 f580 	clz	r5, r0
 800c59e:	f04f 0b01 	mov.w	fp, #1
 800c5a2:	096d      	lsrs	r5, r5, #5
 800c5a4:	464a      	mov	r2, r9
 800c5a6:	4616      	mov	r6, r2
 800c5a8:	7830      	ldrb	r0, [r6, #0]
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	f7ff ffb1 	bl	800c512 <__hexdig_fun>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1f8      	bne.n	800c5a6 <__gethex+0x6a>
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	498c      	ldr	r1, [pc, #560]	@ (800c7ec <__gethex+0x2b0>)
 800c5ba:	f7ff fe62 	bl	800c282 <strncmp>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d13f      	bne.n	800c642 <__gethex+0x106>
 800c5c2:	b944      	cbnz	r4, 800c5d6 <__gethex+0x9a>
 800c5c4:	1c74      	adds	r4, r6, #1
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	7830      	ldrb	r0, [r6, #0]
 800c5cc:	3201      	adds	r2, #1
 800c5ce:	f7ff ffa0 	bl	800c512 <__hexdig_fun>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d1f8      	bne.n	800c5c8 <__gethex+0x8c>
 800c5d6:	1ba4      	subs	r4, r4, r6
 800c5d8:	00a7      	lsls	r7, r4, #2
 800c5da:	7833      	ldrb	r3, [r6, #0]
 800c5dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5e0:	2b50      	cmp	r3, #80	@ 0x50
 800c5e2:	d13e      	bne.n	800c662 <__gethex+0x126>
 800c5e4:	7873      	ldrb	r3, [r6, #1]
 800c5e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5e8:	d033      	beq.n	800c652 <__gethex+0x116>
 800c5ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5ec:	d034      	beq.n	800c658 <__gethex+0x11c>
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	1c71      	adds	r1, r6, #1
 800c5f2:	7808      	ldrb	r0, [r1, #0]
 800c5f4:	f7ff ff8d 	bl	800c512 <__hexdig_fun>
 800c5f8:	1e43      	subs	r3, r0, #1
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b18      	cmp	r3, #24
 800c5fe:	d830      	bhi.n	800c662 <__gethex+0x126>
 800c600:	f1a0 0210 	sub.w	r2, r0, #16
 800c604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c608:	f7ff ff83 	bl	800c512 <__hexdig_fun>
 800c60c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c610:	fa5f fc8c 	uxtb.w	ip, ip
 800c614:	f1bc 0f18 	cmp.w	ip, #24
 800c618:	f04f 030a 	mov.w	r3, #10
 800c61c:	d91e      	bls.n	800c65c <__gethex+0x120>
 800c61e:	b104      	cbz	r4, 800c622 <__gethex+0xe6>
 800c620:	4252      	negs	r2, r2
 800c622:	4417      	add	r7, r2
 800c624:	f8ca 1000 	str.w	r1, [sl]
 800c628:	b1ed      	cbz	r5, 800c666 <__gethex+0x12a>
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	bf0c      	ite	eq
 800c630:	2506      	moveq	r5, #6
 800c632:	2500      	movne	r5, #0
 800c634:	4628      	mov	r0, r5
 800c636:	b005      	add	sp, #20
 800c638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63c:	2500      	movs	r5, #0
 800c63e:	462c      	mov	r4, r5
 800c640:	e7b0      	b.n	800c5a4 <__gethex+0x68>
 800c642:	2c00      	cmp	r4, #0
 800c644:	d1c7      	bne.n	800c5d6 <__gethex+0x9a>
 800c646:	4627      	mov	r7, r4
 800c648:	e7c7      	b.n	800c5da <__gethex+0x9e>
 800c64a:	464e      	mov	r6, r9
 800c64c:	462f      	mov	r7, r5
 800c64e:	2501      	movs	r5, #1
 800c650:	e7c3      	b.n	800c5da <__gethex+0x9e>
 800c652:	2400      	movs	r4, #0
 800c654:	1cb1      	adds	r1, r6, #2
 800c656:	e7cc      	b.n	800c5f2 <__gethex+0xb6>
 800c658:	2401      	movs	r4, #1
 800c65a:	e7fb      	b.n	800c654 <__gethex+0x118>
 800c65c:	fb03 0002 	mla	r0, r3, r2, r0
 800c660:	e7ce      	b.n	800c600 <__gethex+0xc4>
 800c662:	4631      	mov	r1, r6
 800c664:	e7de      	b.n	800c624 <__gethex+0xe8>
 800c666:	4629      	mov	r1, r5
 800c668:	eba6 0309 	sub.w	r3, r6, r9
 800c66c:	3b01      	subs	r3, #1
 800c66e:	2b07      	cmp	r3, #7
 800c670:	dc0a      	bgt.n	800c688 <__gethex+0x14c>
 800c672:	9801      	ldr	r0, [sp, #4]
 800c674:	f000 faf4 	bl	800cc60 <_Balloc>
 800c678:	4604      	mov	r4, r0
 800c67a:	b940      	cbnz	r0, 800c68e <__gethex+0x152>
 800c67c:	4602      	mov	r2, r0
 800c67e:	21e4      	movs	r1, #228	@ 0xe4
 800c680:	4b5b      	ldr	r3, [pc, #364]	@ (800c7f0 <__gethex+0x2b4>)
 800c682:	485c      	ldr	r0, [pc, #368]	@ (800c7f4 <__gethex+0x2b8>)
 800c684:	f001 fb60 	bl	800dd48 <__assert_func>
 800c688:	3101      	adds	r1, #1
 800c68a:	105b      	asrs	r3, r3, #1
 800c68c:	e7ef      	b.n	800c66e <__gethex+0x132>
 800c68e:	2300      	movs	r3, #0
 800c690:	f100 0a14 	add.w	sl, r0, #20
 800c694:	4655      	mov	r5, sl
 800c696:	469b      	mov	fp, r3
 800c698:	45b1      	cmp	r9, r6
 800c69a:	d337      	bcc.n	800c70c <__gethex+0x1d0>
 800c69c:	f845 bb04 	str.w	fp, [r5], #4
 800c6a0:	eba5 050a 	sub.w	r5, r5, sl
 800c6a4:	10ad      	asrs	r5, r5, #2
 800c6a6:	6125      	str	r5, [r4, #16]
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f000 fbcb 	bl	800ce44 <__hi0bits>
 800c6ae:	016d      	lsls	r5, r5, #5
 800c6b0:	f8d8 6000 	ldr.w	r6, [r8]
 800c6b4:	1a2d      	subs	r5, r5, r0
 800c6b6:	42b5      	cmp	r5, r6
 800c6b8:	dd54      	ble.n	800c764 <__gethex+0x228>
 800c6ba:	1bad      	subs	r5, r5, r6
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 ff4d 	bl	800d55e <__any_on>
 800c6c4:	4681      	mov	r9, r0
 800c6c6:	b178      	cbz	r0, 800c6e8 <__gethex+0x1ac>
 800c6c8:	f04f 0901 	mov.w	r9, #1
 800c6cc:	1e6b      	subs	r3, r5, #1
 800c6ce:	1159      	asrs	r1, r3, #5
 800c6d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6d4:	f003 021f 	and.w	r2, r3, #31
 800c6d8:	fa09 f202 	lsl.w	r2, r9, r2
 800c6dc:	420a      	tst	r2, r1
 800c6de:	d003      	beq.n	800c6e8 <__gethex+0x1ac>
 800c6e0:	454b      	cmp	r3, r9
 800c6e2:	dc36      	bgt.n	800c752 <__gethex+0x216>
 800c6e4:	f04f 0902 	mov.w	r9, #2
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f7ff febe 	bl	800c46c <rshift>
 800c6f0:	442f      	add	r7, r5
 800c6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6f6:	42bb      	cmp	r3, r7
 800c6f8:	da42      	bge.n	800c780 <__gethex+0x244>
 800c6fa:	4621      	mov	r1, r4
 800c6fc:	9801      	ldr	r0, [sp, #4]
 800c6fe:	f000 faef 	bl	800cce0 <_Bfree>
 800c702:	2300      	movs	r3, #0
 800c704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c706:	25a3      	movs	r5, #163	@ 0xa3
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	e793      	b.n	800c634 <__gethex+0xf8>
 800c70c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c710:	2a2e      	cmp	r2, #46	@ 0x2e
 800c712:	d012      	beq.n	800c73a <__gethex+0x1fe>
 800c714:	2b20      	cmp	r3, #32
 800c716:	d104      	bne.n	800c722 <__gethex+0x1e6>
 800c718:	f845 bb04 	str.w	fp, [r5], #4
 800c71c:	f04f 0b00 	mov.w	fp, #0
 800c720:	465b      	mov	r3, fp
 800c722:	7830      	ldrb	r0, [r6, #0]
 800c724:	9303      	str	r3, [sp, #12]
 800c726:	f7ff fef4 	bl	800c512 <__hexdig_fun>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	f000 000f 	and.w	r0, r0, #15
 800c730:	4098      	lsls	r0, r3
 800c732:	ea4b 0b00 	orr.w	fp, fp, r0
 800c736:	3304      	adds	r3, #4
 800c738:	e7ae      	b.n	800c698 <__gethex+0x15c>
 800c73a:	45b1      	cmp	r9, r6
 800c73c:	d8ea      	bhi.n	800c714 <__gethex+0x1d8>
 800c73e:	2201      	movs	r2, #1
 800c740:	4630      	mov	r0, r6
 800c742:	492a      	ldr	r1, [pc, #168]	@ (800c7ec <__gethex+0x2b0>)
 800c744:	9303      	str	r3, [sp, #12]
 800c746:	f7ff fd9c 	bl	800c282 <strncmp>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1e1      	bne.n	800c714 <__gethex+0x1d8>
 800c750:	e7a2      	b.n	800c698 <__gethex+0x15c>
 800c752:	4620      	mov	r0, r4
 800c754:	1ea9      	subs	r1, r5, #2
 800c756:	f000 ff02 	bl	800d55e <__any_on>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0c2      	beq.n	800c6e4 <__gethex+0x1a8>
 800c75e:	f04f 0903 	mov.w	r9, #3
 800c762:	e7c1      	b.n	800c6e8 <__gethex+0x1ac>
 800c764:	da09      	bge.n	800c77a <__gethex+0x23e>
 800c766:	1b75      	subs	r5, r6, r5
 800c768:	4621      	mov	r1, r4
 800c76a:	462a      	mov	r2, r5
 800c76c:	9801      	ldr	r0, [sp, #4]
 800c76e:	f000 fcc7 	bl	800d100 <__lshift>
 800c772:	4604      	mov	r4, r0
 800c774:	1b7f      	subs	r7, r7, r5
 800c776:	f100 0a14 	add.w	sl, r0, #20
 800c77a:	f04f 0900 	mov.w	r9, #0
 800c77e:	e7b8      	b.n	800c6f2 <__gethex+0x1b6>
 800c780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c784:	42bd      	cmp	r5, r7
 800c786:	dd6f      	ble.n	800c868 <__gethex+0x32c>
 800c788:	1bed      	subs	r5, r5, r7
 800c78a:	42ae      	cmp	r6, r5
 800c78c:	dc34      	bgt.n	800c7f8 <__gethex+0x2bc>
 800c78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d022      	beq.n	800c7dc <__gethex+0x2a0>
 800c796:	2b03      	cmp	r3, #3
 800c798:	d024      	beq.n	800c7e4 <__gethex+0x2a8>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d115      	bne.n	800c7ca <__gethex+0x28e>
 800c79e:	42ae      	cmp	r6, r5
 800c7a0:	d113      	bne.n	800c7ca <__gethex+0x28e>
 800c7a2:	2e01      	cmp	r6, #1
 800c7a4:	d10b      	bne.n	800c7be <__gethex+0x282>
 800c7a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7aa:	9a02      	ldr	r2, [sp, #8]
 800c7ac:	2562      	movs	r5, #98	@ 0x62
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	6123      	str	r3, [r4, #16]
 800c7b4:	f8ca 3000 	str.w	r3, [sl]
 800c7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7ba:	601c      	str	r4, [r3, #0]
 800c7bc:	e73a      	b.n	800c634 <__gethex+0xf8>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	1e71      	subs	r1, r6, #1
 800c7c2:	f000 fecc 	bl	800d55e <__any_on>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d1ed      	bne.n	800c7a6 <__gethex+0x26a>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	9801      	ldr	r0, [sp, #4]
 800c7ce:	f000 fa87 	bl	800cce0 <_Bfree>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d6:	2550      	movs	r5, #80	@ 0x50
 800c7d8:	6013      	str	r3, [r2, #0]
 800c7da:	e72b      	b.n	800c634 <__gethex+0xf8>
 800c7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1f3      	bne.n	800c7ca <__gethex+0x28e>
 800c7e2:	e7e0      	b.n	800c7a6 <__gethex+0x26a>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1dd      	bne.n	800c7a6 <__gethex+0x26a>
 800c7ea:	e7ee      	b.n	800c7ca <__gethex+0x28e>
 800c7ec:	0800f466 	.word	0x0800f466
 800c7f0:	0800f47c 	.word	0x0800f47c
 800c7f4:	0800f48d 	.word	0x0800f48d
 800c7f8:	1e6f      	subs	r7, r5, #1
 800c7fa:	f1b9 0f00 	cmp.w	r9, #0
 800c7fe:	d130      	bne.n	800c862 <__gethex+0x326>
 800c800:	b127      	cbz	r7, 800c80c <__gethex+0x2d0>
 800c802:	4639      	mov	r1, r7
 800c804:	4620      	mov	r0, r4
 800c806:	f000 feaa 	bl	800d55e <__any_on>
 800c80a:	4681      	mov	r9, r0
 800c80c:	2301      	movs	r3, #1
 800c80e:	4629      	mov	r1, r5
 800c810:	1b76      	subs	r6, r6, r5
 800c812:	2502      	movs	r5, #2
 800c814:	117a      	asrs	r2, r7, #5
 800c816:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c81a:	f007 071f 	and.w	r7, r7, #31
 800c81e:	40bb      	lsls	r3, r7
 800c820:	4213      	tst	r3, r2
 800c822:	4620      	mov	r0, r4
 800c824:	bf18      	it	ne
 800c826:	f049 0902 	orrne.w	r9, r9, #2
 800c82a:	f7ff fe1f 	bl	800c46c <rshift>
 800c82e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c832:	f1b9 0f00 	cmp.w	r9, #0
 800c836:	d047      	beq.n	800c8c8 <__gethex+0x38c>
 800c838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d015      	beq.n	800c86c <__gethex+0x330>
 800c840:	2b03      	cmp	r3, #3
 800c842:	d017      	beq.n	800c874 <__gethex+0x338>
 800c844:	2b01      	cmp	r3, #1
 800c846:	d109      	bne.n	800c85c <__gethex+0x320>
 800c848:	f019 0f02 	tst.w	r9, #2
 800c84c:	d006      	beq.n	800c85c <__gethex+0x320>
 800c84e:	f8da 3000 	ldr.w	r3, [sl]
 800c852:	ea49 0903 	orr.w	r9, r9, r3
 800c856:	f019 0f01 	tst.w	r9, #1
 800c85a:	d10e      	bne.n	800c87a <__gethex+0x33e>
 800c85c:	f045 0510 	orr.w	r5, r5, #16
 800c860:	e032      	b.n	800c8c8 <__gethex+0x38c>
 800c862:	f04f 0901 	mov.w	r9, #1
 800c866:	e7d1      	b.n	800c80c <__gethex+0x2d0>
 800c868:	2501      	movs	r5, #1
 800c86a:	e7e2      	b.n	800c832 <__gethex+0x2f6>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c86e:	f1c3 0301 	rsb	r3, r3, #1
 800c872:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d0f0      	beq.n	800c85c <__gethex+0x320>
 800c87a:	f04f 0c00 	mov.w	ip, #0
 800c87e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c882:	f104 0314 	add.w	r3, r4, #20
 800c886:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c88a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c88e:	4618      	mov	r0, r3
 800c890:	f853 2b04 	ldr.w	r2, [r3], #4
 800c894:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c898:	d01b      	beq.n	800c8d2 <__gethex+0x396>
 800c89a:	3201      	adds	r2, #1
 800c89c:	6002      	str	r2, [r0, #0]
 800c89e:	2d02      	cmp	r5, #2
 800c8a0:	f104 0314 	add.w	r3, r4, #20
 800c8a4:	d13c      	bne.n	800c920 <__gethex+0x3e4>
 800c8a6:	f8d8 2000 	ldr.w	r2, [r8]
 800c8aa:	3a01      	subs	r2, #1
 800c8ac:	42b2      	cmp	r2, r6
 800c8ae:	d109      	bne.n	800c8c4 <__gethex+0x388>
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	1171      	asrs	r1, r6, #5
 800c8b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8b8:	f006 061f 	and.w	r6, r6, #31
 800c8bc:	fa02 f606 	lsl.w	r6, r2, r6
 800c8c0:	421e      	tst	r6, r3
 800c8c2:	d13a      	bne.n	800c93a <__gethex+0x3fe>
 800c8c4:	f045 0520 	orr.w	r5, r5, #32
 800c8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ca:	601c      	str	r4, [r3, #0]
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	601f      	str	r7, [r3, #0]
 800c8d0:	e6b0      	b.n	800c634 <__gethex+0xf8>
 800c8d2:	4299      	cmp	r1, r3
 800c8d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8d8:	d8d9      	bhi.n	800c88e <__gethex+0x352>
 800c8da:	68a3      	ldr	r3, [r4, #8]
 800c8dc:	459b      	cmp	fp, r3
 800c8de:	db17      	blt.n	800c910 <__gethex+0x3d4>
 800c8e0:	6861      	ldr	r1, [r4, #4]
 800c8e2:	9801      	ldr	r0, [sp, #4]
 800c8e4:	3101      	adds	r1, #1
 800c8e6:	f000 f9bb 	bl	800cc60 <_Balloc>
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	b918      	cbnz	r0, 800c8f6 <__gethex+0x3ba>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	2184      	movs	r1, #132	@ 0x84
 800c8f2:	4b19      	ldr	r3, [pc, #100]	@ (800c958 <__gethex+0x41c>)
 800c8f4:	e6c5      	b.n	800c682 <__gethex+0x146>
 800c8f6:	6922      	ldr	r2, [r4, #16]
 800c8f8:	f104 010c 	add.w	r1, r4, #12
 800c8fc:	3202      	adds	r2, #2
 800c8fe:	0092      	lsls	r2, r2, #2
 800c900:	300c      	adds	r0, #12
 800c902:	f7ff fd56 	bl	800c3b2 <memcpy>
 800c906:	4621      	mov	r1, r4
 800c908:	9801      	ldr	r0, [sp, #4]
 800c90a:	f000 f9e9 	bl	800cce0 <_Bfree>
 800c90e:	464c      	mov	r4, r9
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6122      	str	r2, [r4, #16]
 800c916:	2201      	movs	r2, #1
 800c918:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c91c:	615a      	str	r2, [r3, #20]
 800c91e:	e7be      	b.n	800c89e <__gethex+0x362>
 800c920:	6922      	ldr	r2, [r4, #16]
 800c922:	455a      	cmp	r2, fp
 800c924:	dd0b      	ble.n	800c93e <__gethex+0x402>
 800c926:	2101      	movs	r1, #1
 800c928:	4620      	mov	r0, r4
 800c92a:	f7ff fd9f 	bl	800c46c <rshift>
 800c92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c932:	3701      	adds	r7, #1
 800c934:	42bb      	cmp	r3, r7
 800c936:	f6ff aee0 	blt.w	800c6fa <__gethex+0x1be>
 800c93a:	2501      	movs	r5, #1
 800c93c:	e7c2      	b.n	800c8c4 <__gethex+0x388>
 800c93e:	f016 061f 	ands.w	r6, r6, #31
 800c942:	d0fa      	beq.n	800c93a <__gethex+0x3fe>
 800c944:	4453      	add	r3, sl
 800c946:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c94a:	f000 fa7b 	bl	800ce44 <__hi0bits>
 800c94e:	f1c6 0620 	rsb	r6, r6, #32
 800c952:	42b0      	cmp	r0, r6
 800c954:	dbe7      	blt.n	800c926 <__gethex+0x3ea>
 800c956:	e7f0      	b.n	800c93a <__gethex+0x3fe>
 800c958:	0800f47c 	.word	0x0800f47c

0800c95c <L_shift>:
 800c95c:	f1c2 0208 	rsb	r2, r2, #8
 800c960:	0092      	lsls	r2, r2, #2
 800c962:	b570      	push	{r4, r5, r6, lr}
 800c964:	f1c2 0620 	rsb	r6, r2, #32
 800c968:	6843      	ldr	r3, [r0, #4]
 800c96a:	6804      	ldr	r4, [r0, #0]
 800c96c:	fa03 f506 	lsl.w	r5, r3, r6
 800c970:	432c      	orrs	r4, r5
 800c972:	40d3      	lsrs	r3, r2
 800c974:	6004      	str	r4, [r0, #0]
 800c976:	f840 3f04 	str.w	r3, [r0, #4]!
 800c97a:	4288      	cmp	r0, r1
 800c97c:	d3f4      	bcc.n	800c968 <L_shift+0xc>
 800c97e:	bd70      	pop	{r4, r5, r6, pc}

0800c980 <__match>:
 800c980:	b530      	push	{r4, r5, lr}
 800c982:	6803      	ldr	r3, [r0, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98a:	b914      	cbnz	r4, 800c992 <__match+0x12>
 800c98c:	6003      	str	r3, [r0, #0]
 800c98e:	2001      	movs	r0, #1
 800c990:	bd30      	pop	{r4, r5, pc}
 800c992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c996:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c99a:	2d19      	cmp	r5, #25
 800c99c:	bf98      	it	ls
 800c99e:	3220      	addls	r2, #32
 800c9a0:	42a2      	cmp	r2, r4
 800c9a2:	d0f0      	beq.n	800c986 <__match+0x6>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7f3      	b.n	800c990 <__match+0x10>

0800c9a8 <__hexnan>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	2500      	movs	r5, #0
 800c9ae:	680b      	ldr	r3, [r1, #0]
 800c9b0:	4682      	mov	sl, r0
 800c9b2:	115e      	asrs	r6, r3, #5
 800c9b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9b8:	f013 031f 	ands.w	r3, r3, #31
 800c9bc:	bf18      	it	ne
 800c9be:	3604      	addne	r6, #4
 800c9c0:	1f37      	subs	r7, r6, #4
 800c9c2:	4690      	mov	r8, r2
 800c9c4:	46b9      	mov	r9, r7
 800c9c6:	463c      	mov	r4, r7
 800c9c8:	46ab      	mov	fp, r5
 800c9ca:	b087      	sub	sp, #28
 800c9cc:	6801      	ldr	r1, [r0, #0]
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9d4:	9502      	str	r5, [sp, #8]
 800c9d6:	784a      	ldrb	r2, [r1, #1]
 800c9d8:	1c4b      	adds	r3, r1, #1
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	b342      	cbz	r2, 800ca30 <__hexnan+0x88>
 800c9de:	4610      	mov	r0, r2
 800c9e0:	9105      	str	r1, [sp, #20]
 800c9e2:	9204      	str	r2, [sp, #16]
 800c9e4:	f7ff fd95 	bl	800c512 <__hexdig_fun>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d151      	bne.n	800ca90 <__hexnan+0xe8>
 800c9ec:	9a04      	ldr	r2, [sp, #16]
 800c9ee:	9905      	ldr	r1, [sp, #20]
 800c9f0:	2a20      	cmp	r2, #32
 800c9f2:	d818      	bhi.n	800ca26 <__hexnan+0x7e>
 800c9f4:	9b02      	ldr	r3, [sp, #8]
 800c9f6:	459b      	cmp	fp, r3
 800c9f8:	dd13      	ble.n	800ca22 <__hexnan+0x7a>
 800c9fa:	454c      	cmp	r4, r9
 800c9fc:	d206      	bcs.n	800ca0c <__hexnan+0x64>
 800c9fe:	2d07      	cmp	r5, #7
 800ca00:	dc04      	bgt.n	800ca0c <__hexnan+0x64>
 800ca02:	462a      	mov	r2, r5
 800ca04:	4649      	mov	r1, r9
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff ffa8 	bl	800c95c <L_shift>
 800ca0c:	4544      	cmp	r4, r8
 800ca0e:	d952      	bls.n	800cab6 <__hexnan+0x10e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	f1a4 0904 	sub.w	r9, r4, #4
 800ca16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca1a:	461d      	mov	r5, r3
 800ca1c:	464c      	mov	r4, r9
 800ca1e:	f8cd b008 	str.w	fp, [sp, #8]
 800ca22:	9903      	ldr	r1, [sp, #12]
 800ca24:	e7d7      	b.n	800c9d6 <__hexnan+0x2e>
 800ca26:	2a29      	cmp	r2, #41	@ 0x29
 800ca28:	d157      	bne.n	800cada <__hexnan+0x132>
 800ca2a:	3102      	adds	r1, #2
 800ca2c:	f8ca 1000 	str.w	r1, [sl]
 800ca30:	f1bb 0f00 	cmp.w	fp, #0
 800ca34:	d051      	beq.n	800cada <__hexnan+0x132>
 800ca36:	454c      	cmp	r4, r9
 800ca38:	d206      	bcs.n	800ca48 <__hexnan+0xa0>
 800ca3a:	2d07      	cmp	r5, #7
 800ca3c:	dc04      	bgt.n	800ca48 <__hexnan+0xa0>
 800ca3e:	462a      	mov	r2, r5
 800ca40:	4649      	mov	r1, r9
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7ff ff8a 	bl	800c95c <L_shift>
 800ca48:	4544      	cmp	r4, r8
 800ca4a:	d936      	bls.n	800caba <__hexnan+0x112>
 800ca4c:	4623      	mov	r3, r4
 800ca4e:	f1a8 0204 	sub.w	r2, r8, #4
 800ca52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca56:	429f      	cmp	r7, r3
 800ca58:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca5c:	d2f9      	bcs.n	800ca52 <__hexnan+0xaa>
 800ca5e:	1b3b      	subs	r3, r7, r4
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	3304      	adds	r3, #4
 800ca66:	3401      	adds	r4, #1
 800ca68:	3e03      	subs	r6, #3
 800ca6a:	42b4      	cmp	r4, r6
 800ca6c:	bf88      	it	hi
 800ca6e:	2304      	movhi	r3, #4
 800ca70:	2200      	movs	r2, #0
 800ca72:	4443      	add	r3, r8
 800ca74:	f843 2b04 	str.w	r2, [r3], #4
 800ca78:	429f      	cmp	r7, r3
 800ca7a:	d2fb      	bcs.n	800ca74 <__hexnan+0xcc>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	b91b      	cbnz	r3, 800ca88 <__hexnan+0xe0>
 800ca80:	4547      	cmp	r7, r8
 800ca82:	d128      	bne.n	800cad6 <__hexnan+0x12e>
 800ca84:	2301      	movs	r3, #1
 800ca86:	603b      	str	r3, [r7, #0]
 800ca88:	2005      	movs	r0, #5
 800ca8a:	b007      	add	sp, #28
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	3501      	adds	r5, #1
 800ca92:	2d08      	cmp	r5, #8
 800ca94:	f10b 0b01 	add.w	fp, fp, #1
 800ca98:	dd06      	ble.n	800caa8 <__hexnan+0x100>
 800ca9a:	4544      	cmp	r4, r8
 800ca9c:	d9c1      	bls.n	800ca22 <__hexnan+0x7a>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2501      	movs	r5, #1
 800caa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800caa6:	3c04      	subs	r4, #4
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	f000 000f 	and.w	r0, r0, #15
 800caae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	e7b5      	b.n	800ca22 <__hexnan+0x7a>
 800cab6:	2508      	movs	r5, #8
 800cab8:	e7b3      	b.n	800ca22 <__hexnan+0x7a>
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0dd      	beq.n	800ca7c <__hexnan+0xd4>
 800cac0:	f04f 32ff 	mov.w	r2, #4294967295
 800cac4:	f1c3 0320 	rsb	r3, r3, #32
 800cac8:	40da      	lsrs	r2, r3
 800caca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cace:	4013      	ands	r3, r2
 800cad0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cad4:	e7d2      	b.n	800ca7c <__hexnan+0xd4>
 800cad6:	3f04      	subs	r7, #4
 800cad8:	e7d0      	b.n	800ca7c <__hexnan+0xd4>
 800cada:	2004      	movs	r0, #4
 800cadc:	e7d5      	b.n	800ca8a <__hexnan+0xe2>
	...

0800cae0 <sbrk_aligned>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4e0f      	ldr	r6, [pc, #60]	@ (800cb20 <sbrk_aligned+0x40>)
 800cae4:	460c      	mov	r4, r1
 800cae6:	6831      	ldr	r1, [r6, #0]
 800cae8:	4605      	mov	r5, r0
 800caea:	b911      	cbnz	r1, 800caf2 <sbrk_aligned+0x12>
 800caec:	f001 f90e 	bl	800dd0c <_sbrk_r>
 800caf0:	6030      	str	r0, [r6, #0]
 800caf2:	4621      	mov	r1, r4
 800caf4:	4628      	mov	r0, r5
 800caf6:	f001 f909 	bl	800dd0c <_sbrk_r>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d103      	bne.n	800cb06 <sbrk_aligned+0x26>
 800cafe:	f04f 34ff 	mov.w	r4, #4294967295
 800cb02:	4620      	mov	r0, r4
 800cb04:	bd70      	pop	{r4, r5, r6, pc}
 800cb06:	1cc4      	adds	r4, r0, #3
 800cb08:	f024 0403 	bic.w	r4, r4, #3
 800cb0c:	42a0      	cmp	r0, r4
 800cb0e:	d0f8      	beq.n	800cb02 <sbrk_aligned+0x22>
 800cb10:	1a21      	subs	r1, r4, r0
 800cb12:	4628      	mov	r0, r5
 800cb14:	f001 f8fa 	bl	800dd0c <_sbrk_r>
 800cb18:	3001      	adds	r0, #1
 800cb1a:	d1f2      	bne.n	800cb02 <sbrk_aligned+0x22>
 800cb1c:	e7ef      	b.n	800cafe <sbrk_aligned+0x1e>
 800cb1e:	bf00      	nop
 800cb20:	200046bc 	.word	0x200046bc

0800cb24 <_malloc_r>:
 800cb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb28:	1ccd      	adds	r5, r1, #3
 800cb2a:	f025 0503 	bic.w	r5, r5, #3
 800cb2e:	3508      	adds	r5, #8
 800cb30:	2d0c      	cmp	r5, #12
 800cb32:	bf38      	it	cc
 800cb34:	250c      	movcc	r5, #12
 800cb36:	2d00      	cmp	r5, #0
 800cb38:	4606      	mov	r6, r0
 800cb3a:	db01      	blt.n	800cb40 <_malloc_r+0x1c>
 800cb3c:	42a9      	cmp	r1, r5
 800cb3e:	d904      	bls.n	800cb4a <_malloc_r+0x26>
 800cb40:	230c      	movs	r3, #12
 800cb42:	6033      	str	r3, [r6, #0]
 800cb44:	2000      	movs	r0, #0
 800cb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc20 <_malloc_r+0xfc>
 800cb4e:	f000 f87b 	bl	800cc48 <__malloc_lock>
 800cb52:	f8d8 3000 	ldr.w	r3, [r8]
 800cb56:	461c      	mov	r4, r3
 800cb58:	bb44      	cbnz	r4, 800cbac <_malloc_r+0x88>
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f7ff ffbf 	bl	800cae0 <sbrk_aligned>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	4604      	mov	r4, r0
 800cb66:	d158      	bne.n	800cc1a <_malloc_r+0xf6>
 800cb68:	f8d8 4000 	ldr.w	r4, [r8]
 800cb6c:	4627      	mov	r7, r4
 800cb6e:	2f00      	cmp	r7, #0
 800cb70:	d143      	bne.n	800cbfa <_malloc_r+0xd6>
 800cb72:	2c00      	cmp	r4, #0
 800cb74:	d04b      	beq.n	800cc0e <_malloc_r+0xea>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	4639      	mov	r1, r7
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	eb04 0903 	add.w	r9, r4, r3
 800cb80:	f001 f8c4 	bl	800dd0c <_sbrk_r>
 800cb84:	4581      	cmp	r9, r0
 800cb86:	d142      	bne.n	800cc0e <_malloc_r+0xea>
 800cb88:	6821      	ldr	r1, [r4, #0]
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	1a6d      	subs	r5, r5, r1
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7ff ffa6 	bl	800cae0 <sbrk_aligned>
 800cb94:	3001      	adds	r0, #1
 800cb96:	d03a      	beq.n	800cc0e <_malloc_r+0xea>
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	442b      	add	r3, r5
 800cb9c:	6023      	str	r3, [r4, #0]
 800cb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	bb62      	cbnz	r2, 800cc00 <_malloc_r+0xdc>
 800cba6:	f8c8 7000 	str.w	r7, [r8]
 800cbaa:	e00f      	b.n	800cbcc <_malloc_r+0xa8>
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	1b52      	subs	r2, r2, r5
 800cbb0:	d420      	bmi.n	800cbf4 <_malloc_r+0xd0>
 800cbb2:	2a0b      	cmp	r2, #11
 800cbb4:	d917      	bls.n	800cbe6 <_malloc_r+0xc2>
 800cbb6:	1961      	adds	r1, r4, r5
 800cbb8:	42a3      	cmp	r3, r4
 800cbba:	6025      	str	r5, [r4, #0]
 800cbbc:	bf18      	it	ne
 800cbbe:	6059      	strne	r1, [r3, #4]
 800cbc0:	6863      	ldr	r3, [r4, #4]
 800cbc2:	bf08      	it	eq
 800cbc4:	f8c8 1000 	streq.w	r1, [r8]
 800cbc8:	5162      	str	r2, [r4, r5]
 800cbca:	604b      	str	r3, [r1, #4]
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f000 f841 	bl	800cc54 <__malloc_unlock>
 800cbd2:	f104 000b 	add.w	r0, r4, #11
 800cbd6:	1d23      	adds	r3, r4, #4
 800cbd8:	f020 0007 	bic.w	r0, r0, #7
 800cbdc:	1ac2      	subs	r2, r0, r3
 800cbde:	bf1c      	itt	ne
 800cbe0:	1a1b      	subne	r3, r3, r0
 800cbe2:	50a3      	strne	r3, [r4, r2]
 800cbe4:	e7af      	b.n	800cb46 <_malloc_r+0x22>
 800cbe6:	6862      	ldr	r2, [r4, #4]
 800cbe8:	42a3      	cmp	r3, r4
 800cbea:	bf0c      	ite	eq
 800cbec:	f8c8 2000 	streq.w	r2, [r8]
 800cbf0:	605a      	strne	r2, [r3, #4]
 800cbf2:	e7eb      	b.n	800cbcc <_malloc_r+0xa8>
 800cbf4:	4623      	mov	r3, r4
 800cbf6:	6864      	ldr	r4, [r4, #4]
 800cbf8:	e7ae      	b.n	800cb58 <_malloc_r+0x34>
 800cbfa:	463c      	mov	r4, r7
 800cbfc:	687f      	ldr	r7, [r7, #4]
 800cbfe:	e7b6      	b.n	800cb6e <_malloc_r+0x4a>
 800cc00:	461a      	mov	r2, r3
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	42a3      	cmp	r3, r4
 800cc06:	d1fb      	bne.n	800cc00 <_malloc_r+0xdc>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	6053      	str	r3, [r2, #4]
 800cc0c:	e7de      	b.n	800cbcc <_malloc_r+0xa8>
 800cc0e:	230c      	movs	r3, #12
 800cc10:	4630      	mov	r0, r6
 800cc12:	6033      	str	r3, [r6, #0]
 800cc14:	f000 f81e 	bl	800cc54 <__malloc_unlock>
 800cc18:	e794      	b.n	800cb44 <_malloc_r+0x20>
 800cc1a:	6005      	str	r5, [r0, #0]
 800cc1c:	e7d6      	b.n	800cbcc <_malloc_r+0xa8>
 800cc1e:	bf00      	nop
 800cc20:	200046c0 	.word	0x200046c0

0800cc24 <__ascii_mbtowc>:
 800cc24:	b082      	sub	sp, #8
 800cc26:	b901      	cbnz	r1, 800cc2a <__ascii_mbtowc+0x6>
 800cc28:	a901      	add	r1, sp, #4
 800cc2a:	b142      	cbz	r2, 800cc3e <__ascii_mbtowc+0x1a>
 800cc2c:	b14b      	cbz	r3, 800cc42 <__ascii_mbtowc+0x1e>
 800cc2e:	7813      	ldrb	r3, [r2, #0]
 800cc30:	600b      	str	r3, [r1, #0]
 800cc32:	7812      	ldrb	r2, [r2, #0]
 800cc34:	1e10      	subs	r0, r2, #0
 800cc36:	bf18      	it	ne
 800cc38:	2001      	movne	r0, #1
 800cc3a:	b002      	add	sp, #8
 800cc3c:	4770      	bx	lr
 800cc3e:	4610      	mov	r0, r2
 800cc40:	e7fb      	b.n	800cc3a <__ascii_mbtowc+0x16>
 800cc42:	f06f 0001 	mvn.w	r0, #1
 800cc46:	e7f8      	b.n	800cc3a <__ascii_mbtowc+0x16>

0800cc48 <__malloc_lock>:
 800cc48:	4801      	ldr	r0, [pc, #4]	@ (800cc50 <__malloc_lock+0x8>)
 800cc4a:	f7ff bbb0 	b.w	800c3ae <__retarget_lock_acquire_recursive>
 800cc4e:	bf00      	nop
 800cc50:	200046b8 	.word	0x200046b8

0800cc54 <__malloc_unlock>:
 800cc54:	4801      	ldr	r0, [pc, #4]	@ (800cc5c <__malloc_unlock+0x8>)
 800cc56:	f7ff bbab 	b.w	800c3b0 <__retarget_lock_release_recursive>
 800cc5a:	bf00      	nop
 800cc5c:	200046b8 	.word	0x200046b8

0800cc60 <_Balloc>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	69c6      	ldr	r6, [r0, #28]
 800cc64:	4604      	mov	r4, r0
 800cc66:	460d      	mov	r5, r1
 800cc68:	b976      	cbnz	r6, 800cc88 <_Balloc+0x28>
 800cc6a:	2010      	movs	r0, #16
 800cc6c:	f001 f89e 	bl	800ddac <malloc>
 800cc70:	4602      	mov	r2, r0
 800cc72:	61e0      	str	r0, [r4, #28]
 800cc74:	b920      	cbnz	r0, 800cc80 <_Balloc+0x20>
 800cc76:	216b      	movs	r1, #107	@ 0x6b
 800cc78:	4b17      	ldr	r3, [pc, #92]	@ (800ccd8 <_Balloc+0x78>)
 800cc7a:	4818      	ldr	r0, [pc, #96]	@ (800ccdc <_Balloc+0x7c>)
 800cc7c:	f001 f864 	bl	800dd48 <__assert_func>
 800cc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc84:	6006      	str	r6, [r0, #0]
 800cc86:	60c6      	str	r6, [r0, #12]
 800cc88:	69e6      	ldr	r6, [r4, #28]
 800cc8a:	68f3      	ldr	r3, [r6, #12]
 800cc8c:	b183      	cbz	r3, 800ccb0 <_Balloc+0x50>
 800cc8e:	69e3      	ldr	r3, [r4, #28]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc96:	b9b8      	cbnz	r0, 800ccc8 <_Balloc+0x68>
 800cc98:	2101      	movs	r1, #1
 800cc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc9e:	1d72      	adds	r2, r6, #5
 800cca0:	4620      	mov	r0, r4
 800cca2:	0092      	lsls	r2, r2, #2
 800cca4:	f001 f86e 	bl	800dd84 <_calloc_r>
 800cca8:	b160      	cbz	r0, 800ccc4 <_Balloc+0x64>
 800ccaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccae:	e00e      	b.n	800ccce <_Balloc+0x6e>
 800ccb0:	2221      	movs	r2, #33	@ 0x21
 800ccb2:	2104      	movs	r1, #4
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f001 f865 	bl	800dd84 <_calloc_r>
 800ccba:	69e3      	ldr	r3, [r4, #28]
 800ccbc:	60f0      	str	r0, [r6, #12]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e4      	bne.n	800cc8e <_Balloc+0x2e>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	6802      	ldr	r2, [r0, #0]
 800ccca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ccd4:	e7f7      	b.n	800ccc6 <_Balloc+0x66>
 800ccd6:	bf00      	nop
 800ccd8:	0800f4ed 	.word	0x0800f4ed
 800ccdc:	0800f504 	.word	0x0800f504

0800cce0 <_Bfree>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	69c6      	ldr	r6, [r0, #28]
 800cce4:	4605      	mov	r5, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	b976      	cbnz	r6, 800cd08 <_Bfree+0x28>
 800ccea:	2010      	movs	r0, #16
 800ccec:	f001 f85e 	bl	800ddac <malloc>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	61e8      	str	r0, [r5, #28]
 800ccf4:	b920      	cbnz	r0, 800cd00 <_Bfree+0x20>
 800ccf6:	218f      	movs	r1, #143	@ 0x8f
 800ccf8:	4b08      	ldr	r3, [pc, #32]	@ (800cd1c <_Bfree+0x3c>)
 800ccfa:	4809      	ldr	r0, [pc, #36]	@ (800cd20 <_Bfree+0x40>)
 800ccfc:	f001 f824 	bl	800dd48 <__assert_func>
 800cd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd04:	6006      	str	r6, [r0, #0]
 800cd06:	60c6      	str	r6, [r0, #12]
 800cd08:	b13c      	cbz	r4, 800cd1a <_Bfree+0x3a>
 800cd0a:	69eb      	ldr	r3, [r5, #28]
 800cd0c:	6862      	ldr	r2, [r4, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd14:	6021      	str	r1, [r4, #0]
 800cd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	0800f4ed 	.word	0x0800f4ed
 800cd20:	0800f504 	.word	0x0800f504

0800cd24 <__multadd>:
 800cd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	4607      	mov	r7, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	461e      	mov	r6, r3
 800cd2e:	2000      	movs	r0, #0
 800cd30:	690d      	ldr	r5, [r1, #16]
 800cd32:	f101 0c14 	add.w	ip, r1, #20
 800cd36:	f8dc 3000 	ldr.w	r3, [ip]
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	b299      	uxth	r1, r3
 800cd3e:	fb02 6101 	mla	r1, r2, r1, r6
 800cd42:	0c1e      	lsrs	r6, r3, #16
 800cd44:	0c0b      	lsrs	r3, r1, #16
 800cd46:	fb02 3306 	mla	r3, r2, r6, r3
 800cd4a:	b289      	uxth	r1, r1
 800cd4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd50:	4285      	cmp	r5, r0
 800cd52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd56:	f84c 1b04 	str.w	r1, [ip], #4
 800cd5a:	dcec      	bgt.n	800cd36 <__multadd+0x12>
 800cd5c:	b30e      	cbz	r6, 800cda2 <__multadd+0x7e>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	dc19      	bgt.n	800cd98 <__multadd+0x74>
 800cd64:	6861      	ldr	r1, [r4, #4]
 800cd66:	4638      	mov	r0, r7
 800cd68:	3101      	adds	r1, #1
 800cd6a:	f7ff ff79 	bl	800cc60 <_Balloc>
 800cd6e:	4680      	mov	r8, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__multadd+0x5a>
 800cd72:	4602      	mov	r2, r0
 800cd74:	21ba      	movs	r1, #186	@ 0xba
 800cd76:	4b0c      	ldr	r3, [pc, #48]	@ (800cda8 <__multadd+0x84>)
 800cd78:	480c      	ldr	r0, [pc, #48]	@ (800cdac <__multadd+0x88>)
 800cd7a:	f000 ffe5 	bl	800dd48 <__assert_func>
 800cd7e:	6922      	ldr	r2, [r4, #16]
 800cd80:	f104 010c 	add.w	r1, r4, #12
 800cd84:	3202      	adds	r2, #2
 800cd86:	0092      	lsls	r2, r2, #2
 800cd88:	300c      	adds	r0, #12
 800cd8a:	f7ff fb12 	bl	800c3b2 <memcpy>
 800cd8e:	4621      	mov	r1, r4
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff ffa5 	bl	800cce0 <_Bfree>
 800cd96:	4644      	mov	r4, r8
 800cd98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd9c:	3501      	adds	r5, #1
 800cd9e:	615e      	str	r6, [r3, #20]
 800cda0:	6125      	str	r5, [r4, #16]
 800cda2:	4620      	mov	r0, r4
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	0800f47c 	.word	0x0800f47c
 800cdac:	0800f504 	.word	0x0800f504

0800cdb0 <__s2b>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	4615      	mov	r5, r2
 800cdb6:	2209      	movs	r2, #9
 800cdb8:	461f      	mov	r7, r3
 800cdba:	3308      	adds	r3, #8
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	db09      	blt.n	800cde0 <__s2b+0x30>
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f7ff ff47 	bl	800cc60 <_Balloc>
 800cdd2:	b940      	cbnz	r0, 800cde6 <__s2b+0x36>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	21d3      	movs	r1, #211	@ 0xd3
 800cdd8:	4b18      	ldr	r3, [pc, #96]	@ (800ce3c <__s2b+0x8c>)
 800cdda:	4819      	ldr	r0, [pc, #100]	@ (800ce40 <__s2b+0x90>)
 800cddc:	f000 ffb4 	bl	800dd48 <__assert_func>
 800cde0:	0052      	lsls	r2, r2, #1
 800cde2:	3101      	adds	r1, #1
 800cde4:	e7f0      	b.n	800cdc8 <__s2b+0x18>
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	2d09      	cmp	r5, #9
 800cdea:	6143      	str	r3, [r0, #20]
 800cdec:	f04f 0301 	mov.w	r3, #1
 800cdf0:	6103      	str	r3, [r0, #16]
 800cdf2:	dd16      	ble.n	800ce22 <__s2b+0x72>
 800cdf4:	f104 0909 	add.w	r9, r4, #9
 800cdf8:	46c8      	mov	r8, r9
 800cdfa:	442c      	add	r4, r5
 800cdfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce00:	4601      	mov	r1, r0
 800ce02:	220a      	movs	r2, #10
 800ce04:	4630      	mov	r0, r6
 800ce06:	3b30      	subs	r3, #48	@ 0x30
 800ce08:	f7ff ff8c 	bl	800cd24 <__multadd>
 800ce0c:	45a0      	cmp	r8, r4
 800ce0e:	d1f5      	bne.n	800cdfc <__s2b+0x4c>
 800ce10:	f1a5 0408 	sub.w	r4, r5, #8
 800ce14:	444c      	add	r4, r9
 800ce16:	1b2d      	subs	r5, r5, r4
 800ce18:	1963      	adds	r3, r4, r5
 800ce1a:	42bb      	cmp	r3, r7
 800ce1c:	db04      	blt.n	800ce28 <__s2b+0x78>
 800ce1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce22:	2509      	movs	r5, #9
 800ce24:	340a      	adds	r4, #10
 800ce26:	e7f6      	b.n	800ce16 <__s2b+0x66>
 800ce28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	220a      	movs	r2, #10
 800ce30:	4630      	mov	r0, r6
 800ce32:	3b30      	subs	r3, #48	@ 0x30
 800ce34:	f7ff ff76 	bl	800cd24 <__multadd>
 800ce38:	e7ee      	b.n	800ce18 <__s2b+0x68>
 800ce3a:	bf00      	nop
 800ce3c:	0800f47c 	.word	0x0800f47c
 800ce40:	0800f504 	.word	0x0800f504

0800ce44 <__hi0bits>:
 800ce44:	4603      	mov	r3, r0
 800ce46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce4a:	bf3a      	itte	cc
 800ce4c:	0403      	lslcc	r3, r0, #16
 800ce4e:	2010      	movcc	r0, #16
 800ce50:	2000      	movcs	r0, #0
 800ce52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce56:	bf3c      	itt	cc
 800ce58:	021b      	lslcc	r3, r3, #8
 800ce5a:	3008      	addcc	r0, #8
 800ce5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce60:	bf3c      	itt	cc
 800ce62:	011b      	lslcc	r3, r3, #4
 800ce64:	3004      	addcc	r0, #4
 800ce66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce6a:	bf3c      	itt	cc
 800ce6c:	009b      	lslcc	r3, r3, #2
 800ce6e:	3002      	addcc	r0, #2
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	db05      	blt.n	800ce80 <__hi0bits+0x3c>
 800ce74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce78:	f100 0001 	add.w	r0, r0, #1
 800ce7c:	bf08      	it	eq
 800ce7e:	2020      	moveq	r0, #32
 800ce80:	4770      	bx	lr

0800ce82 <__lo0bits>:
 800ce82:	6803      	ldr	r3, [r0, #0]
 800ce84:	4602      	mov	r2, r0
 800ce86:	f013 0007 	ands.w	r0, r3, #7
 800ce8a:	d00b      	beq.n	800cea4 <__lo0bits+0x22>
 800ce8c:	07d9      	lsls	r1, r3, #31
 800ce8e:	d421      	bmi.n	800ced4 <__lo0bits+0x52>
 800ce90:	0798      	lsls	r0, r3, #30
 800ce92:	bf49      	itett	mi
 800ce94:	085b      	lsrmi	r3, r3, #1
 800ce96:	089b      	lsrpl	r3, r3, #2
 800ce98:	2001      	movmi	r0, #1
 800ce9a:	6013      	strmi	r3, [r2, #0]
 800ce9c:	bf5c      	itt	pl
 800ce9e:	2002      	movpl	r0, #2
 800cea0:	6013      	strpl	r3, [r2, #0]
 800cea2:	4770      	bx	lr
 800cea4:	b299      	uxth	r1, r3
 800cea6:	b909      	cbnz	r1, 800ceac <__lo0bits+0x2a>
 800cea8:	2010      	movs	r0, #16
 800ceaa:	0c1b      	lsrs	r3, r3, #16
 800ceac:	b2d9      	uxtb	r1, r3
 800ceae:	b909      	cbnz	r1, 800ceb4 <__lo0bits+0x32>
 800ceb0:	3008      	adds	r0, #8
 800ceb2:	0a1b      	lsrs	r3, r3, #8
 800ceb4:	0719      	lsls	r1, r3, #28
 800ceb6:	bf04      	itt	eq
 800ceb8:	091b      	lsreq	r3, r3, #4
 800ceba:	3004      	addeq	r0, #4
 800cebc:	0799      	lsls	r1, r3, #30
 800cebe:	bf04      	itt	eq
 800cec0:	089b      	lsreq	r3, r3, #2
 800cec2:	3002      	addeq	r0, #2
 800cec4:	07d9      	lsls	r1, r3, #31
 800cec6:	d403      	bmi.n	800ced0 <__lo0bits+0x4e>
 800cec8:	085b      	lsrs	r3, r3, #1
 800ceca:	f100 0001 	add.w	r0, r0, #1
 800cece:	d003      	beq.n	800ced8 <__lo0bits+0x56>
 800ced0:	6013      	str	r3, [r2, #0]
 800ced2:	4770      	bx	lr
 800ced4:	2000      	movs	r0, #0
 800ced6:	4770      	bx	lr
 800ced8:	2020      	movs	r0, #32
 800ceda:	4770      	bx	lr

0800cedc <__i2b>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	460c      	mov	r4, r1
 800cee0:	2101      	movs	r1, #1
 800cee2:	f7ff febd 	bl	800cc60 <_Balloc>
 800cee6:	4602      	mov	r2, r0
 800cee8:	b928      	cbnz	r0, 800cef6 <__i2b+0x1a>
 800ceea:	f240 1145 	movw	r1, #325	@ 0x145
 800ceee:	4b04      	ldr	r3, [pc, #16]	@ (800cf00 <__i2b+0x24>)
 800cef0:	4804      	ldr	r0, [pc, #16]	@ (800cf04 <__i2b+0x28>)
 800cef2:	f000 ff29 	bl	800dd48 <__assert_func>
 800cef6:	2301      	movs	r3, #1
 800cef8:	6144      	str	r4, [r0, #20]
 800cefa:	6103      	str	r3, [r0, #16]
 800cefc:	bd10      	pop	{r4, pc}
 800cefe:	bf00      	nop
 800cf00:	0800f47c 	.word	0x0800f47c
 800cf04:	0800f504 	.word	0x0800f504

0800cf08 <__multiply>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	4617      	mov	r7, r2
 800cf0e:	690a      	ldr	r2, [r1, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	4689      	mov	r9, r1
 800cf14:	429a      	cmp	r2, r3
 800cf16:	bfa2      	ittt	ge
 800cf18:	463b      	movge	r3, r7
 800cf1a:	460f      	movge	r7, r1
 800cf1c:	4699      	movge	r9, r3
 800cf1e:	693d      	ldr	r5, [r7, #16]
 800cf20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	eb05 060a 	add.w	r6, r5, sl
 800cf2c:	42b3      	cmp	r3, r6
 800cf2e:	b085      	sub	sp, #20
 800cf30:	bfb8      	it	lt
 800cf32:	3101      	addlt	r1, #1
 800cf34:	f7ff fe94 	bl	800cc60 <_Balloc>
 800cf38:	b930      	cbnz	r0, 800cf48 <__multiply+0x40>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf40:	4b40      	ldr	r3, [pc, #256]	@ (800d044 <__multiply+0x13c>)
 800cf42:	4841      	ldr	r0, [pc, #260]	@ (800d048 <__multiply+0x140>)
 800cf44:	f000 ff00 	bl	800dd48 <__assert_func>
 800cf48:	f100 0414 	add.w	r4, r0, #20
 800cf4c:	4623      	mov	r3, r4
 800cf4e:	2200      	movs	r2, #0
 800cf50:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cf54:	4573      	cmp	r3, lr
 800cf56:	d320      	bcc.n	800cf9a <__multiply+0x92>
 800cf58:	f107 0814 	add.w	r8, r7, #20
 800cf5c:	f109 0114 	add.w	r1, r9, #20
 800cf60:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cf64:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cf68:	9302      	str	r3, [sp, #8]
 800cf6a:	1beb      	subs	r3, r5, r7
 800cf6c:	3b15      	subs	r3, #21
 800cf6e:	f023 0303 	bic.w	r3, r3, #3
 800cf72:	3304      	adds	r3, #4
 800cf74:	3715      	adds	r7, #21
 800cf76:	42bd      	cmp	r5, r7
 800cf78:	bf38      	it	cc
 800cf7a:	2304      	movcc	r3, #4
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	9b02      	ldr	r3, [sp, #8]
 800cf80:	9103      	str	r1, [sp, #12]
 800cf82:	428b      	cmp	r3, r1
 800cf84:	d80c      	bhi.n	800cfa0 <__multiply+0x98>
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	dd03      	ble.n	800cf92 <__multiply+0x8a>
 800cf8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d055      	beq.n	800d03e <__multiply+0x136>
 800cf92:	6106      	str	r6, [r0, #16]
 800cf94:	b005      	add	sp, #20
 800cf96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9a:	f843 2b04 	str.w	r2, [r3], #4
 800cf9e:	e7d9      	b.n	800cf54 <__multiply+0x4c>
 800cfa0:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfa4:	f1ba 0f00 	cmp.w	sl, #0
 800cfa8:	d01f      	beq.n	800cfea <__multiply+0xe2>
 800cfaa:	46c4      	mov	ip, r8
 800cfac:	46a1      	mov	r9, r4
 800cfae:	2700      	movs	r7, #0
 800cfb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfb4:	f8d9 3000 	ldr.w	r3, [r9]
 800cfb8:	fa1f fb82 	uxth.w	fp, r2
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfc2:	443b      	add	r3, r7
 800cfc4:	f8d9 7000 	ldr.w	r7, [r9]
 800cfc8:	0c12      	lsrs	r2, r2, #16
 800cfca:	0c3f      	lsrs	r7, r7, #16
 800cfcc:	fb0a 7202 	mla	r2, sl, r2, r7
 800cfd0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfda:	4565      	cmp	r5, ip
 800cfdc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cfe0:	f849 3b04 	str.w	r3, [r9], #4
 800cfe4:	d8e4      	bhi.n	800cfb0 <__multiply+0xa8>
 800cfe6:	9b01      	ldr	r3, [sp, #4]
 800cfe8:	50e7      	str	r7, [r4, r3]
 800cfea:	9b03      	ldr	r3, [sp, #12]
 800cfec:	3104      	adds	r1, #4
 800cfee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cff2:	f1b9 0f00 	cmp.w	r9, #0
 800cff6:	d020      	beq.n	800d03a <__multiply+0x132>
 800cff8:	4647      	mov	r7, r8
 800cffa:	46a4      	mov	ip, r4
 800cffc:	f04f 0a00 	mov.w	sl, #0
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	f8b7 b000 	ldrh.w	fp, [r7]
 800d006:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	fb09 220b 	mla	r2, r9, fp, r2
 800d010:	4452      	add	r2, sl
 800d012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d016:	f84c 3b04 	str.w	r3, [ip], #4
 800d01a:	f857 3b04 	ldr.w	r3, [r7], #4
 800d01e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d022:	f8bc 3000 	ldrh.w	r3, [ip]
 800d026:	42bd      	cmp	r5, r7
 800d028:	fb09 330a 	mla	r3, r9, sl, r3
 800d02c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d034:	d8e5      	bhi.n	800d002 <__multiply+0xfa>
 800d036:	9a01      	ldr	r2, [sp, #4]
 800d038:	50a3      	str	r3, [r4, r2]
 800d03a:	3404      	adds	r4, #4
 800d03c:	e79f      	b.n	800cf7e <__multiply+0x76>
 800d03e:	3e01      	subs	r6, #1
 800d040:	e7a1      	b.n	800cf86 <__multiply+0x7e>
 800d042:	bf00      	nop
 800d044:	0800f47c 	.word	0x0800f47c
 800d048:	0800f504 	.word	0x0800f504

0800d04c <__pow5mult>:
 800d04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d050:	4615      	mov	r5, r2
 800d052:	f012 0203 	ands.w	r2, r2, #3
 800d056:	4607      	mov	r7, r0
 800d058:	460e      	mov	r6, r1
 800d05a:	d007      	beq.n	800d06c <__pow5mult+0x20>
 800d05c:	4c25      	ldr	r4, [pc, #148]	@ (800d0f4 <__pow5mult+0xa8>)
 800d05e:	3a01      	subs	r2, #1
 800d060:	2300      	movs	r3, #0
 800d062:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d066:	f7ff fe5d 	bl	800cd24 <__multadd>
 800d06a:	4606      	mov	r6, r0
 800d06c:	10ad      	asrs	r5, r5, #2
 800d06e:	d03d      	beq.n	800d0ec <__pow5mult+0xa0>
 800d070:	69fc      	ldr	r4, [r7, #28]
 800d072:	b97c      	cbnz	r4, 800d094 <__pow5mult+0x48>
 800d074:	2010      	movs	r0, #16
 800d076:	f000 fe99 	bl	800ddac <malloc>
 800d07a:	4602      	mov	r2, r0
 800d07c:	61f8      	str	r0, [r7, #28]
 800d07e:	b928      	cbnz	r0, 800d08c <__pow5mult+0x40>
 800d080:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d084:	4b1c      	ldr	r3, [pc, #112]	@ (800d0f8 <__pow5mult+0xac>)
 800d086:	481d      	ldr	r0, [pc, #116]	@ (800d0fc <__pow5mult+0xb0>)
 800d088:	f000 fe5e 	bl	800dd48 <__assert_func>
 800d08c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d090:	6004      	str	r4, [r0, #0]
 800d092:	60c4      	str	r4, [r0, #12]
 800d094:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d09c:	b94c      	cbnz	r4, 800d0b2 <__pow5mult+0x66>
 800d09e:	f240 2171 	movw	r1, #625	@ 0x271
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7ff ff1a 	bl	800cedc <__i2b>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0b0:	6003      	str	r3, [r0, #0]
 800d0b2:	f04f 0900 	mov.w	r9, #0
 800d0b6:	07eb      	lsls	r3, r5, #31
 800d0b8:	d50a      	bpl.n	800d0d0 <__pow5mult+0x84>
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4622      	mov	r2, r4
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f7ff ff22 	bl	800cf08 <__multiply>
 800d0c4:	4680      	mov	r8, r0
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4638      	mov	r0, r7
 800d0ca:	f7ff fe09 	bl	800cce0 <_Bfree>
 800d0ce:	4646      	mov	r6, r8
 800d0d0:	106d      	asrs	r5, r5, #1
 800d0d2:	d00b      	beq.n	800d0ec <__pow5mult+0xa0>
 800d0d4:	6820      	ldr	r0, [r4, #0]
 800d0d6:	b938      	cbnz	r0, 800d0e8 <__pow5mult+0x9c>
 800d0d8:	4622      	mov	r2, r4
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4638      	mov	r0, r7
 800d0de:	f7ff ff13 	bl	800cf08 <__multiply>
 800d0e2:	6020      	str	r0, [r4, #0]
 800d0e4:	f8c0 9000 	str.w	r9, [r0]
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	e7e4      	b.n	800d0b6 <__pow5mult+0x6a>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f2:	bf00      	nop
 800d0f4:	0800f620 	.word	0x0800f620
 800d0f8:	0800f4ed 	.word	0x0800f4ed
 800d0fc:	0800f504 	.word	0x0800f504

0800d100 <__lshift>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	4607      	mov	r7, r0
 800d108:	4691      	mov	r9, r2
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	6849      	ldr	r1, [r1, #4]
 800d10e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d118:	f108 0601 	add.w	r6, r8, #1
 800d11c:	42b3      	cmp	r3, r6
 800d11e:	db0b      	blt.n	800d138 <__lshift+0x38>
 800d120:	4638      	mov	r0, r7
 800d122:	f7ff fd9d 	bl	800cc60 <_Balloc>
 800d126:	4605      	mov	r5, r0
 800d128:	b948      	cbnz	r0, 800d13e <__lshift+0x3e>
 800d12a:	4602      	mov	r2, r0
 800d12c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d130:	4b27      	ldr	r3, [pc, #156]	@ (800d1d0 <__lshift+0xd0>)
 800d132:	4828      	ldr	r0, [pc, #160]	@ (800d1d4 <__lshift+0xd4>)
 800d134:	f000 fe08 	bl	800dd48 <__assert_func>
 800d138:	3101      	adds	r1, #1
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	e7ee      	b.n	800d11c <__lshift+0x1c>
 800d13e:	2300      	movs	r3, #0
 800d140:	f100 0114 	add.w	r1, r0, #20
 800d144:	f100 0210 	add.w	r2, r0, #16
 800d148:	4618      	mov	r0, r3
 800d14a:	4553      	cmp	r3, sl
 800d14c:	db33      	blt.n	800d1b6 <__lshift+0xb6>
 800d14e:	6920      	ldr	r0, [r4, #16]
 800d150:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d154:	f104 0314 	add.w	r3, r4, #20
 800d158:	f019 091f 	ands.w	r9, r9, #31
 800d15c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d160:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d164:	d02b      	beq.n	800d1be <__lshift+0xbe>
 800d166:	468a      	mov	sl, r1
 800d168:	2200      	movs	r2, #0
 800d16a:	f1c9 0e20 	rsb	lr, r9, #32
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	fa00 f009 	lsl.w	r0, r0, r9
 800d174:	4310      	orrs	r0, r2
 800d176:	f84a 0b04 	str.w	r0, [sl], #4
 800d17a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d17e:	459c      	cmp	ip, r3
 800d180:	fa22 f20e 	lsr.w	r2, r2, lr
 800d184:	d8f3      	bhi.n	800d16e <__lshift+0x6e>
 800d186:	ebac 0304 	sub.w	r3, ip, r4
 800d18a:	3b15      	subs	r3, #21
 800d18c:	f023 0303 	bic.w	r3, r3, #3
 800d190:	3304      	adds	r3, #4
 800d192:	f104 0015 	add.w	r0, r4, #21
 800d196:	4560      	cmp	r0, ip
 800d198:	bf88      	it	hi
 800d19a:	2304      	movhi	r3, #4
 800d19c:	50ca      	str	r2, [r1, r3]
 800d19e:	b10a      	cbz	r2, 800d1a4 <__lshift+0xa4>
 800d1a0:	f108 0602 	add.w	r6, r8, #2
 800d1a4:	3e01      	subs	r6, #1
 800d1a6:	4638      	mov	r0, r7
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	612e      	str	r6, [r5, #16]
 800d1ac:	f7ff fd98 	bl	800cce0 <_Bfree>
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	e7c5      	b.n	800d14a <__lshift+0x4a>
 800d1be:	3904      	subs	r1, #4
 800d1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c4:	459c      	cmp	ip, r3
 800d1c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1ca:	d8f9      	bhi.n	800d1c0 <__lshift+0xc0>
 800d1cc:	e7ea      	b.n	800d1a4 <__lshift+0xa4>
 800d1ce:	bf00      	nop
 800d1d0:	0800f47c 	.word	0x0800f47c
 800d1d4:	0800f504 	.word	0x0800f504

0800d1d8 <__mcmp>:
 800d1d8:	4603      	mov	r3, r0
 800d1da:	690a      	ldr	r2, [r1, #16]
 800d1dc:	6900      	ldr	r0, [r0, #16]
 800d1de:	b530      	push	{r4, r5, lr}
 800d1e0:	1a80      	subs	r0, r0, r2
 800d1e2:	d10e      	bne.n	800d202 <__mcmp+0x2a>
 800d1e4:	3314      	adds	r3, #20
 800d1e6:	3114      	adds	r1, #20
 800d1e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d1f8:	4295      	cmp	r5, r2
 800d1fa:	d003      	beq.n	800d204 <__mcmp+0x2c>
 800d1fc:	d205      	bcs.n	800d20a <__mcmp+0x32>
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d202:	bd30      	pop	{r4, r5, pc}
 800d204:	42a3      	cmp	r3, r4
 800d206:	d3f3      	bcc.n	800d1f0 <__mcmp+0x18>
 800d208:	e7fb      	b.n	800d202 <__mcmp+0x2a>
 800d20a:	2001      	movs	r0, #1
 800d20c:	e7f9      	b.n	800d202 <__mcmp+0x2a>
	...

0800d210 <__mdiff>:
 800d210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d214:	4689      	mov	r9, r1
 800d216:	4606      	mov	r6, r0
 800d218:	4611      	mov	r1, r2
 800d21a:	4648      	mov	r0, r9
 800d21c:	4614      	mov	r4, r2
 800d21e:	f7ff ffdb 	bl	800d1d8 <__mcmp>
 800d222:	1e05      	subs	r5, r0, #0
 800d224:	d112      	bne.n	800d24c <__mdiff+0x3c>
 800d226:	4629      	mov	r1, r5
 800d228:	4630      	mov	r0, r6
 800d22a:	f7ff fd19 	bl	800cc60 <_Balloc>
 800d22e:	4602      	mov	r2, r0
 800d230:	b928      	cbnz	r0, 800d23e <__mdiff+0x2e>
 800d232:	f240 2137 	movw	r1, #567	@ 0x237
 800d236:	4b3e      	ldr	r3, [pc, #248]	@ (800d330 <__mdiff+0x120>)
 800d238:	483e      	ldr	r0, [pc, #248]	@ (800d334 <__mdiff+0x124>)
 800d23a:	f000 fd85 	bl	800dd48 <__assert_func>
 800d23e:	2301      	movs	r3, #1
 800d240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d244:	4610      	mov	r0, r2
 800d246:	b003      	add	sp, #12
 800d248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24c:	bfbc      	itt	lt
 800d24e:	464b      	movlt	r3, r9
 800d250:	46a1      	movlt	r9, r4
 800d252:	4630      	mov	r0, r6
 800d254:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d258:	bfba      	itte	lt
 800d25a:	461c      	movlt	r4, r3
 800d25c:	2501      	movlt	r5, #1
 800d25e:	2500      	movge	r5, #0
 800d260:	f7ff fcfe 	bl	800cc60 <_Balloc>
 800d264:	4602      	mov	r2, r0
 800d266:	b918      	cbnz	r0, 800d270 <__mdiff+0x60>
 800d268:	f240 2145 	movw	r1, #581	@ 0x245
 800d26c:	4b30      	ldr	r3, [pc, #192]	@ (800d330 <__mdiff+0x120>)
 800d26e:	e7e3      	b.n	800d238 <__mdiff+0x28>
 800d270:	f100 0b14 	add.w	fp, r0, #20
 800d274:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d278:	f109 0310 	add.w	r3, r9, #16
 800d27c:	60c5      	str	r5, [r0, #12]
 800d27e:	f04f 0c00 	mov.w	ip, #0
 800d282:	f109 0514 	add.w	r5, r9, #20
 800d286:	46d9      	mov	r9, fp
 800d288:	6926      	ldr	r6, [r4, #16]
 800d28a:	f104 0e14 	add.w	lr, r4, #20
 800d28e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d292:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	9b01      	ldr	r3, [sp, #4]
 800d29a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d29e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2a2:	b281      	uxth	r1, r0
 800d2a4:	9301      	str	r3, [sp, #4]
 800d2a6:	fa1f f38a 	uxth.w	r3, sl
 800d2aa:	1a5b      	subs	r3, r3, r1
 800d2ac:	0c00      	lsrs	r0, r0, #16
 800d2ae:	4463      	add	r3, ip
 800d2b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2be:	4576      	cmp	r6, lr
 800d2c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2c4:	f849 3b04 	str.w	r3, [r9], #4
 800d2c8:	d8e6      	bhi.n	800d298 <__mdiff+0x88>
 800d2ca:	1b33      	subs	r3, r6, r4
 800d2cc:	3b15      	subs	r3, #21
 800d2ce:	f023 0303 	bic.w	r3, r3, #3
 800d2d2:	3415      	adds	r4, #21
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	42a6      	cmp	r6, r4
 800d2d8:	bf38      	it	cc
 800d2da:	2304      	movcc	r3, #4
 800d2dc:	441d      	add	r5, r3
 800d2de:	445b      	add	r3, fp
 800d2e0:	461e      	mov	r6, r3
 800d2e2:	462c      	mov	r4, r5
 800d2e4:	4544      	cmp	r4, r8
 800d2e6:	d30e      	bcc.n	800d306 <__mdiff+0xf6>
 800d2e8:	f108 0103 	add.w	r1, r8, #3
 800d2ec:	1b49      	subs	r1, r1, r5
 800d2ee:	f021 0103 	bic.w	r1, r1, #3
 800d2f2:	3d03      	subs	r5, #3
 800d2f4:	45a8      	cmp	r8, r5
 800d2f6:	bf38      	it	cc
 800d2f8:	2100      	movcc	r1, #0
 800d2fa:	440b      	add	r3, r1
 800d2fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d300:	b199      	cbz	r1, 800d32a <__mdiff+0x11a>
 800d302:	6117      	str	r7, [r2, #16]
 800d304:	e79e      	b.n	800d244 <__mdiff+0x34>
 800d306:	46e6      	mov	lr, ip
 800d308:	f854 1b04 	ldr.w	r1, [r4], #4
 800d30c:	fa1f fc81 	uxth.w	ip, r1
 800d310:	44f4      	add	ip, lr
 800d312:	0c08      	lsrs	r0, r1, #16
 800d314:	4471      	add	r1, lr
 800d316:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d31a:	b289      	uxth	r1, r1
 800d31c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d320:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d324:	f846 1b04 	str.w	r1, [r6], #4
 800d328:	e7dc      	b.n	800d2e4 <__mdiff+0xd4>
 800d32a:	3f01      	subs	r7, #1
 800d32c:	e7e6      	b.n	800d2fc <__mdiff+0xec>
 800d32e:	bf00      	nop
 800d330:	0800f47c 	.word	0x0800f47c
 800d334:	0800f504 	.word	0x0800f504

0800d338 <__ulp>:
 800d338:	4b0e      	ldr	r3, [pc, #56]	@ (800d374 <__ulp+0x3c>)
 800d33a:	400b      	ands	r3, r1
 800d33c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d340:	2b00      	cmp	r3, #0
 800d342:	dc08      	bgt.n	800d356 <__ulp+0x1e>
 800d344:	425b      	negs	r3, r3
 800d346:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d34a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d34e:	da04      	bge.n	800d35a <__ulp+0x22>
 800d350:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d354:	4113      	asrs	r3, r2
 800d356:	2200      	movs	r2, #0
 800d358:	e008      	b.n	800d36c <__ulp+0x34>
 800d35a:	f1a2 0314 	sub.w	r3, r2, #20
 800d35e:	2b1e      	cmp	r3, #30
 800d360:	bfd6      	itet	le
 800d362:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d366:	2201      	movgt	r2, #1
 800d368:	40da      	lsrle	r2, r3
 800d36a:	2300      	movs	r3, #0
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	7ff00000 	.word	0x7ff00000

0800d378 <__b2d>:
 800d378:	6902      	ldr	r2, [r0, #16]
 800d37a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37c:	f100 0614 	add.w	r6, r0, #20
 800d380:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d384:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d388:	4f1e      	ldr	r7, [pc, #120]	@ (800d404 <__b2d+0x8c>)
 800d38a:	4620      	mov	r0, r4
 800d38c:	f7ff fd5a 	bl	800ce44 <__hi0bits>
 800d390:	4603      	mov	r3, r0
 800d392:	f1c0 0020 	rsb	r0, r0, #32
 800d396:	2b0a      	cmp	r3, #10
 800d398:	f1a2 0504 	sub.w	r5, r2, #4
 800d39c:	6008      	str	r0, [r1, #0]
 800d39e:	dc12      	bgt.n	800d3c6 <__b2d+0x4e>
 800d3a0:	42ae      	cmp	r6, r5
 800d3a2:	bf2c      	ite	cs
 800d3a4:	2200      	movcs	r2, #0
 800d3a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d3aa:	f1c3 0c0b 	rsb	ip, r3, #11
 800d3ae:	3315      	adds	r3, #21
 800d3b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d3b4:	fa04 f303 	lsl.w	r3, r4, r3
 800d3b8:	fa22 f20c 	lsr.w	r2, r2, ip
 800d3bc:	ea4e 0107 	orr.w	r1, lr, r7
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c6:	42ae      	cmp	r6, r5
 800d3c8:	bf36      	itet	cc
 800d3ca:	f1a2 0508 	subcc.w	r5, r2, #8
 800d3ce:	2200      	movcs	r2, #0
 800d3d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d3d4:	3b0b      	subs	r3, #11
 800d3d6:	d012      	beq.n	800d3fe <__b2d+0x86>
 800d3d8:	f1c3 0720 	rsb	r7, r3, #32
 800d3dc:	fa22 f107 	lsr.w	r1, r2, r7
 800d3e0:	409c      	lsls	r4, r3
 800d3e2:	430c      	orrs	r4, r1
 800d3e4:	42b5      	cmp	r5, r6
 800d3e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d3ea:	bf94      	ite	ls
 800d3ec:	2400      	movls	r4, #0
 800d3ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d3f2:	409a      	lsls	r2, r3
 800d3f4:	40fc      	lsrs	r4, r7
 800d3f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d3fa:	4322      	orrs	r2, r4
 800d3fc:	e7e1      	b.n	800d3c2 <__b2d+0x4a>
 800d3fe:	ea44 0107 	orr.w	r1, r4, r7
 800d402:	e7de      	b.n	800d3c2 <__b2d+0x4a>
 800d404:	3ff00000 	.word	0x3ff00000

0800d408 <__d2b>:
 800d408:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d40c:	2101      	movs	r1, #1
 800d40e:	4690      	mov	r8, r2
 800d410:	4699      	mov	r9, r3
 800d412:	9e08      	ldr	r6, [sp, #32]
 800d414:	f7ff fc24 	bl	800cc60 <_Balloc>
 800d418:	4604      	mov	r4, r0
 800d41a:	b930      	cbnz	r0, 800d42a <__d2b+0x22>
 800d41c:	4602      	mov	r2, r0
 800d41e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d422:	4b23      	ldr	r3, [pc, #140]	@ (800d4b0 <__d2b+0xa8>)
 800d424:	4823      	ldr	r0, [pc, #140]	@ (800d4b4 <__d2b+0xac>)
 800d426:	f000 fc8f 	bl	800dd48 <__assert_func>
 800d42a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d42e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d432:	b10d      	cbz	r5, 800d438 <__d2b+0x30>
 800d434:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d438:	9301      	str	r3, [sp, #4]
 800d43a:	f1b8 0300 	subs.w	r3, r8, #0
 800d43e:	d024      	beq.n	800d48a <__d2b+0x82>
 800d440:	4668      	mov	r0, sp
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	f7ff fd1d 	bl	800ce82 <__lo0bits>
 800d448:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d44c:	b1d8      	cbz	r0, 800d486 <__d2b+0x7e>
 800d44e:	f1c0 0320 	rsb	r3, r0, #32
 800d452:	fa02 f303 	lsl.w	r3, r2, r3
 800d456:	430b      	orrs	r3, r1
 800d458:	40c2      	lsrs	r2, r0
 800d45a:	6163      	str	r3, [r4, #20]
 800d45c:	9201      	str	r2, [sp, #4]
 800d45e:	9b01      	ldr	r3, [sp, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	bf0c      	ite	eq
 800d464:	2201      	moveq	r2, #1
 800d466:	2202      	movne	r2, #2
 800d468:	61a3      	str	r3, [r4, #24]
 800d46a:	6122      	str	r2, [r4, #16]
 800d46c:	b1ad      	cbz	r5, 800d49a <__d2b+0x92>
 800d46e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d472:	4405      	add	r5, r0
 800d474:	6035      	str	r5, [r6, #0]
 800d476:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d47c:	6018      	str	r0, [r3, #0]
 800d47e:	4620      	mov	r0, r4
 800d480:	b002      	add	sp, #8
 800d482:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d486:	6161      	str	r1, [r4, #20]
 800d488:	e7e9      	b.n	800d45e <__d2b+0x56>
 800d48a:	a801      	add	r0, sp, #4
 800d48c:	f7ff fcf9 	bl	800ce82 <__lo0bits>
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	6163      	str	r3, [r4, #20]
 800d496:	3020      	adds	r0, #32
 800d498:	e7e7      	b.n	800d46a <__d2b+0x62>
 800d49a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d49e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4a2:	6030      	str	r0, [r6, #0]
 800d4a4:	6918      	ldr	r0, [r3, #16]
 800d4a6:	f7ff fccd 	bl	800ce44 <__hi0bits>
 800d4aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ae:	e7e4      	b.n	800d47a <__d2b+0x72>
 800d4b0:	0800f47c 	.word	0x0800f47c
 800d4b4:	0800f504 	.word	0x0800f504

0800d4b8 <__ratio>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	b085      	sub	sp, #20
 800d4be:	e9cd 1000 	strd	r1, r0, [sp]
 800d4c2:	a902      	add	r1, sp, #8
 800d4c4:	f7ff ff58 	bl	800d378 <__b2d>
 800d4c8:	468b      	mov	fp, r1
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	460f      	mov	r7, r1
 800d4ce:	9800      	ldr	r0, [sp, #0]
 800d4d0:	a903      	add	r1, sp, #12
 800d4d2:	f7ff ff51 	bl	800d378 <__b2d>
 800d4d6:	460d      	mov	r5, r1
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	4689      	mov	r9, r1
 800d4dc:	6919      	ldr	r1, [r3, #16]
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	1ac9      	subs	r1, r1, r3
 800d4e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d4ec:	1a9b      	subs	r3, r3, r2
 800d4ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	bfcd      	iteet	gt
 800d4f6:	463a      	movgt	r2, r7
 800d4f8:	462a      	movle	r2, r5
 800d4fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d4fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d502:	bfd8      	it	le
 800d504:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d508:	464b      	mov	r3, r9
 800d50a:	4622      	mov	r2, r4
 800d50c:	4659      	mov	r1, fp
 800d50e:	f7f3 f90d 	bl	800072c <__aeabi_ddiv>
 800d512:	b005      	add	sp, #20
 800d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d518 <__copybits>:
 800d518:	3901      	subs	r1, #1
 800d51a:	b570      	push	{r4, r5, r6, lr}
 800d51c:	1149      	asrs	r1, r1, #5
 800d51e:	6914      	ldr	r4, [r2, #16]
 800d520:	3101      	adds	r1, #1
 800d522:	f102 0314 	add.w	r3, r2, #20
 800d526:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d52a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d52e:	1f05      	subs	r5, r0, #4
 800d530:	42a3      	cmp	r3, r4
 800d532:	d30c      	bcc.n	800d54e <__copybits+0x36>
 800d534:	1aa3      	subs	r3, r4, r2
 800d536:	3b11      	subs	r3, #17
 800d538:	f023 0303 	bic.w	r3, r3, #3
 800d53c:	3211      	adds	r2, #17
 800d53e:	42a2      	cmp	r2, r4
 800d540:	bf88      	it	hi
 800d542:	2300      	movhi	r3, #0
 800d544:	4418      	add	r0, r3
 800d546:	2300      	movs	r3, #0
 800d548:	4288      	cmp	r0, r1
 800d54a:	d305      	bcc.n	800d558 <__copybits+0x40>
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d552:	f845 6f04 	str.w	r6, [r5, #4]!
 800d556:	e7eb      	b.n	800d530 <__copybits+0x18>
 800d558:	f840 3b04 	str.w	r3, [r0], #4
 800d55c:	e7f4      	b.n	800d548 <__copybits+0x30>

0800d55e <__any_on>:
 800d55e:	f100 0214 	add.w	r2, r0, #20
 800d562:	6900      	ldr	r0, [r0, #16]
 800d564:	114b      	asrs	r3, r1, #5
 800d566:	4298      	cmp	r0, r3
 800d568:	b510      	push	{r4, lr}
 800d56a:	db11      	blt.n	800d590 <__any_on+0x32>
 800d56c:	dd0a      	ble.n	800d584 <__any_on+0x26>
 800d56e:	f011 011f 	ands.w	r1, r1, #31
 800d572:	d007      	beq.n	800d584 <__any_on+0x26>
 800d574:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d578:	fa24 f001 	lsr.w	r0, r4, r1
 800d57c:	fa00 f101 	lsl.w	r1, r0, r1
 800d580:	428c      	cmp	r4, r1
 800d582:	d10b      	bne.n	800d59c <__any_on+0x3e>
 800d584:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d588:	4293      	cmp	r3, r2
 800d58a:	d803      	bhi.n	800d594 <__any_on+0x36>
 800d58c:	2000      	movs	r0, #0
 800d58e:	bd10      	pop	{r4, pc}
 800d590:	4603      	mov	r3, r0
 800d592:	e7f7      	b.n	800d584 <__any_on+0x26>
 800d594:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d598:	2900      	cmp	r1, #0
 800d59a:	d0f5      	beq.n	800d588 <__any_on+0x2a>
 800d59c:	2001      	movs	r0, #1
 800d59e:	e7f6      	b.n	800d58e <__any_on+0x30>

0800d5a0 <__ascii_wctomb>:
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	4608      	mov	r0, r1
 800d5a4:	b141      	cbz	r1, 800d5b8 <__ascii_wctomb+0x18>
 800d5a6:	2aff      	cmp	r2, #255	@ 0xff
 800d5a8:	d904      	bls.n	800d5b4 <__ascii_wctomb+0x14>
 800d5aa:	228a      	movs	r2, #138	@ 0x8a
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	4770      	bx	lr
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	700a      	strb	r2, [r1, #0]
 800d5b8:	4770      	bx	lr

0800d5ba <__ssputs_r>:
 800d5ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5be:	461f      	mov	r7, r3
 800d5c0:	688e      	ldr	r6, [r1, #8]
 800d5c2:	4682      	mov	sl, r0
 800d5c4:	42be      	cmp	r6, r7
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4690      	mov	r8, r2
 800d5ca:	680b      	ldr	r3, [r1, #0]
 800d5cc:	d82d      	bhi.n	800d62a <__ssputs_r+0x70>
 800d5ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5d2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5d6:	d026      	beq.n	800d626 <__ssputs_r+0x6c>
 800d5d8:	6965      	ldr	r5, [r4, #20]
 800d5da:	6909      	ldr	r1, [r1, #16]
 800d5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5e0:	eba3 0901 	sub.w	r9, r3, r1
 800d5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5e8:	1c7b      	adds	r3, r7, #1
 800d5ea:	444b      	add	r3, r9
 800d5ec:	106d      	asrs	r5, r5, #1
 800d5ee:	429d      	cmp	r5, r3
 800d5f0:	bf38      	it	cc
 800d5f2:	461d      	movcc	r5, r3
 800d5f4:	0553      	lsls	r3, r2, #21
 800d5f6:	d527      	bpl.n	800d648 <__ssputs_r+0x8e>
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7ff fa93 	bl	800cb24 <_malloc_r>
 800d5fe:	4606      	mov	r6, r0
 800d600:	b360      	cbz	r0, 800d65c <__ssputs_r+0xa2>
 800d602:	464a      	mov	r2, r9
 800d604:	6921      	ldr	r1, [r4, #16]
 800d606:	f7fe fed4 	bl	800c3b2 <memcpy>
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d614:	81a3      	strh	r3, [r4, #12]
 800d616:	6126      	str	r6, [r4, #16]
 800d618:	444e      	add	r6, r9
 800d61a:	6026      	str	r6, [r4, #0]
 800d61c:	463e      	mov	r6, r7
 800d61e:	6165      	str	r5, [r4, #20]
 800d620:	eba5 0509 	sub.w	r5, r5, r9
 800d624:	60a5      	str	r5, [r4, #8]
 800d626:	42be      	cmp	r6, r7
 800d628:	d900      	bls.n	800d62c <__ssputs_r+0x72>
 800d62a:	463e      	mov	r6, r7
 800d62c:	4632      	mov	r2, r6
 800d62e:	4641      	mov	r1, r8
 800d630:	6820      	ldr	r0, [r4, #0]
 800d632:	f000 fb51 	bl	800dcd8 <memmove>
 800d636:	2000      	movs	r0, #0
 800d638:	68a3      	ldr	r3, [r4, #8]
 800d63a:	1b9b      	subs	r3, r3, r6
 800d63c:	60a3      	str	r3, [r4, #8]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	4433      	add	r3, r6
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d648:	462a      	mov	r2, r5
 800d64a:	f000 fbb7 	bl	800ddbc <_realloc_r>
 800d64e:	4606      	mov	r6, r0
 800d650:	2800      	cmp	r0, #0
 800d652:	d1e0      	bne.n	800d616 <__ssputs_r+0x5c>
 800d654:	4650      	mov	r0, sl
 800d656:	6921      	ldr	r1, [r4, #16]
 800d658:	f7fe fec0 	bl	800c3dc <_free_r>
 800d65c:	230c      	movs	r3, #12
 800d65e:	f8ca 3000 	str.w	r3, [sl]
 800d662:	89a3      	ldrh	r3, [r4, #12]
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d66c:	81a3      	strh	r3, [r4, #12]
 800d66e:	e7e9      	b.n	800d644 <__ssputs_r+0x8a>

0800d670 <_svfiprintf_r>:
 800d670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	4698      	mov	r8, r3
 800d676:	898b      	ldrh	r3, [r1, #12]
 800d678:	4607      	mov	r7, r0
 800d67a:	061b      	lsls	r3, r3, #24
 800d67c:	460d      	mov	r5, r1
 800d67e:	4614      	mov	r4, r2
 800d680:	b09d      	sub	sp, #116	@ 0x74
 800d682:	d510      	bpl.n	800d6a6 <_svfiprintf_r+0x36>
 800d684:	690b      	ldr	r3, [r1, #16]
 800d686:	b973      	cbnz	r3, 800d6a6 <_svfiprintf_r+0x36>
 800d688:	2140      	movs	r1, #64	@ 0x40
 800d68a:	f7ff fa4b 	bl	800cb24 <_malloc_r>
 800d68e:	6028      	str	r0, [r5, #0]
 800d690:	6128      	str	r0, [r5, #16]
 800d692:	b930      	cbnz	r0, 800d6a2 <_svfiprintf_r+0x32>
 800d694:	230c      	movs	r3, #12
 800d696:	603b      	str	r3, [r7, #0]
 800d698:	f04f 30ff 	mov.w	r0, #4294967295
 800d69c:	b01d      	add	sp, #116	@ 0x74
 800d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a2:	2340      	movs	r3, #64	@ 0x40
 800d6a4:	616b      	str	r3, [r5, #20]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6aa:	2320      	movs	r3, #32
 800d6ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6b0:	2330      	movs	r3, #48	@ 0x30
 800d6b2:	f04f 0901 	mov.w	r9, #1
 800d6b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d854 <_svfiprintf_r+0x1e4>
 800d6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6c2:	4623      	mov	r3, r4
 800d6c4:	469a      	mov	sl, r3
 800d6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ca:	b10a      	cbz	r2, 800d6d0 <_svfiprintf_r+0x60>
 800d6cc:	2a25      	cmp	r2, #37	@ 0x25
 800d6ce:	d1f9      	bne.n	800d6c4 <_svfiprintf_r+0x54>
 800d6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d6d4:	d00b      	beq.n	800d6ee <_svfiprintf_r+0x7e>
 800d6d6:	465b      	mov	r3, fp
 800d6d8:	4622      	mov	r2, r4
 800d6da:	4629      	mov	r1, r5
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f7ff ff6c 	bl	800d5ba <__ssputs_r>
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	f000 80a7 	beq.w	800d836 <_svfiprintf_r+0x1c6>
 800d6e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ea:	445a      	add	r2, fp
 800d6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 809f 	beq.w	800d836 <_svfiprintf_r+0x1c6>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d702:	f10a 0a01 	add.w	sl, sl, #1
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	9307      	str	r3, [sp, #28]
 800d70a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d70e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d710:	4654      	mov	r4, sl
 800d712:	2205      	movs	r2, #5
 800d714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d718:	484e      	ldr	r0, [pc, #312]	@ (800d854 <_svfiprintf_r+0x1e4>)
 800d71a:	f000 fb07 	bl	800dd2c <memchr>
 800d71e:	9a04      	ldr	r2, [sp, #16]
 800d720:	b9d8      	cbnz	r0, 800d75a <_svfiprintf_r+0xea>
 800d722:	06d0      	lsls	r0, r2, #27
 800d724:	bf44      	itt	mi
 800d726:	2320      	movmi	r3, #32
 800d728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d72c:	0711      	lsls	r1, r2, #28
 800d72e:	bf44      	itt	mi
 800d730:	232b      	movmi	r3, #43	@ 0x2b
 800d732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d736:	f89a 3000 	ldrb.w	r3, [sl]
 800d73a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d73c:	d015      	beq.n	800d76a <_svfiprintf_r+0xfa>
 800d73e:	4654      	mov	r4, sl
 800d740:	2000      	movs	r0, #0
 800d742:	f04f 0c0a 	mov.w	ip, #10
 800d746:	9a07      	ldr	r2, [sp, #28]
 800d748:	4621      	mov	r1, r4
 800d74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d74e:	3b30      	subs	r3, #48	@ 0x30
 800d750:	2b09      	cmp	r3, #9
 800d752:	d94b      	bls.n	800d7ec <_svfiprintf_r+0x17c>
 800d754:	b1b0      	cbz	r0, 800d784 <_svfiprintf_r+0x114>
 800d756:	9207      	str	r2, [sp, #28]
 800d758:	e014      	b.n	800d784 <_svfiprintf_r+0x114>
 800d75a:	eba0 0308 	sub.w	r3, r0, r8
 800d75e:	fa09 f303 	lsl.w	r3, r9, r3
 800d762:	4313      	orrs	r3, r2
 800d764:	46a2      	mov	sl, r4
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	e7d2      	b.n	800d710 <_svfiprintf_r+0xa0>
 800d76a:	9b03      	ldr	r3, [sp, #12]
 800d76c:	1d19      	adds	r1, r3, #4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	9103      	str	r1, [sp, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	bfbb      	ittet	lt
 800d776:	425b      	neglt	r3, r3
 800d778:	f042 0202 	orrlt.w	r2, r2, #2
 800d77c:	9307      	strge	r3, [sp, #28]
 800d77e:	9307      	strlt	r3, [sp, #28]
 800d780:	bfb8      	it	lt
 800d782:	9204      	strlt	r2, [sp, #16]
 800d784:	7823      	ldrb	r3, [r4, #0]
 800d786:	2b2e      	cmp	r3, #46	@ 0x2e
 800d788:	d10a      	bne.n	800d7a0 <_svfiprintf_r+0x130>
 800d78a:	7863      	ldrb	r3, [r4, #1]
 800d78c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d78e:	d132      	bne.n	800d7f6 <_svfiprintf_r+0x186>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	3402      	adds	r4, #2
 800d794:	1d1a      	adds	r2, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9203      	str	r2, [sp, #12]
 800d79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d79e:	9305      	str	r3, [sp, #20]
 800d7a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d858 <_svfiprintf_r+0x1e8>
 800d7a4:	2203      	movs	r2, #3
 800d7a6:	4650      	mov	r0, sl
 800d7a8:	7821      	ldrb	r1, [r4, #0]
 800d7aa:	f000 fabf 	bl	800dd2c <memchr>
 800d7ae:	b138      	cbz	r0, 800d7c0 <_svfiprintf_r+0x150>
 800d7b0:	2240      	movs	r2, #64	@ 0x40
 800d7b2:	9b04      	ldr	r3, [sp, #16]
 800d7b4:	eba0 000a 	sub.w	r0, r0, sl
 800d7b8:	4082      	lsls	r2, r0
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	3401      	adds	r4, #1
 800d7be:	9304      	str	r3, [sp, #16]
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	2206      	movs	r2, #6
 800d7c6:	4825      	ldr	r0, [pc, #148]	@ (800d85c <_svfiprintf_r+0x1ec>)
 800d7c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7cc:	f000 faae 	bl	800dd2c <memchr>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d036      	beq.n	800d842 <_svfiprintf_r+0x1d2>
 800d7d4:	4b22      	ldr	r3, [pc, #136]	@ (800d860 <_svfiprintf_r+0x1f0>)
 800d7d6:	bb1b      	cbnz	r3, 800d820 <_svfiprintf_r+0x1b0>
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	3307      	adds	r3, #7
 800d7dc:	f023 0307 	bic.w	r3, r3, #7
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	9303      	str	r3, [sp, #12]
 800d7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e6:	4433      	add	r3, r6
 800d7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ea:	e76a      	b.n	800d6c2 <_svfiprintf_r+0x52>
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	2001      	movs	r0, #1
 800d7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7f4:	e7a8      	b.n	800d748 <_svfiprintf_r+0xd8>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f04f 0c0a 	mov.w	ip, #10
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	3401      	adds	r4, #1
 800d800:	9305      	str	r3, [sp, #20]
 800d802:	4620      	mov	r0, r4
 800d804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d808:	3a30      	subs	r2, #48	@ 0x30
 800d80a:	2a09      	cmp	r2, #9
 800d80c:	d903      	bls.n	800d816 <_svfiprintf_r+0x1a6>
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0c6      	beq.n	800d7a0 <_svfiprintf_r+0x130>
 800d812:	9105      	str	r1, [sp, #20]
 800d814:	e7c4      	b.n	800d7a0 <_svfiprintf_r+0x130>
 800d816:	4604      	mov	r4, r0
 800d818:	2301      	movs	r3, #1
 800d81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d81e:	e7f0      	b.n	800d802 <_svfiprintf_r+0x192>
 800d820:	ab03      	add	r3, sp, #12
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	462a      	mov	r2, r5
 800d826:	4638      	mov	r0, r7
 800d828:	4b0e      	ldr	r3, [pc, #56]	@ (800d864 <_svfiprintf_r+0x1f4>)
 800d82a:	a904      	add	r1, sp, #16
 800d82c:	f3af 8000 	nop.w
 800d830:	1c42      	adds	r2, r0, #1
 800d832:	4606      	mov	r6, r0
 800d834:	d1d6      	bne.n	800d7e4 <_svfiprintf_r+0x174>
 800d836:	89ab      	ldrh	r3, [r5, #12]
 800d838:	065b      	lsls	r3, r3, #25
 800d83a:	f53f af2d 	bmi.w	800d698 <_svfiprintf_r+0x28>
 800d83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d840:	e72c      	b.n	800d69c <_svfiprintf_r+0x2c>
 800d842:	ab03      	add	r3, sp, #12
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	462a      	mov	r2, r5
 800d848:	4638      	mov	r0, r7
 800d84a:	4b06      	ldr	r3, [pc, #24]	@ (800d864 <_svfiprintf_r+0x1f4>)
 800d84c:	a904      	add	r1, sp, #16
 800d84e:	f000 f87d 	bl	800d94c <_printf_i>
 800d852:	e7ed      	b.n	800d830 <_svfiprintf_r+0x1c0>
 800d854:	0800f55d 	.word	0x0800f55d
 800d858:	0800f563 	.word	0x0800f563
 800d85c:	0800f567 	.word	0x0800f567
 800d860:	00000000 	.word	0x00000000
 800d864:	0800d5bb 	.word	0x0800d5bb

0800d868 <_printf_common>:
 800d868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86c:	4616      	mov	r6, r2
 800d86e:	4698      	mov	r8, r3
 800d870:	688a      	ldr	r2, [r1, #8]
 800d872:	690b      	ldr	r3, [r1, #16]
 800d874:	4607      	mov	r7, r0
 800d876:	4293      	cmp	r3, r2
 800d878:	bfb8      	it	lt
 800d87a:	4613      	movlt	r3, r2
 800d87c:	6033      	str	r3, [r6, #0]
 800d87e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d882:	460c      	mov	r4, r1
 800d884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d888:	b10a      	cbz	r2, 800d88e <_printf_common+0x26>
 800d88a:	3301      	adds	r3, #1
 800d88c:	6033      	str	r3, [r6, #0]
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	0699      	lsls	r1, r3, #26
 800d892:	bf42      	ittt	mi
 800d894:	6833      	ldrmi	r3, [r6, #0]
 800d896:	3302      	addmi	r3, #2
 800d898:	6033      	strmi	r3, [r6, #0]
 800d89a:	6825      	ldr	r5, [r4, #0]
 800d89c:	f015 0506 	ands.w	r5, r5, #6
 800d8a0:	d106      	bne.n	800d8b0 <_printf_common+0x48>
 800d8a2:	f104 0a19 	add.w	sl, r4, #25
 800d8a6:	68e3      	ldr	r3, [r4, #12]
 800d8a8:	6832      	ldr	r2, [r6, #0]
 800d8aa:	1a9b      	subs	r3, r3, r2
 800d8ac:	42ab      	cmp	r3, r5
 800d8ae:	dc2b      	bgt.n	800d908 <_printf_common+0xa0>
 800d8b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8b4:	6822      	ldr	r2, [r4, #0]
 800d8b6:	3b00      	subs	r3, #0
 800d8b8:	bf18      	it	ne
 800d8ba:	2301      	movne	r3, #1
 800d8bc:	0692      	lsls	r2, r2, #26
 800d8be:	d430      	bmi.n	800d922 <_printf_common+0xba>
 800d8c0:	4641      	mov	r1, r8
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8c8:	47c8      	blx	r9
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	d023      	beq.n	800d916 <_printf_common+0xae>
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	6922      	ldr	r2, [r4, #16]
 800d8d2:	f003 0306 	and.w	r3, r3, #6
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	bf14      	ite	ne
 800d8da:	2500      	movne	r5, #0
 800d8dc:	6833      	ldreq	r3, [r6, #0]
 800d8de:	f04f 0600 	mov.w	r6, #0
 800d8e2:	bf08      	it	eq
 800d8e4:	68e5      	ldreq	r5, [r4, #12]
 800d8e6:	f104 041a 	add.w	r4, r4, #26
 800d8ea:	bf08      	it	eq
 800d8ec:	1aed      	subeq	r5, r5, r3
 800d8ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d8f2:	bf08      	it	eq
 800d8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	bfc4      	itt	gt
 800d8fc:	1a9b      	subgt	r3, r3, r2
 800d8fe:	18ed      	addgt	r5, r5, r3
 800d900:	42b5      	cmp	r5, r6
 800d902:	d11a      	bne.n	800d93a <_printf_common+0xd2>
 800d904:	2000      	movs	r0, #0
 800d906:	e008      	b.n	800d91a <_printf_common+0xb2>
 800d908:	2301      	movs	r3, #1
 800d90a:	4652      	mov	r2, sl
 800d90c:	4641      	mov	r1, r8
 800d90e:	4638      	mov	r0, r7
 800d910:	47c8      	blx	r9
 800d912:	3001      	adds	r0, #1
 800d914:	d103      	bne.n	800d91e <_printf_common+0xb6>
 800d916:	f04f 30ff 	mov.w	r0, #4294967295
 800d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91e:	3501      	adds	r5, #1
 800d920:	e7c1      	b.n	800d8a6 <_printf_common+0x3e>
 800d922:	2030      	movs	r0, #48	@ 0x30
 800d924:	18e1      	adds	r1, r4, r3
 800d926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d930:	4422      	add	r2, r4
 800d932:	3302      	adds	r3, #2
 800d934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d938:	e7c2      	b.n	800d8c0 <_printf_common+0x58>
 800d93a:	2301      	movs	r3, #1
 800d93c:	4622      	mov	r2, r4
 800d93e:	4641      	mov	r1, r8
 800d940:	4638      	mov	r0, r7
 800d942:	47c8      	blx	r9
 800d944:	3001      	adds	r0, #1
 800d946:	d0e6      	beq.n	800d916 <_printf_common+0xae>
 800d948:	3601      	adds	r6, #1
 800d94a:	e7d9      	b.n	800d900 <_printf_common+0x98>

0800d94c <_printf_i>:
 800d94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d950:	7e0f      	ldrb	r7, [r1, #24]
 800d952:	4691      	mov	r9, r2
 800d954:	2f78      	cmp	r7, #120	@ 0x78
 800d956:	4680      	mov	r8, r0
 800d958:	460c      	mov	r4, r1
 800d95a:	469a      	mov	sl, r3
 800d95c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d95e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d962:	d807      	bhi.n	800d974 <_printf_i+0x28>
 800d964:	2f62      	cmp	r7, #98	@ 0x62
 800d966:	d80a      	bhi.n	800d97e <_printf_i+0x32>
 800d968:	2f00      	cmp	r7, #0
 800d96a:	f000 80d1 	beq.w	800db10 <_printf_i+0x1c4>
 800d96e:	2f58      	cmp	r7, #88	@ 0x58
 800d970:	f000 80b8 	beq.w	800dae4 <_printf_i+0x198>
 800d974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d97c:	e03a      	b.n	800d9f4 <_printf_i+0xa8>
 800d97e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d982:	2b15      	cmp	r3, #21
 800d984:	d8f6      	bhi.n	800d974 <_printf_i+0x28>
 800d986:	a101      	add	r1, pc, #4	@ (adr r1, 800d98c <_printf_i+0x40>)
 800d988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d98c:	0800d9e5 	.word	0x0800d9e5
 800d990:	0800d9f9 	.word	0x0800d9f9
 800d994:	0800d975 	.word	0x0800d975
 800d998:	0800d975 	.word	0x0800d975
 800d99c:	0800d975 	.word	0x0800d975
 800d9a0:	0800d975 	.word	0x0800d975
 800d9a4:	0800d9f9 	.word	0x0800d9f9
 800d9a8:	0800d975 	.word	0x0800d975
 800d9ac:	0800d975 	.word	0x0800d975
 800d9b0:	0800d975 	.word	0x0800d975
 800d9b4:	0800d975 	.word	0x0800d975
 800d9b8:	0800daf7 	.word	0x0800daf7
 800d9bc:	0800da23 	.word	0x0800da23
 800d9c0:	0800dab1 	.word	0x0800dab1
 800d9c4:	0800d975 	.word	0x0800d975
 800d9c8:	0800d975 	.word	0x0800d975
 800d9cc:	0800db19 	.word	0x0800db19
 800d9d0:	0800d975 	.word	0x0800d975
 800d9d4:	0800da23 	.word	0x0800da23
 800d9d8:	0800d975 	.word	0x0800d975
 800d9dc:	0800d975 	.word	0x0800d975
 800d9e0:	0800dab9 	.word	0x0800dab9
 800d9e4:	6833      	ldr	r3, [r6, #0]
 800d9e6:	1d1a      	adds	r2, r3, #4
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6032      	str	r2, [r6, #0]
 800d9ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e09c      	b.n	800db32 <_printf_i+0x1e6>
 800d9f8:	6833      	ldr	r3, [r6, #0]
 800d9fa:	6820      	ldr	r0, [r4, #0]
 800d9fc:	1d19      	adds	r1, r3, #4
 800d9fe:	6031      	str	r1, [r6, #0]
 800da00:	0606      	lsls	r6, r0, #24
 800da02:	d501      	bpl.n	800da08 <_printf_i+0xbc>
 800da04:	681d      	ldr	r5, [r3, #0]
 800da06:	e003      	b.n	800da10 <_printf_i+0xc4>
 800da08:	0645      	lsls	r5, r0, #25
 800da0a:	d5fb      	bpl.n	800da04 <_printf_i+0xb8>
 800da0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da10:	2d00      	cmp	r5, #0
 800da12:	da03      	bge.n	800da1c <_printf_i+0xd0>
 800da14:	232d      	movs	r3, #45	@ 0x2d
 800da16:	426d      	negs	r5, r5
 800da18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da1c:	230a      	movs	r3, #10
 800da1e:	4858      	ldr	r0, [pc, #352]	@ (800db80 <_printf_i+0x234>)
 800da20:	e011      	b.n	800da46 <_printf_i+0xfa>
 800da22:	6821      	ldr	r1, [r4, #0]
 800da24:	6833      	ldr	r3, [r6, #0]
 800da26:	0608      	lsls	r0, r1, #24
 800da28:	f853 5b04 	ldr.w	r5, [r3], #4
 800da2c:	d402      	bmi.n	800da34 <_printf_i+0xe8>
 800da2e:	0649      	lsls	r1, r1, #25
 800da30:	bf48      	it	mi
 800da32:	b2ad      	uxthmi	r5, r5
 800da34:	2f6f      	cmp	r7, #111	@ 0x6f
 800da36:	6033      	str	r3, [r6, #0]
 800da38:	bf14      	ite	ne
 800da3a:	230a      	movne	r3, #10
 800da3c:	2308      	moveq	r3, #8
 800da3e:	4850      	ldr	r0, [pc, #320]	@ (800db80 <_printf_i+0x234>)
 800da40:	2100      	movs	r1, #0
 800da42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da46:	6866      	ldr	r6, [r4, #4]
 800da48:	2e00      	cmp	r6, #0
 800da4a:	60a6      	str	r6, [r4, #8]
 800da4c:	db05      	blt.n	800da5a <_printf_i+0x10e>
 800da4e:	6821      	ldr	r1, [r4, #0]
 800da50:	432e      	orrs	r6, r5
 800da52:	f021 0104 	bic.w	r1, r1, #4
 800da56:	6021      	str	r1, [r4, #0]
 800da58:	d04b      	beq.n	800daf2 <_printf_i+0x1a6>
 800da5a:	4616      	mov	r6, r2
 800da5c:	fbb5 f1f3 	udiv	r1, r5, r3
 800da60:	fb03 5711 	mls	r7, r3, r1, r5
 800da64:	5dc7      	ldrb	r7, [r0, r7]
 800da66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da6a:	462f      	mov	r7, r5
 800da6c:	42bb      	cmp	r3, r7
 800da6e:	460d      	mov	r5, r1
 800da70:	d9f4      	bls.n	800da5c <_printf_i+0x110>
 800da72:	2b08      	cmp	r3, #8
 800da74:	d10b      	bne.n	800da8e <_printf_i+0x142>
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	07df      	lsls	r7, r3, #31
 800da7a:	d508      	bpl.n	800da8e <_printf_i+0x142>
 800da7c:	6923      	ldr	r3, [r4, #16]
 800da7e:	6861      	ldr	r1, [r4, #4]
 800da80:	4299      	cmp	r1, r3
 800da82:	bfde      	ittt	le
 800da84:	2330      	movle	r3, #48	@ 0x30
 800da86:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da8e:	1b92      	subs	r2, r2, r6
 800da90:	6122      	str	r2, [r4, #16]
 800da92:	464b      	mov	r3, r9
 800da94:	4621      	mov	r1, r4
 800da96:	4640      	mov	r0, r8
 800da98:	f8cd a000 	str.w	sl, [sp]
 800da9c:	aa03      	add	r2, sp, #12
 800da9e:	f7ff fee3 	bl	800d868 <_printf_common>
 800daa2:	3001      	adds	r0, #1
 800daa4:	d14a      	bne.n	800db3c <_printf_i+0x1f0>
 800daa6:	f04f 30ff 	mov.w	r0, #4294967295
 800daaa:	b004      	add	sp, #16
 800daac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	f043 0320 	orr.w	r3, r3, #32
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	2778      	movs	r7, #120	@ 0x78
 800daba:	4832      	ldr	r0, [pc, #200]	@ (800db84 <_printf_i+0x238>)
 800dabc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dac0:	6823      	ldr	r3, [r4, #0]
 800dac2:	6831      	ldr	r1, [r6, #0]
 800dac4:	061f      	lsls	r7, r3, #24
 800dac6:	f851 5b04 	ldr.w	r5, [r1], #4
 800daca:	d402      	bmi.n	800dad2 <_printf_i+0x186>
 800dacc:	065f      	lsls	r7, r3, #25
 800dace:	bf48      	it	mi
 800dad0:	b2ad      	uxthmi	r5, r5
 800dad2:	6031      	str	r1, [r6, #0]
 800dad4:	07d9      	lsls	r1, r3, #31
 800dad6:	bf44      	itt	mi
 800dad8:	f043 0320 	orrmi.w	r3, r3, #32
 800dadc:	6023      	strmi	r3, [r4, #0]
 800dade:	b11d      	cbz	r5, 800dae8 <_printf_i+0x19c>
 800dae0:	2310      	movs	r3, #16
 800dae2:	e7ad      	b.n	800da40 <_printf_i+0xf4>
 800dae4:	4826      	ldr	r0, [pc, #152]	@ (800db80 <_printf_i+0x234>)
 800dae6:	e7e9      	b.n	800dabc <_printf_i+0x170>
 800dae8:	6823      	ldr	r3, [r4, #0]
 800daea:	f023 0320 	bic.w	r3, r3, #32
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	e7f6      	b.n	800dae0 <_printf_i+0x194>
 800daf2:	4616      	mov	r6, r2
 800daf4:	e7bd      	b.n	800da72 <_printf_i+0x126>
 800daf6:	6833      	ldr	r3, [r6, #0]
 800daf8:	6825      	ldr	r5, [r4, #0]
 800dafa:	1d18      	adds	r0, r3, #4
 800dafc:	6961      	ldr	r1, [r4, #20]
 800dafe:	6030      	str	r0, [r6, #0]
 800db00:	062e      	lsls	r6, r5, #24
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	d501      	bpl.n	800db0a <_printf_i+0x1be>
 800db06:	6019      	str	r1, [r3, #0]
 800db08:	e002      	b.n	800db10 <_printf_i+0x1c4>
 800db0a:	0668      	lsls	r0, r5, #25
 800db0c:	d5fb      	bpl.n	800db06 <_printf_i+0x1ba>
 800db0e:	8019      	strh	r1, [r3, #0]
 800db10:	2300      	movs	r3, #0
 800db12:	4616      	mov	r6, r2
 800db14:	6123      	str	r3, [r4, #16]
 800db16:	e7bc      	b.n	800da92 <_printf_i+0x146>
 800db18:	6833      	ldr	r3, [r6, #0]
 800db1a:	2100      	movs	r1, #0
 800db1c:	1d1a      	adds	r2, r3, #4
 800db1e:	6032      	str	r2, [r6, #0]
 800db20:	681e      	ldr	r6, [r3, #0]
 800db22:	6862      	ldr	r2, [r4, #4]
 800db24:	4630      	mov	r0, r6
 800db26:	f000 f901 	bl	800dd2c <memchr>
 800db2a:	b108      	cbz	r0, 800db30 <_printf_i+0x1e4>
 800db2c:	1b80      	subs	r0, r0, r6
 800db2e:	6060      	str	r0, [r4, #4]
 800db30:	6863      	ldr	r3, [r4, #4]
 800db32:	6123      	str	r3, [r4, #16]
 800db34:	2300      	movs	r3, #0
 800db36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db3a:	e7aa      	b.n	800da92 <_printf_i+0x146>
 800db3c:	4632      	mov	r2, r6
 800db3e:	4649      	mov	r1, r9
 800db40:	4640      	mov	r0, r8
 800db42:	6923      	ldr	r3, [r4, #16]
 800db44:	47d0      	blx	sl
 800db46:	3001      	adds	r0, #1
 800db48:	d0ad      	beq.n	800daa6 <_printf_i+0x15a>
 800db4a:	6823      	ldr	r3, [r4, #0]
 800db4c:	079b      	lsls	r3, r3, #30
 800db4e:	d413      	bmi.n	800db78 <_printf_i+0x22c>
 800db50:	68e0      	ldr	r0, [r4, #12]
 800db52:	9b03      	ldr	r3, [sp, #12]
 800db54:	4298      	cmp	r0, r3
 800db56:	bfb8      	it	lt
 800db58:	4618      	movlt	r0, r3
 800db5a:	e7a6      	b.n	800daaa <_printf_i+0x15e>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4632      	mov	r2, r6
 800db60:	4649      	mov	r1, r9
 800db62:	4640      	mov	r0, r8
 800db64:	47d0      	blx	sl
 800db66:	3001      	adds	r0, #1
 800db68:	d09d      	beq.n	800daa6 <_printf_i+0x15a>
 800db6a:	3501      	adds	r5, #1
 800db6c:	68e3      	ldr	r3, [r4, #12]
 800db6e:	9903      	ldr	r1, [sp, #12]
 800db70:	1a5b      	subs	r3, r3, r1
 800db72:	42ab      	cmp	r3, r5
 800db74:	dcf2      	bgt.n	800db5c <_printf_i+0x210>
 800db76:	e7eb      	b.n	800db50 <_printf_i+0x204>
 800db78:	2500      	movs	r5, #0
 800db7a:	f104 0619 	add.w	r6, r4, #25
 800db7e:	e7f5      	b.n	800db6c <_printf_i+0x220>
 800db80:	0800f56e 	.word	0x0800f56e
 800db84:	0800f57f 	.word	0x0800f57f

0800db88 <__sflush_r>:
 800db88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	0716      	lsls	r6, r2, #28
 800db90:	4605      	mov	r5, r0
 800db92:	460c      	mov	r4, r1
 800db94:	d454      	bmi.n	800dc40 <__sflush_r+0xb8>
 800db96:	684b      	ldr	r3, [r1, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	dc02      	bgt.n	800dba2 <__sflush_r+0x1a>
 800db9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	dd48      	ble.n	800dc34 <__sflush_r+0xac>
 800dba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dba4:	2e00      	cmp	r6, #0
 800dba6:	d045      	beq.n	800dc34 <__sflush_r+0xac>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dbae:	682f      	ldr	r7, [r5, #0]
 800dbb0:	6a21      	ldr	r1, [r4, #32]
 800dbb2:	602b      	str	r3, [r5, #0]
 800dbb4:	d030      	beq.n	800dc18 <__sflush_r+0x90>
 800dbb6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	0759      	lsls	r1, r3, #29
 800dbbc:	d505      	bpl.n	800dbca <__sflush_r+0x42>
 800dbbe:	6863      	ldr	r3, [r4, #4]
 800dbc0:	1ad2      	subs	r2, r2, r3
 800dbc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dbc4:	b10b      	cbz	r3, 800dbca <__sflush_r+0x42>
 800dbc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dbc8:	1ad2      	subs	r2, r2, r3
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4628      	mov	r0, r5
 800dbce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbd0:	6a21      	ldr	r1, [r4, #32]
 800dbd2:	47b0      	blx	r6
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	d106      	bne.n	800dbe8 <__sflush_r+0x60>
 800dbda:	6829      	ldr	r1, [r5, #0]
 800dbdc:	291d      	cmp	r1, #29
 800dbde:	d82b      	bhi.n	800dc38 <__sflush_r+0xb0>
 800dbe0:	4a28      	ldr	r2, [pc, #160]	@ (800dc84 <__sflush_r+0xfc>)
 800dbe2:	40ca      	lsrs	r2, r1
 800dbe4:	07d6      	lsls	r6, r2, #31
 800dbe6:	d527      	bpl.n	800dc38 <__sflush_r+0xb0>
 800dbe8:	2200      	movs	r2, #0
 800dbea:	6062      	str	r2, [r4, #4]
 800dbec:	6922      	ldr	r2, [r4, #16]
 800dbee:	04d9      	lsls	r1, r3, #19
 800dbf0:	6022      	str	r2, [r4, #0]
 800dbf2:	d504      	bpl.n	800dbfe <__sflush_r+0x76>
 800dbf4:	1c42      	adds	r2, r0, #1
 800dbf6:	d101      	bne.n	800dbfc <__sflush_r+0x74>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b903      	cbnz	r3, 800dbfe <__sflush_r+0x76>
 800dbfc:	6560      	str	r0, [r4, #84]	@ 0x54
 800dbfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc00:	602f      	str	r7, [r5, #0]
 800dc02:	b1b9      	cbz	r1, 800dc34 <__sflush_r+0xac>
 800dc04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc08:	4299      	cmp	r1, r3
 800dc0a:	d002      	beq.n	800dc12 <__sflush_r+0x8a>
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	f7fe fbe5 	bl	800c3dc <_free_r>
 800dc12:	2300      	movs	r3, #0
 800dc14:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc16:	e00d      	b.n	800dc34 <__sflush_r+0xac>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	47b0      	blx	r6
 800dc1e:	4602      	mov	r2, r0
 800dc20:	1c50      	adds	r0, r2, #1
 800dc22:	d1c9      	bne.n	800dbb8 <__sflush_r+0x30>
 800dc24:	682b      	ldr	r3, [r5, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0c6      	beq.n	800dbb8 <__sflush_r+0x30>
 800dc2a:	2b1d      	cmp	r3, #29
 800dc2c:	d001      	beq.n	800dc32 <__sflush_r+0xaa>
 800dc2e:	2b16      	cmp	r3, #22
 800dc30:	d11d      	bne.n	800dc6e <__sflush_r+0xe6>
 800dc32:	602f      	str	r7, [r5, #0]
 800dc34:	2000      	movs	r0, #0
 800dc36:	e021      	b.n	800dc7c <__sflush_r+0xf4>
 800dc38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc3c:	b21b      	sxth	r3, r3
 800dc3e:	e01a      	b.n	800dc76 <__sflush_r+0xee>
 800dc40:	690f      	ldr	r7, [r1, #16]
 800dc42:	2f00      	cmp	r7, #0
 800dc44:	d0f6      	beq.n	800dc34 <__sflush_r+0xac>
 800dc46:	0793      	lsls	r3, r2, #30
 800dc48:	bf18      	it	ne
 800dc4a:	2300      	movne	r3, #0
 800dc4c:	680e      	ldr	r6, [r1, #0]
 800dc4e:	bf08      	it	eq
 800dc50:	694b      	ldreq	r3, [r1, #20]
 800dc52:	1bf6      	subs	r6, r6, r7
 800dc54:	600f      	str	r7, [r1, #0]
 800dc56:	608b      	str	r3, [r1, #8]
 800dc58:	2e00      	cmp	r6, #0
 800dc5a:	ddeb      	ble.n	800dc34 <__sflush_r+0xac>
 800dc5c:	4633      	mov	r3, r6
 800dc5e:	463a      	mov	r2, r7
 800dc60:	4628      	mov	r0, r5
 800dc62:	6a21      	ldr	r1, [r4, #32]
 800dc64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dc68:	47e0      	blx	ip
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	dc07      	bgt.n	800dc7e <__sflush_r+0xf6>
 800dc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc76:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7a:	81a3      	strh	r3, [r4, #12]
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc7e:	4407      	add	r7, r0
 800dc80:	1a36      	subs	r6, r6, r0
 800dc82:	e7e9      	b.n	800dc58 <__sflush_r+0xd0>
 800dc84:	20400001 	.word	0x20400001

0800dc88 <_fflush_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	690b      	ldr	r3, [r1, #16]
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	460c      	mov	r4, r1
 800dc90:	b913      	cbnz	r3, 800dc98 <_fflush_r+0x10>
 800dc92:	2500      	movs	r5, #0
 800dc94:	4628      	mov	r0, r5
 800dc96:	bd38      	pop	{r3, r4, r5, pc}
 800dc98:	b118      	cbz	r0, 800dca2 <_fflush_r+0x1a>
 800dc9a:	6a03      	ldr	r3, [r0, #32]
 800dc9c:	b90b      	cbnz	r3, 800dca2 <_fflush_r+0x1a>
 800dc9e:	f7fe fa17 	bl	800c0d0 <__sinit>
 800dca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d0f3      	beq.n	800dc92 <_fflush_r+0xa>
 800dcaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dcac:	07d0      	lsls	r0, r2, #31
 800dcae:	d404      	bmi.n	800dcba <_fflush_r+0x32>
 800dcb0:	0599      	lsls	r1, r3, #22
 800dcb2:	d402      	bmi.n	800dcba <_fflush_r+0x32>
 800dcb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcb6:	f7fe fb7a 	bl	800c3ae <__retarget_lock_acquire_recursive>
 800dcba:	4628      	mov	r0, r5
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	f7ff ff63 	bl	800db88 <__sflush_r>
 800dcc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dcc4:	4605      	mov	r5, r0
 800dcc6:	07da      	lsls	r2, r3, #31
 800dcc8:	d4e4      	bmi.n	800dc94 <_fflush_r+0xc>
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	059b      	lsls	r3, r3, #22
 800dcce:	d4e1      	bmi.n	800dc94 <_fflush_r+0xc>
 800dcd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dcd2:	f7fe fb6d 	bl	800c3b0 <__retarget_lock_release_recursive>
 800dcd6:	e7dd      	b.n	800dc94 <_fflush_r+0xc>

0800dcd8 <memmove>:
 800dcd8:	4288      	cmp	r0, r1
 800dcda:	b510      	push	{r4, lr}
 800dcdc:	eb01 0402 	add.w	r4, r1, r2
 800dce0:	d902      	bls.n	800dce8 <memmove+0x10>
 800dce2:	4284      	cmp	r4, r0
 800dce4:	4623      	mov	r3, r4
 800dce6:	d807      	bhi.n	800dcf8 <memmove+0x20>
 800dce8:	1e43      	subs	r3, r0, #1
 800dcea:	42a1      	cmp	r1, r4
 800dcec:	d008      	beq.n	800dd00 <memmove+0x28>
 800dcee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcf6:	e7f8      	b.n	800dcea <memmove+0x12>
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	4402      	add	r2, r0
 800dcfc:	428a      	cmp	r2, r1
 800dcfe:	d100      	bne.n	800dd02 <memmove+0x2a>
 800dd00:	bd10      	pop	{r4, pc}
 800dd02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd0a:	e7f7      	b.n	800dcfc <memmove+0x24>

0800dd0c <_sbrk_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	2300      	movs	r3, #0
 800dd10:	4d05      	ldr	r5, [pc, #20]	@ (800dd28 <_sbrk_r+0x1c>)
 800dd12:	4604      	mov	r4, r0
 800dd14:	4608      	mov	r0, r1
 800dd16:	602b      	str	r3, [r5, #0]
 800dd18:	f7f6 f8c0 	bl	8003e9c <_sbrk>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_sbrk_r+0x1a>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_sbrk_r+0x1a>
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	200046b4 	.word	0x200046b4

0800dd2c <memchr>:
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	b510      	push	{r4, lr}
 800dd30:	b2c9      	uxtb	r1, r1
 800dd32:	4402      	add	r2, r0
 800dd34:	4293      	cmp	r3, r2
 800dd36:	4618      	mov	r0, r3
 800dd38:	d101      	bne.n	800dd3e <memchr+0x12>
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	e003      	b.n	800dd46 <memchr+0x1a>
 800dd3e:	7804      	ldrb	r4, [r0, #0]
 800dd40:	3301      	adds	r3, #1
 800dd42:	428c      	cmp	r4, r1
 800dd44:	d1f6      	bne.n	800dd34 <memchr+0x8>
 800dd46:	bd10      	pop	{r4, pc}

0800dd48 <__assert_func>:
 800dd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd4a:	4614      	mov	r4, r2
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	4b09      	ldr	r3, [pc, #36]	@ (800dd74 <__assert_func+0x2c>)
 800dd50:	4605      	mov	r5, r0
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	68d8      	ldr	r0, [r3, #12]
 800dd56:	b14c      	cbz	r4, 800dd6c <__assert_func+0x24>
 800dd58:	4b07      	ldr	r3, [pc, #28]	@ (800dd78 <__assert_func+0x30>)
 800dd5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd5e:	9100      	str	r1, [sp, #0]
 800dd60:	462b      	mov	r3, r5
 800dd62:	4906      	ldr	r1, [pc, #24]	@ (800dd7c <__assert_func+0x34>)
 800dd64:	f000 f858 	bl	800de18 <fiprintf>
 800dd68:	f000 f868 	bl	800de3c <abort>
 800dd6c:	4b04      	ldr	r3, [pc, #16]	@ (800dd80 <__assert_func+0x38>)
 800dd6e:	461c      	mov	r4, r3
 800dd70:	e7f3      	b.n	800dd5a <__assert_func+0x12>
 800dd72:	bf00      	nop
 800dd74:	20000300 	.word	0x20000300
 800dd78:	0800f590 	.word	0x0800f590
 800dd7c:	0800f59d 	.word	0x0800f59d
 800dd80:	0800f5cb 	.word	0x0800f5cb

0800dd84 <_calloc_r>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	fba1 5402 	umull	r5, r4, r1, r2
 800dd8a:	b934      	cbnz	r4, 800dd9a <_calloc_r+0x16>
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	f7fe fec9 	bl	800cb24 <_malloc_r>
 800dd92:	4606      	mov	r6, r0
 800dd94:	b928      	cbnz	r0, 800dda2 <_calloc_r+0x1e>
 800dd96:	4630      	mov	r0, r6
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	220c      	movs	r2, #12
 800dd9c:	2600      	movs	r6, #0
 800dd9e:	6002      	str	r2, [r0, #0]
 800dda0:	e7f9      	b.n	800dd96 <_calloc_r+0x12>
 800dda2:	462a      	mov	r2, r5
 800dda4:	4621      	mov	r1, r4
 800dda6:	f7fe fa64 	bl	800c272 <memset>
 800ddaa:	e7f4      	b.n	800dd96 <_calloc_r+0x12>

0800ddac <malloc>:
 800ddac:	4b02      	ldr	r3, [pc, #8]	@ (800ddb8 <malloc+0xc>)
 800ddae:	4601      	mov	r1, r0
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f7fe beb7 	b.w	800cb24 <_malloc_r>
 800ddb6:	bf00      	nop
 800ddb8:	20000300 	.word	0x20000300

0800ddbc <_realloc_r>:
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	4607      	mov	r7, r0
 800ddc2:	4614      	mov	r4, r2
 800ddc4:	460d      	mov	r5, r1
 800ddc6:	b921      	cbnz	r1, 800ddd2 <_realloc_r+0x16>
 800ddc8:	4611      	mov	r1, r2
 800ddca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddce:	f7fe bea9 	b.w	800cb24 <_malloc_r>
 800ddd2:	b92a      	cbnz	r2, 800dde0 <_realloc_r+0x24>
 800ddd4:	f7fe fb02 	bl	800c3dc <_free_r>
 800ddd8:	4625      	mov	r5, r4
 800ddda:	4628      	mov	r0, r5
 800dddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde0:	f000 f833 	bl	800de4a <_malloc_usable_size_r>
 800dde4:	4284      	cmp	r4, r0
 800dde6:	4606      	mov	r6, r0
 800dde8:	d802      	bhi.n	800ddf0 <_realloc_r+0x34>
 800ddea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddee:	d8f4      	bhi.n	800ddda <_realloc_r+0x1e>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	f7fe fe96 	bl	800cb24 <_malloc_r>
 800ddf8:	4680      	mov	r8, r0
 800ddfa:	b908      	cbnz	r0, 800de00 <_realloc_r+0x44>
 800ddfc:	4645      	mov	r5, r8
 800ddfe:	e7ec      	b.n	800ddda <_realloc_r+0x1e>
 800de00:	42b4      	cmp	r4, r6
 800de02:	4622      	mov	r2, r4
 800de04:	4629      	mov	r1, r5
 800de06:	bf28      	it	cs
 800de08:	4632      	movcs	r2, r6
 800de0a:	f7fe fad2 	bl	800c3b2 <memcpy>
 800de0e:	4629      	mov	r1, r5
 800de10:	4638      	mov	r0, r7
 800de12:	f7fe fae3 	bl	800c3dc <_free_r>
 800de16:	e7f1      	b.n	800ddfc <_realloc_r+0x40>

0800de18 <fiprintf>:
 800de18:	b40e      	push	{r1, r2, r3}
 800de1a:	b503      	push	{r0, r1, lr}
 800de1c:	4601      	mov	r1, r0
 800de1e:	ab03      	add	r3, sp, #12
 800de20:	4805      	ldr	r0, [pc, #20]	@ (800de38 <fiprintf+0x20>)
 800de22:	f853 2b04 	ldr.w	r2, [r3], #4
 800de26:	6800      	ldr	r0, [r0, #0]
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	f000 f83d 	bl	800dea8 <_vfiprintf_r>
 800de2e:	b002      	add	sp, #8
 800de30:	f85d eb04 	ldr.w	lr, [sp], #4
 800de34:	b003      	add	sp, #12
 800de36:	4770      	bx	lr
 800de38:	20000300 	.word	0x20000300

0800de3c <abort>:
 800de3c:	2006      	movs	r0, #6
 800de3e:	b508      	push	{r3, lr}
 800de40:	f000 fa06 	bl	800e250 <raise>
 800de44:	2001      	movs	r0, #1
 800de46:	f7f5 ffb4 	bl	8003db2 <_exit>

0800de4a <_malloc_usable_size_r>:
 800de4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de4e:	1f18      	subs	r0, r3, #4
 800de50:	2b00      	cmp	r3, #0
 800de52:	bfbc      	itt	lt
 800de54:	580b      	ldrlt	r3, [r1, r0]
 800de56:	18c0      	addlt	r0, r0, r3
 800de58:	4770      	bx	lr

0800de5a <__sfputc_r>:
 800de5a:	6893      	ldr	r3, [r2, #8]
 800de5c:	b410      	push	{r4}
 800de5e:	3b01      	subs	r3, #1
 800de60:	2b00      	cmp	r3, #0
 800de62:	6093      	str	r3, [r2, #8]
 800de64:	da07      	bge.n	800de76 <__sfputc_r+0x1c>
 800de66:	6994      	ldr	r4, [r2, #24]
 800de68:	42a3      	cmp	r3, r4
 800de6a:	db01      	blt.n	800de70 <__sfputc_r+0x16>
 800de6c:	290a      	cmp	r1, #10
 800de6e:	d102      	bne.n	800de76 <__sfputc_r+0x1c>
 800de70:	bc10      	pop	{r4}
 800de72:	f000 b931 	b.w	800e0d8 <__swbuf_r>
 800de76:	6813      	ldr	r3, [r2, #0]
 800de78:	1c58      	adds	r0, r3, #1
 800de7a:	6010      	str	r0, [r2, #0]
 800de7c:	7019      	strb	r1, [r3, #0]
 800de7e:	4608      	mov	r0, r1
 800de80:	bc10      	pop	{r4}
 800de82:	4770      	bx	lr

0800de84 <__sfputs_r>:
 800de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de86:	4606      	mov	r6, r0
 800de88:	460f      	mov	r7, r1
 800de8a:	4614      	mov	r4, r2
 800de8c:	18d5      	adds	r5, r2, r3
 800de8e:	42ac      	cmp	r4, r5
 800de90:	d101      	bne.n	800de96 <__sfputs_r+0x12>
 800de92:	2000      	movs	r0, #0
 800de94:	e007      	b.n	800dea6 <__sfputs_r+0x22>
 800de96:	463a      	mov	r2, r7
 800de98:	4630      	mov	r0, r6
 800de9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9e:	f7ff ffdc 	bl	800de5a <__sfputc_r>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d1f3      	bne.n	800de8e <__sfputs_r+0xa>
 800dea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dea8 <_vfiprintf_r>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	460d      	mov	r5, r1
 800deae:	4614      	mov	r4, r2
 800deb0:	4698      	mov	r8, r3
 800deb2:	4606      	mov	r6, r0
 800deb4:	b09d      	sub	sp, #116	@ 0x74
 800deb6:	b118      	cbz	r0, 800dec0 <_vfiprintf_r+0x18>
 800deb8:	6a03      	ldr	r3, [r0, #32]
 800deba:	b90b      	cbnz	r3, 800dec0 <_vfiprintf_r+0x18>
 800debc:	f7fe f908 	bl	800c0d0 <__sinit>
 800dec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dec2:	07d9      	lsls	r1, r3, #31
 800dec4:	d405      	bmi.n	800ded2 <_vfiprintf_r+0x2a>
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	059a      	lsls	r2, r3, #22
 800deca:	d402      	bmi.n	800ded2 <_vfiprintf_r+0x2a>
 800decc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dece:	f7fe fa6e 	bl	800c3ae <__retarget_lock_acquire_recursive>
 800ded2:	89ab      	ldrh	r3, [r5, #12]
 800ded4:	071b      	lsls	r3, r3, #28
 800ded6:	d501      	bpl.n	800dedc <_vfiprintf_r+0x34>
 800ded8:	692b      	ldr	r3, [r5, #16]
 800deda:	b99b      	cbnz	r3, 800df04 <_vfiprintf_r+0x5c>
 800dedc:	4629      	mov	r1, r5
 800dede:	4630      	mov	r0, r6
 800dee0:	f000 f938 	bl	800e154 <__swsetup_r>
 800dee4:	b170      	cbz	r0, 800df04 <_vfiprintf_r+0x5c>
 800dee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dee8:	07dc      	lsls	r4, r3, #31
 800deea:	d504      	bpl.n	800def6 <_vfiprintf_r+0x4e>
 800deec:	f04f 30ff 	mov.w	r0, #4294967295
 800def0:	b01d      	add	sp, #116	@ 0x74
 800def2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def6:	89ab      	ldrh	r3, [r5, #12]
 800def8:	0598      	lsls	r0, r3, #22
 800defa:	d4f7      	bmi.n	800deec <_vfiprintf_r+0x44>
 800defc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800defe:	f7fe fa57 	bl	800c3b0 <__retarget_lock_release_recursive>
 800df02:	e7f3      	b.n	800deec <_vfiprintf_r+0x44>
 800df04:	2300      	movs	r3, #0
 800df06:	9309      	str	r3, [sp, #36]	@ 0x24
 800df08:	2320      	movs	r3, #32
 800df0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df0e:	2330      	movs	r3, #48	@ 0x30
 800df10:	f04f 0901 	mov.w	r9, #1
 800df14:	f8cd 800c 	str.w	r8, [sp, #12]
 800df18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e0c4 <_vfiprintf_r+0x21c>
 800df1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df20:	4623      	mov	r3, r4
 800df22:	469a      	mov	sl, r3
 800df24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df28:	b10a      	cbz	r2, 800df2e <_vfiprintf_r+0x86>
 800df2a:	2a25      	cmp	r2, #37	@ 0x25
 800df2c:	d1f9      	bne.n	800df22 <_vfiprintf_r+0x7a>
 800df2e:	ebba 0b04 	subs.w	fp, sl, r4
 800df32:	d00b      	beq.n	800df4c <_vfiprintf_r+0xa4>
 800df34:	465b      	mov	r3, fp
 800df36:	4622      	mov	r2, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	4630      	mov	r0, r6
 800df3c:	f7ff ffa2 	bl	800de84 <__sfputs_r>
 800df40:	3001      	adds	r0, #1
 800df42:	f000 80a7 	beq.w	800e094 <_vfiprintf_r+0x1ec>
 800df46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df48:	445a      	add	r2, fp
 800df4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800df4c:	f89a 3000 	ldrb.w	r3, [sl]
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 809f 	beq.w	800e094 <_vfiprintf_r+0x1ec>
 800df56:	2300      	movs	r3, #0
 800df58:	f04f 32ff 	mov.w	r2, #4294967295
 800df5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df60:	f10a 0a01 	add.w	sl, sl, #1
 800df64:	9304      	str	r3, [sp, #16]
 800df66:	9307      	str	r3, [sp, #28]
 800df68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800df6e:	4654      	mov	r4, sl
 800df70:	2205      	movs	r2, #5
 800df72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df76:	4853      	ldr	r0, [pc, #332]	@ (800e0c4 <_vfiprintf_r+0x21c>)
 800df78:	f7ff fed8 	bl	800dd2c <memchr>
 800df7c:	9a04      	ldr	r2, [sp, #16]
 800df7e:	b9d8      	cbnz	r0, 800dfb8 <_vfiprintf_r+0x110>
 800df80:	06d1      	lsls	r1, r2, #27
 800df82:	bf44      	itt	mi
 800df84:	2320      	movmi	r3, #32
 800df86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df8a:	0713      	lsls	r3, r2, #28
 800df8c:	bf44      	itt	mi
 800df8e:	232b      	movmi	r3, #43	@ 0x2b
 800df90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df94:	f89a 3000 	ldrb.w	r3, [sl]
 800df98:	2b2a      	cmp	r3, #42	@ 0x2a
 800df9a:	d015      	beq.n	800dfc8 <_vfiprintf_r+0x120>
 800df9c:	4654      	mov	r4, sl
 800df9e:	2000      	movs	r0, #0
 800dfa0:	f04f 0c0a 	mov.w	ip, #10
 800dfa4:	9a07      	ldr	r2, [sp, #28]
 800dfa6:	4621      	mov	r1, r4
 800dfa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfac:	3b30      	subs	r3, #48	@ 0x30
 800dfae:	2b09      	cmp	r3, #9
 800dfb0:	d94b      	bls.n	800e04a <_vfiprintf_r+0x1a2>
 800dfb2:	b1b0      	cbz	r0, 800dfe2 <_vfiprintf_r+0x13a>
 800dfb4:	9207      	str	r2, [sp, #28]
 800dfb6:	e014      	b.n	800dfe2 <_vfiprintf_r+0x13a>
 800dfb8:	eba0 0308 	sub.w	r3, r0, r8
 800dfbc:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	46a2      	mov	sl, r4
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	e7d2      	b.n	800df6e <_vfiprintf_r+0xc6>
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	1d19      	adds	r1, r3, #4
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	9103      	str	r1, [sp, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bfbb      	ittet	lt
 800dfd4:	425b      	neglt	r3, r3
 800dfd6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfda:	9307      	strge	r3, [sp, #28]
 800dfdc:	9307      	strlt	r3, [sp, #28]
 800dfde:	bfb8      	it	lt
 800dfe0:	9204      	strlt	r2, [sp, #16]
 800dfe2:	7823      	ldrb	r3, [r4, #0]
 800dfe4:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfe6:	d10a      	bne.n	800dffe <_vfiprintf_r+0x156>
 800dfe8:	7863      	ldrb	r3, [r4, #1]
 800dfea:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfec:	d132      	bne.n	800e054 <_vfiprintf_r+0x1ac>
 800dfee:	9b03      	ldr	r3, [sp, #12]
 800dff0:	3402      	adds	r4, #2
 800dff2:	1d1a      	adds	r2, r3, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	9203      	str	r2, [sp, #12]
 800dff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e0c8 <_vfiprintf_r+0x220>
 800e002:	2203      	movs	r2, #3
 800e004:	4650      	mov	r0, sl
 800e006:	7821      	ldrb	r1, [r4, #0]
 800e008:	f7ff fe90 	bl	800dd2c <memchr>
 800e00c:	b138      	cbz	r0, 800e01e <_vfiprintf_r+0x176>
 800e00e:	2240      	movs	r2, #64	@ 0x40
 800e010:	9b04      	ldr	r3, [sp, #16]
 800e012:	eba0 000a 	sub.w	r0, r0, sl
 800e016:	4082      	lsls	r2, r0
 800e018:	4313      	orrs	r3, r2
 800e01a:	3401      	adds	r4, #1
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e022:	2206      	movs	r2, #6
 800e024:	4829      	ldr	r0, [pc, #164]	@ (800e0cc <_vfiprintf_r+0x224>)
 800e026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e02a:	f7ff fe7f 	bl	800dd2c <memchr>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d03f      	beq.n	800e0b2 <_vfiprintf_r+0x20a>
 800e032:	4b27      	ldr	r3, [pc, #156]	@ (800e0d0 <_vfiprintf_r+0x228>)
 800e034:	bb1b      	cbnz	r3, 800e07e <_vfiprintf_r+0x1d6>
 800e036:	9b03      	ldr	r3, [sp, #12]
 800e038:	3307      	adds	r3, #7
 800e03a:	f023 0307 	bic.w	r3, r3, #7
 800e03e:	3308      	adds	r3, #8
 800e040:	9303      	str	r3, [sp, #12]
 800e042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e044:	443b      	add	r3, r7
 800e046:	9309      	str	r3, [sp, #36]	@ 0x24
 800e048:	e76a      	b.n	800df20 <_vfiprintf_r+0x78>
 800e04a:	460c      	mov	r4, r1
 800e04c:	2001      	movs	r0, #1
 800e04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e052:	e7a8      	b.n	800dfa6 <_vfiprintf_r+0xfe>
 800e054:	2300      	movs	r3, #0
 800e056:	f04f 0c0a 	mov.w	ip, #10
 800e05a:	4619      	mov	r1, r3
 800e05c:	3401      	adds	r4, #1
 800e05e:	9305      	str	r3, [sp, #20]
 800e060:	4620      	mov	r0, r4
 800e062:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e066:	3a30      	subs	r2, #48	@ 0x30
 800e068:	2a09      	cmp	r2, #9
 800e06a:	d903      	bls.n	800e074 <_vfiprintf_r+0x1cc>
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d0c6      	beq.n	800dffe <_vfiprintf_r+0x156>
 800e070:	9105      	str	r1, [sp, #20]
 800e072:	e7c4      	b.n	800dffe <_vfiprintf_r+0x156>
 800e074:	4604      	mov	r4, r0
 800e076:	2301      	movs	r3, #1
 800e078:	fb0c 2101 	mla	r1, ip, r1, r2
 800e07c:	e7f0      	b.n	800e060 <_vfiprintf_r+0x1b8>
 800e07e:	ab03      	add	r3, sp, #12
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	462a      	mov	r2, r5
 800e084:	4630      	mov	r0, r6
 800e086:	4b13      	ldr	r3, [pc, #76]	@ (800e0d4 <_vfiprintf_r+0x22c>)
 800e088:	a904      	add	r1, sp, #16
 800e08a:	f3af 8000 	nop.w
 800e08e:	4607      	mov	r7, r0
 800e090:	1c78      	adds	r0, r7, #1
 800e092:	d1d6      	bne.n	800e042 <_vfiprintf_r+0x19a>
 800e094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e096:	07d9      	lsls	r1, r3, #31
 800e098:	d405      	bmi.n	800e0a6 <_vfiprintf_r+0x1fe>
 800e09a:	89ab      	ldrh	r3, [r5, #12]
 800e09c:	059a      	lsls	r2, r3, #22
 800e09e:	d402      	bmi.n	800e0a6 <_vfiprintf_r+0x1fe>
 800e0a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0a2:	f7fe f985 	bl	800c3b0 <__retarget_lock_release_recursive>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	065b      	lsls	r3, r3, #25
 800e0aa:	f53f af1f 	bmi.w	800deec <_vfiprintf_r+0x44>
 800e0ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0b0:	e71e      	b.n	800def0 <_vfiprintf_r+0x48>
 800e0b2:	ab03      	add	r3, sp, #12
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	462a      	mov	r2, r5
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4b06      	ldr	r3, [pc, #24]	@ (800e0d4 <_vfiprintf_r+0x22c>)
 800e0bc:	a904      	add	r1, sp, #16
 800e0be:	f7ff fc45 	bl	800d94c <_printf_i>
 800e0c2:	e7e4      	b.n	800e08e <_vfiprintf_r+0x1e6>
 800e0c4:	0800f55d 	.word	0x0800f55d
 800e0c8:	0800f563 	.word	0x0800f563
 800e0cc:	0800f567 	.word	0x0800f567
 800e0d0:	00000000 	.word	0x00000000
 800e0d4:	0800de85 	.word	0x0800de85

0800e0d8 <__swbuf_r>:
 800e0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0da:	460e      	mov	r6, r1
 800e0dc:	4614      	mov	r4, r2
 800e0de:	4605      	mov	r5, r0
 800e0e0:	b118      	cbz	r0, 800e0ea <__swbuf_r+0x12>
 800e0e2:	6a03      	ldr	r3, [r0, #32]
 800e0e4:	b90b      	cbnz	r3, 800e0ea <__swbuf_r+0x12>
 800e0e6:	f7fd fff3 	bl	800c0d0 <__sinit>
 800e0ea:	69a3      	ldr	r3, [r4, #24]
 800e0ec:	60a3      	str	r3, [r4, #8]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	071a      	lsls	r2, r3, #28
 800e0f2:	d501      	bpl.n	800e0f8 <__swbuf_r+0x20>
 800e0f4:	6923      	ldr	r3, [r4, #16]
 800e0f6:	b943      	cbnz	r3, 800e10a <__swbuf_r+0x32>
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f000 f82a 	bl	800e154 <__swsetup_r>
 800e100:	b118      	cbz	r0, 800e10a <__swbuf_r+0x32>
 800e102:	f04f 37ff 	mov.w	r7, #4294967295
 800e106:	4638      	mov	r0, r7
 800e108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	6922      	ldr	r2, [r4, #16]
 800e10e:	b2f6      	uxtb	r6, r6
 800e110:	1a98      	subs	r0, r3, r2
 800e112:	6963      	ldr	r3, [r4, #20]
 800e114:	4637      	mov	r7, r6
 800e116:	4283      	cmp	r3, r0
 800e118:	dc05      	bgt.n	800e126 <__swbuf_r+0x4e>
 800e11a:	4621      	mov	r1, r4
 800e11c:	4628      	mov	r0, r5
 800e11e:	f7ff fdb3 	bl	800dc88 <_fflush_r>
 800e122:	2800      	cmp	r0, #0
 800e124:	d1ed      	bne.n	800e102 <__swbuf_r+0x2a>
 800e126:	68a3      	ldr	r3, [r4, #8]
 800e128:	3b01      	subs	r3, #1
 800e12a:	60a3      	str	r3, [r4, #8]
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	6022      	str	r2, [r4, #0]
 800e132:	701e      	strb	r6, [r3, #0]
 800e134:	6962      	ldr	r2, [r4, #20]
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	429a      	cmp	r2, r3
 800e13a:	d004      	beq.n	800e146 <__swbuf_r+0x6e>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	07db      	lsls	r3, r3, #31
 800e140:	d5e1      	bpl.n	800e106 <__swbuf_r+0x2e>
 800e142:	2e0a      	cmp	r6, #10
 800e144:	d1df      	bne.n	800e106 <__swbuf_r+0x2e>
 800e146:	4621      	mov	r1, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	f7ff fd9d 	bl	800dc88 <_fflush_r>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d0d9      	beq.n	800e106 <__swbuf_r+0x2e>
 800e152:	e7d6      	b.n	800e102 <__swbuf_r+0x2a>

0800e154 <__swsetup_r>:
 800e154:	b538      	push	{r3, r4, r5, lr}
 800e156:	4b29      	ldr	r3, [pc, #164]	@ (800e1fc <__swsetup_r+0xa8>)
 800e158:	4605      	mov	r5, r0
 800e15a:	6818      	ldr	r0, [r3, #0]
 800e15c:	460c      	mov	r4, r1
 800e15e:	b118      	cbz	r0, 800e168 <__swsetup_r+0x14>
 800e160:	6a03      	ldr	r3, [r0, #32]
 800e162:	b90b      	cbnz	r3, 800e168 <__swsetup_r+0x14>
 800e164:	f7fd ffb4 	bl	800c0d0 <__sinit>
 800e168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16c:	0719      	lsls	r1, r3, #28
 800e16e:	d422      	bmi.n	800e1b6 <__swsetup_r+0x62>
 800e170:	06da      	lsls	r2, r3, #27
 800e172:	d407      	bmi.n	800e184 <__swsetup_r+0x30>
 800e174:	2209      	movs	r2, #9
 800e176:	602a      	str	r2, [r5, #0]
 800e178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	e033      	b.n	800e1ec <__swsetup_r+0x98>
 800e184:	0758      	lsls	r0, r3, #29
 800e186:	d512      	bpl.n	800e1ae <__swsetup_r+0x5a>
 800e188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e18a:	b141      	cbz	r1, 800e19e <__swsetup_r+0x4a>
 800e18c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e190:	4299      	cmp	r1, r3
 800e192:	d002      	beq.n	800e19a <__swsetup_r+0x46>
 800e194:	4628      	mov	r0, r5
 800e196:	f7fe f921 	bl	800c3dc <_free_r>
 800e19a:	2300      	movs	r3, #0
 800e19c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1a4:	81a3      	strh	r3, [r4, #12]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	6063      	str	r3, [r4, #4]
 800e1aa:	6923      	ldr	r3, [r4, #16]
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	f043 0308 	orr.w	r3, r3, #8
 800e1b4:	81a3      	strh	r3, [r4, #12]
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	b94b      	cbnz	r3, 800e1ce <__swsetup_r+0x7a>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1c4:	d003      	beq.n	800e1ce <__swsetup_r+0x7a>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f000 f882 	bl	800e2d2 <__smakebuf_r>
 800e1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d2:	f013 0201 	ands.w	r2, r3, #1
 800e1d6:	d00a      	beq.n	800e1ee <__swsetup_r+0x9a>
 800e1d8:	2200      	movs	r2, #0
 800e1da:	60a2      	str	r2, [r4, #8]
 800e1dc:	6962      	ldr	r2, [r4, #20]
 800e1de:	4252      	negs	r2, r2
 800e1e0:	61a2      	str	r2, [r4, #24]
 800e1e2:	6922      	ldr	r2, [r4, #16]
 800e1e4:	b942      	cbnz	r2, 800e1f8 <__swsetup_r+0xa4>
 800e1e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e1ea:	d1c5      	bne.n	800e178 <__swsetup_r+0x24>
 800e1ec:	bd38      	pop	{r3, r4, r5, pc}
 800e1ee:	0799      	lsls	r1, r3, #30
 800e1f0:	bf58      	it	pl
 800e1f2:	6962      	ldrpl	r2, [r4, #20]
 800e1f4:	60a2      	str	r2, [r4, #8]
 800e1f6:	e7f4      	b.n	800e1e2 <__swsetup_r+0x8e>
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e7f7      	b.n	800e1ec <__swsetup_r+0x98>
 800e1fc:	20000300 	.word	0x20000300

0800e200 <_raise_r>:
 800e200:	291f      	cmp	r1, #31
 800e202:	b538      	push	{r3, r4, r5, lr}
 800e204:	4605      	mov	r5, r0
 800e206:	460c      	mov	r4, r1
 800e208:	d904      	bls.n	800e214 <_raise_r+0x14>
 800e20a:	2316      	movs	r3, #22
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	f04f 30ff 	mov.w	r0, #4294967295
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e216:	b112      	cbz	r2, 800e21e <_raise_r+0x1e>
 800e218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e21c:	b94b      	cbnz	r3, 800e232 <_raise_r+0x32>
 800e21e:	4628      	mov	r0, r5
 800e220:	f000 f830 	bl	800e284 <_getpid_r>
 800e224:	4622      	mov	r2, r4
 800e226:	4601      	mov	r1, r0
 800e228:	4628      	mov	r0, r5
 800e22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e22e:	f000 b817 	b.w	800e260 <_kill_r>
 800e232:	2b01      	cmp	r3, #1
 800e234:	d00a      	beq.n	800e24c <_raise_r+0x4c>
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	d103      	bne.n	800e242 <_raise_r+0x42>
 800e23a:	2316      	movs	r3, #22
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	2001      	movs	r0, #1
 800e240:	e7e7      	b.n	800e212 <_raise_r+0x12>
 800e242:	2100      	movs	r1, #0
 800e244:	4620      	mov	r0, r4
 800e246:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e24a:	4798      	blx	r3
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7e0      	b.n	800e212 <_raise_r+0x12>

0800e250 <raise>:
 800e250:	4b02      	ldr	r3, [pc, #8]	@ (800e25c <raise+0xc>)
 800e252:	4601      	mov	r1, r0
 800e254:	6818      	ldr	r0, [r3, #0]
 800e256:	f7ff bfd3 	b.w	800e200 <_raise_r>
 800e25a:	bf00      	nop
 800e25c:	20000300 	.word	0x20000300

0800e260 <_kill_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	2300      	movs	r3, #0
 800e264:	4d06      	ldr	r5, [pc, #24]	@ (800e280 <_kill_r+0x20>)
 800e266:	4604      	mov	r4, r0
 800e268:	4608      	mov	r0, r1
 800e26a:	4611      	mov	r1, r2
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	f7f5 fd90 	bl	8003d92 <_kill>
 800e272:	1c43      	adds	r3, r0, #1
 800e274:	d102      	bne.n	800e27c <_kill_r+0x1c>
 800e276:	682b      	ldr	r3, [r5, #0]
 800e278:	b103      	cbz	r3, 800e27c <_kill_r+0x1c>
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	bd38      	pop	{r3, r4, r5, pc}
 800e27e:	bf00      	nop
 800e280:	200046b4 	.word	0x200046b4

0800e284 <_getpid_r>:
 800e284:	f7f5 bd7e 	b.w	8003d84 <_getpid>

0800e288 <__swhatbuf_r>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	4615      	mov	r5, r2
 800e292:	2900      	cmp	r1, #0
 800e294:	461e      	mov	r6, r3
 800e296:	b096      	sub	sp, #88	@ 0x58
 800e298:	da0c      	bge.n	800e2b4 <__swhatbuf_r+0x2c>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	2100      	movs	r1, #0
 800e29e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2a2:	bf14      	ite	ne
 800e2a4:	2340      	movne	r3, #64	@ 0x40
 800e2a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	6031      	str	r1, [r6, #0]
 800e2ae:	602b      	str	r3, [r5, #0]
 800e2b0:	b016      	add	sp, #88	@ 0x58
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	466a      	mov	r2, sp
 800e2b6:	f000 f849 	bl	800e34c <_fstat_r>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	dbed      	blt.n	800e29a <__swhatbuf_r+0x12>
 800e2be:	9901      	ldr	r1, [sp, #4]
 800e2c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2c8:	4259      	negs	r1, r3
 800e2ca:	4159      	adcs	r1, r3
 800e2cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2d0:	e7eb      	b.n	800e2aa <__swhatbuf_r+0x22>

0800e2d2 <__smakebuf_r>:
 800e2d2:	898b      	ldrh	r3, [r1, #12]
 800e2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d6:	079d      	lsls	r5, r3, #30
 800e2d8:	4606      	mov	r6, r0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	d507      	bpl.n	800e2ee <__smakebuf_r+0x1c>
 800e2de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2e2:	6023      	str	r3, [r4, #0]
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	6163      	str	r3, [r4, #20]
 800e2ea:	b003      	add	sp, #12
 800e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ee:	466a      	mov	r2, sp
 800e2f0:	ab01      	add	r3, sp, #4
 800e2f2:	f7ff ffc9 	bl	800e288 <__swhatbuf_r>
 800e2f6:	9f00      	ldr	r7, [sp, #0]
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7fe fc11 	bl	800cb24 <_malloc_r>
 800e302:	b948      	cbnz	r0, 800e318 <__smakebuf_r+0x46>
 800e304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e308:	059a      	lsls	r2, r3, #22
 800e30a:	d4ee      	bmi.n	800e2ea <__smakebuf_r+0x18>
 800e30c:	f023 0303 	bic.w	r3, r3, #3
 800e310:	f043 0302 	orr.w	r3, r3, #2
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	e7e2      	b.n	800e2de <__smakebuf_r+0xc>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	9b01      	ldr	r3, [sp, #4]
 800e326:	6020      	str	r0, [r4, #0]
 800e328:	b15b      	cbz	r3, 800e342 <__smakebuf_r+0x70>
 800e32a:	4630      	mov	r0, r6
 800e32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e330:	f000 f81e 	bl	800e370 <_isatty_r>
 800e334:	b128      	cbz	r0, 800e342 <__smakebuf_r+0x70>
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f023 0303 	bic.w	r3, r3, #3
 800e33c:	f043 0301 	orr.w	r3, r3, #1
 800e340:	81a3      	strh	r3, [r4, #12]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	431d      	orrs	r5, r3
 800e346:	81a5      	strh	r5, [r4, #12]
 800e348:	e7cf      	b.n	800e2ea <__smakebuf_r+0x18>
	...

0800e34c <_fstat_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	2300      	movs	r3, #0
 800e350:	4d06      	ldr	r5, [pc, #24]	@ (800e36c <_fstat_r+0x20>)
 800e352:	4604      	mov	r4, r0
 800e354:	4608      	mov	r0, r1
 800e356:	4611      	mov	r1, r2
 800e358:	602b      	str	r3, [r5, #0]
 800e35a:	f7f5 fd79 	bl	8003e50 <_fstat>
 800e35e:	1c43      	adds	r3, r0, #1
 800e360:	d102      	bne.n	800e368 <_fstat_r+0x1c>
 800e362:	682b      	ldr	r3, [r5, #0]
 800e364:	b103      	cbz	r3, 800e368 <_fstat_r+0x1c>
 800e366:	6023      	str	r3, [r4, #0]
 800e368:	bd38      	pop	{r3, r4, r5, pc}
 800e36a:	bf00      	nop
 800e36c:	200046b4 	.word	0x200046b4

0800e370 <_isatty_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	2300      	movs	r3, #0
 800e374:	4d05      	ldr	r5, [pc, #20]	@ (800e38c <_isatty_r+0x1c>)
 800e376:	4604      	mov	r4, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	f7f5 fd77 	bl	8003e6e <_isatty>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d102      	bne.n	800e38a <_isatty_r+0x1a>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b103      	cbz	r3, 800e38a <_isatty_r+0x1a>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	200046b4 	.word	0x200046b4

0800e390 <sqrt>:
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	4606      	mov	r6, r0
 800e394:	460f      	mov	r7, r1
 800e396:	f000 f81f 	bl	800e3d8 <__ieee754_sqrt>
 800e39a:	4632      	mov	r2, r6
 800e39c:	4604      	mov	r4, r0
 800e39e:	460d      	mov	r5, r1
 800e3a0:	463b      	mov	r3, r7
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	f7f2 fb31 	bl	8000a0c <__aeabi_dcmpun>
 800e3aa:	b990      	cbnz	r0, 800e3d2 <sqrt+0x42>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	4639      	mov	r1, r7
 800e3b4:	f7f2 fb02 	bl	80009bc <__aeabi_dcmplt>
 800e3b8:	b158      	cbz	r0, 800e3d2 <sqrt+0x42>
 800e3ba:	f7fd ffcd 	bl	800c358 <__errno>
 800e3be:	2321      	movs	r3, #33	@ 0x21
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	6003      	str	r3, [r0, #0]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	f7f2 f9af 	bl	800072c <__aeabi_ddiv>
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	460d      	mov	r5, r1
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3d8 <__ieee754_sqrt>:
 800e3d8:	4a65      	ldr	r2, [pc, #404]	@ (800e570 <__ieee754_sqrt+0x198>)
 800e3da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3de:	438a      	bics	r2, r1
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	460f      	mov	r7, r1
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	d10e      	bne.n	800e408 <__ieee754_sqrt+0x30>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	f7f2 f874 	bl	80004d8 <__aeabi_dmul>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f1 feb8 	bl	800016c <__adddf3>
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	460f      	mov	r7, r1
 800e400:	4630      	mov	r0, r6
 800e402:	4639      	mov	r1, r7
 800e404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e408:	2900      	cmp	r1, #0
 800e40a:	dc0c      	bgt.n	800e426 <__ieee754_sqrt+0x4e>
 800e40c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800e410:	4302      	orrs	r2, r0
 800e412:	d0f5      	beq.n	800e400 <__ieee754_sqrt+0x28>
 800e414:	b189      	cbz	r1, 800e43a <__ieee754_sqrt+0x62>
 800e416:	4602      	mov	r2, r0
 800e418:	f7f1 fea6 	bl	8000168 <__aeabi_dsub>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	f7f2 f984 	bl	800072c <__aeabi_ddiv>
 800e424:	e7ea      	b.n	800e3fc <__ieee754_sqrt+0x24>
 800e426:	150a      	asrs	r2, r1, #20
 800e428:	d115      	bne.n	800e456 <__ieee754_sqrt+0x7e>
 800e42a:	2100      	movs	r1, #0
 800e42c:	e009      	b.n	800e442 <__ieee754_sqrt+0x6a>
 800e42e:	0ae3      	lsrs	r3, r4, #11
 800e430:	3a15      	subs	r2, #21
 800e432:	0564      	lsls	r4, r4, #21
 800e434:	2b00      	cmp	r3, #0
 800e436:	d0fa      	beq.n	800e42e <__ieee754_sqrt+0x56>
 800e438:	e7f7      	b.n	800e42a <__ieee754_sqrt+0x52>
 800e43a:	460a      	mov	r2, r1
 800e43c:	e7fa      	b.n	800e434 <__ieee754_sqrt+0x5c>
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	3101      	adds	r1, #1
 800e442:	02d8      	lsls	r0, r3, #11
 800e444:	d5fb      	bpl.n	800e43e <__ieee754_sqrt+0x66>
 800e446:	1e48      	subs	r0, r1, #1
 800e448:	1a12      	subs	r2, r2, r0
 800e44a:	f1c1 0020 	rsb	r0, r1, #32
 800e44e:	fa24 f000 	lsr.w	r0, r4, r0
 800e452:	4303      	orrs	r3, r0
 800e454:	408c      	lsls	r4, r1
 800e456:	2700      	movs	r7, #0
 800e458:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800e45c:	2116      	movs	r1, #22
 800e45e:	07d2      	lsls	r2, r2, #31
 800e460:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e464:	463a      	mov	r2, r7
 800e466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e46a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e46e:	bf5c      	itt	pl
 800e470:	005b      	lslpl	r3, r3, #1
 800e472:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800e476:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e47a:	bf58      	it	pl
 800e47c:	0064      	lslpl	r4, r4, #1
 800e47e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e482:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e486:	0064      	lsls	r4, r4, #1
 800e488:	1815      	adds	r5, r2, r0
 800e48a:	429d      	cmp	r5, r3
 800e48c:	bfde      	ittt	le
 800e48e:	182a      	addle	r2, r5, r0
 800e490:	1b5b      	suble	r3, r3, r5
 800e492:	183f      	addle	r7, r7, r0
 800e494:	0fe5      	lsrs	r5, r4, #31
 800e496:	3901      	subs	r1, #1
 800e498:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e49c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e4a0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e4a4:	d1f0      	bne.n	800e488 <__ieee754_sqrt+0xb0>
 800e4a6:	460d      	mov	r5, r1
 800e4a8:	2620      	movs	r6, #32
 800e4aa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	eb00 0c01 	add.w	ip, r0, r1
 800e4b4:	dc02      	bgt.n	800e4bc <__ieee754_sqrt+0xe4>
 800e4b6:	d113      	bne.n	800e4e0 <__ieee754_sqrt+0x108>
 800e4b8:	45a4      	cmp	ip, r4
 800e4ba:	d811      	bhi.n	800e4e0 <__ieee754_sqrt+0x108>
 800e4bc:	f1bc 0f00 	cmp.w	ip, #0
 800e4c0:	eb0c 0100 	add.w	r1, ip, r0
 800e4c4:	da3e      	bge.n	800e544 <__ieee754_sqrt+0x16c>
 800e4c6:	2900      	cmp	r1, #0
 800e4c8:	db3c      	blt.n	800e544 <__ieee754_sqrt+0x16c>
 800e4ca:	f102 0e01 	add.w	lr, r2, #1
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	4672      	mov	r2, lr
 800e4d2:	45a4      	cmp	ip, r4
 800e4d4:	bf88      	it	hi
 800e4d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e4da:	eba4 040c 	sub.w	r4, r4, ip
 800e4de:	4405      	add	r5, r0
 800e4e0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800e4e4:	3e01      	subs	r6, #1
 800e4e6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800e4ea:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e4ee:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e4f2:	d1dc      	bne.n	800e4ae <__ieee754_sqrt+0xd6>
 800e4f4:	431c      	orrs	r4, r3
 800e4f6:	d01a      	beq.n	800e52e <__ieee754_sqrt+0x156>
 800e4f8:	4c1e      	ldr	r4, [pc, #120]	@ (800e574 <__ieee754_sqrt+0x19c>)
 800e4fa:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800e578 <__ieee754_sqrt+0x1a0>
 800e4fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e502:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e506:	f7f1 fe2f 	bl	8000168 <__aeabi_dsub>
 800e50a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e50e:	4602      	mov	r2, r0
 800e510:	460b      	mov	r3, r1
 800e512:	4650      	mov	r0, sl
 800e514:	4659      	mov	r1, fp
 800e516:	f7f2 fa5b 	bl	80009d0 <__aeabi_dcmple>
 800e51a:	b140      	cbz	r0, 800e52e <__ieee754_sqrt+0x156>
 800e51c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e520:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e524:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e528:	d10e      	bne.n	800e548 <__ieee754_sqrt+0x170>
 800e52a:	4635      	mov	r5, r6
 800e52c:	3701      	adds	r7, #1
 800e52e:	107b      	asrs	r3, r7, #1
 800e530:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e534:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e538:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800e53c:	086b      	lsrs	r3, r5, #1
 800e53e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800e542:	e75b      	b.n	800e3fc <__ieee754_sqrt+0x24>
 800e544:	4696      	mov	lr, r2
 800e546:	e7c2      	b.n	800e4ce <__ieee754_sqrt+0xf6>
 800e548:	f7f1 fe10 	bl	800016c <__adddf3>
 800e54c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	4650      	mov	r0, sl
 800e556:	4659      	mov	r1, fp
 800e558:	f7f2 fa30 	bl	80009bc <__aeabi_dcmplt>
 800e55c:	b120      	cbz	r0, 800e568 <__ieee754_sqrt+0x190>
 800e55e:	1cab      	adds	r3, r5, #2
 800e560:	bf08      	it	eq
 800e562:	3701      	addeq	r7, #1
 800e564:	3502      	adds	r5, #2
 800e566:	e7e2      	b.n	800e52e <__ieee754_sqrt+0x156>
 800e568:	1c6b      	adds	r3, r5, #1
 800e56a:	f023 0501 	bic.w	r5, r3, #1
 800e56e:	e7de      	b.n	800e52e <__ieee754_sqrt+0x156>
 800e570:	7ff00000 	.word	0x7ff00000
 800e574:	0800f830 	.word	0x0800f830
 800e578:	0800f828 	.word	0x0800f828

0800e57c <truncf>:
 800e57c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e580:	3b7f      	subs	r3, #127	@ 0x7f
 800e582:	2b16      	cmp	r3, #22
 800e584:	4601      	mov	r1, r0
 800e586:	b510      	push	{r4, lr}
 800e588:	dc0a      	bgt.n	800e5a0 <truncf+0x24>
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800e590:	db04      	blt.n	800e59c <truncf+0x20>
 800e592:	4a06      	ldr	r2, [pc, #24]	@ (800e5ac <truncf+0x30>)
 800e594:	fa42 f303 	asr.w	r3, r2, r3
 800e598:	4003      	ands	r3, r0
 800e59a:	4319      	orrs	r1, r3
 800e59c:	4608      	mov	r0, r1
 800e59e:	bd10      	pop	{r4, pc}
 800e5a0:	2b80      	cmp	r3, #128	@ 0x80
 800e5a2:	d1fb      	bne.n	800e59c <truncf+0x20>
 800e5a4:	f7f2 fabe 	bl	8000b24 <__addsf3>
 800e5a8:	4601      	mov	r1, r0
 800e5aa:	e7f7      	b.n	800e59c <truncf+0x20>
 800e5ac:	ff800000 	.word	0xff800000

0800e5b0 <_init>:
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	bf00      	nop
 800e5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b6:	bc08      	pop	{r3}
 800e5b8:	469e      	mov	lr, r3
 800e5ba:	4770      	bx	lr

0800e5bc <_fini>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	bf00      	nop
 800e5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5c2:	bc08      	pop	{r3}
 800e5c4:	469e      	mov	lr, r3
 800e5c6:	4770      	bx	lr
