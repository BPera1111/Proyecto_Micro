
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d0  0800a9c0  0800a9c0  0000b9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd90  0800bd90  0000d350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd90  0800bd90  0000cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd98  0800bd98  0000d350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd98  0800bd98  0000cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd9c  0800bd9c  0000cd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800bda0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004378  20000350  0800c0f0  0000d350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046c8  0800c0f0  0000d6c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014baf  00000000  00000000  0000d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f57  00000000  00000000  00021f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000076d3  00000000  00000000  00025e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec8  00000000  00000000  0002e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afdf  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014619  00000000  00000000  0004a047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a391  00000000  00000000  0005e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e89f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000376c  00000000  00000000  000e8a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000ec1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9a8 	.word	0x0800a9a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800a9a8 	.word	0x0800a9a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f7ff fbf3 	bl	80009bc <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x1c>
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f8ea 	bl	80003e4 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffa2 	bl	8000168 <__aeabi_dsub>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <gc_init>:
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 8001234:	2200      	movs	r2, #0
 8001236:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <gc_init+0xc>)
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	721a      	strb	r2, [r3, #8]
    gc_state_modal.distance = 0;                    // G90 (absoluto) por defecto
    gc_state_modal.feed_rate = 0;                   // G94 por defecto
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
    gc_state_modal.coolant = 0;                     // M9 (coolant off) por defecto
    gc_state_modal.program_flow = 0;                // Normal execution
}
 800123e:	4770      	bx	lr
 8001240:	2000036c 	.word	0x2000036c

08001244 <gc_clear_block>:
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <gc_clear_block+0x38>)
 8001246:	222c      	movs	r2, #44	@ 0x2c
 8001248:	4618      	mov	r0, r3
 800124a:	2100      	movs	r1, #0
void gc_clear_block(void) {
 800124c:	b510      	push	{r4, lr}
    memset(&gc_block, 0, sizeof(gc_block_t));
 800124e:	f005 ff88 	bl	8007162 <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 8001252:	f1a0 0308 	sub.w	r3, r0, #8
 8001256:	461a      	mov	r2, r3
 8001258:	4c09      	ldr	r4, [pc, #36]	@ (8001280 <gc_clear_block+0x3c>)
 800125a:	6861      	ldr	r1, [r4, #4]
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	c203      	stmia	r2!, {r0, r1}
 8001260:	7a21      	ldrb	r1, [r4, #8]
 8001262:	7011      	strb	r1, [r2, #0]
    gc_block.values.x = NAN;
    gc_block.values.y = NAN;
    gc_block.values.z = NAN;
    gc_block.values.f = NAN;
    gc_block.values.s = NAN;
    gc_block.values.n = -1;
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
    gc_block.values.x = NAN;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <gc_clear_block+0x40>)
    gc_block.values.n = -1;
 800126a:	6259      	str	r1, [r3, #36]	@ 0x24
    gc_block.values.x = NAN;
 800126c:	60da      	str	r2, [r3, #12]
    gc_block.values.y = NAN;
 800126e:	611a      	str	r2, [r3, #16]
    gc_block.values.z = NAN;
 8001270:	615a      	str	r2, [r3, #20]
    gc_block.values.f = NAN;
 8001272:	619a      	str	r2, [r3, #24]
    gc_block.values.s = NAN;
 8001274:	61da      	str	r2, [r3, #28]
    gc_block.values.p = 0;
    gc_block.values.l = 0;
    gc_block.values.r = NAN;
 8001276:	621a      	str	r2, [r3, #32]
    gc_block.values.y_defined = false;
    gc_block.values.z_defined = false;
    gc_block.values.f_defined = false;
    gc_block.values.s_defined = false;
    gc_block.values.r_defined = false;
}
 8001278:	bd10      	pop	{r4, pc}
 800127a:	bf00      	nop
 800127c:	20000380 	.word	0x20000380
 8001280:	2000036c 	.word	0x2000036c
 8001284:	7fc00000 	.word	0x7fc00000

08001288 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	4615      	mov	r5, r2
    char *ptr = line + *char_counter;
 800128c:	780b      	ldrb	r3, [r1, #0]
 800128e:	18c4      	adds	r4, r0, r3
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 8001290:	7823      	ldrb	r3, [r4, #0]
 8001292:	4620      	mov	r0, r4
 8001294:	2b20      	cmp	r3, #32
 8001296:	f104 0401 	add.w	r4, r4, #1
 800129a:	d005      	beq.n	80012a8 <read_float+0x20>
 800129c:	2b09      	cmp	r3, #9
 800129e:	d003      	beq.n	80012a8 <read_float+0x20>
        ptr++; 
        (*char_counter)++;
    }
    
    if (c == 0) return false;  // Fin de línea
 80012a0:	b933      	cbnz	r3, 80012b0 <read_float+0x28>
 80012a2:	2400      	movs	r4, #0
    
    if (!found_digit) return false;
    
    *float_ptr = atof(start);
    return true;
}
 80012a4:	4620      	mov	r0, r4
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (*char_counter)++;
 80012a8:	780b      	ldrb	r3, [r1, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	700b      	strb	r3, [r1, #0]
 80012ae:	e7ef      	b.n	8001290 <read_float+0x8>
    if (c == '+' || c == '-') { 
 80012b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80012b2:	d001      	beq.n	80012b8 <read_float+0x30>
 80012b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80012b6:	d117      	bne.n	80012e8 <read_float+0x60>
        (*char_counter)++;
 80012b8:	780a      	ldrb	r2, [r1, #0]
        ptr++; 
 80012ba:	1c43      	adds	r3, r0, #1
        (*char_counter)++;
 80012bc:	3201      	adds	r2, #1
 80012be:	700a      	strb	r2, [r1, #0]
            found_decimal = true;
 80012c0:	2400      	movs	r4, #0
 80012c2:	4626      	mov	r6, r4
 80012c4:	3b01      	subs	r3, #1
    while ((c = *ptr) != 0) {
 80012c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80012ca:	b12a      	cbz	r2, 80012d8 <read_float+0x50>
        if (c >= '0' && c <= '9') {
 80012cc:	f1a2 0730 	sub.w	r7, r2, #48	@ 0x30
 80012d0:	2f09      	cmp	r7, #9
 80012d2:	d912      	bls.n	80012fa <read_float+0x72>
        } else if (c == '.' && !found_decimal) {
 80012d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80012d6:	d009      	beq.n	80012ec <read_float+0x64>
    if (!found_digit) return false;
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d0e2      	beq.n	80012a2 <read_float+0x1a>
    *float_ptr = atof(start);
 80012dc:	f004 ffda 	bl	8006294 <atof>
 80012e0:	f7ff fbf2 	bl	8000ac8 <__aeabi_d2f>
 80012e4:	6028      	str	r0, [r5, #0]
    return true;
 80012e6:	e7dd      	b.n	80012a4 <read_float+0x1c>
 80012e8:	4603      	mov	r3, r0
 80012ea:	e7e9      	b.n	80012c0 <read_float+0x38>
        } else if (c == '.' && !found_decimal) {
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d1f3      	bne.n	80012d8 <read_float+0x50>
            found_decimal = true;
 80012f0:	2601      	movs	r6, #1
        (*char_counter)++;
 80012f2:	780a      	ldrb	r2, [r1, #0]
 80012f4:	3201      	adds	r2, #1
 80012f6:	700a      	strb	r2, [r1, #0]
 80012f8:	e7e5      	b.n	80012c6 <read_float+0x3e>
            found_digit = true;
 80012fa:	2401      	movs	r4, #1
 80012fc:	e7f9      	b.n	80012f2 <read_float+0x6a>
	...

08001300 <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 8001300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t char_counter = 0;
 8001302:	2500      	movs	r5, #0
uint8_t gc_parse_line(char *line) {
 8001304:	4606      	mov	r6, r0
    uint8_t char_counter = 0;
 8001306:	f88d 5003 	strb.w	r5, [sp, #3]
    uint8_t int_value = 0;
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
    uint8_t word_bit = 0;
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 800130a:	f7ff ff9b 	bl	8001244 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 800130e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001312:	5cf4      	ldrb	r4, [r6, r3]
 8001314:	b914      	cbnz	r4, 800131c <gc_parse_line+0x1c>
 8001316:	e072      	b.n	80013fe <gc_parse_line+0xfe>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 8001318:	3301      	adds	r3, #1
 800131a:	b2db      	uxtb	r3, r3
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 800131c:	5cf4      	ldrb	r4, [r6, r3]
 800131e:	2c20      	cmp	r4, #32
 8001320:	d0fa      	beq.n	8001318 <gc_parse_line+0x18>
 8001322:	2c09      	cmp	r4, #9
 8001324:	d0f8      	beq.n	8001318 <gc_parse_line+0x18>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
        if (letter == 0) break;  // Fin de línea
 8001326:	2c00      	cmp	r4, #0
 8001328:	d069      	beq.n	80013fe <gc_parse_line+0xfe>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 800132a:	f1a4 0261 	sub.w	r2, r4, #97	@ 0x61
 800132e:	2a19      	cmp	r2, #25
            letter -= 32;
 8001330:	bf98      	it	ls
 8001332:	3c20      	subls	r4, #32
        }
        
        char_counter++;
 8001334:	f103 0301 	add.w	r3, r3, #1
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001338:	4630      	mov	r0, r6
 800133a:	aa01      	add	r2, sp, #4
 800133c:	f10d 0103 	add.w	r1, sp, #3
            letter -= 32;
 8001340:	bf98      	it	ls
 8001342:	b2e4      	uxtbls	r4, r4
        char_counter++;
 8001344:	f88d 3003 	strb.w	r3, [sp, #3]
        if (!read_float(line, &char_counter, &value)) {
 8001348:	f7ff ff9e 	bl	8001288 <read_float>
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 80ec 	beq.w	800152a <gc_parse_line+0x22a>
            return STATUS_BAD_NUMBER_FORMAT;
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 8001352:	9f01      	ldr	r7, [sp, #4]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001354:	3c46      	subs	r4, #70	@ 0x46
        int_value = truncf(value);
 8001356:	4638      	mov	r0, r7
 8001358:	f008 f91e 	bl	8009598 <truncf>
 800135c:	f7ff ff14 	bl	8001188 <__aeabi_f2uiz>
 8001360:	b2c3      	uxtb	r3, r0
        switch (letter) {
 8001362:	2c14      	cmp	r4, #20
 8001364:	d819      	bhi.n	800139a <gc_parse_line+0x9a>
 8001366:	e8df f004 	tbb	[pc, r4]
 800136a:	0bbb      	.short	0x0bbb
 800136c:	18181818 	.word	0x18181818
 8001370:	18cf5dd6 	.word	0x18cf5dd6
 8001374:	c9da18d2 	.word	0xc9da18d2
 8001378:	18181818 	.word	0x18181818
 800137c:	afa9      	.short	0xafa9
 800137e:	b5          	.byte	0xb5
 800137f:	00          	.byte	0x00
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 8001380:	2b63      	cmp	r3, #99	@ 0x63
 8001382:	d80a      	bhi.n	800139a <gc_parse_line+0x9a>
                
                switch (int_value) {
 8001384:	2b1c      	cmp	r3, #28
 8001386:	d042      	beq.n	800140e <gc_parse_line+0x10e>
 8001388:	d813      	bhi.n	80013b2 <gc_parse_line+0xb2>
 800138a:	2b13      	cmp	r3, #19
 800138c:	d807      	bhi.n	800139e <gc_parse_line+0x9e>
 800138e:	2b10      	cmp	r3, #16
 8001390:	d838      	bhi.n	8001404 <gc_parse_line+0x104>
 8001392:	2b03      	cmp	r3, #3
 8001394:	d92b      	bls.n	80013ee <gc_parse_line+0xee>
 8001396:	2b04      	cmp	r3, #4
 8001398:	d039      	beq.n	800140e <gc_parse_line+0x10e>
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 800139a:	2414      	movs	r4, #20
 800139c:	e02f      	b.n	80013fe <gc_parse_line+0xfe>
                switch (int_value) {
 800139e:	f1a3 0214 	sub.w	r2, r3, #20
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d8f9      	bhi.n	800139a <gc_parse_line+0x9a>
                        word_bit = MODAL_GROUP_G2;
                        gc_block.modal.plane_select = int_value - 17;
                        break;
                    case 20: case 21:
                        word_bit = MODAL_GROUP_G6;
                        gc_block.modal.units = 21 - int_value;  // G21=0(mm), G20=1(inch)
 80013a6:	4a62      	ldr	r2, [pc, #392]	@ (8001530 <gc_parse_line+0x230>)
 80013a8:	f1c3 0315 	rsb	r3, r3, #21
 80013ac:	70d3      	strb	r3, [r2, #3]
                        word_bit = MODAL_GROUP_G6;
 80013ae:	2306      	movs	r3, #6
                        break;
 80013b0:	e020      	b.n	80013f4 <gc_parse_line+0xf4>
                switch (int_value) {
 80013b2:	2b5c      	cmp	r3, #92	@ 0x5c
 80013b4:	d02b      	beq.n	800140e <gc_parse_line+0x10e>
 80013b6:	d810      	bhi.n	80013da <gc_parse_line+0xda>
 80013b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80013ba:	d806      	bhi.n	80013ca <gc_parse_line+0xca>
 80013bc:	2b35      	cmp	r3, #53	@ 0x35
 80013be:	d9ec      	bls.n	800139a <gc_parse_line+0x9a>
                        word_bit = MODAL_GROUP_G5;
                        gc_block.modal.feed_rate = 94 - int_value;
                        break;
                    case 54: case 55: case 56: case 57: case 58: case 59:
                        word_bit = MODAL_GROUP_G12;
                        gc_block.modal.coord_select = int_value - 54;
 80013c0:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <gc_parse_line+0x230>)
 80013c2:	3b36      	subs	r3, #54	@ 0x36
 80013c4:	7053      	strb	r3, [r2, #1]
                        word_bit = MODAL_GROUP_G12;
 80013c6:	2309      	movs	r3, #9
                        break;
 80013c8:	e014      	b.n	80013f4 <gc_parse_line+0xf4>
 80013ca:	3b5a      	subs	r3, #90	@ 0x5a
 80013cc:	b2db      	uxtb	r3, r3
                switch (int_value) {
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d8e3      	bhi.n	800139a <gc_parse_line+0x9a>
                        gc_block.modal.distance = int_value - 90;  // G90=0(abs), G91=1(inc)
 80013d2:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <gc_parse_line+0x230>)
 80013d4:	7113      	strb	r3, [r2, #4]
                        word_bit = MODAL_GROUP_G3;
 80013d6:	2303      	movs	r3, #3
                        break;
 80013d8:	e00c      	b.n	80013f4 <gc_parse_line+0xf4>
                switch (int_value) {
 80013da:	f1a3 025d 	sub.w	r2, r3, #93	@ 0x5d
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d8db      	bhi.n	800139a <gc_parse_line+0x9a>
                        gc_block.modal.feed_rate = 94 - int_value;
 80013e2:	4a53      	ldr	r2, [pc, #332]	@ (8001530 <gc_parse_line+0x230>)
 80013e4:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 80013e8:	7153      	strb	r3, [r2, #5]
                        word_bit = MODAL_GROUP_G5;
 80013ea:	2305      	movs	r3, #5
                        break;
 80013ec:	e002      	b.n	80013f4 <gc_parse_line+0xf4>
                        gc_block.modal.motion = int_value;
 80013ee:	4a50      	ldr	r2, [pc, #320]	@ (8001530 <gc_parse_line+0x230>)
 80013f0:	7013      	strb	r3, [r2, #0]
                        word_bit = MODAL_GROUP_G1;
 80013f2:	2301      	movs	r3, #1
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80013f4:	fa45 f203 	asr.w	r2, r5, r3
 80013f8:	07d2      	lsls	r2, r2, #31
 80013fa:	d50d      	bpl.n	8001418 <gc_parse_line+0x118>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80013fc:	2415      	movs	r4, #21
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
}
 80013fe:	4620      	mov	r0, r4
 8001400:	b003      	add	sp, #12
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        gc_block.modal.plane_select = int_value - 17;
 8001404:	4a4a      	ldr	r2, [pc, #296]	@ (8001530 <gc_parse_line+0x230>)
 8001406:	3b11      	subs	r3, #17
 8001408:	7093      	strb	r3, [r2, #2]
                        word_bit = MODAL_GROUP_G2;
 800140a:	2302      	movs	r3, #2
                        break;
 800140c:	e7f2      	b.n	80013f4 <gc_parse_line+0xf4>
                        gc_block.non_modal_command = 28;  // G28 - Home
 800140e:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <gc_parse_line+0x230>)
 8001410:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
                        word_bit = MODAL_GROUP_G0;
 8001414:	2300      	movs	r3, #0
 8001416:	e7ed      	b.n	80013f4 <gc_parse_line+0xf4>
                command_words |= bit(word_bit);
 8001418:	2201      	movs	r2, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
                command_words |= bit(word_bit);
 800141e:	432b      	orrs	r3, r5
 8001420:	b29d      	uxth	r5, r3
                break;
 8001422:	e774      	b.n	800130e <gc_parse_line+0xe>
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 8001424:	2b63      	cmp	r3, #99	@ 0x63
 8001426:	d8b8      	bhi.n	800139a <gc_parse_line+0x9a>
                switch (int_value) {
 8001428:	2b12      	cmp	r3, #18
 800142a:	d82b      	bhi.n	8001484 <gc_parse_line+0x184>
 800142c:	2b12      	cmp	r3, #18
 800142e:	d8b4      	bhi.n	800139a <gc_parse_line+0x9a>
 8001430:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <gc_parse_line+0x138>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001499 	.word	0x08001499
 800143c:	08001499 	.word	0x08001499
 8001440:	08001499 	.word	0x08001499
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014ad 	.word	0x080014ad
 800144c:	080014ad 	.word	0x080014ad
 8001450:	0800139b 	.word	0x0800139b
 8001454:	080014b5 	.word	0x080014b5
 8001458:	080014b5 	.word	0x080014b5
 800145c:	080014b5 	.word	0x080014b5
 8001460:	0800139b 	.word	0x0800139b
 8001464:	0800139b 	.word	0x0800139b
 8001468:	0800139b 	.word	0x0800139b
 800146c:	0800139b 	.word	0x0800139b
 8001470:	0800139b 	.word	0x0800139b
 8001474:	0800139b 	.word	0x0800139b
 8001478:	0800139b 	.word	0x0800139b
 800147c:	0800148f 	.word	0x0800148f
 8001480:	0800148d 	.word	0x0800148d
 8001484:	2b1e      	cmp	r3, #30
 8001486:	d007      	beq.n	8001498 <gc_parse_line+0x198>
 8001488:	2b54      	cmp	r3, #84	@ 0x54
 800148a:	d186      	bne.n	800139a <gc_parse_line+0x9a>
 800148c:	2312      	movs	r3, #18
                        gc_block.non_modal_command = 18;
 800148e:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <gc_parse_line+0x230>)
 8001490:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 8001494:	2200      	movs	r2, #0
 8001496:	e002      	b.n	800149e <gc_parse_line+0x19e>
                        gc_block.modal.program_flow = int_value;
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <gc_parse_line+0x230>)
 800149a:	7213      	strb	r3, [r2, #8]
                        word_bit = MODAL_GROUP_M4;
 800149c:	220b      	movs	r2, #11
                if (bit_istrue(command_words, bit(word_bit))) {
 800149e:	fa45 f302 	asr.w	r3, r5, r2
 80014a2:	07db      	lsls	r3, r3, #31
 80014a4:	d4aa      	bmi.n	80013fc <gc_parse_line+0xfc>
                command_words |= bit(word_bit);
 80014a6:	2301      	movs	r3, #1
 80014a8:	4093      	lsls	r3, r2
 80014aa:	e7b8      	b.n	800141e <gc_parse_line+0x11e>
                        gc_block.modal.spindle = int_value;
 80014ac:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <gc_parse_line+0x230>)
 80014ae:	7193      	strb	r3, [r2, #6]
                        word_bit = MODAL_GROUP_M7;
 80014b0:	220c      	movs	r2, #12
                        break;
 80014b2:	e7f4      	b.n	800149e <gc_parse_line+0x19e>
                        gc_block.modal.coolant = int_value;
 80014b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <gc_parse_line+0x230>)
 80014b6:	71d3      	strb	r3, [r2, #7]
                        word_bit = MODAL_GROUP_M8;
 80014b8:	220d      	movs	r2, #13
                        break;
 80014ba:	e7f0      	b.n	800149e <gc_parse_line+0x19e>
                gc_block.values.x_defined = true;
 80014bc:	2201      	movs	r2, #1
                gc_block.values.x = value;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <gc_parse_line+0x230>)
 80014c0:	60df      	str	r7, [r3, #12]
                gc_block.values.x_defined = true;
 80014c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                break;
 80014c6:	e722      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.y_defined = true;
 80014c8:	2201      	movs	r2, #1
                gc_block.values.y = value;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <gc_parse_line+0x230>)
 80014cc:	611f      	str	r7, [r3, #16]
                gc_block.values.y_defined = true;
 80014ce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
                break;
 80014d2:	e71c      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.z_defined = true;
 80014d4:	2201      	movs	r2, #1
                gc_block.values.z = value;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <gc_parse_line+0x230>)
 80014d8:	615f      	str	r7, [r3, #20]
                gc_block.values.z_defined = true;
 80014da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                break;
 80014de:	e716      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.f_defined = true;
 80014e0:	2201      	movs	r2, #1
                gc_block.values.f = value;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <gc_parse_line+0x230>)
 80014e4:	619f      	str	r7, [r3, #24]
                gc_block.values.f_defined = true;
 80014e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80014ea:	2100      	movs	r1, #0
 80014ec:	4638      	mov	r0, r7
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_fcmplt>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	f43f af0b 	beq.w	800130e <gc_parse_line+0xe>
 80014f8:	2404      	movs	r4, #4
 80014fa:	e780      	b.n	80013fe <gc_parse_line+0xfe>
                gc_block.values.s_defined = true;
 80014fc:	2201      	movs	r2, #1
                gc_block.values.s = value;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <gc_parse_line+0x230>)
 8001500:	61df      	str	r7, [r3, #28]
                gc_block.values.s_defined = true;
 8001502:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001506:	e7f0      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.n = int_value;
 8001508:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <gc_parse_line+0x230>)
 800150a:	6253      	str	r3, [r2, #36]	@ 0x24
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800150c:	e7ed      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.p = int_value;
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <gc_parse_line+0x230>)
 8001510:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001514:	e7e9      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.l = int_value;
 8001516:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <gc_parse_line+0x230>)
 8001518:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800151c:	e7e5      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.r_defined = true;
 800151e:	2201      	movs	r2, #1
                gc_block.values.r = value;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <gc_parse_line+0x230>)
 8001522:	621f      	str	r7, [r3, #32]
                gc_block.values.r_defined = true;
 8001524:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001528:	e7df      	b.n	80014ea <gc_parse_line+0x1ea>
            return STATUS_BAD_NUMBER_FORMAT;
 800152a:	2402      	movs	r4, #2
 800152c:	e767      	b.n	80013fe <gc_parse_line+0xfe>
 800152e:	bf00      	nop
 8001530:	20000378 	.word	0x20000378

08001534 <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 8001538:	4c77      	ldr	r4, [pc, #476]	@ (8001718 <gc_execute_block+0x1e4>)
uint8_t gc_execute_block(void) {
 800153a:	b09e      	sub	sp, #120	@ 0x78
    switch (gc_block.non_modal_command) {
 800153c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8001540:	2b12      	cmp	r3, #18
 8001542:	d079      	beq.n	8001638 <gc_execute_block+0x104>
 8001544:	d80d      	bhi.n	8001562 <gc_execute_block+0x2e>
 8001546:	2b04      	cmp	r3, #4
 8001548:	d058      	beq.n	80015fc <gc_execute_block+0xc8>
 800154a:	2b11      	cmp	r3, #17
 800154c:	d06d      	beq.n	800162a <gc_execute_block+0xf6>
            disableSteppers();
            break;
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 800154e:	7823      	ldrb	r3, [r4, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	f200 8088 	bhi.w	8001666 <gc_execute_block+0x132>
 8001556:	e8df f013 	tbh	[pc, r3, lsl #1]
 800155a:	0076      	.short	0x0076
 800155c:	00be00a7 	.word	0x00be00a7
 8001560:	00ca      	.short	0x00ca
    switch (gc_block.non_modal_command) {
 8001562:	2b1c      	cmp	r3, #28
 8001564:	d05a      	beq.n	800161c <gc_execute_block+0xe8>
 8001566:	2b5c      	cmp	r3, #92	@ 0x5c
 8001568:	d1f1      	bne.n	800154e <gc_execute_block+0x1a>
            if (gc_block.values.x_defined) {
 800156a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800156e:	4e6b      	ldr	r6, [pc, #428]	@ (800171c <gc_execute_block+0x1e8>)
 8001570:	b133      	cbz	r3, 8001580 <gc_execute_block+0x4c>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 8001572:	496b      	ldr	r1, [pc, #428]	@ (8001720 <gc_execute_block+0x1ec>)
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	f7ff fc05 	bl	8000d84 <__aeabi_fmul>
 800157a:	f7ff fddf 	bl	800113c <__aeabi_f2iz>
 800157e:	6030      	str	r0, [r6, #0]
            if (gc_block.values.y_defined) {
 8001580:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8001584:	4d67      	ldr	r5, [pc, #412]	@ (8001724 <gc_execute_block+0x1f0>)
 8001586:	b133      	cbz	r3, 8001596 <gc_execute_block+0x62>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 8001588:	4965      	ldr	r1, [pc, #404]	@ (8001720 <gc_execute_block+0x1ec>)
 800158a:	6920      	ldr	r0, [r4, #16]
 800158c:	f7ff fbfa 	bl	8000d84 <__aeabi_fmul>
 8001590:	f7ff fdd4 	bl	800113c <__aeabi_f2iz>
 8001594:	6028      	str	r0, [r5, #0]
            if (gc_block.values.z_defined) {
 8001596:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800159a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001728 <gc_execute_block+0x1f4>
 800159e:	b13b      	cbz	r3, 80015b0 <gc_execute_block+0x7c>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 80015a0:	4962      	ldr	r1, [pc, #392]	@ (800172c <gc_execute_block+0x1f8>)
 80015a2:	6960      	ldr	r0, [r4, #20]
 80015a4:	f7ff fbee 	bl	8000d84 <__aeabi_fmul>
 80015a8:	f7ff fdc8 	bl	800113c <__aeabi_f2iz>
 80015ac:	f8c8 0000 	str.w	r0, [r8]
                   currentX/(float)STEPS_PER_MM_X, 
 80015b0:	6830      	ldr	r0, [r6, #0]
 80015b2:	f7ff fb93 	bl	8000cdc <__aeabi_i2f>
 80015b6:	495a      	ldr	r1, [pc, #360]	@ (8001720 <gc_execute_block+0x1ec>)
 80015b8:	f7ff fc98 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015bc:	f7fe ff34 	bl	8000428 <__aeabi_f2d>
 80015c0:	4606      	mov	r6, r0
                   currentZ/(float)STEPS_PER_MM_Z);
 80015c2:	f8d8 0000 	ldr.w	r0, [r8]
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015c6:	460f      	mov	r7, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 80015c8:	f7ff fb88 	bl	8000cdc <__aeabi_i2f>
 80015cc:	4957      	ldr	r1, [pc, #348]	@ (800172c <gc_execute_block+0x1f8>)
 80015ce:	f7ff fc8d 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015d2:	f7fe ff29 	bl	8000428 <__aeabi_f2d>
 80015d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
                   currentY/(float)STEPS_PER_MM_Y, 
 80015da:	6828      	ldr	r0, [r5, #0]
 80015dc:	f7ff fb7e 	bl	8000cdc <__aeabi_i2f>
 80015e0:	494f      	ldr	r1, [pc, #316]	@ (8001720 <gc_execute_block+0x1ec>)
 80015e2:	f7ff fc83 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4632      	mov	r2, r6
 80015ec:	e9cd 0100 	strd	r0, r1, [sp]
 80015f0:	463b      	mov	r3, r7
 80015f2:	494f      	ldr	r1, [pc, #316]	@ (8001730 <gc_execute_block+0x1fc>)
 80015f4:	a805      	add	r0, sp, #20
 80015f6:	f005 fd4f 	bl	8007098 <siprintf>
 80015fa:	e007      	b.n	800160c <gc_execute_block+0xd8>
            if (gc_block.values.p > 0) {
 80015fc:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8001600:	2a00      	cmp	r2, #0
 8001602:	d0a4      	beq.n	800154e <gc_execute_block+0x1a>
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 8001604:	494b      	ldr	r1, [pc, #300]	@ (8001734 <gc_execute_block+0x200>)
 8001606:	a805      	add	r0, sp, #20
 8001608:	f005 fd46 	bl	8007098 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800160c:	a805      	add	r0, sp, #20
 800160e:	f7fe fd9f 	bl	8000150 <strlen>
 8001612:	b281      	uxth	r1, r0
 8001614:	a805      	add	r0, sp, #20
 8001616:	f004 fc19 	bl	8005e4c <CDC_Transmit_FS>
            break;
 800161a:	e798      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 800161c:	2116      	movs	r1, #22
 800161e:	4846      	ldr	r0, [pc, #280]	@ (8001738 <gc_execute_block+0x204>)
 8001620:	f004 fc14 	bl	8005e4c <CDC_Transmit_FS>
            performHoming();
 8001624:	f000 fb48 	bl	8001cb8 <performHoming>
            break;
 8001628:	e791      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 800162a:	211b      	movs	r1, #27
 800162c:	4843      	ldr	r0, [pc, #268]	@ (800173c <gc_execute_block+0x208>)
 800162e:	f004 fc0d 	bl	8005e4c <CDC_Transmit_FS>
            enableSteppers();
 8001632:	f001 f9dd 	bl	80029f0 <enableSteppers>
            break;
 8001636:	e78a      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 8001638:	2118      	movs	r1, #24
 800163a:	4841      	ldr	r0, [pc, #260]	@ (8001740 <gc_execute_block+0x20c>)
 800163c:	f004 fc06 	bl	8005e4c <CDC_Transmit_FS>
            disableSteppers();
 8001640:	f001 f9f0 	bl	8002a24 <disableSteppers>
            break;
 8001644:	e783      	b.n	800154e <gc_execute_block+0x1a>
        case MOTION_MODE_SEEK:    // G0 - Movimiento rápido
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001646:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001648:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800164c:	b902      	cbnz	r2, 8001650 <gc_execute_block+0x11c>
 800164e:	b153      	cbz	r3, 8001666 <gc_execute_block+0x132>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800165c:	6962      	ldr	r2, [r4, #20]
 800165e:	6921      	ldr	r1, [r4, #16]
 8001660:	68e0      	ldr	r0, [r4, #12]
 8001662:	f000 f997 	bl	8001994 <moveAxesRapidCallback>
            }
            break;
    }
    
    // Ejecutar comandos M
    switch (gc_block.modal.spindle) {
 8001666:	79a3      	ldrb	r3, [r4, #6]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d048      	beq.n	80016fe <gc_execute_block+0x1ca>
 800166c:	2b05      	cmp	r3, #5
 800166e:	d049      	beq.n	8001704 <gc_execute_block+0x1d0>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d103      	bne.n	800167c <gc_execute_block+0x148>
        case 3:  // M3 - Spindle CW
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001674:	2117      	movs	r1, #23
 8001676:	4833      	ldr	r0, [pc, #204]	@ (8001744 <gc_execute_block+0x210>)
            break;
        case 4:  // M4 - Spindle CCW  
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
            break;
        case 5:  // M5 - Spindle off
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001678:	f004 fbe8 	bl	8005e4c <CDC_Transmit_FS>
            break;
    }
    
    switch (gc_block.modal.coolant) {
 800167c:	79e3      	ldrb	r3, [r4, #7]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d043      	beq.n	800170a <gc_execute_block+0x1d6>
 8001682:	2b09      	cmp	r3, #9
 8001684:	d044      	beq.n	8001710 <gc_execute_block+0x1dc>
 8001686:	2b07      	cmp	r3, #7
 8001688:	d103      	bne.n	8001692 <gc_execute_block+0x15e>
        case 7:  // M7 - Mist coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante niebla activado\r\n", 30);
 800168a:	211e      	movs	r1, #30
 800168c:	482e      	ldr	r0, [pc, #184]	@ (8001748 <gc_execute_block+0x214>)
            break;
        case 8:  // M8 - Flood coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
            break;
        case 9:  // M9 - Coolant off
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 800168e:	f004 fbdd 	bl	8005e4c <CDC_Transmit_FS>
            break;
    }
    
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 8001692:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <gc_execute_block+0x218>)
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <gc_execute_block+0x1e4>)
 8001696:	cb03      	ldmia	r3!, {r0, r1}
 8001698:	6010      	str	r0, [r2, #0]
    
    return STATUS_OK;
}
 800169a:	2000      	movs	r0, #0
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	6051      	str	r1, [r2, #4]
 80016a0:	7213      	strb	r3, [r2, #8]
}
 80016a2:	b01e      	add	sp, #120	@ 0x78
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016ae:	b90a      	cbnz	r2, 80016b4 <gc_execute_block+0x180>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0d8      	beq.n	8001666 <gc_execute_block+0x132>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 80016b4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80016b8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80016bc:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	69a3      	ldr	r3, [r4, #24]
 80016ca:	6962      	ldr	r2, [r4, #20]
 80016cc:	6921      	ldr	r1, [r4, #16]
 80016ce:	68e0      	ldr	r0, [r4, #12]
 80016d0:	f000 f978 	bl	80019c4 <moveAxesLinearCallback>
 80016d4:	e7c7      	b.n	8001666 <gc_execute_block+0x132>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 80016d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016d8:	b913      	cbnz	r3, 80016e0 <gc_execute_block+0x1ac>
 80016da:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80016de:	b133      	cbz	r3, 80016ee <gc_execute_block+0x1ba>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 1);  // 1 para sentido horario
 80016e0:	2301      	movs	r3, #1
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 80016e2:	6a22      	ldr	r2, [r4, #32]
 80016e4:	6921      	ldr	r1, [r4, #16]
 80016e6:	68e0      	ldr	r0, [r4, #12]
 80016e8:	f000 f96a 	bl	80019c0 <moveAxesArcCallback>
                break;
 80016ec:	e7bb      	b.n	8001666 <gc_execute_block+0x132>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 80016ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016f0:	b91b      	cbnz	r3, 80016fa <gc_execute_block+0x1c6>
 80016f2:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0b5      	beq.n	8001666 <gc_execute_block+0x132>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 80016fa:	2300      	movs	r3, #0
 80016fc:	e7f1      	b.n	80016e2 <gc_execute_block+0x1ae>
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
 80016fe:	2118      	movs	r1, #24
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <gc_execute_block+0x21c>)
 8001702:	e7b9      	b.n	8001678 <gc_execute_block+0x144>
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001704:	2115      	movs	r1, #21
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <gc_execute_block+0x220>)
 8001708:	e7b6      	b.n	8001678 <gc_execute_block+0x144>
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
 800170a:	2122      	movs	r1, #34	@ 0x22
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <gc_execute_block+0x224>)
 800170e:	e7be      	b.n	800168e <gc_execute_block+0x15a>
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 8001710:	211a      	movs	r1, #26
 8001712:	4812      	ldr	r0, [pc, #72]	@ (800175c <gc_execute_block+0x228>)
 8001714:	e7bb      	b.n	800168e <gc_execute_block+0x15a>
 8001716:	bf00      	nop
 8001718:	20000378 	.word	0x20000378
 800171c:	2000236c 	.word	0x2000236c
 8001720:	429e0000 	.word	0x429e0000
 8001724:	20002368 	.word	0x20002368
 8001728:	20002364 	.word	0x20002364
 800172c:	4575a000 	.word	0x4575a000
 8001730:	0800a9f3 	.word	0x0800a9f3
 8001734:	0800a9c0 	.word	0x0800a9c0
 8001738:	0800a9dc 	.word	0x0800a9dc
 800173c:	0800aa1e 	.word	0x0800aa1e
 8001740:	0800aa3a 	.word	0x0800aa3a
 8001744:	0800aa53 	.word	0x0800aa53
 8001748:	0800aa9a 	.word	0x0800aa9a
 800174c:	2000036c 	.word	0x2000036c
 8001750:	0800aa6b 	.word	0x0800aa6b
 8001754:	0800aa84 	.word	0x0800aa84
 8001758:	0800aab9 	.word	0x0800aab9
 800175c:	0800aadd 	.word	0x0800aadd

08001760 <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 8001760:	b508      	push	{r3, lr}
 8001762:	1e42      	subs	r2, r0, #1
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 8001764:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001768:	b933      	cbnz	r3, 8001778 <gc_execute_line+0x18>
            line[i] -= 32;  // Convertir a mayúscula
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 800176a:	f7ff fdc9 	bl	8001300 <gc_parse_line>
    if (status_code != STATUS_OK) {
 800176e:	b950      	cbnz	r0, 8001786 <gc_execute_line+0x26>
    if (status_code != STATUS_OK) {
        return status_code;
    }
    
    return STATUS_OK;
}
 8001770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    status_code = gc_execute_block();
 8001774:	f7ff bede 	b.w	8001534 <gc_execute_block>
        if (line[i] >= 'a' && line[i] <= 'z') {
 8001778:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800177c:	2919      	cmp	r1, #25
            line[i] -= 32;  // Convertir a mayúscula
 800177e:	bf9c      	itt	ls
 8001780:	3b20      	subls	r3, #32
 8001782:	7013      	strbls	r3, [r2, #0]
    for (int i = 0; line[i] != 0; i++) {
 8001784:	e7ee      	b.n	8001764 <gc_execute_line+0x4>
}
 8001786:	bd08      	pop	{r3, pc}

08001788 <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 8001788:	b500      	push	{lr}
 800178a:	4602      	mov	r2, r0
 800178c:	b089      	sub	sp, #36	@ 0x24
    switch (status_code) {
 800178e:	281c      	cmp	r0, #28
 8001790:	d83e      	bhi.n	8001810 <report_status_message+0x88>
 8001792:	e8df f000 	tbb	[pc, r0]
 8001796:	160f      	.short	0x160f
 8001798:	3d1f1c19 	.word	0x3d1f1c19
 800179c:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a0:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a4:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a8:	25223d3d 	.word	0x25223d3d
 80017ac:	312e2b28 	.word	0x312e2b28
 80017b0:	3734      	.short	0x3734
 80017b2:	3a          	.byte	0x3a
 80017b3:	00          	.byte	0x00
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 80017b4:	2104      	movs	r1, #4
 80017b6:	481d      	ldr	r0, [pc, #116]	@ (800182c <report_status_message+0xa4>)
                sprintf(msg, "error:%d\r\n", status_code);
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
            }
            break;
    }
}
 80017b8:	b009      	add	sp, #36	@ 0x24
 80017ba:	f85d eb04 	ldr.w	lr, [sp], #4
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 80017be:	f004 bb45 	b.w	8005e4c <CDC_Transmit_FS>
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 80017c2:	2124      	movs	r1, #36	@ 0x24
 80017c4:	481a      	ldr	r0, [pc, #104]	@ (8001830 <report_status_message+0xa8>)
 80017c6:	e7f7      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 80017c8:	211e      	movs	r1, #30
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <report_status_message+0xac>)
 80017cc:	e7f4      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 80017ce:	211e      	movs	r1, #30
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <report_status_message+0xb0>)
 80017d2:	e7f1      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 80017d4:	211b      	movs	r1, #27
 80017d6:	4819      	ldr	r0, [pc, #100]	@ (800183c <report_status_message+0xb4>)
 80017d8:	e7ee      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 80017da:	2121      	movs	r1, #33	@ 0x21
 80017dc:	4818      	ldr	r0, [pc, #96]	@ (8001840 <report_status_message+0xb8>)
 80017de:	e7eb      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 80017e0:	2123      	movs	r1, #35	@ 0x23
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <report_status_message+0xbc>)
 80017e4:	e7e8      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 80017e6:	2121      	movs	r1, #33	@ 0x21
 80017e8:	4817      	ldr	r0, [pc, #92]	@ (8001848 <report_status_message+0xc0>)
 80017ea:	e7e5      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 80017ec:	2127      	movs	r1, #39	@ 0x27
 80017ee:	4817      	ldr	r0, [pc, #92]	@ (800184c <report_status_message+0xc4>)
 80017f0:	e7e2      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 80017f2:	2123      	movs	r1, #35	@ 0x23
 80017f4:	4816      	ldr	r0, [pc, #88]	@ (8001850 <report_status_message+0xc8>)
 80017f6:	e7df      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 80017f8:	211b      	movs	r1, #27
 80017fa:	4816      	ldr	r0, [pc, #88]	@ (8001854 <report_status_message+0xcc>)
 80017fc:	e7dc      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 80017fe:	211b      	movs	r1, #27
 8001800:	4815      	ldr	r0, [pc, #84]	@ (8001858 <report_status_message+0xd0>)
 8001802:	e7d9      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 8001804:	2121      	movs	r1, #33	@ 0x21
 8001806:	4815      	ldr	r0, [pc, #84]	@ (800185c <report_status_message+0xd4>)
 8001808:	e7d6      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 800180a:	2120      	movs	r1, #32
 800180c:	4814      	ldr	r0, [pc, #80]	@ (8001860 <report_status_message+0xd8>)
 800180e:	e7d3      	b.n	80017b8 <report_status_message+0x30>
                sprintf(msg, "error:%d\r\n", status_code);
 8001810:	4914      	ldr	r1, [pc, #80]	@ (8001864 <report_status_message+0xdc>)
 8001812:	4668      	mov	r0, sp
 8001814:	f005 fc40 	bl	8007098 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001818:	4668      	mov	r0, sp
 800181a:	f7fe fc99 	bl	8000150 <strlen>
 800181e:	b281      	uxth	r1, r0
 8001820:	4668      	mov	r0, sp
 8001822:	f004 fb13 	bl	8005e4c <CDC_Transmit_FS>
}
 8001826:	b009      	add	sp, #36	@ 0x24
 8001828:	f85d fb04 	ldr.w	pc, [sp], #4
 800182c:	0800aaf8 	.word	0x0800aaf8
 8001830:	0800aafd 	.word	0x0800aafd
 8001834:	0800ab21 	.word	0x0800ab21
 8001838:	0800ab3f 	.word	0x0800ab3f
 800183c:	0800ab5d 	.word	0x0800ab5d
 8001840:	0800ab78 	.word	0x0800ab78
 8001844:	0800ab99 	.word	0x0800ab99
 8001848:	0800abbc 	.word	0x0800abbc
 800184c:	0800abdd 	.word	0x0800abdd
 8001850:	0800ac04 	.word	0x0800ac04
 8001854:	0800ac27 	.word	0x0800ac27
 8001858:	0800ac42 	.word	0x0800ac42
 800185c:	0800ac5d 	.word	0x0800ac5d
 8001860:	0800ac7e 	.word	0x0800ac7e
 8001864:	0800ac9e 	.word	0x0800ac9e

08001868 <isEndstopPressed.part.0>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
    switch(axis) {
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
bool isEndstopPressed(char axis) {
 800186c:	b508      	push	{r3, lr}
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <isEndstopPressed.part.0+0x14>)
 8001870:	f001 feac 	bl	80035cc <HAL_GPIO_ReadPin>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
        default:
            return false;
    }
}
 8001874:	fab0 f080 	clz	r0, r0
 8001878:	0940      	lsrs	r0, r0, #5
 800187a:	bd08      	pop	{r3, pc}
 800187c:	40010c00 	.word	0x40010c00

08001880 <sendUSBText>:
void sendUSBText(const char* message) {
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
    uint16_t len = strlen(message);
 8001884:	f7fe fc64 	bl	8000150 <strlen>
    CDC_Transmit_Queued((uint8_t*)message, len);
 8001888:	b281      	uxth	r1, r0
 800188a:	4620      	mov	r0, r4
}
 800188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_Queued((uint8_t*)message, len);
 8001890:	f004 bb68 	b.w	8005f64 <CDC_Transmit_Queued>

08001894 <SystemClock_Config>:
void SystemClock_Config(void){
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001898:	2214      	movs	r2, #20
 800189a:	2100      	movs	r1, #0
 800189c:	a80c      	add	r0, sp, #48	@ 0x30
 800189e:	f005 fc60 	bl	8007162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a6:	2100      	movs	r1, #0
 80018a8:	eb0d 0002 	add.w	r0, sp, r2
 80018ac:	f005 fc59 	bl	8007162 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	462a      	mov	r2, r5
 80018b2:	2100      	movs	r1, #0
 80018b4:	a801      	add	r0, sp, #4
 80018b6:	f005 fc54 	bl	8007162 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ba:	2401      	movs	r4, #1
 80018bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c0:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c2:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c6:	e9cd 6311 	strd	r6, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80018ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ce:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80018d2:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f002 fd28 	bl	8004328 <HAL_RCC_OscConfig>
 80018d8:	b108      	cbz	r0, 80018de <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018da:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018dc:	e7fe      	b.n	80018dc <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ea:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ee:	4621      	mov	r1, r4
 80018f0:	a805      	add	r0, sp, #20
 80018f2:	f002 fedb 	bl	80046ac <HAL_RCC_ClockConfig>
 80018f6:	b108      	cbz	r0, 80018fc <SystemClock_Config+0x68>
 80018f8:	b672      	cpsid	i
  while (1)
 80018fa:	e7fe      	b.n	80018fa <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001902:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001904:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001906:	f002 ff6d 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	b108      	cbz	r0, 8001910 <SystemClock_Config+0x7c>
 800190c:	b672      	cpsid	i
  while (1)
 800190e:	e7fe      	b.n	800190e <SystemClock_Config+0x7a>
}
 8001910:	b014      	add	sp, #80	@ 0x50
 8001912:	bd70      	pop	{r4, r5, r6, pc}

08001914 <setup>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001914:	4a1d      	ldr	r2, [pc, #116]	@ (800198c <setup+0x78>)
void setup(void) {
 8001916:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001918:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 800191c:	2503      	movs	r5, #3
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001922:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001926:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
 800192a:	6813      	ldr	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 800192c:	4c18      	ldr	r4, [pc, #96]	@ (8001990 <setup+0x7c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]
    enableSteppers();
 8001934:	f001 f85c 	bl	80029f0 <enableSteppers>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4814      	ldr	r0, [pc, #80]	@ (8001990 <setup+0x7c>)
 800193e:	f001 fe4b 	bl	80035d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	4812      	ldr	r0, [pc, #72]	@ (8001990 <setup+0x7c>)
 8001948:	f001 fe46 	bl	80035d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2102      	movs	r1, #2
 8001950:	4620      	mov	r0, r4
 8001952:	f001 fe41 	bl	80035d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	4620      	mov	r0, r4
 800195a:	4611      	mov	r1, r2
 800195c:	f001 fe3c 	bl	80035d8 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 8001960:	2096      	movs	r0, #150	@ 0x96
 8001962:	f001 fce9 	bl	8003338 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2102      	movs	r1, #2
 800196a:	4620      	mov	r0, r4
 800196c:	f001 fe34 	bl	80035d8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2101      	movs	r1, #1
 8001974:	4620      	mov	r0, r4
 8001976:	f001 fe2f 	bl	80035d8 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 800197a:	2096      	movs	r0, #150	@ 0x96
 800197c:	f001 fcdc 	bl	8003338 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001980:	3d01      	subs	r5, #1
 8001982:	d1e3      	bne.n	800194c <setup+0x38>
}
 8001984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gc_init();
 8001988:	f7ff bc54 	b.w	8001234 <gc_init>
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	40010c00 	.word	0x40010c00

08001994 <moveAxesRapidCallback>:
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8001994:	b430      	push	{r4, r5}
 8001996:	f89d 5008 	ldrb.w	r5, [sp, #8]
 800199a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    float target_x = x_defined ? x : NAN;
 800199e:	b903      	cbnz	r3, 80019a2 <moveAxesRapidCallback+0xe>
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <moveAxesRapidCallback+0x24>)
    float target_y = y_defined ? y : NAN;
 80019a2:	b905      	cbnz	r5, 80019a6 <moveAxesRapidCallback+0x12>
 80019a4:	4904      	ldr	r1, [pc, #16]	@ (80019b8 <moveAxesRapidCallback+0x24>)
    float target_z = z_defined ? z : NAN;
 80019a6:	b904      	cbnz	r4, 80019aa <moveAxesRapidCallback+0x16>
 80019a8:	4a03      	ldr	r2, [pc, #12]	@ (80019b8 <moveAxesRapidCallback+0x24>)
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 80019aa:	2301      	movs	r3, #1
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <moveAxesRapidCallback+0x28>)
}
 80019b0:	bc30      	pop	{r4, r5}
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f001 b850 	b.w	8002a58 <moveAxesWithFeedRate>
 80019b8:	7fc00000 	.word	0x7fc00000
 80019bc:	20000004 	.word	0x20000004

080019c0 <moveAxesArcCallback>:
    arc_move_r(x, y, r, clockwise);
 80019c0:	f001 ba46 	b.w	8002e50 <arc_move_r>

080019c4 <moveAxesLinearCallback>:
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 80019c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019c8:	4604      	mov	r4, r0
 80019ca:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80019ce:	460d      	mov	r5, r1
 80019d0:	4616      	mov	r6, r2
 80019d2:	461f      	mov	r7, r3
 80019d4:	f89d 101c 	ldrb.w	r1, [sp, #28]
 80019d8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80019dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
    float target_x = x_defined ? x : NAN;
 80019e0:	b900      	cbnz	r0, 80019e4 <moveAxesLinearCallback+0x20>
 80019e2:	4c0d      	ldr	r4, [pc, #52]	@ (8001a18 <moveAxesLinearCallback+0x54>)
    float target_y = y_defined ? y : NAN;
 80019e4:	b901      	cbnz	r1, 80019e8 <moveAxesLinearCallback+0x24>
 80019e6:	4d0c      	ldr	r5, [pc, #48]	@ (8001a18 <moveAxesLinearCallback+0x54>)
    float target_z = z_defined ? z : NAN;
 80019e8:	b902      	cbnz	r2, 80019ec <moveAxesLinearCallback+0x28>
 80019ea:	4e0b      	ldr	r6, [pc, #44]	@ (8001a18 <moveAxesLinearCallback+0x54>)
    if (f_defined && feedRate > 0) {
 80019ec:	f8df 802c 	ldr.w	r8, [pc, #44]	@ 8001a1c <moveAxesLinearCallback+0x58>
 80019f0:	b133      	cbz	r3, 8001a00 <moveAxesLinearCallback+0x3c>
 80019f2:	2100      	movs	r1, #0
 80019f4:	4638      	mov	r0, r7
 80019f6:	f7ff fb81 	bl	80010fc <__aeabi_fcmpgt>
 80019fa:	b108      	cbz	r0, 8001a00 <moveAxesLinearCallback+0x3c>
        currentFeedRate = feedRate;
 80019fc:	f8c8 7000 	str.w	r7, [r8]
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001a00:	2300      	movs	r3, #0
 8001a02:	9306      	str	r3, [sp, #24]
 8001a04:	4632      	mov	r2, r6
 8001a06:	4629      	mov	r1, r5
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f8d8 3000 	ldr.w	r3, [r8]
}
 8001a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001a12:	f001 b821 	b.w	8002a58 <moveAxesWithFeedRate>
 8001a16:	bf00      	nop
 8001a18:	7fc00000 	.word	0x7fc00000
 8001a1c:	20000008 	.word	0x20000008

08001a20 <showConfiguration>:
void showConfiguration(void) {
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a24:	25c8      	movs	r5, #200	@ 0xc8
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a26:	4c81      	ldr	r4, [pc, #516]	@ (8001c2c <showConfiguration+0x20c>)
void showConfiguration(void) {
 8001a28:	b085      	sub	sp, #20
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8001a2a:	4881      	ldr	r0, [pc, #516]	@ (8001c30 <showConfiguration+0x210>)
 8001a2c:	f7ff ff28 	bl	8001880 <sendUSBText>
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a30:	224f      	movs	r2, #79	@ 0x4f
 8001a32:	4980      	ldr	r1, [pc, #512]	@ (8001c34 <showConfiguration+0x214>)
 8001a34:	4620      	mov	r0, r4
 8001a36:	f005 fb2f 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff ff20 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a40:	462a      	mov	r2, r5
 8001a42:	2100      	movs	r1, #0
 8001a44:	4620      	mov	r0, r4
 8001a46:	f005 fb8c 	bl	8007162 <memset>
    sprintf(outputBuffer, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001a4a:	224f      	movs	r2, #79	@ 0x4f
 8001a4c:	497a      	ldr	r1, [pc, #488]	@ (8001c38 <showConfiguration+0x218>)
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f005 fb22 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff ff13 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a5a:	462a      	mov	r2, r5
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f005 fb7f 	bl	8007162 <memset>
    sprintf(outputBuffer, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001a64:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001a68:	4974      	ldr	r1, [pc, #464]	@ (8001c3c <showConfiguration+0x21c>)
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f005 fb14 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff ff05 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a76:	462a      	mov	r2, r5
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f005 fb71 	bl	8007162 <memset>
    sprintf(outputBuffer, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001a80:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a84:	496e      	ldr	r1, [pc, #440]	@ (8001c40 <showConfiguration+0x220>)
 8001a86:	4620      	mov	r0, r4
 8001a88:	f005 fb06 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fef7 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a92:	462a      	mov	r2, r5
 8001a94:	2100      	movs	r1, #0
 8001a96:	4620      	mov	r0, r4
 8001a98:	f005 fb63 	bl	8007162 <memset>
    int feed_int = (int)currentFeedRate;
 8001a9c:	4b69      	ldr	r3, [pc, #420]	@ (8001c44 <showConfiguration+0x224>)
 8001a9e:	681f      	ldr	r7, [r3, #0]
 8001aa0:	4638      	mov	r0, r7
 8001aa2:	f7ff fb4b 	bl	800113c <__aeabi_f2iz>
 8001aa6:	4606      	mov	r6, r0
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001aa8:	f7ff f918 	bl	8000cdc <__aeabi_i2f>
 8001aac:	4601      	mov	r1, r0
 8001aae:	4638      	mov	r0, r7
 8001ab0:	f7ff f85e 	bl	8000b70 <__aeabi_fsub>
 8001ab4:	4964      	ldr	r1, [pc, #400]	@ (8001c48 <showConfiguration+0x228>)
 8001ab6:	f7ff f965 	bl	8000d84 <__aeabi_fmul>
 8001aba:	f7ff fb3f 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001abe:	4632      	mov	r2, r6
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001ac0:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001ac2:	4962      	ldr	r1, [pc, #392]	@ (8001c4c <showConfiguration+0x22c>)
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	f005 fae7 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff fed8 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f005 fb44 	bl	8007162 <memset>
    int rapid_int = (int)rapidRate;
 8001ada:	4b5d      	ldr	r3, [pc, #372]	@ (8001c50 <showConfiguration+0x230>)
 8001adc:	681f      	ldr	r7, [r3, #0]
 8001ade:	4638      	mov	r0, r7
 8001ae0:	f7ff fb2c 	bl	800113c <__aeabi_f2iz>
 8001ae4:	4606      	mov	r6, r0
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001ae6:	f7ff f8f9 	bl	8000cdc <__aeabi_i2f>
 8001aea:	4601      	mov	r1, r0
 8001aec:	4638      	mov	r0, r7
 8001aee:	f7ff f83f 	bl	8000b70 <__aeabi_fsub>
 8001af2:	4955      	ldr	r1, [pc, #340]	@ (8001c48 <showConfiguration+0x228>)
 8001af4:	f7ff f946 	bl	8000d84 <__aeabi_fmul>
 8001af8:	f7ff fb20 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001afc:	4632      	mov	r2, r6
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001afe:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001b00:	4954      	ldr	r1, [pc, #336]	@ (8001c54 <showConfiguration+0x234>)
 8001b02:	4620      	mov	r0, r4
 8001b04:	f005 fac8 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff feb9 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b0e:	462a      	mov	r2, r5
 8001b10:	2100      	movs	r1, #0
 8001b12:	4620      	mov	r0, r4
 8001b14:	f005 fb25 	bl	8007162 <memset>
    int max_int = (int)maxFeedRate;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <showConfiguration+0x238>)
 8001b1a:	681f      	ldr	r7, [r3, #0]
 8001b1c:	4638      	mov	r0, r7
 8001b1e:	f7ff fb0d 	bl	800113c <__aeabi_f2iz>
 8001b22:	4606      	mov	r6, r0
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b24:	f7ff f8da 	bl	8000cdc <__aeabi_i2f>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4638      	mov	r0, r7
 8001b2c:	f7ff f820 	bl	8000b70 <__aeabi_fsub>
 8001b30:	4945      	ldr	r1, [pc, #276]	@ (8001c48 <showConfiguration+0x228>)
 8001b32:	f7ff f927 	bl	8000d84 <__aeabi_fmul>
 8001b36:	f7ff fb01 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b3a:	4632      	mov	r2, r6
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b3c:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b3e:	4947      	ldr	r1, [pc, #284]	@ (8001c5c <showConfiguration+0x23c>)
 8001b40:	4620      	mov	r0, r4
 8001b42:	f005 faa9 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fe9a 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4620      	mov	r0, r4
 8001b52:	f005 fb06 	bl	8007162 <memset>
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001b56:	4b42      	ldr	r3, [pc, #264]	@ (8001c60 <showConfiguration+0x240>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	f7ff f8bf 	bl	8000cdc <__aeabi_i2f>
 8001b5e:	4941      	ldr	r1, [pc, #260]	@ (8001c64 <showConfiguration+0x244>)
 8001b60:	f7ff f9c4 	bl	8000eec <__aeabi_fdiv>
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b64:	4b40      	ldr	r3, [pc, #256]	@ (8001c68 <showConfiguration+0x248>)
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001b66:	4683      	mov	fp, r0
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	f7ff f8b7 	bl	8000cdc <__aeabi_i2f>
 8001b6e:	493d      	ldr	r1, [pc, #244]	@ (8001c64 <showConfiguration+0x244>)
 8001b70:	f7ff f9bc 	bl	8000eec <__aeabi_fdiv>
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001b74:	4b3d      	ldr	r3, [pc, #244]	@ (8001c6c <showConfiguration+0x24c>)
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b76:	4680      	mov	r8, r0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	f7ff f8af 	bl	8000cdc <__aeabi_i2f>
 8001b7e:	493c      	ldr	r1, [pc, #240]	@ (8001c70 <showConfiguration+0x250>)
 8001b80:	f7ff f9b4 	bl	8000eec <__aeabi_fdiv>
 8001b84:	4682      	mov	sl, r0
    int x_int = (int)xPos;
 8001b86:	4658      	mov	r0, fp
 8001b88:	f7ff fad8 	bl	800113c <__aeabi_f2iz>
 8001b8c:	4606      	mov	r6, r0
    int y_int = (int)yPos;
 8001b8e:	4640      	mov	r0, r8
 8001b90:	f7ff fad4 	bl	800113c <__aeabi_f2iz>
 8001b94:	4607      	mov	r7, r0
    int z_int = (int)zPos;
 8001b96:	4650      	mov	r0, sl
 8001b98:	f7ff fad0 	bl	800113c <__aeabi_f2iz>
 8001b9c:	4681      	mov	r9, r0
    int x_dec = (int)((xPos - x_int) * 100);
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff f89c 	bl	8000cdc <__aeabi_i2f>
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	4658      	mov	r0, fp
 8001ba8:	f7fe ffe2 	bl	8000b70 <__aeabi_fsub>
 8001bac:	4931      	ldr	r1, [pc, #196]	@ (8001c74 <showConfiguration+0x254>)
 8001bae:	f7ff f8e9 	bl	8000d84 <__aeabi_fmul>
 8001bb2:	f7ff fac3 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bb6:	ea80 7be0 	eor.w	fp, r0, r0, asr #31
 8001bba:	ebab 7be0 	sub.w	fp, fp, r0, asr #31
    int z_dec = (int)((zPos - z_int) * 100);
 8001bbe:	4648      	mov	r0, r9
 8001bc0:	f7ff f88c 	bl	8000cdc <__aeabi_i2f>
 8001bc4:	4601      	mov	r1, r0
 8001bc6:	4650      	mov	r0, sl
 8001bc8:	f7fe ffd2 	bl	8000b70 <__aeabi_fsub>
 8001bcc:	4929      	ldr	r1, [pc, #164]	@ (8001c74 <showConfiguration+0x254>)
 8001bce:	f7ff f8d9 	bl	8000d84 <__aeabi_fmul>
 8001bd2:	f7ff fab3 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	bfb8      	it	lt
 8001bda:	4240      	neglt	r0, r0
 8001bdc:	e9cd 9002 	strd	r9, r0, [sp, #8]
    int y_dec = (int)((yPos - y_int) * 100);
 8001be0:	4638      	mov	r0, r7
 8001be2:	f7ff f87b 	bl	8000cdc <__aeabi_i2f>
 8001be6:	4601      	mov	r1, r0
 8001be8:	4640      	mov	r0, r8
 8001bea:	f7fe ffc1 	bl	8000b70 <__aeabi_fsub>
 8001bee:	4921      	ldr	r1, [pc, #132]	@ (8001c74 <showConfiguration+0x254>)
 8001bf0:	f7ff f8c8 	bl	8000d84 <__aeabi_fmul>
 8001bf4:	f7ff faa2 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	bfb8      	it	lt
 8001bfc:	4240      	neglt	r0, r0
 8001bfe:	465b      	mov	r3, fp
 8001c00:	4632      	mov	r2, r6
 8001c02:	e9cd 7000 	strd	r7, r0, [sp]
 8001c06:	491c      	ldr	r1, [pc, #112]	@ (8001c78 <showConfiguration+0x258>)
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f005 fa45 	bl	8007098 <siprintf>
    sendUSBText((uint8_t*)outputBuffer);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f7ff fe36 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001c14:	462a      	mov	r2, r5
 8001c16:	2100      	movs	r1, #0
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f005 faa2 	bl	8007162 <memset>
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c1e:	4817      	ldr	r0, [pc, #92]	@ (8001c7c <showConfiguration+0x25c>)
}
 8001c20:	b005      	add	sp, #20
 8001c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c26:	f7ff be2b 	b.w	8001880 <sendUSBText>
 8001c2a:	bf00      	nop
 8001c2c:	20002370 	.word	0x20002370
 8001c30:	0800aca9 	.word	0x0800aca9
 8001c34:	0800acc6 	.word	0x0800acc6
 8001c38:	0800acdb 	.word	0x0800acdb
 8001c3c:	0800acf0 	.word	0x0800acf0
 8001c40:	0800ad05 	.word	0x0800ad05
 8001c44:	20000008 	.word	0x20000008
 8001c48:	41200000 	.word	0x41200000
 8001c4c:	0800ad19 	.word	0x0800ad19
 8001c50:	20000004 	.word	0x20000004
 8001c54:	0800ad3a 	.word	0x0800ad3a
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	0800ad61 	.word	0x0800ad61
 8001c60:	2000236c 	.word	0x2000236c
 8001c64:	429e0000 	.word	0x429e0000
 8001c68:	20002368 	.word	0x20002368
 8001c6c:	20002364 	.word	0x20002364
 8001c70:	4575a000 	.word	0x4575a000
 8001c74:	42c80000 	.word	0x42c80000
 8001c78:	0800ad83 	.word	0x0800ad83
 8001c7c:	0800adb5 	.word	0x0800adb5

08001c80 <isEndstopPressed>:
    switch(axis) {
 8001c80:	2859      	cmp	r0, #89	@ 0x59
bool isEndstopPressed(char axis) {
 8001c82:	b508      	push	{r3, lr}
    switch(axis) {
 8001c84:	d007      	beq.n	8001c96 <isEndstopPressed+0x16>
 8001c86:	285a      	cmp	r0, #90	@ 0x5a
 8001c88:	d00e      	beq.n	8001ca8 <isEndstopPressed+0x28>
 8001c8a:	2858      	cmp	r0, #88	@ 0x58
 8001c8c:	d10f      	bne.n	8001cae <isEndstopPressed+0x2e>
}
 8001c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c92:	f7ff bde9 	b.w	8001868 <isEndstopPressed.part.0>
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001c9a:	4806      	ldr	r0, [pc, #24]	@ (8001cb4 <isEndstopPressed+0x34>)
 8001c9c:	f001 fc96 	bl	80035cc <HAL_GPIO_ReadPin>
 8001ca0:	fab0 f080 	clz	r0, r0
 8001ca4:	0940      	lsrs	r0, r0, #5
}
 8001ca6:	bd08      	pop	{r3, pc}
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001ca8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cac:	e7f5      	b.n	8001c9a <isEndstopPressed+0x1a>
    switch(axis) {
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7f9      	b.n	8001ca6 <isEndstopPressed+0x26>
 8001cb2:	bf00      	nop
 8001cb4:	40010c00 	.word	0x40010c00

08001cb8 <performHoming>:
void performHoming(void) {
 8001cb8:	b510      	push	{r4, lr}
    sendUSBText("Iniciando secuencia de homingg...\r\n");
 8001cba:	4889      	ldr	r0, [pc, #548]	@ (8001ee0 <performHoming+0x228>)
 8001cbc:	f7ff fde0 	bl	8001880 <sendUSBText>
    sprintf(outputBuffer, "Fase 1: Buscando finales de carrera...\r\n");
 8001cc0:	4988      	ldr	r1, [pc, #544]	@ (8001ee4 <performHoming+0x22c>)
 8001cc2:	4889      	ldr	r0, [pc, #548]	@ (8001ee8 <performHoming+0x230>)
 8001cc4:	f005 faed 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 8001cc8:	4887      	ldr	r0, [pc, #540]	@ (8001ee8 <performHoming+0x230>)
 8001cca:	f7ff fdd9 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001cce:	22c8      	movs	r2, #200	@ 0xc8
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4885      	ldr	r0, [pc, #532]	@ (8001ee8 <performHoming+0x230>)
 8001cd4:	f005 fa45 	bl	8007162 <memset>
    sprintf(outputBuffer, "Homing eje X...\r\n");
 8001cd8:	4984      	ldr	r1, [pc, #528]	@ (8001eec <performHoming+0x234>)
 8001cda:	4883      	ldr	r0, [pc, #524]	@ (8001ee8 <performHoming+0x230>)
 8001cdc:	f005 fae1 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 8001ce0:	4881      	ldr	r0, [pc, #516]	@ (8001ee8 <performHoming+0x230>)
 8001ce2:	f7ff fdcd 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ce6:	22c8      	movs	r2, #200	@ 0xc8
 8001ce8:	2100      	movs	r1, #0
 8001cea:	487f      	ldr	r0, [pc, #508]	@ (8001ee8 <performHoming+0x230>)
 8001cec:	f005 fa39 	bl	8007162 <memset>
    CDC_TxQueue_Process();
 8001cf0:	f004 f902 	bl	8005ef8 <CDC_TxQueue_Process>
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2180      	movs	r1, #128	@ 0x80
 8001cf8:	487d      	ldr	r0, [pc, #500]	@ (8001ef0 <performHoming+0x238>)
 8001cfa:	f001 fc6d 	bl	80035d8 <HAL_GPIO_WritePin>
    switch(axis) {
 8001cfe:	f7ff fdb3 	bl	8001868 <isEndstopPressed.part.0>
    while (!isEndstopPressed('X')) {
 8001d02:	b370      	cbz	r0, 8001d62 <performHoming+0xaa>
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001d04:	2201      	movs	r2, #1
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	4879      	ldr	r0, [pc, #484]	@ (8001ef0 <performHoming+0x238>)
 8001d0a:	f001 fc65 	bl	80035d8 <HAL_GPIO_WritePin>
 8001d0e:	249e      	movs	r4, #158	@ 0x9e
        X_stepOnce();
 8001d10:	f000 fe2e 	bl	8002970 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d14:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d18:	f000 fde6 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001d1c:	3c01      	subs	r4, #1
 8001d1e:	d1f7      	bne.n	8001d10 <performHoming+0x58>
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001d20:	4622      	mov	r2, r4
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	4872      	ldr	r0, [pc, #456]	@ (8001ef0 <performHoming+0x238>)
 8001d26:	f001 fc57 	bl	80035d8 <HAL_GPIO_WritePin>
 8001d2a:	249e      	movs	r4, #158	@ 0x9e
        X_stepOnce();
 8001d2c:	f000 fe20 	bl	8002970 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3);
 8001d30:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001d34:	f000 fdd8 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001d38:	3c01      	subs	r4, #1
 8001d3a:	d1f7      	bne.n	8001d2c <performHoming+0x74>
    switch(axis) {
 8001d3c:	f7ff fd94 	bl	8001868 <isEndstopPressed.part.0>
    if (!isEndstopPressed('X')) {
 8001d40:	b9b0      	cbnz	r0, 8001d70 <performHoming+0xb8>
        sprintf(outputBuffer, "Error: Final de carrera X no presionado\r\n");
 8001d42:	496c      	ldr	r1, [pc, #432]	@ (8001ef4 <performHoming+0x23c>)
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8001d44:	4868      	ldr	r0, [pc, #416]	@ (8001ee8 <performHoming+0x230>)
 8001d46:	f005 faac 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d4a:	4867      	ldr	r0, [pc, #412]	@ (8001ee8 <performHoming+0x230>)
 8001d4c:	f7ff fd98 	bl	8001880 <sendUSBText>
 8001d50:	f004 f8d2 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d54:	4621      	mov	r1, r4
}
 8001d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d5a:	22c8      	movs	r2, #200	@ 0xc8
 8001d5c:	4862      	ldr	r0, [pc, #392]	@ (8001ee8 <performHoming+0x230>)
 8001d5e:	f005 ba00 	b.w	8007162 <memset>
        X_stepOnce();
 8001d62:	f000 fe05 	bl	8002970 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d66:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d6a:	f000 fdbd 	bl	80028e8 <delay_us>
 8001d6e:	e7c6      	b.n	8001cfe <performHoming+0x46>
    currentX = 0; // Establecer posición home
 8001d70:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <performHoming+0x240>)
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001d72:	4962      	ldr	r1, [pc, #392]	@ (8001efc <performHoming+0x244>)
 8001d74:	485c      	ldr	r0, [pc, #368]	@ (8001ee8 <performHoming+0x230>)
    currentX = 0; // Establecer posición home
 8001d76:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001d78:	f005 fa93 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d7c:	485a      	ldr	r0, [pc, #360]	@ (8001ee8 <performHoming+0x230>)
 8001d7e:	f7ff fd7f 	bl	8001880 <sendUSBText>
 8001d82:	f004 f8b9 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d86:	22c8      	movs	r2, #200	@ 0xc8
 8001d88:	4621      	mov	r1, r4
 8001d8a:	4857      	ldr	r0, [pc, #348]	@ (8001ee8 <performHoming+0x230>)
 8001d8c:	f005 f9e9 	bl	8007162 <memset>
    sprintf(outputBuffer, "Homing eje Y...\r\n");
 8001d90:	495b      	ldr	r1, [pc, #364]	@ (8001f00 <performHoming+0x248>)
 8001d92:	4855      	ldr	r0, [pc, #340]	@ (8001ee8 <performHoming+0x230>)
 8001d94:	f005 fa85 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d98:	4853      	ldr	r0, [pc, #332]	@ (8001ee8 <performHoming+0x230>)
 8001d9a:	f7ff fd71 	bl	8001880 <sendUSBText>
 8001d9e:	f004 f8ab 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001da2:	22c8      	movs	r2, #200	@ 0xc8
 8001da4:	4621      	mov	r1, r4
 8001da6:	4850      	ldr	r0, [pc, #320]	@ (8001ee8 <performHoming+0x230>)
 8001da8:	f005 f9db 	bl	8007162 <memset>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001dac:	4622      	mov	r2, r4
 8001dae:	2108      	movs	r1, #8
 8001db0:	484f      	ldr	r0, [pc, #316]	@ (8001ef0 <performHoming+0x238>)
 8001db2:	f001 fc11 	bl	80035d8 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001db6:	2059      	movs	r0, #89	@ 0x59
 8001db8:	f7ff ff62 	bl	8001c80 <isEndstopPressed>
 8001dbc:	b308      	cbz	r0, 8001e02 <performHoming+0x14a>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	484b      	ldr	r0, [pc, #300]	@ (8001ef0 <performHoming+0x238>)
 8001dc4:	f001 fc08 	bl	80035d8 <HAL_GPIO_WritePin>
 8001dc8:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001dca:	f000 fde5 	bl	8002998 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001dce:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001dd2:	f000 fd89 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001dd6:	3c01      	subs	r4, #1
 8001dd8:	d1f7      	bne.n	8001dca <performHoming+0x112>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001dda:	4622      	mov	r2, r4
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4844      	ldr	r0, [pc, #272]	@ (8001ef0 <performHoming+0x238>)
 8001de0:	f001 fbfa 	bl	80035d8 <HAL_GPIO_WritePin>
 8001de4:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001de6:	f000 fdd7 	bl	8002998 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001dea:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001dee:	f000 fd7b 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001df2:	3c01      	subs	r4, #1
 8001df4:	d1f7      	bne.n	8001de6 <performHoming+0x12e>
    if (!isEndstopPressed('Y')) {
 8001df6:	2059      	movs	r0, #89	@ 0x59
 8001df8:	f7ff ff42 	bl	8001c80 <isEndstopPressed>
 8001dfc:	b940      	cbnz	r0, 8001e10 <performHoming+0x158>
        sprintf(outputBuffer, "Error: Final de carrera Y no presionado\r\n");
 8001dfe:	4941      	ldr	r1, [pc, #260]	@ (8001f04 <performHoming+0x24c>)
 8001e00:	e7a0      	b.n	8001d44 <performHoming+0x8c>
        Y_stepOnce();
 8001e02:	f000 fdc9 	bl	8002998 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e06:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e0a:	f000 fd6d 	bl	80028e8 <delay_us>
 8001e0e:	e7d2      	b.n	8001db6 <performHoming+0xfe>
    currentY = 0; // Establecer posición home
 8001e10:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <performHoming+0x250>)
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e12:	493e      	ldr	r1, [pc, #248]	@ (8001f0c <performHoming+0x254>)
 8001e14:	4834      	ldr	r0, [pc, #208]	@ (8001ee8 <performHoming+0x230>)
    currentY = 0; // Establecer posición home
 8001e16:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e18:	f005 fa43 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e1c:	4832      	ldr	r0, [pc, #200]	@ (8001ee8 <performHoming+0x230>)
 8001e1e:	f7ff fd2f 	bl	8001880 <sendUSBText>
 8001e22:	f004 f869 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e26:	22c8      	movs	r2, #200	@ 0xc8
 8001e28:	4621      	mov	r1, r4
 8001e2a:	482f      	ldr	r0, [pc, #188]	@ (8001ee8 <performHoming+0x230>)
 8001e2c:	f005 f999 	bl	8007162 <memset>
    sprintf(outputBuffer, "Homing eje Z...\r\n");
 8001e30:	4937      	ldr	r1, [pc, #220]	@ (8001f10 <performHoming+0x258>)
 8001e32:	482d      	ldr	r0, [pc, #180]	@ (8001ee8 <performHoming+0x230>)
 8001e34:	f005 fa35 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e38:	482b      	ldr	r0, [pc, #172]	@ (8001ee8 <performHoming+0x230>)
 8001e3a:	f7ff fd21 	bl	8001880 <sendUSBText>
 8001e3e:	f004 f85b 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e42:	22c8      	movs	r2, #200	@ 0xc8
 8001e44:	4621      	mov	r1, r4
 8001e46:	4828      	ldr	r0, [pc, #160]	@ (8001ee8 <performHoming+0x230>)
 8001e48:	f005 f98b 	bl	8007162 <memset>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e52:	4830      	ldr	r0, [pc, #192]	@ (8001f14 <performHoming+0x25c>)
 8001e54:	f001 fbc0 	bl	80035d8 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001e58:	205a      	movs	r0, #90	@ 0x5a
 8001e5a:	f7ff ff11 	bl	8001c80 <isEndstopPressed>
 8001e5e:	b328      	cbz	r0, 8001eac <performHoming+0x1f4>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e66:	482b      	ldr	r0, [pc, #172]	@ (8001f14 <performHoming+0x25c>)
 8001e68:	f001 fbb6 	bl	80035d8 <HAL_GPIO_WritePin>
 8001e6c:	f641 64b4 	movw	r4, #7860	@ 0x1eb4
        Z_stepOnce();
 8001e70:	f000 fda8 	bl	80029c4 <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 8001e74:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001e78:	f000 fd36 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001e7c:	3c01      	subs	r4, #1
 8001e7e:	d1f7      	bne.n	8001e70 <performHoming+0x1b8>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e86:	4823      	ldr	r0, [pc, #140]	@ (8001f14 <performHoming+0x25c>)
 8001e88:	f001 fba6 	bl	80035d8 <HAL_GPIO_WritePin>
 8001e8c:	f641 64b4 	movw	r4, #7860	@ 0x1eb4
        Z_stepOnce();
 8001e90:	f000 fd98 	bl	80029c4 <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001e94:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001e98:	f000 fd26 	bl	80028e8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001e9c:	3c01      	subs	r4, #1
 8001e9e:	d1f7      	bne.n	8001e90 <performHoming+0x1d8>
    if (!isEndstopPressed('Z')) {
 8001ea0:	205a      	movs	r0, #90	@ 0x5a
 8001ea2:	f7ff feed 	bl	8001c80 <isEndstopPressed>
 8001ea6:	b940      	cbnz	r0, 8001eba <performHoming+0x202>
        sprintf(outputBuffer, "Error: Final de carrera Z no presionado\r\n");
 8001ea8:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <performHoming+0x260>)
 8001eaa:	e74b      	b.n	8001d44 <performHoming+0x8c>
        Z_stepOnce();
 8001eac:	f000 fd8a 	bl	80029c4 <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 8001eb0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001eb4:	f000 fd18 	bl	80028e8 <delay_us>
 8001eb8:	e7ce      	b.n	8001e58 <performHoming+0x1a0>
    currentZ = 0; // Establecer posición home
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <performHoming+0x264>)
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001ebc:	4918      	ldr	r1, [pc, #96]	@ (8001f20 <performHoming+0x268>)
 8001ebe:	480a      	ldr	r0, [pc, #40]	@ (8001ee8 <performHoming+0x230>)
    currentZ = 0; // Establecer posición home
 8001ec0:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001ec2:	f005 f9ee 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001ec6:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <performHoming+0x230>)
 8001ec8:	f7ff fcda 	bl	8001880 <sendUSBText>
 8001ecc:	f004 f814 	bl	8005ef8 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	22c8      	movs	r2, #200	@ 0xc8
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <performHoming+0x230>)
 8001ed6:	f005 f944 	bl	8007162 <memset>
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8001eda:	4912      	ldr	r1, [pc, #72]	@ (8001f24 <performHoming+0x26c>)
 8001edc:	e732      	b.n	8001d44 <performHoming+0x8c>
 8001ede:	bf00      	nop
 8001ee0:	0800add2 	.word	0x0800add2
 8001ee4:	0800adf6 	.word	0x0800adf6
 8001ee8:	20002370 	.word	0x20002370
 8001eec:	0800ae1f 	.word	0x0800ae1f
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	0800ae31 	.word	0x0800ae31
 8001ef8:	2000236c 	.word	0x2000236c
 8001efc:	0800ae5b 	.word	0x0800ae5b
 8001f00:	0800ae75 	.word	0x0800ae75
 8001f04:	0800ae87 	.word	0x0800ae87
 8001f08:	20002368 	.word	0x20002368
 8001f0c:	0800aeb1 	.word	0x0800aeb1
 8001f10:	0800aecb 	.word	0x0800aecb
 8001f14:	40010800 	.word	0x40010800
 8001f18:	0800aedd 	.word	0x0800aedd
 8001f1c:	20002364 	.word	0x20002364
 8001f20:	0800af07 	.word	0x0800af07
 8001f24:	0800af21 	.word	0x0800af21

08001f28 <startProgramStorage>:
    isStoringProgram = true;
 8001f28:	2201      	movs	r2, #1
void startProgramStorage(void) {
 8001f2a:	b510      	push	{r4, lr}
    programLineCount = 0;
 8001f2c:	2400      	movs	r4, #0
    isStoringProgram = true;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <startProgramStorage+0x40>)
 8001f30:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <startProgramStorage+0x44>)
 8001f34:	601c      	str	r4, [r3, #0]
    isProgramLoaded = false;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <startProgramStorage+0x48>)
 8001f38:	701c      	strb	r4, [r3, #0]
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <startProgramStorage+0x4c>)
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	2250      	movs	r2, #80	@ 0x50
 8001f40:	2100      	movs	r1, #0
 8001f42:	f005 f90e 	bl	8007162 <memset>
 8001f46:	4603      	mov	r3, r0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001f48:	3401      	adds	r4, #1
 8001f4a:	2c64      	cmp	r4, #100	@ 0x64
 8001f4c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001f50:	d1f4      	bne.n	8001f3c <startProgramStorage+0x14>
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 8001f52:	4809      	ldr	r0, [pc, #36]	@ (8001f78 <startProgramStorage+0x50>)
 8001f54:	f7ff fc94 	bl	8001880 <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 8001f58:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <startProgramStorage+0x54>)
 8001f5a:	f7ff fc91 	bl	8001880 <sendUSBText>
}
 8001f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("ok\r\n");
 8001f62:	4807      	ldr	r0, [pc, #28]	@ (8001f80 <startProgramStorage+0x58>)
 8001f64:	f7ff bc8c 	b.w	8001880 <sendUSBText>
 8001f68:	200003ae 	.word	0x200003ae
 8001f6c:	200003b4 	.word	0x200003b4
 8001f70:	200003ad 	.word	0x200003ad
 8001f74:	200003b8 	.word	0x200003b8
 8001f78:	0800af58 	.word	0x0800af58
 8001f7c:	0800af8f 	.word	0x0800af8f
 8001f80:	0800aaf8 	.word	0x0800aaf8

08001f84 <stopProgramStorage>:
void stopProgramStorage(void) {
 8001f84:	b510      	push	{r4, lr}
    isStoringProgram = false;
 8001f86:	2400      	movs	r4, #0
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <stopProgramStorage+0x44>)
 8001f8a:	701c      	strb	r4, [r3, #0]
    if (programLineCount > 0) {
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <stopProgramStorage+0x48>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	42a2      	cmp	r2, r4
 8001f92:	dd16      	ble.n	8001fc2 <stopProgramStorage+0x3e>
        isProgramLoaded = true;
 8001f94:	2101      	movs	r1, #1
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <stopProgramStorage+0x4c>)
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8001f98:	480e      	ldr	r0, [pc, #56]	@ (8001fd4 <stopProgramStorage+0x50>)
        isProgramLoaded = true;
 8001f9a:	7019      	strb	r1, [r3, #0]
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <stopProgramStorage+0x54>)
 8001f9e:	f005 f87b 	bl	8007098 <siprintf>
        sendUSBText(outputBuffer);
 8001fa2:	480c      	ldr	r0, [pc, #48]	@ (8001fd4 <stopProgramStorage+0x50>)
 8001fa4:	f7ff fc6c 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001fa8:	22c8      	movs	r2, #200	@ 0xc8
 8001faa:	4621      	mov	r1, r4
 8001fac:	4809      	ldr	r0, [pc, #36]	@ (8001fd4 <stopProgramStorage+0x50>)
 8001fae:	f005 f8d8 	bl	8007162 <memset>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 8001fb2:	480a      	ldr	r0, [pc, #40]	@ (8001fdc <stopProgramStorage+0x58>)
        sendUSBText("No se almacenaron lineas\r\n");
 8001fb4:	f7ff fc64 	bl	8001880 <sendUSBText>
}
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("ok\r\n");
 8001fbc:	4808      	ldr	r0, [pc, #32]	@ (8001fe0 <stopProgramStorage+0x5c>)
 8001fbe:	f7ff bc5f 	b.w	8001880 <sendUSBText>
        sendUSBText("No se almacenaron lineas\r\n");
 8001fc2:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <stopProgramStorage+0x60>)
 8001fc4:	e7f6      	b.n	8001fb4 <stopProgramStorage+0x30>
 8001fc6:	bf00      	nop
 8001fc8:	200003ae 	.word	0x200003ae
 8001fcc:	200003b4 	.word	0x200003b4
 8001fd0:	200003ad 	.word	0x200003ad
 8001fd4:	20002370 	.word	0x20002370
 8001fd8:	0800afb4 	.word	0x0800afb4
 8001fdc:	0800afde 	.word	0x0800afde
 8001fe0:	0800aaf8 	.word	0x0800aaf8
 8001fe4:	0800b023 	.word	0x0800b023

08001fe8 <addLineToProgram>:
bool addLineToProgram(const char* line) {
 8001fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (programLineCount >= MAX_GCODE_LINES) {
 8001fec:	4e17      	ldr	r6, [pc, #92]	@ (800204c <addLineToProgram+0x64>)
 8001fee:	6835      	ldr	r5, [r6, #0]
 8001ff0:	2d63      	cmp	r5, #99	@ 0x63
 8001ff2:	dc28      	bgt.n	8002046 <addLineToProgram+0x5e>
 8001ff4:	4601      	mov	r1, r0
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 8001ff6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d0fa      	beq.n	8001ff4 <addLineToProgram+0xc>
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d0f8      	beq.n	8001ff4 <addLineToProgram+0xc>
    if (strlen(start) == 0) {
 8002002:	b19b      	cbz	r3, 800202c <addLineToProgram+0x44>
    strncpy(gcodeProgram[programLineCount], start, MAX_LINE_LENGTH - 1);
 8002004:	2450      	movs	r4, #80	@ 0x50
 8002006:	436c      	muls	r4, r5
 8002008:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002050 <addLineToProgram+0x68>
 800200c:	224f      	movs	r2, #79	@ 0x4f
 800200e:	eb04 0308 	add.w	r3, r4, r8
 8002012:	4618      	mov	r0, r3
 8002014:	f005 f8bf 	bl	8007196 <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 8002018:	2700      	movs	r7, #0
 800201a:	f880 704f 	strb.w	r7, [r0, #79]	@ 0x4f
    int len = strlen(gcodeProgram[programLineCount]);
 800201e:	f7fe f897 	bl	8000150 <strlen>
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 8002022:	1823      	adds	r3, r4, r0
 8002024:	4443      	add	r3, r8
 8002026:	b920      	cbnz	r0, 8002032 <addLineToProgram+0x4a>
    programLineCount++;
 8002028:	3501      	adds	r5, #1
 800202a:	6035      	str	r5, [r6, #0]
        return true; // Línea vacía, no la almacenamos pero no es error
 800202c:	2001      	movs	r0, #1
}
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 8002032:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8002036:	3801      	subs	r0, #1
 8002038:	2a0d      	cmp	r2, #13
 800203a:	d001      	beq.n	8002040 <addLineToProgram+0x58>
 800203c:	2a0a      	cmp	r2, #10
 800203e:	d1f3      	bne.n	8002028 <addLineToProgram+0x40>
        gcodeProgram[programLineCount][len-1] = '\0';
 8002040:	f803 7d01 	strb.w	r7, [r3, #-1]!
        len--;
 8002044:	e7ef      	b.n	8002026 <addLineToProgram+0x3e>
        return false; // Buffer lleno
 8002046:	2000      	movs	r0, #0
 8002048:	e7f1      	b.n	800202e <addLineToProgram+0x46>
 800204a:	bf00      	nop
 800204c:	200003b4 	.word	0x200003b4
 8002050:	200003b8 	.word	0x200003b8

08002054 <clearProgram>:
void clearProgram(void) {
 8002054:	b538      	push	{r3, r4, r5, lr}
    programLineCount = 0;
 8002056:	2400      	movs	r4, #0
 8002058:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <clearProgram+0x40>)
 800205a:	4d0f      	ldr	r5, [pc, #60]	@ (8002098 <clearProgram+0x44>)
 800205c:	6014      	str	r4, [r2, #0]
    currentExecutingLine = 0;
 800205e:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <clearProgram+0x48>)
 8002060:	6014      	str	r4, [r2, #0]
    isProgramLoaded = false;
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <clearProgram+0x4c>)
 8002064:	7014      	strb	r4, [r2, #0]
    isProgramRunning = false;
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <clearProgram+0x50>)
 8002068:	7014      	strb	r4, [r2, #0]
    isStoringProgram = false;
 800206a:	4a0f      	ldr	r2, [pc, #60]	@ (80020a8 <clearProgram+0x54>)
 800206c:	7014      	strb	r4, [r2, #0]
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 800206e:	4628      	mov	r0, r5
 8002070:	2250      	movs	r2, #80	@ 0x50
 8002072:	2100      	movs	r1, #0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002074:	3401      	adds	r4, #1
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8002076:	f005 f874 	bl	8007162 <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 800207a:	2c64      	cmp	r4, #100	@ 0x64
 800207c:	f105 0550 	add.w	r5, r5, #80	@ 0x50
 8002080:	d1f5      	bne.n	800206e <clearProgram+0x1a>
    sendUSBText("Programa limpiado\r\n");
 8002082:	480a      	ldr	r0, [pc, #40]	@ (80020ac <clearProgram+0x58>)
 8002084:	f7ff fbfc 	bl	8001880 <sendUSBText>
}
 8002088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendUSBText("ok\r\n");
 800208c:	4808      	ldr	r0, [pc, #32]	@ (80020b0 <clearProgram+0x5c>)
 800208e:	f7ff bbf7 	b.w	8001880 <sendUSBText>
 8002092:	bf00      	nop
 8002094:	200003b4 	.word	0x200003b4
 8002098:	200003b8 	.word	0x200003b8
 800209c:	200003b0 	.word	0x200003b0
 80020a0:	200003ad 	.word	0x200003ad
 80020a4:	200003ac 	.word	0x200003ac
 80020a8:	200003ae 	.word	0x200003ae
 80020ac:	0800b03e 	.word	0x0800b03e
 80020b0:	0800aaf8 	.word	0x0800aaf8

080020b4 <runProgram>:
void runProgram(void) {
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 80020b8:	4b48      	ldr	r3, [pc, #288]	@ (80021dc <runProgram+0x128>)
void runProgram(void) {
 80020ba:	b095      	sub	sp, #84	@ 0x54
    if (!isProgramLoaded || programLineCount == 0) {
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b113      	cbz	r3, 80020c6 <runProgram+0x12>
 80020c0:	4e47      	ldr	r6, [pc, #284]	@ (80021e0 <runProgram+0x12c>)
 80020c2:	6832      	ldr	r2, [r6, #0]
 80020c4:	b972      	cbnz	r2, 80020e4 <runProgram+0x30>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 80020c6:	4947      	ldr	r1, [pc, #284]	@ (80021e4 <runProgram+0x130>)
 80020c8:	4847      	ldr	r0, [pc, #284]	@ (80021e8 <runProgram+0x134>)
 80020ca:	f005 f8ea 	bl	80072a2 <strcpy>
        sendUSBText(outputBuffer);
 80020ce:	4846      	ldr	r0, [pc, #280]	@ (80021e8 <runProgram+0x134>)
 80020d0:	f7ff fbd6 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80020d4:	22c8      	movs	r2, #200	@ 0xc8
 80020d6:	2100      	movs	r1, #0
 80020d8:	4843      	ldr	r0, [pc, #268]	@ (80021e8 <runProgram+0x134>)
}
 80020da:	b015      	add	sp, #84	@ 0x54
 80020dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80020e0:	f005 b83f 	b.w	8007162 <memset>
    isProgramRunning = true;
 80020e4:	2301      	movs	r3, #1
    currentExecutingLine = 0;
 80020e6:	2400      	movs	r4, #0
    isProgramRunning = true;
 80020e8:	4f40      	ldr	r7, [pc, #256]	@ (80021ec <runProgram+0x138>)
    currentExecutingLine = 0;
 80020ea:	4d41      	ldr	r5, [pc, #260]	@ (80021f0 <runProgram+0x13c>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80020ec:	4941      	ldr	r1, [pc, #260]	@ (80021f4 <runProgram+0x140>)
 80020ee:	483e      	ldr	r0, [pc, #248]	@ (80021e8 <runProgram+0x134>)
    isProgramRunning = true;
 80020f0:	703b      	strb	r3, [r7, #0]
    currentExecutingLine = 0;
 80020f2:	602c      	str	r4, [r5, #0]
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80020f4:	f004 ffd0 	bl	8007098 <siprintf>
    sendUSBText(outputBuffer);
 80020f8:	483b      	ldr	r0, [pc, #236]	@ (80021e8 <runProgram+0x134>)
 80020fa:	f7ff fbc1 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80020fe:	22c8      	movs	r2, #200	@ 0xc8
 8002100:	4621      	mov	r1, r4
 8002102:	4839      	ldr	r0, [pc, #228]	@ (80021e8 <runProgram+0x134>)
 8002104:	f005 f82d 	bl	8007162 <memset>
        sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002108:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 80021f8 <runProgram+0x144>
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 800210c:	4622      	mov	r2, r4
        sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 800210e:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80021fc <runProgram+0x148>
 8002112:	4c35      	ldr	r4, [pc, #212]	@ (80021e8 <runProgram+0x134>)
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 8002114:	6833      	ldr	r3, [r6, #0]
 8002116:	602a      	str	r2, [r5, #0]
 8002118:	4293      	cmp	r3, r2
 800211a:	dd04      	ble.n	8002126 <runProgram+0x72>
        if (!isProgramRunning) {
 800211c:	783b      	ldrb	r3, [r7, #0]
 800211e:	b9d3      	cbnz	r3, 8002156 <runProgram+0xa2>
            sendUSBText((uint8_t*)"Programa detenido por el usuario\r\n");
 8002120:	4837      	ldr	r0, [pc, #220]	@ (8002200 <runProgram+0x14c>)
 8002122:	f7ff fbad 	bl	8001880 <sendUSBText>
    isProgramRunning = false;
 8002126:	2400      	movs	r4, #0
    if (currentExecutingLine >= programLineCount) {
 8002128:	682a      	ldr	r2, [r5, #0]
 800212a:	6833      	ldr	r3, [r6, #0]
    isProgramRunning = false;
 800212c:	703c      	strb	r4, [r7, #0]
    if (currentExecutingLine >= programLineCount) {
 800212e:	429a      	cmp	r2, r3
 8002130:	db0b      	blt.n	800214a <runProgram+0x96>
        sprintf(outputBuffer, "Programa completado exitosamente\r\n");
 8002132:	4934      	ldr	r1, [pc, #208]	@ (8002204 <runProgram+0x150>)
 8002134:	482c      	ldr	r0, [pc, #176]	@ (80021e8 <runProgram+0x134>)
 8002136:	f005 f8b4 	bl	80072a2 <strcpy>
        sendUSBText(outputBuffer);
 800213a:	482b      	ldr	r0, [pc, #172]	@ (80021e8 <runProgram+0x134>)
 800213c:	f7ff fba0 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002140:	22c8      	movs	r2, #200	@ 0xc8
 8002142:	4621      	mov	r1, r4
 8002144:	4828      	ldr	r0, [pc, #160]	@ (80021e8 <runProgram+0x134>)
 8002146:	f005 f80c 	bl	8007162 <memset>
    sendUSBText("ok\r\n");
 800214a:	482f      	ldr	r0, [pc, #188]	@ (8002208 <runProgram+0x154>)
}
 800214c:	b015      	add	sp, #84	@ 0x54
 800214e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sendUSBText("ok\r\n");
 8002152:	f7ff bb95 	b.w	8001880 <sendUSBText>
        sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002156:	f04f 0a50 	mov.w	sl, #80	@ 0x50
        temp_command[MAX_LINE_LENGTH - 1] = '\0';
 800215a:	f04f 0b00 	mov.w	fp, #0
        sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 800215e:	fb0a 8302 	mla	r3, sl, r2, r8
 8002162:	4649      	mov	r1, r9
 8002164:	3201      	adds	r2, #1
 8002166:	4620      	mov	r0, r4
 8002168:	f004 ff96 	bl	8007098 <siprintf>
        sendUSBText(outputBuffer);
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fb87 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002172:	22c8      	movs	r2, #200	@ 0xc8
 8002174:	2100      	movs	r1, #0
 8002176:	4620      	mov	r0, r4
 8002178:	f004 fff3 	bl	8007162 <memset>
        strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800217c:	6829      	ldr	r1, [r5, #0]
 800217e:	224f      	movs	r2, #79	@ 0x4f
 8002180:	fb0a 8101 	mla	r1, sl, r1, r8
 8002184:	4668      	mov	r0, sp
 8002186:	f005 f806 	bl	8007196 <strncpy>
        uint8_t status = gc_execute_line(temp_command);
 800218a:	4668      	mov	r0, sp
        temp_command[MAX_LINE_LENGTH - 1] = '\0';
 800218c:	f88d b04f 	strb.w	fp, [sp, #79]	@ 0x4f
        uint8_t status = gc_execute_line(temp_command);
 8002190:	f7ff fae6 	bl	8001760 <gc_execute_line>
        if (status == STATUS_OK) {
 8002194:	4682      	mov	sl, r0
 8002196:	b988      	cbnz	r0, 80021bc <runProgram+0x108>
            sprintf(outputBuffer, "ok\r\n");
 8002198:	491b      	ldr	r1, [pc, #108]	@ (8002208 <runProgram+0x154>)
 800219a:	4620      	mov	r0, r4
 800219c:	f005 f881 	bl	80072a2 <strcpy>
            sendUSBText(outputBuffer);
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff fb6d 	bl	8001880 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 80021a6:	22c8      	movs	r2, #200	@ 0xc8
 80021a8:	4651      	mov	r1, sl
 80021aa:	4620      	mov	r0, r4
 80021ac:	f004 ffd9 	bl	8007162 <memset>
        HAL_Delay(10);
 80021b0:	200a      	movs	r0, #10
 80021b2:	f001 f8c1 	bl	8003338 <HAL_Delay>
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 80021b6:	682a      	ldr	r2, [r5, #0]
 80021b8:	3201      	adds	r2, #1
 80021ba:	e7ab      	b.n	8002114 <runProgram+0x60>
            sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 80021bc:	682b      	ldr	r3, [r5, #0]
 80021be:	4602      	mov	r2, r0
 80021c0:	4912      	ldr	r1, [pc, #72]	@ (800220c <runProgram+0x158>)
 80021c2:	3301      	adds	r3, #1
 80021c4:	4808      	ldr	r0, [pc, #32]	@ (80021e8 <runProgram+0x134>)
 80021c6:	f004 ff67 	bl	8007098 <siprintf>
            sendUSBText(outputBuffer);
 80021ca:	4807      	ldr	r0, [pc, #28]	@ (80021e8 <runProgram+0x134>)
 80021cc:	f7ff fb58 	bl	8001880 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 80021d0:	22c8      	movs	r2, #200	@ 0xc8
 80021d2:	4659      	mov	r1, fp
 80021d4:	4804      	ldr	r0, [pc, #16]	@ (80021e8 <runProgram+0x134>)
 80021d6:	f004 ffc4 	bl	8007162 <memset>
            break;
 80021da:	e7a4      	b.n	8002126 <runProgram+0x72>
 80021dc:	200003ad 	.word	0x200003ad
 80021e0:	200003b4 	.word	0x200003b4
 80021e4:	0800b052 	.word	0x0800b052
 80021e8:	20002370 	.word	0x20002370
 80021ec:	200003ac 	.word	0x200003ac
 80021f0:	200003b0 	.word	0x200003b0
 80021f4:	0800b073 	.word	0x0800b073
 80021f8:	200003b8 	.word	0x200003b8
 80021fc:	0800b0c5 	.word	0x0800b0c5
 8002200:	0800b0a2 	.word	0x0800b0a2
 8002204:	0800b0fe 	.word	0x0800b0fe
 8002208:	0800aaf8 	.word	0x0800aaf8
 800220c:	0800b0df 	.word	0x0800b0df

08002210 <runNextLine>:
void runNextLine(void) {
 8002210:	b570      	push	{r4, r5, r6, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 8002212:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <runNextLine+0xdc>)
void runNextLine(void) {
 8002214:	b094      	sub	sp, #80	@ 0x50
    if (!isProgramLoaded || programLineCount == 0) {
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b113      	cbz	r3, 8002220 <runNextLine+0x10>
 800221a:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <runNextLine+0xe0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b973      	cbnz	r3, 800223e <runNextLine+0x2e>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8002220:	4934      	ldr	r1, [pc, #208]	@ (80022f4 <runNextLine+0xe4>)
 8002222:	4835      	ldr	r0, [pc, #212]	@ (80022f8 <runNextLine+0xe8>)
 8002224:	f005 f83d 	bl	80072a2 <strcpy>
        sendUSBText(outputBuffer);
 8002228:	4833      	ldr	r0, [pc, #204]	@ (80022f8 <runNextLine+0xe8>)
 800222a:	f7ff fb29 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800222e:	22c8      	movs	r2, #200	@ 0xc8
 8002230:	2100      	movs	r1, #0
 8002232:	4831      	ldr	r0, [pc, #196]	@ (80022f8 <runNextLine+0xe8>)
}
 8002234:	b014      	add	sp, #80	@ 0x50
 8002236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800223a:	f004 bf92 	b.w	8007162 <memset>
    if (currentExecutingLine >= programLineCount) {
 800223e:	4d2f      	ldr	r5, [pc, #188]	@ (80022fc <runNextLine+0xec>)
 8002240:	682a      	ldr	r2, [r5, #0]
 8002242:	4293      	cmp	r3, r2
 8002244:	dc10      	bgt.n	8002268 <runNextLine+0x58>
        sprintf(outputBuffer, "Programa completado\r\n");
 8002246:	492e      	ldr	r1, [pc, #184]	@ (8002300 <runNextLine+0xf0>)
 8002248:	482b      	ldr	r0, [pc, #172]	@ (80022f8 <runNextLine+0xe8>)
 800224a:	f005 f82a 	bl	80072a2 <strcpy>
        sendUSBText(outputBuffer);
 800224e:	482a      	ldr	r0, [pc, #168]	@ (80022f8 <runNextLine+0xe8>)
 8002250:	f7ff fb16 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002254:	22c8      	movs	r2, #200	@ 0xc8
 8002256:	2100      	movs	r1, #0
 8002258:	4827      	ldr	r0, [pc, #156]	@ (80022f8 <runNextLine+0xe8>)
 800225a:	f004 ff82 	bl	8007162 <memset>
        isProgramRunning = false;
 800225e:	2200      	movs	r2, #0
 8002260:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <runNextLine+0xf4>)
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	b014      	add	sp, #80	@ 0x50
 8002266:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002268:	2650      	movs	r6, #80	@ 0x50
 800226a:	4c27      	ldr	r4, [pc, #156]	@ (8002308 <runNextLine+0xf8>)
 800226c:	4927      	ldr	r1, [pc, #156]	@ (800230c <runNextLine+0xfc>)
 800226e:	fb06 4302 	mla	r3, r6, r2, r4
 8002272:	4821      	ldr	r0, [pc, #132]	@ (80022f8 <runNextLine+0xe8>)
 8002274:	3201      	adds	r2, #1
 8002276:	f004 ff0f 	bl	8007098 <siprintf>
    sendUSBText(outputBuffer);
 800227a:	481f      	ldr	r0, [pc, #124]	@ (80022f8 <runNextLine+0xe8>)
 800227c:	f7ff fb00 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002280:	22c8      	movs	r2, #200	@ 0xc8
 8002282:	2100      	movs	r1, #0
 8002284:	481c      	ldr	r0, [pc, #112]	@ (80022f8 <runNextLine+0xe8>)
 8002286:	f004 ff6c 	bl	8007162 <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800228a:	6829      	ldr	r1, [r5, #0]
 800228c:	224f      	movs	r2, #79	@ 0x4f
 800228e:	fb06 4101 	mla	r1, r6, r1, r4
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002292:	2600      	movs	r6, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002294:	4668      	mov	r0, sp
 8002296:	f004 ff7e 	bl	8007196 <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 800229a:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 800229c:	f88d 604f 	strb.w	r6, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 80022a0:	f7ff fa5e 	bl	8001760 <gc_execute_line>
    if (status == STATUS_OK) {
 80022a4:	4604      	mov	r4, r0
 80022a6:	b978      	cbnz	r0, 80022c8 <runNextLine+0xb8>
        sprintf(outputBuffer, "ok\r\n");
 80022a8:	4919      	ldr	r1, [pc, #100]	@ (8002310 <runNextLine+0x100>)
 80022aa:	4813      	ldr	r0, [pc, #76]	@ (80022f8 <runNextLine+0xe8>)
 80022ac:	f004 fff9 	bl	80072a2 <strcpy>
        sendUSBText(outputBuffer);
 80022b0:	4811      	ldr	r0, [pc, #68]	@ (80022f8 <runNextLine+0xe8>)
 80022b2:	f7ff fae5 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022b6:	22c8      	movs	r2, #200	@ 0xc8
 80022b8:	4621      	mov	r1, r4
 80022ba:	480f      	ldr	r0, [pc, #60]	@ (80022f8 <runNextLine+0xe8>)
 80022bc:	f004 ff51 	bl	8007162 <memset>
        currentExecutingLine++;
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	602b      	str	r3, [r5, #0]
 80022c6:	e7cd      	b.n	8002264 <runNextLine+0x54>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	4602      	mov	r2, r0
 80022cc:	3301      	adds	r3, #1
 80022ce:	4911      	ldr	r1, [pc, #68]	@ (8002314 <runNextLine+0x104>)
 80022d0:	4809      	ldr	r0, [pc, #36]	@ (80022f8 <runNextLine+0xe8>)
 80022d2:	f004 fee1 	bl	8007098 <siprintf>
        sendUSBText(outputBuffer);
 80022d6:	4808      	ldr	r0, [pc, #32]	@ (80022f8 <runNextLine+0xe8>)
 80022d8:	f7ff fad2 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022dc:	22c8      	movs	r2, #200	@ 0xc8
 80022de:	4631      	mov	r1, r6
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <runNextLine+0xe8>)
 80022e2:	f004 ff3e 	bl	8007162 <memset>
        isProgramRunning = false;
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <runNextLine+0xf4>)
 80022e8:	701e      	strb	r6, [r3, #0]
 80022ea:	e7bb      	b.n	8002264 <runNextLine+0x54>
 80022ec:	200003ad 	.word	0x200003ad
 80022f0:	200003b4 	.word	0x200003b4
 80022f4:	0800b052 	.word	0x0800b052
 80022f8:	20002370 	.word	0x20002370
 80022fc:	200003b0 	.word	0x200003b0
 8002300:	0800b121 	.word	0x0800b121
 8002304:	200003ac 	.word	0x200003ac
 8002308:	200003b8 	.word	0x200003b8
 800230c:	0800b0c5 	.word	0x0800b0c5
 8002310:	0800aaf8 	.word	0x0800aaf8
 8002314:	0800b0df 	.word	0x0800b0df

08002318 <pauseProgram>:
void pauseProgram(void) {
 8002318:	b570      	push	{r4, r5, r6, lr}
    isProgramRunning = false;
 800231a:	2500      	movs	r5, #0
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800231c:	26c8      	movs	r6, #200	@ 0xc8
    sprintf(outputBuffer, "Programa pausado\r\n");
 800231e:	4c0e      	ldr	r4, [pc, #56]	@ (8002358 <pauseProgram+0x40>)
    isProgramRunning = false;
 8002320:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <pauseProgram+0x44>)
    sprintf(outputBuffer, "Programa pausado\r\n");
 8002322:	490f      	ldr	r1, [pc, #60]	@ (8002360 <pauseProgram+0x48>)
 8002324:	4620      	mov	r0, r4
    isProgramRunning = false;
 8002326:	701d      	strb	r5, [r3, #0]
    sprintf(outputBuffer, "Programa pausado\r\n");
 8002328:	f004 ffbb 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff faa7 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002332:	4632      	mov	r2, r6
 8002334:	4629      	mov	r1, r5
 8002336:	4620      	mov	r0, r4
 8002338:	f004 ff13 	bl	8007162 <memset>
    sprintf(outputBuffer, "ok\r\n");
 800233c:	4909      	ldr	r1, [pc, #36]	@ (8002364 <pauseProgram+0x4c>)
 800233e:	4620      	mov	r0, r4
 8002340:	f004 ffaf 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff fa9b 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800234a:	4632      	mov	r2, r6
 800234c:	4629      	mov	r1, r5
 800234e:	4620      	mov	r0, r4
}
 8002350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002354:	f004 bf05 	b.w	8007162 <memset>
 8002358:	20002370 	.word	0x20002370
 800235c:	200003ac 	.word	0x200003ac
 8002360:	0800b137 	.word	0x0800b137
 8002364:	0800aaf8 	.word	0x0800aaf8

08002368 <showHelp>:
void showHelp(void) {
 8002368:	b508      	push	{r3, lr}
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 800236a:	482c      	ldr	r0, [pc, #176]	@ (800241c <showHelp+0xb4>)
 800236c:	f7ff fa88 	bl	8001880 <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 8002370:	482b      	ldr	r0, [pc, #172]	@ (8002420 <showHelp+0xb8>)
 8002372:	f7ff fa85 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 8002376:	482b      	ldr	r0, [pc, #172]	@ (8002424 <showHelp+0xbc>)
 8002378:	f7ff fa82 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 800237c:	482a      	ldr	r0, [pc, #168]	@ (8002428 <showHelp+0xc0>)
 800237e:	f7ff fa7f 	bl	8001880 <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 8002382:	482a      	ldr	r0, [pc, #168]	@ (800242c <showHelp+0xc4>)
 8002384:	f7ff fa7c 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 8002388:	4829      	ldr	r0, [pc, #164]	@ (8002430 <showHelp+0xc8>)
 800238a:	f7ff fa79 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 800238e:	4829      	ldr	r0, [pc, #164]	@ (8002434 <showHelp+0xcc>)
 8002390:	f7ff fa76 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 8002394:	4828      	ldr	r0, [pc, #160]	@ (8002438 <showHelp+0xd0>)
 8002396:	f7ff fa73 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 800239a:	4828      	ldr	r0, [pc, #160]	@ (800243c <showHelp+0xd4>)
 800239c:	f7ff fa70 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 80023a0:	4827      	ldr	r0, [pc, #156]	@ (8002440 <showHelp+0xd8>)
 80023a2:	f7ff fa6d 	bl	8001880 <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 80023a6:	4827      	ldr	r0, [pc, #156]	@ (8002444 <showHelp+0xdc>)
 80023a8:	f7ff fa6a 	bl	8001880 <sendUSBText>
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 80023ac:	4826      	ldr	r0, [pc, #152]	@ (8002448 <showHelp+0xe0>)
 80023ae:	f7ff fa67 	bl	8001880 <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 80023b2:	4826      	ldr	r0, [pc, #152]	@ (800244c <showHelp+0xe4>)
 80023b4:	f7ff fa64 	bl	8001880 <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 80023b8:	4825      	ldr	r0, [pc, #148]	@ (8002450 <showHelp+0xe8>)
 80023ba:	f7ff fa61 	bl	8001880 <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 80023be:	4825      	ldr	r0, [pc, #148]	@ (8002454 <showHelp+0xec>)
 80023c0:	f7ff fa5e 	bl	8001880 <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 80023c4:	4824      	ldr	r0, [pc, #144]	@ (8002458 <showHelp+0xf0>)
 80023c6:	f7ff fa5b 	bl	8001880 <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 80023ca:	4824      	ldr	r0, [pc, #144]	@ (800245c <showHelp+0xf4>)
 80023cc:	f7ff fa58 	bl	8001880 <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 80023d0:	4823      	ldr	r0, [pc, #140]	@ (8002460 <showHelp+0xf8>)
 80023d2:	f7ff fa55 	bl	8001880 <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 80023d6:	4823      	ldr	r0, [pc, #140]	@ (8002464 <showHelp+0xfc>)
 80023d8:	f7ff fa52 	bl	8001880 <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 80023dc:	4822      	ldr	r0, [pc, #136]	@ (8002468 <showHelp+0x100>)
 80023de:	f7ff fa4f 	bl	8001880 <sendUSBText>
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 80023e2:	4822      	ldr	r0, [pc, #136]	@ (800246c <showHelp+0x104>)
 80023e4:	f7ff fa4c 	bl	8001880 <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 80023e8:	4821      	ldr	r0, [pc, #132]	@ (8002470 <showHelp+0x108>)
 80023ea:	f7ff fa49 	bl	8001880 <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 80023ee:	4821      	ldr	r0, [pc, #132]	@ (8002474 <showHelp+0x10c>)
 80023f0:	f7ff fa46 	bl	8001880 <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 80023f4:	4820      	ldr	r0, [pc, #128]	@ (8002478 <showHelp+0x110>)
 80023f6:	f7ff fa43 	bl	8001880 <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 80023fa:	4820      	ldr	r0, [pc, #128]	@ (800247c <showHelp+0x114>)
 80023fc:	f7ff fa40 	bl	8001880 <sendUSBText>
    sendUSBText("5. FIN\r\n");
 8002400:	481f      	ldr	r0, [pc, #124]	@ (8002480 <showHelp+0x118>)
 8002402:	f7ff fa3d 	bl	8001880 <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 8002406:	481f      	ldr	r0, [pc, #124]	@ (8002484 <showHelp+0x11c>)
 8002408:	f7ff fa3a 	bl	8001880 <sendUSBText>
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 800240c:	481e      	ldr	r0, [pc, #120]	@ (8002488 <showHelp+0x120>)
 800240e:	f7ff fa37 	bl	8001880 <sendUSBText>
}
 8002412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("ok\r\n");
 8002416:	481d      	ldr	r0, [pc, #116]	@ (800248c <showHelp+0x124>)
 8002418:	f7ff ba32 	b.w	8001880 <sendUSBText>
 800241c:	0800b14a 	.word	0x0800b14a
 8002420:	0800b16c 	.word	0x0800b16c
 8002424:	0800b186 	.word	0x0800b186
 8002428:	0800b1c0 	.word	0x0800b1c0
 800242c:	0800b1ea 	.word	0x0800b1ea
 8002430:	0800b220 	.word	0x0800b220
 8002434:	0800b24d 	.word	0x0800b24d
 8002438:	0800b278 	.word	0x0800b278
 800243c:	0800b29b 	.word	0x0800b29b
 8002440:	0800b2cf 	.word	0x0800b2cf
 8002444:	0800b2fd 	.word	0x0800b2fd
 8002448:	0800b332 	.word	0x0800b332
 800244c:	0800b34f 	.word	0x0800b34f
 8002450:	0800b374 	.word	0x0800b374
 8002454:	0800b3a7 	.word	0x0800b3a7
 8002458:	0800b3cf 	.word	0x0800b3cf
 800245c:	0800b3fd 	.word	0x0800b3fd
 8002460:	0800b422 	.word	0x0800b422
 8002464:	0800b44a 	.word	0x0800b44a
 8002468:	0800b476 	.word	0x0800b476
 800246c:	0800b49f 	.word	0x0800b49f
 8002470:	0800b4b3 	.word	0x0800b4b3
 8002474:	0800b4c6 	.word	0x0800b4c6
 8002478:	0800b4d8 	.word	0x0800b4d8
 800247c:	0800b4f1 	.word	0x0800b4f1
 8002480:	0800b50f 	.word	0x0800b50f
 8002484:	0800b518 	.word	0x0800b518
 8002488:	0800b529 	.word	0x0800b529
 800248c:	0800aaf8 	.word	0x0800aaf8

08002490 <showQueueStatus>:
void showQueueStatus(void) {
 8002490:	b508      	push	{r3, lr}
    sprintf(outputBuffer, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 8002492:	4921      	ldr	r1, [pc, #132]	@ (8002518 <showQueueStatus+0x88>)
 8002494:	4821      	ldr	r0, [pc, #132]	@ (800251c <showQueueStatus+0x8c>)
 8002496:	f004 ff04 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 800249a:	4820      	ldr	r0, [pc, #128]	@ (800251c <showQueueStatus+0x8c>)
 800249c:	f7ff f9f0 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024a0:	22c8      	movs	r2, #200	@ 0xc8
 80024a2:	2100      	movs	r1, #0
 80024a4:	481d      	ldr	r0, [pc, #116]	@ (800251c <showQueueStatus+0x8c>)
 80024a6:	f004 fe5c 	bl	8007162 <memset>
    sprintf(outputBuffer, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 80024aa:	f003 fd5d 	bl	8005f68 <CDC_TxQueue_GetCount>
 80024ae:	230a      	movs	r3, #10
 80024b0:	4602      	mov	r2, r0
 80024b2:	491b      	ldr	r1, [pc, #108]	@ (8002520 <showQueueStatus+0x90>)
 80024b4:	4819      	ldr	r0, [pc, #100]	@ (800251c <showQueueStatus+0x8c>)
 80024b6:	f004 fdef 	bl	8007098 <siprintf>
    sendUSBText(outputBuffer);
 80024ba:	4818      	ldr	r0, [pc, #96]	@ (800251c <showQueueStatus+0x8c>)
 80024bc:	f7ff f9e0 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024c0:	22c8      	movs	r2, #200	@ 0xc8
 80024c2:	2100      	movs	r1, #0
 80024c4:	4815      	ldr	r0, [pc, #84]	@ (800251c <showQueueStatus+0x8c>)
 80024c6:	f004 fe4c 	bl	8007162 <memset>
    sprintf(outputBuffer, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 80024ca:	f003 fd53 	bl	8005f74 <CDC_TxQueue_IsFull>
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <showQueueStatus+0x94>)
 80024d0:	4a15      	ldr	r2, [pc, #84]	@ (8002528 <showQueueStatus+0x98>)
 80024d2:	4916      	ldr	r1, [pc, #88]	@ (800252c <showQueueStatus+0x9c>)
 80024d4:	2800      	cmp	r0, #0
 80024d6:	bf18      	it	ne
 80024d8:	461a      	movne	r2, r3
 80024da:	4810      	ldr	r0, [pc, #64]	@ (800251c <showQueueStatus+0x8c>)
 80024dc:	f004 fddc 	bl	8007098 <siprintf>
    sendUSBText(outputBuffer);
 80024e0:	480e      	ldr	r0, [pc, #56]	@ (800251c <showQueueStatus+0x8c>)
 80024e2:	f7ff f9cd 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024e6:	22c8      	movs	r2, #200	@ 0xc8
 80024e8:	2100      	movs	r1, #0
 80024ea:	480c      	ldr	r0, [pc, #48]	@ (800251c <showQueueStatus+0x8c>)
 80024ec:	f004 fe39 	bl	8007162 <memset>
    sprintf(outputBuffer, "Método transmisión: ");
 80024f0:	490f      	ldr	r1, [pc, #60]	@ (8002530 <showQueueStatus+0xa0>)
 80024f2:	480a      	ldr	r0, [pc, #40]	@ (800251c <showQueueStatus+0x8c>)
 80024f4:	f004 fed5 	bl	80072a2 <strcpy>
    sendUSBText(outputBuffer);
 80024f8:	4808      	ldr	r0, [pc, #32]	@ (800251c <showQueueStatus+0x8c>)
 80024fa:	f7ff f9c1 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024fe:	22c8      	movs	r2, #200	@ 0xc8
 8002500:	2100      	movs	r1, #0
 8002502:	4806      	ldr	r0, [pc, #24]	@ (800251c <showQueueStatus+0x8c>)
 8002504:	f004 fe2d 	bl	8007162 <memset>
            sendUSBText("COLA\r\n");
 8002508:	480a      	ldr	r0, [pc, #40]	@ (8002534 <showQueueStatus+0xa4>)
 800250a:	f7ff f9b9 	bl	8001880 <sendUSBText>
}
 800250e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("===========================\r\n");
 8002512:	4809      	ldr	r0, [pc, #36]	@ (8002538 <showQueueStatus+0xa8>)
 8002514:	f7ff b9b4 	b.w	8001880 <sendUSBText>
 8002518:	0800b545 	.word	0x0800b545
 800251c:	20002370 	.word	0x20002370
 8002520:	0800b565 	.word	0x0800b565
 8002524:	0800b53f 	.word	0x0800b53f
 8002528:	0800b542 	.word	0x0800b542
 800252c:	0800b57f 	.word	0x0800b57f
 8002530:	0800b590 	.word	0x0800b590
 8002534:	0800b5a7 	.word	0x0800b5a7
 8002538:	0800b5ae 	.word	0x0800b5ae

0800253c <processGcode>:
void processGcode(const char* command) {
 800253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 8002540:	220d      	movs	r2, #13
void processGcode(const char* command) {
 8002542:	b0a0      	sub	sp, #128	@ 0x80
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 8002544:	497f      	ldr	r1, [pc, #508]	@ (8002744 <processGcode+0x208>)
void processGcode(const char* command) {
 8002546:	4604      	mov	r4, r0
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 8002548:	f004 fe13 	bl	8007172 <strncmp>
 800254c:	b920      	cbnz	r0, 8002558 <processGcode+0x1c>
}
 800254e:	b020      	add	sp, #128	@ 0x80
 8002550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        startProgramStorage();
 8002554:	f7ff bce8 	b.w	8001f28 <startProgramStorage>
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 8002558:	220c      	movs	r2, #12
 800255a:	4620      	mov	r0, r4
 800255c:	497a      	ldr	r1, [pc, #488]	@ (8002748 <processGcode+0x20c>)
 800255e:	f004 fe08 	bl	8007172 <strncmp>
 8002562:	b920      	cbnz	r0, 800256e <processGcode+0x32>
}
 8002564:	b020      	add	sp, #128	@ 0x80
 8002566:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        stopProgramStorage();
 800256a:	f7ff bd0b 	b.w	8001f84 <stopProgramStorage>
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 800256e:	220b      	movs	r2, #11
 8002570:	4620      	mov	r0, r4
 8002572:	4976      	ldr	r1, [pc, #472]	@ (800274c <processGcode+0x210>)
 8002574:	f004 fdfd 	bl	8007172 <strncmp>
 8002578:	b920      	cbnz	r0, 8002584 <processGcode+0x48>
}
 800257a:	b020      	add	sp, #128	@ 0x80
 800257c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runProgram();
 8002580:	f7ff bd98 	b.w	80020b4 <runProgram>
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 8002584:	220d      	movs	r2, #13
 8002586:	4620      	mov	r0, r4
 8002588:	4971      	ldr	r1, [pc, #452]	@ (8002750 <processGcode+0x214>)
 800258a:	f004 fdf2 	bl	8007172 <strncmp>
 800258e:	b920      	cbnz	r0, 800259a <processGcode+0x5e>
}
 8002590:	b020      	add	sp, #128	@ 0x80
 8002592:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        clearProgram();
 8002596:	f7ff bd5d 	b.w	8002054 <clearProgram>
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 800259a:	220d      	movs	r2, #13
 800259c:	4620      	mov	r0, r4
 800259e:	496d      	ldr	r1, [pc, #436]	@ (8002754 <processGcode+0x218>)
 80025a0:	f004 fde7 	bl	8007172 <strncmp>
 80025a4:	b920      	cbnz	r0, 80025b0 <processGcode+0x74>
}
 80025a6:	b020      	add	sp, #128	@ 0x80
 80025a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        pauseProgram();
 80025ac:	f7ff beb4 	b.w	8002318 <pauseProgram>
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 80025b0:	220c      	movs	r2, #12
 80025b2:	4620      	mov	r0, r4
 80025b4:	4968      	ldr	r1, [pc, #416]	@ (8002758 <processGcode+0x21c>)
 80025b6:	f004 fddc 	bl	8007172 <strncmp>
 80025ba:	b920      	cbnz	r0, 80025c6 <processGcode+0x8a>
}
 80025bc:	b020      	add	sp, #128	@ 0x80
 80025be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runNextLine();
 80025c2:	f7ff be25 	b.w	8002210 <runNextLine>
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 80025c6:	2204      	movs	r2, #4
 80025c8:	4620      	mov	r0, r4
 80025ca:	4964      	ldr	r1, [pc, #400]	@ (800275c <processGcode+0x220>)
 80025cc:	f004 fdd1 	bl	8007172 <strncmp>
 80025d0:	b128      	cbz	r0, 80025de <processGcode+0xa2>
 80025d2:	2204      	movs	r2, #4
 80025d4:	4620      	mov	r0, r4
 80025d6:	4962      	ldr	r1, [pc, #392]	@ (8002760 <processGcode+0x224>)
 80025d8:	f004 fdcb 	bl	8007172 <strncmp>
 80025dc:	b920      	cbnz	r0, 80025e8 <processGcode+0xac>
}
 80025de:	b020      	add	sp, #128	@ 0x80
 80025e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showHelp();
 80025e4:	f7ff bec0 	b.w	8002368 <showHelp>
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 80025e8:	220c      	movs	r2, #12
 80025ea:	4620      	mov	r0, r4
 80025ec:	495d      	ldr	r1, [pc, #372]	@ (8002764 <processGcode+0x228>)
 80025ee:	f004 fdc0 	bl	8007172 <strncmp>
 80025f2:	b920      	cbnz	r0, 80025fe <processGcode+0xc2>
}
 80025f4:	b020      	add	sp, #128	@ 0x80
 80025f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showQueueStatus();
 80025fa:	f7ff bf49 	b.w	8002490 <showQueueStatus>
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80025fe:	2203      	movs	r2, #3
 8002600:	4620      	mov	r0, r4
 8002602:	4959      	ldr	r1, [pc, #356]	@ (8002768 <processGcode+0x22c>)
 8002604:	f004 fdb5 	bl	8007172 <strncmp>
    if (isStoringProgram) {
 8002608:	4b58      	ldr	r3, [pc, #352]	@ (800276c <processGcode+0x230>)
 800260a:	781d      	ldrb	r5, [r3, #0]
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 800260c:	b130      	cbz	r0, 800261c <processGcode+0xe0>
 800260e:	2203      	movs	r2, #3
 8002610:	4620      	mov	r0, r4
 8002612:	4957      	ldr	r1, [pc, #348]	@ (8002770 <processGcode+0x234>)
 8002614:	f004 fdad 	bl	8007172 <strncmp>
 8002618:	2800      	cmp	r0, #0
 800261a:	d17a      	bne.n	8002712 <processGcode+0x1d6>
        if (isStoringProgram) {
 800261c:	2d00      	cmp	r5, #0
 800261e:	d1a1      	bne.n	8002564 <processGcode+0x28>
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 8002620:	2263      	movs	r2, #99	@ 0x63
 8002622:	4621      	mov	r1, r4
 8002624:	a807      	add	r0, sp, #28
 8002626:	f004 fdb6 	bl	8007196 <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 800262a:	2300      	movs	r3, #0
    uint8_t status = gc_execute_line(line_copy);
 800262c:	a807      	add	r0, sp, #28
    line_copy[sizeof(line_copy) - 1] = '\0';
 800262e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    uint8_t status = gc_execute_line(line_copy);
 8002632:	f7ff f895 	bl	8001760 <gc_execute_line>
    if (status == STATUS_OK) {
 8002636:	4605      	mov	r5, r0
 8002638:	2800      	cmp	r0, #0
 800263a:	d164      	bne.n	8002706 <processGcode+0x1ca>
        if (strncmp(command, "M114", 4) == 0) {
 800263c:	2204      	movs	r2, #4
 800263e:	4620      	mov	r0, r4
 8002640:	494c      	ldr	r1, [pc, #304]	@ (8002774 <processGcode+0x238>)
 8002642:	f004 fd96 	bl	8007172 <strncmp>
 8002646:	2800      	cmp	r0, #0
 8002648:	d171      	bne.n	800272e <processGcode+0x1f2>
            float xPos = currentX / (float)STEPS_PER_MM_X;
 800264a:	4b4b      	ldr	r3, [pc, #300]	@ (8002778 <processGcode+0x23c>)
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	f7fe fb45 	bl	8000cdc <__aeabi_i2f>
 8002652:	494a      	ldr	r1, [pc, #296]	@ (800277c <processGcode+0x240>)
 8002654:	f7fe fc4a 	bl	8000eec <__aeabi_fdiv>
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002658:	4b49      	ldr	r3, [pc, #292]	@ (8002780 <processGcode+0x244>)
            float xPos = currentX / (float)STEPS_PER_MM_X;
 800265a:	4606      	mov	r6, r0
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	f7fe fb3d 	bl	8000cdc <__aeabi_i2f>
 8002662:	4946      	ldr	r1, [pc, #280]	@ (800277c <processGcode+0x240>)
 8002664:	f7fe fc42 	bl	8000eec <__aeabi_fdiv>
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002668:	4b46      	ldr	r3, [pc, #280]	@ (8002784 <processGcode+0x248>)
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 800266a:	4680      	mov	r8, r0
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	f7fe fb35 	bl	8000cdc <__aeabi_i2f>
 8002672:	4945      	ldr	r1, [pc, #276]	@ (8002788 <processGcode+0x24c>)
 8002674:	f7fe fc3a 	bl	8000eec <__aeabi_fdiv>
 8002678:	4681      	mov	r9, r0
            int x_int = (int)xPos;
 800267a:	4630      	mov	r0, r6
 800267c:	f7fe fd5e 	bl	800113c <__aeabi_f2iz>
 8002680:	4604      	mov	r4, r0
            int y_int = (int)yPos;
 8002682:	4640      	mov	r0, r8
 8002684:	f7fe fd5a 	bl	800113c <__aeabi_f2iz>
 8002688:	4607      	mov	r7, r0
            int z_int = (int)zPos;
 800268a:	4648      	mov	r0, r9
 800268c:	f7fe fd56 	bl	800113c <__aeabi_f2iz>
 8002690:	4682      	mov	sl, r0
            int z_dec = (int)((zPos - z_int) * 100);
 8002692:	f7fe fb23 	bl	8000cdc <__aeabi_i2f>
 8002696:	4601      	mov	r1, r0
 8002698:	4648      	mov	r0, r9
 800269a:	f7fe fa69 	bl	8000b70 <__aeabi_fsub>
 800269e:	493b      	ldr	r1, [pc, #236]	@ (800278c <processGcode+0x250>)
 80026a0:	f7fe fb70 	bl	8000d84 <__aeabi_fmul>
 80026a4:	f7fe fd4a 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 80026a8:	2800      	cmp	r0, #0
 80026aa:	bfb8      	it	lt
 80026ac:	4240      	neglt	r0, r0
 80026ae:	e9cd a003 	strd	sl, r0, [sp, #12]
            int y_dec = (int)((yPos - y_int) * 100);
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7fe fb12 	bl	8000cdc <__aeabi_i2f>
 80026b8:	4601      	mov	r1, r0
 80026ba:	4640      	mov	r0, r8
 80026bc:	f7fe fa58 	bl	8000b70 <__aeabi_fsub>
 80026c0:	4932      	ldr	r1, [pc, #200]	@ (800278c <processGcode+0x250>)
 80026c2:	f7fe fb5f 	bl	8000d84 <__aeabi_fmul>
 80026c6:	f7fe fd39 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 80026ca:	2800      	cmp	r0, #0
 80026cc:	bfb8      	it	lt
 80026ce:	4240      	neglt	r0, r0
 80026d0:	e9cd 7001 	strd	r7, r0, [sp, #4]
            int x_dec = (int)((xPos - x_int) * 100);
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fe fb01 	bl	8000cdc <__aeabi_i2f>
 80026da:	4601      	mov	r1, r0
 80026dc:	4630      	mov	r0, r6
 80026de:	f7fe fa47 	bl	8000b70 <__aeabi_fsub>
 80026e2:	492a      	ldr	r1, [pc, #168]	@ (800278c <processGcode+0x250>)
 80026e4:	f7fe fb4e 	bl	8000d84 <__aeabi_fmul>
 80026e8:	f7fe fd28 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 80026ec:	2800      	cmp	r0, #0
 80026ee:	bfb8      	it	lt
 80026f0:	4240      	neglt	r0, r0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	4623      	mov	r3, r4
 80026f6:	21c8      	movs	r1, #200	@ 0xc8
 80026f8:	4a25      	ldr	r2, [pc, #148]	@ (8002790 <processGcode+0x254>)
 80026fa:	4826      	ldr	r0, [pc, #152]	@ (8002794 <processGcode+0x258>)
 80026fc:	f004 fc96 	bl	800702c <sniprintf>
            sendUSBText(outputBuffer);
 8002700:	4824      	ldr	r0, [pc, #144]	@ (8002794 <processGcode+0x258>)
 8002702:	f7ff f8bd 	bl	8001880 <sendUSBText>
    report_status_message(status);
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff f83e 	bl	8001788 <report_status_message>
}
 800270c:	b020      	add	sp, #128	@ 0x80
 800270e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isStoringProgram) {
 8002712:	2d00      	cmp	r5, #0
 8002714:	d084      	beq.n	8002620 <processGcode+0xe4>
        if (addLineToProgram(command)) {
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fc66 	bl	8001fe8 <addLineToProgram>
 800271c:	b128      	cbz	r0, 800272a <processGcode+0x1ee>
            sendUSBText("ok\r\n");
 800271e:	481e      	ldr	r0, [pc, #120]	@ (8002798 <processGcode+0x25c>)
}
 8002720:	b020      	add	sp, #128	@ 0x80
 8002722:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            sendUSBText("error: buffer lleno\r\n");
 8002726:	f7ff b8ab 	b.w	8001880 <sendUSBText>
 800272a:	481c      	ldr	r0, [pc, #112]	@ (800279c <processGcode+0x260>)
 800272c:	e7f8      	b.n	8002720 <processGcode+0x1e4>
        } else if (strncmp(command, "M503", 4) == 0) {
 800272e:	2204      	movs	r2, #4
 8002730:	4620      	mov	r0, r4
 8002732:	491b      	ldr	r1, [pc, #108]	@ (80027a0 <processGcode+0x264>)
 8002734:	f004 fd1d 	bl	8007172 <strncmp>
 8002738:	2800      	cmp	r0, #0
 800273a:	d1e4      	bne.n	8002706 <processGcode+0x1ca>
            showConfiguration();
 800273c:	f7ff f970 	bl	8001a20 <showConfiguration>
 8002740:	e7e1      	b.n	8002706 <processGcode+0x1ca>
 8002742:	bf00      	nop
 8002744:	0800b5cc 	.word	0x0800b5cc
 8002748:	0800b5da 	.word	0x0800b5da
 800274c:	0800b5e7 	.word	0x0800b5e7
 8002750:	0800b5f3 	.word	0x0800b5f3
 8002754:	0800b601 	.word	0x0800b601
 8002758:	0800b60f 	.word	0x0800b60f
 800275c:	0800b61c 	.word	0x0800b61c
 8002760:	0800b621 	.word	0x0800b621
 8002764:	0800b626 	.word	0x0800b626
 8002768:	0800b633 	.word	0x0800b633
 800276c:	200003ae 	.word	0x200003ae
 8002770:	0800b637 	.word	0x0800b637
 8002774:	0800b651 	.word	0x0800b651
 8002778:	2000236c 	.word	0x2000236c
 800277c:	429e0000 	.word	0x429e0000
 8002780:	20002368 	.word	0x20002368
 8002784:	20002364 	.word	0x20002364
 8002788:	4575a000 	.word	0x4575a000
 800278c:	42c80000 	.word	0x42c80000
 8002790:	0800b656 	.word	0x0800b656
 8002794:	20002370 	.word	0x20002370
 8002798:	0800aaf8 	.word	0x0800aaf8
 800279c:	0800b63b 	.word	0x0800b63b
 80027a0:	0800b676 	.word	0x0800b676

080027a4 <loop>:
void loop(void) {
 80027a4:	b570      	push	{r4, r5, r6, lr}
    if (usbCommandComplete) {
 80027a6:	4d11      	ldr	r5, [pc, #68]	@ (80027ec <loop+0x48>)
 80027a8:	782b      	ldrb	r3, [r5, #0]
 80027aa:	b173      	cbz	r3, 80027ca <loop+0x26>
        for (int i = 0; i < usbBufferIndex; i++) {
 80027ac:	2200      	movs	r2, #0
 80027ae:	4e10      	ldr	r6, [pc, #64]	@ (80027f0 <loop+0x4c>)
 80027b0:	4910      	ldr	r1, [pc, #64]	@ (80027f4 <loop+0x50>)
 80027b2:	6830      	ldr	r0, [r6, #0]
 80027b4:	4c10      	ldr	r4, [pc, #64]	@ (80027f8 <loop+0x54>)
 80027b6:	4282      	cmp	r2, r0
 80027b8:	db08      	blt.n	80027cc <loop+0x28>
        usbBufferIndex = 0;
 80027ba:	2400      	movs	r4, #0
        memset(usbBuffer, 0, sizeof(usbBuffer));
 80027bc:	2264      	movs	r2, #100	@ 0x64
 80027be:	4621      	mov	r1, r4
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <loop+0x50>)
        usbBufferIndex = 0;
 80027c2:	6034      	str	r4, [r6, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 80027c4:	f004 fccd 	bl	8007162 <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 80027c8:	702c      	strb	r4, [r5, #0]
}
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 80027cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027d0:	3b09      	subs	r3, #9
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b17      	cmp	r3, #23
 80027d6:	d805      	bhi.n	80027e4 <loop+0x40>
 80027d8:	fa24 f303 	lsr.w	r3, r4, r3
 80027dc:	07db      	lsls	r3, r3, #31
 80027de:	d501      	bpl.n	80027e4 <loop+0x40>
        for (int i = 0; i < usbBufferIndex; i++) {
 80027e0:	3201      	adds	r2, #1
 80027e2:	e7e8      	b.n	80027b6 <loop+0x12>
            processGcode(usbBuffer);
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <loop+0x50>)
 80027e6:	f7ff fea9 	bl	800253c <processGcode>
 80027ea:	e7e6      	b.n	80027ba <loop+0x16>
 80027ec:	200022f8 	.word	0x200022f8
 80027f0:	200022fc 	.word	0x200022fc
 80027f4:	20002300 	.word	0x20002300
 80027f8:	00800013 	.word	0x00800013

080027fc <main>:
{
 80027fc:	b500      	push	{lr}
 80027fe:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8002800:	f000 fd76 	bl	80032f0 <HAL_Init>
  SystemClock_Config();
 8002804:	f7ff f846 	bl	8001894 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	2210      	movs	r2, #16
 800280a:	2100      	movs	r1, #0
 800280c:	eb0d 0002 	add.w	r0, sp, r2
 8002810:	f004 fca7 	bl	8007162 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	4b2f      	ldr	r3, [pc, #188]	@ (80028d4 <main+0xd8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002816:	f240 31d9 	movw	r1, #985	@ 0x3d9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 800281c:	482e      	ldr	r0, [pc, #184]	@ (80028d8 <main+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	619a      	str	r2, [r3, #24]
 8002824:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002828:	f002 0220 	and.w	r2, r2, #32
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	f042 0204 	orr.w	r2, r2, #4
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	f002 0204 	and.w	r2, r2, #4
 8002842:	9202      	str	r2, [sp, #8]
 8002844:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	f042 0208 	orr.w	r2, r2, #8
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002850:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	9303      	str	r3, [sp, #12]
 8002858:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 800285a:	f000 febd 	bl	80035d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002864:	481d      	ldr	r0, [pc, #116]	@ (80028dc <main+0xe0>)
 8002866:	f000 feb7 	bl	80035d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	f240 33d9 	movw	r3, #985	@ 0x3d9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	481a      	ldr	r0, [pc, #104]	@ (80028d8 <main+0xdc>)
 8002870:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002872:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f000 fdd3 	bl	8003424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800287e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002882:	4815      	ldr	r0, [pc, #84]	@ (80028d8 <main+0xdc>)
 8002884:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f000 fdca 	bl	8003424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002890:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002894:	4811      	ldr	r0, [pc, #68]	@ (80028dc <main+0xe0>)
 8002896:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002898:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f000 fdc0 	bl	8003424 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 80028a4:	f003 fa64 	bl	8005d70 <MX_USB_DEVICE_Init>
  CDC_TxQueue_Init();
 80028a8:	f003 fae6 	bl	8005e78 <CDC_TxQueue_Init>
  setup();
 80028ac:	f7ff f832 	bl	8001914 <setup>
  HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);  // Encender
 80028b0:	4629      	mov	r1, r5
 80028b2:	4809      	ldr	r0, [pc, #36]	@ (80028d8 <main+0xdc>)
 80028b4:	4632      	mov	r2, r6
 80028b6:	f000 fe8f 	bl	80035d8 <HAL_GPIO_WritePin>
  CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14); 
 80028ba:	210e      	movs	r1, #14
 80028bc:	4808      	ldr	r0, [pc, #32]	@ (80028e0 <main+0xe4>)
 80028be:	f003 fb51 	bl	8005f64 <CDC_Transmit_Queued>
    CDC_TxQueue_Process();
 80028c2:	f003 fb19 	bl	8005ef8 <CDC_TxQueue_Process>
    loop();
 80028c6:	f7ff ff6d 	bl	80027a4 <loop>
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 80028ca:	2032      	movs	r0, #50	@ 0x32
 80028cc:	f000 fd34 	bl	8003338 <HAL_Delay>
  while (1)
 80028d0:	e7f7      	b.n	80028c2 <main+0xc6>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	40010800 	.word	0x40010800
 80028e0:	0800b67b 	.word	0x0800b67b

080028e4 <Error_Handler>:
 80028e4:	b672      	cpsid	i
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <Error_Handler+0x2>

080028e8 <delay_us>:
  * @brief  Función de delay de microsegundos usando DWT
  * @param  us: Cantidad de microsegundos a esperar
  * @retval None
  */
void delay_us(uint32_t us) {
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <delay_us+0x1c>)
 80028ea:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <delay_us+0x20>)
 80028ec:	681b      	ldr	r3, [r3, #0]
    uint32_t start = DWT->CYCCNT;
 80028ee:	4907      	ldr	r1, [pc, #28]	@ (800290c <delay_us+0x24>)
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80028f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80028f4:	4343      	muls	r3, r0
    uint32_t start = DWT->CYCCNT;
 80028f6:	6848      	ldr	r0, [r1, #4]
    while ((DWT->CYCCNT - start) < cycles);
 80028f8:	684a      	ldr	r2, [r1, #4]
 80028fa:	1a12      	subs	r2, r2, r0
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3fb      	bcc.n	80028f8 <delay_us+0x10>
}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	2000000c 	.word	0x2000000c
 8002908:	000f4240 	.word	0x000f4240
 800290c:	e0001000 	.word	0xe0001000

08002910 <calculateStepDelay>:
  * @brief  Calcula el delay entre pasos basado en el feed rate
  * @param  feedRate: Velocidad en mm/min
  * @param  distance_mm: Distancia total del movimiento en mm
  * @retval Delay en microsegundos entre pasos
  */
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002910:	b510      	push	{r4, lr}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002912:	2100      	movs	r1, #0
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002914:	4604      	mov	r4, r0
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002916:	f7fe fbdd 	bl	80010d4 <__aeabi_fcmple>
 800291a:	b9d8      	cbnz	r0, 8002954 <calculateStepDelay+0x44>
    
    // Calcular pasos por segundo para el eje dominante
    // feedRate está en mm/min, convertir a mm/s
    float feedRate_mm_per_sec = feedRate / 60.0;
 800291c:	4620      	mov	r0, r4
 800291e:	4912      	ldr	r1, [pc, #72]	@ (8002968 <calculateStepDelay+0x58>)
 8002920:	f7fe fae4 	bl	8000eec <__aeabi_fdiv>
    
    // Usar el eje con mayor resolución (Z) para el cálculo más conservador
    float steps_per_mm = STEPS_PER_MM_Z; // El más alto: 3930 steps/mm
    
    // Calcular pasos por segundo
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002924:	4911      	ldr	r1, [pc, #68]	@ (800296c <calculateStepDelay+0x5c>)
 8002926:	f7fe fa2d 	bl	8000d84 <__aeabi_fmul>
    
    // Calcular delay en microsegundos entre pasos
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 800292a:	2100      	movs	r1, #0
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 800292c:	4604      	mov	r4, r0
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 800292e:	f7fe fbd1 	bl	80010d4 <__aeabi_fcmple>
 8002932:	b978      	cbnz	r0, 8002954 <calculateStepDelay+0x44>
    
    uint32_t delay_us = (uint32_t)(1000000.0 / steps_per_sec);
 8002934:	4620      	mov	r0, r4
 8002936:	f7fd fd77 	bl	8000428 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	a108      	add	r1, pc, #32	@ (adr r1, 8002960 <calculateStepDelay+0x50>)
 8002940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002944:	f7fd fef2 	bl	800072c <__aeabi_ddiv>
 8002948:	f7fe f89e 	bl	8000a88 <__aeabi_d2uiz>
    
    // Limitar delay mínimo para evitar problemas de timing
    if (delay_us < 200) delay_us = 200; // Mínimo 200us = 5000 pasos/segundo máximo
 800294c:	28c8      	cmp	r0, #200	@ 0xc8
 800294e:	bf38      	it	cc
 8002950:	20c8      	movcc	r0, #200	@ 0xc8
    
    return delay_us;
}
 8002952:	bd10      	pop	{r4, pc}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002954:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002958:	e7fb      	b.n	8002952 <calculateStepDelay+0x42>
 800295a:	bf00      	nop
 800295c:	f3af 8000 	nop.w
 8002960:	00000000 	.word	0x00000000
 8002964:	412e8480 	.word	0x412e8480
 8002968:	42700000 	.word	0x42700000
 800296c:	4575a000 	.word	0x4575a000

08002970 <X_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje X
  * @retval None
  */
void X_stepOnce(void) {
 8002970:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8002972:	4c08      	ldr	r4, [pc, #32]	@ (8002994 <X_stepOnce+0x24>)
 8002974:	2201      	movs	r2, #1
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	4620      	mov	r0, r4
 800297a:	f000 fe2d 	bl	80035d8 <HAL_GPIO_WritePin>
    delay_us(2);
 800297e:	2002      	movs	r0, #2
 8002980:	f7ff ffb2 	bl	80028e8 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002984:	4620      	mov	r0, r4
}
 8002986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2140      	movs	r1, #64	@ 0x40
 800298e:	f000 be23 	b.w	80035d8 <HAL_GPIO_WritePin>
 8002992:	bf00      	nop
 8002994:	40010c00 	.word	0x40010c00

08002998 <Y_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Y
  * @retval None
  */
void Y_stepOnce(void) {
 8002998:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 800299a:	4c09      	ldr	r4, [pc, #36]	@ (80029c0 <Y_stepOnce+0x28>)
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029a2:	4620      	mov	r0, r4
 80029a4:	f000 fe18 	bl	80035d8 <HAL_GPIO_WritePin>
    delay_us(2);
 80029a8:	2002      	movs	r0, #2
 80029aa:	f7ff ff9d 	bl	80028e8 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 80029ae:	4620      	mov	r0, r4
}
 80029b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 80029b4:	2200      	movs	r2, #0
 80029b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029ba:	f000 be0d 	b.w	80035d8 <HAL_GPIO_WritePin>
 80029be:	bf00      	nop
 80029c0:	40010c00 	.word	0x40010c00

080029c4 <Z_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Z
  * @retval None
  */
void Z_stepOnce(void) {
 80029c4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 80029c6:	4c09      	ldr	r4, [pc, #36]	@ (80029ec <Z_stepOnce+0x28>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 fe02 	bl	80035d8 <HAL_GPIO_WritePin>
    delay_us(2);
 80029d4:	2002      	movs	r0, #2
 80029d6:	f7ff ff87 	bl	80028e8 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 80029da:	4620      	mov	r0, r4
}
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029e6:	f000 bdf7 	b.w	80035d8 <HAL_GPIO_WritePin>
 80029ea:	bf00      	nop
 80029ec:	40010800 	.word	0x40010800

080029f0 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 80029f0:	b510      	push	{r4, lr}
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 80029f2:	4c0a      	ldr	r4, [pc, #40]	@ (8002a1c <enableSteppers+0x2c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	4620      	mov	r0, r4
 80029f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029fc:	f000 fdec 	bl	80035d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 8002a00:	4620      	mov	r0, r4
 8002a02:	2200      	movs	r2, #0
 8002a04:	2110      	movs	r1, #16
 8002a06:	f000 fde7 	bl	80035d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
}
 8002a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a14:	4802      	ldr	r0, [pc, #8]	@ (8002a20 <enableSteppers+0x30>)
 8002a16:	f000 bddf 	b.w	80035d8 <HAL_GPIO_WritePin>
 8002a1a:	bf00      	nop
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40010800 	.word	0x40010800

08002a24 <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 8002a24:	b510      	push	{r4, lr}
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 8002a26:	4c0a      	ldr	r4, [pc, #40]	@ (8002a50 <disableSteppers+0x2c>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a30:	f000 fdd2 	bl	80035d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 8002a34:	4620      	mov	r0, r4
 8002a36:	2201      	movs	r2, #1
 8002a38:	2110      	movs	r1, #16
 8002a3a:	f000 fdcd 	bl	80035d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
}
 8002a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a48:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <disableSteppers+0x30>)
 8002a4a:	f000 bdc5 	b.w	80035d8 <HAL_GPIO_WritePin>
 8002a4e:	bf00      	nop
 8002a50:	40010c00 	.word	0x40010c00
 8002a54:	40010800 	.word	0x40010800

08002a58 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5c:	b097      	sub	sp, #92	@ 0x5c
 8002a5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002a60:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8002a64:	460d      	mov	r5, r1
 8002a66:	9311      	str	r3, [sp, #68]	@ 0x44
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002a68:	4baf      	ldr	r3, [pc, #700]	@ (8002d28 <moveAxesWithFeedRate+0x2d0>)
 8002a6a:	4601      	mov	r1, r0
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002a6c:	4606      	mov	r6, r0
 8002a6e:	4614      	mov	r4, r2
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002a70:	f8d3 9000 	ldr.w	r9, [r3]
 8002a74:	f7fe fb4c 	bl	8001110 <__aeabi_fcmpun>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	f040 81c9 	bne.w	8002e10 <moveAxesWithFeedRate+0x3b8>
 8002a7e:	49ab      	ldr	r1, [pc, #684]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002a80:	4630      	mov	r0, r6
 8002a82:	f7fe f97f 	bl	8000d84 <__aeabi_fmul>
 8002a86:	f7fe fb59 	bl	800113c <__aeabi_f2iz>
 8002a8a:	900c      	str	r0, [sp, #48]	@ 0x30
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8002a8c:	4ba8      	ldr	r3, [pc, #672]	@ (8002d30 <moveAxesWithFeedRate+0x2d8>)
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4628      	mov	r0, r5
 8002a92:	f8d3 8000 	ldr.w	r8, [r3]
 8002a96:	f7fe fb3b 	bl	8001110 <__aeabi_fcmpun>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	f040 81bb 	bne.w	8002e16 <moveAxesWithFeedRate+0x3be>
 8002aa0:	49a2      	ldr	r1, [pc, #648]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f7fe f96e 	bl	8000d84 <__aeabi_fmul>
 8002aa8:	f7fe fb48 	bl	800113c <__aeabi_f2iz>
 8002aac:	900d      	str	r0, [sp, #52]	@ 0x34
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 8002aae:	4ba1      	ldr	r3, [pc, #644]	@ (8002d34 <moveAxesWithFeedRate+0x2dc>)
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f8d3 b000 	ldr.w	fp, [r3]
 8002ab8:	f7fe fb2a 	bl	8001110 <__aeabi_fcmpun>
 8002abc:	2800      	cmp	r0, #0
 8002abe:	f040 81ad 	bne.w	8002e1c <moveAxesWithFeedRate+0x3c4>
 8002ac2:	499d      	ldr	r1, [pc, #628]	@ (8002d38 <moveAxesWithFeedRate+0x2e0>)
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7fe f95d 	bl	8000d84 <__aeabi_fmul>
 8002aca:	f7fe fb37 	bl	800113c <__aeabi_f2iz>
 8002ace:	900e      	str	r0, [sp, #56]	@ 0x38
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 8002ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    int32_t deltaY = targetY - currentY;
    int32_t deltaZ = targetZ - currentZ;
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002ad2:	4631      	mov	r1, r6
    int32_t deltaX = targetX - currentX;
 8002ad4:	eba3 0a09 	sub.w	sl, r3, r9
    int32_t deltaY = targetY - currentY;
 8002ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002ada:	4630      	mov	r0, r6
    int32_t deltaY = targetY - currentY;
 8002adc:	eba3 0708 	sub.w	r7, r3, r8
    int32_t deltaZ = targetZ - currentZ;
 8002ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ae2:	eba3 030b 	sub.w	r3, r3, fp
 8002ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002ae8:	f7fe fb12 	bl	8001110 <__aeabi_fcmpun>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	f040 8198 	bne.w	8002e22 <moveAxesWithFeedRate+0x3ca>
 8002af2:	4648      	mov	r0, r9
 8002af4:	f7fe f8f2 	bl	8000cdc <__aeabi_i2f>
 8002af8:	498c      	ldr	r1, [pc, #560]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002afa:	f7fe f9f7 	bl	8000eec <__aeabi_fdiv>
 8002afe:	4601      	mov	r1, r0
 8002b00:	4630      	mov	r0, r6
 8002b02:	f7fe f835 	bl	8000b70 <__aeabi_fsub>
 8002b06:	4681      	mov	r9, r0
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7fe fb00 	bl	8001110 <__aeabi_fcmpun>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	f040 8189 	bne.w	8002e28 <moveAxesWithFeedRate+0x3d0>
 8002b16:	4640      	mov	r0, r8
 8002b18:	f7fe f8e0 	bl	8000cdc <__aeabi_i2f>
 8002b1c:	4983      	ldr	r1, [pc, #524]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002b1e:	f7fe f9e5 	bl	8000eec <__aeabi_fdiv>
 8002b22:	4601      	mov	r1, r0
 8002b24:	4628      	mov	r0, r5
 8002b26:	f7fe f823 	bl	8000b70 <__aeabi_fsub>
 8002b2a:	4680      	mov	r8, r0
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7fe faee 	bl	8001110 <__aeabi_fcmpun>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	f040 817a 	bne.w	8002e2e <moveAxesWithFeedRate+0x3d6>
 8002b3a:	4658      	mov	r0, fp
 8002b3c:	f7fe f8ce 	bl	8000cdc <__aeabi_i2f>
 8002b40:	497d      	ldr	r1, [pc, #500]	@ (8002d38 <moveAxesWithFeedRate+0x2e0>)
 8002b42:	f7fe f9d3 	bl	8000eec <__aeabi_fdiv>
 8002b46:	4601      	mov	r1, r0
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f7fe f811 	bl	8000b70 <__aeabi_fsub>
 8002b4e:	4683      	mov	fp, r0
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002b50:	4649      	mov	r1, r9
 8002b52:	4648      	mov	r0, r9
 8002b54:	f7fe f916 	bl	8000d84 <__aeabi_fmul>
 8002b58:	4641      	mov	r1, r8
 8002b5a:	4681      	mov	r9, r0
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	f7fe f911 	bl	8000d84 <__aeabi_fmul>
 8002b62:	4601      	mov	r1, r0
 8002b64:	4648      	mov	r0, r9
 8002b66:	f7fe f805 	bl	8000b74 <__addsf3>
 8002b6a:	4659      	mov	r1, fp
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	4658      	mov	r0, fp
 8002b70:	f7fe f908 	bl	8000d84 <__aeabi_fmul>
 8002b74:	4601      	mov	r1, r0
 8002b76:	4640      	mov	r0, r8
 8002b78:	f7fd fffc 	bl	8000b74 <__addsf3>
 8002b7c:	f7fd fc54 	bl	8000428 <__aeabi_f2d>
 8002b80:	f006 fb88 	bl	8009294 <sqrt>
 8002b84:	f7fd ffa0 	bl	8000ac8 <__aeabi_d2f>
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002b88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002b8a:	4681      	mov	r9, r0
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002b8c:	b113      	cbz	r3, 8002b94 <moveAxesWithFeedRate+0x13c>
 8002b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d3c <moveAxesWithFeedRate+0x2e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	9310      	str	r3, [sp, #64]	@ 0x40
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 8002b94:	4b6a      	ldr	r3, [pc, #424]	@ (8002d40 <moveAxesWithFeedRate+0x2e8>)
 8002b96:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8002b98:	f8d3 8000 	ldr.w	r8, [r3]
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	f7fe fa8f 	bl	80010c0 <__aeabi_fcmplt>
 8002ba2:	b908      	cbnz	r0, 8002ba8 <moveAxesWithFeedRate+0x150>
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002ba4:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
    bool dirX = (deltaX >= 0);
    bool dirY = (deltaY >= 0);
    bool dirZ = (deltaZ >= 0);
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002ba8:	f1ba 0f00 	cmp.w	sl, #0
 8002bac:	d006      	beq.n	8002bbc <moveAxesWithFeedRate+0x164>
 8002bae:	ea6f 020a 	mvn.w	r2, sl
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	4863      	ldr	r0, [pc, #396]	@ (8002d44 <moveAxesWithFeedRate+0x2ec>)
 8002bb6:	0fd2      	lsrs	r2, r2, #31
 8002bb8:	f000 fd0e 	bl	80035d8 <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002bbc:	b12f      	cbz	r7, 8002bca <moveAxesWithFeedRate+0x172>
 8002bbe:	43fa      	mvns	r2, r7
 8002bc0:	2108      	movs	r1, #8
 8002bc2:	4860      	ldr	r0, [pc, #384]	@ (8002d44 <moveAxesWithFeedRate+0x2ec>)
 8002bc4:	0fd2      	lsrs	r2, r2, #31
 8002bc6:	f000 fd07 	bl	80035d8 <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002bcc:	b12b      	cbz	r3, 8002bda <moveAxesWithFeedRate+0x182>
 8002bce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bd2:	485d      	ldr	r0, [pc, #372]	@ (8002d48 <moveAxesWithFeedRate+0x2f0>)
 8002bd4:	0fda      	lsrs	r2, r3, #31
 8002bd6:	f000 fcff 	bl	80035d8 <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = abs(deltaX);
    deltaY = abs(deltaY);
    deltaZ = abs(deltaZ);
 8002bda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    deltaX = abs(deltaX);
 8002bdc:	f1ba 0f00 	cmp.w	sl, #0
 8002be0:	bfb8      	it	lt
 8002be2:	f1ca 0a00 	rsblt	sl, sl, #0
    deltaY = abs(deltaY);
 8002be6:	2f00      	cmp	r7, #0
 8002be8:	bfb8      	it	lt
 8002bea:	427f      	neglt	r7, r7
    deltaZ = abs(deltaZ);
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bfb8      	it	lt
 8002bf0:	425b      	neglt	r3, r3
    
    // Calcular delay basado en feed rate
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	4640      	mov	r0, r8
    deltaZ = abs(deltaZ);
 8002bf6:	930f      	str	r3, [sp, #60]	@ 0x3c
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002bf8:	f7ff fe8a 	bl	8002910 <calculateStepDelay>
    
    // Mostrar información del movimiento con validación de valores
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 8002bfc:	4631      	mov	r1, r6
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002bfe:	9010      	str	r0, [sp, #64]	@ 0x40
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 8002c00:	4630      	mov	r0, r6
 8002c02:	f7fe fa85 	bl	8001110 <__aeabi_fcmpun>
 8002c06:	b138      	cbz	r0, 8002c18 <moveAxesWithFeedRate+0x1c0>
 8002c08:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <moveAxesWithFeedRate+0x2d0>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f7fe f866 	bl	8000cdc <__aeabi_i2f>
 8002c10:	4946      	ldr	r1, [pc, #280]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002c12:	f7fe f96b 	bl	8000eec <__aeabi_fdiv>
 8002c16:	4606      	mov	r6, r0
    float display_y = !isnan(y) ? y : (currentY / (float)STEPS_PER_MM_Y);
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f7fe fa78 	bl	8001110 <__aeabi_fcmpun>
 8002c20:	b138      	cbz	r0, 8002c32 <moveAxesWithFeedRate+0x1da>
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <moveAxesWithFeedRate+0x2d8>)
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	f7fe f859 	bl	8000cdc <__aeabi_i2f>
 8002c2a:	4940      	ldr	r1, [pc, #256]	@ (8002d2c <moveAxesWithFeedRate+0x2d4>)
 8002c2c:	f7fe f95e 	bl	8000eec <__aeabi_fdiv>
 8002c30:	4605      	mov	r5, r0
    float display_z = !isnan(z) ? z : (currentZ / (float)STEPS_PER_MM_Z);
 8002c32:	4621      	mov	r1, r4
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7fe fa6b 	bl	8001110 <__aeabi_fcmpun>
 8002c3a:	b138      	cbz	r0, 8002c4c <moveAxesWithFeedRate+0x1f4>
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <moveAxesWithFeedRate+0x2dc>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f7fe f84c 	bl	8000cdc <__aeabi_i2f>
 8002c44:	493c      	ldr	r1, [pc, #240]	@ (8002d38 <moveAxesWithFeedRate+0x2e0>)
 8002c46:	f7fe f951 	bl	8000eec <__aeabi_fdiv>
 8002c4a:	4604      	mov	r4, r0
    
    // Convertir floats a enteros para evitar problemas de printf con floats
    int x_int = (int)display_x;
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f7fe fa75 	bl	800113c <__aeabi_f2iz>
 8002c52:	9012      	str	r0, [sp, #72]	@ 0x48
    int x_dec = (int)((display_x - x_int) * 100);
 8002c54:	f7fe f842 	bl	8000cdc <__aeabi_i2f>
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	f7fd ff88 	bl	8000b70 <__aeabi_fsub>
 8002c60:	493a      	ldr	r1, [pc, #232]	@ (8002d4c <moveAxesWithFeedRate+0x2f4>)
 8002c62:	f7fe f88f 	bl	8000d84 <__aeabi_fmul>
 8002c66:	f7fe fa69 	bl	800113c <__aeabi_f2iz>
 8002c6a:	4683      	mov	fp, r0
    int y_int = (int)display_y;
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f7fe fa65 	bl	800113c <__aeabi_f2iz>
 8002c72:	9013      	str	r0, [sp, #76]	@ 0x4c
    int y_dec = (int)((display_y - y_int) * 100);
 8002c74:	f7fe f832 	bl	8000cdc <__aeabi_i2f>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7fd ff78 	bl	8000b70 <__aeabi_fsub>
 8002c80:	4932      	ldr	r1, [pc, #200]	@ (8002d4c <moveAxesWithFeedRate+0x2f4>)
 8002c82:	f7fe f87f 	bl	8000d84 <__aeabi_fmul>
 8002c86:	f7fe fa59 	bl	800113c <__aeabi_f2iz>
 8002c8a:	4605      	mov	r5, r0
    int z_int = (int)display_z;
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f7fe fa55 	bl	800113c <__aeabi_f2iz>
 8002c92:	9015      	str	r0, [sp, #84]	@ 0x54
    int z_dec = (int)((display_z - z_int) * 100);
 8002c94:	f7fe f822 	bl	8000cdc <__aeabi_i2f>
 8002c98:	4601      	mov	r1, r0
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd ff68 	bl	8000b70 <__aeabi_fsub>
 8002ca0:	492a      	ldr	r1, [pc, #168]	@ (8002d4c <moveAxesWithFeedRate+0x2f4>)
 8002ca2:	f7fe f86f 	bl	8000d84 <__aeabi_fmul>
 8002ca6:	f7fe fa49 	bl	800113c <__aeabi_f2iz>
 8002caa:	4604      	mov	r4, r0
    int f_int = (int)effective_feedrate;
 8002cac:	4640      	mov	r0, r8
 8002cae:	f7fe fa45 	bl	800113c <__aeabi_f2iz>
 8002cb2:	9014      	str	r0, [sp, #80]	@ 0x50
    int f_dec = (int)((effective_feedrate - f_int) * 10);
 8002cb4:	f7fe f812 	bl	8000cdc <__aeabi_i2f>
 8002cb8:	4601      	mov	r1, r0
 8002cba:	4640      	mov	r0, r8
 8002cbc:	f7fd ff58 	bl	8000b70 <__aeabi_fsub>
 8002cc0:	4923      	ldr	r1, [pc, #140]	@ (8002d50 <moveAxesWithFeedRate+0x2f8>)
 8002cc2:	f7fe f85f 	bl	8000d84 <__aeabi_fmul>
 8002cc6:	f7fe fa39 	bl	800113c <__aeabi_f2iz>
 8002cca:	4606      	mov	r6, r0
    int d_int = (int)total_distance;
 8002ccc:	4648      	mov	r0, r9
 8002cce:	f7fe fa35 	bl	800113c <__aeabi_f2iz>
 8002cd2:	4680      	mov	r8, r0
    int d_dec = (int)((total_distance - d_int) * 100);
 8002cd4:	f7fe f802 	bl	8000cdc <__aeabi_i2f>
 8002cd8:	4601      	mov	r1, r0
 8002cda:	4648      	mov	r0, r9
 8002cdc:	f7fd ff48 	bl	8000b70 <__aeabi_fsub>
 8002ce0:	491a      	ldr	r1, [pc, #104]	@ (8002d4c <moveAxesWithFeedRate+0x2f4>)
 8002ce2:	f7fe f84f 	bl	8000d84 <__aeabi_fmul>
 8002ce6:	f7fe fa29 	bl	800113c <__aeabi_f2iz>

    snprintf(outputBuffer, OUTPUT_BUFFER_SIZE, "%s: X=%d.%02d Y=%d.%02d Z=%d.%02d F=%d.%d D=%d.%02dmm T=%lduS\r\n", 
 8002cea:	2800      	cmp	r0, #0
 8002cec:	bfb8      	it	lt
 8002cee:	4240      	neglt	r0, r0
 8002cf0:	2e00      	cmp	r6, #0
 8002cf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002cf4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002cf6:	bfb8      	it	lt
 8002cf8:	4276      	neglt	r6, r6
 8002cfa:	2c00      	cmp	r4, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	4264      	neglt	r4, r4
 8002d00:	e9cd 8008 	strd	r8, r0, [sp, #32]
 8002d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d06:	9206      	str	r2, [sp, #24]
 8002d08:	9607      	str	r6, [sp, #28]
 8002d0a:	9405      	str	r4, [sp, #20]
 8002d0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	9304      	str	r3, [sp, #16]
 8002d12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002d14:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
 8002d1c:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002d24:	e016      	b.n	8002d54 <moveAxesWithFeedRate+0x2fc>
 8002d26:	bf00      	nop
 8002d28:	2000236c 	.word	0x2000236c
 8002d2c:	429e0000 	.word	0x429e0000
 8002d30:	20002368 	.word	0x20002368
 8002d34:	20002364 	.word	0x20002364
 8002d38:	4575a000 	.word	0x4575a000
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	20000000 	.word	0x20000000
 8002d44:	40010c00 	.word	0x40010c00
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	42c80000 	.word	0x42c80000
 8002d50:	41200000 	.word	0x41200000
 8002d54:	4a37      	ldr	r2, [pc, #220]	@ (8002e34 <moveAxesWithFeedRate+0x3dc>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <moveAxesWithFeedRate+0x3e0>)
 8002d5a:	bfb8      	it	lt
 8002d5c:	426d      	neglt	r5, r5
 8002d5e:	4837      	ldr	r0, [pc, #220]	@ (8002e3c <moveAxesWithFeedRate+0x3e4>)
 8002d60:	2900      	cmp	r1, #0
 8002d62:	bf08      	it	eq
 8002d64:	4613      	moveq	r3, r2
 8002d66:	9503      	str	r5, [sp, #12]
 8002d68:	21c8      	movs	r1, #200	@ 0xc8
 8002d6a:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <moveAxesWithFeedRate+0x3e8>)
 8002d6c:	f004 f95e 	bl	800702c <sniprintf>
           y_int, abs(y_dec), 
           z_int, abs(z_dec),
           f_int, abs(f_dec), 
           d_int, abs(d_dec), 
           (unsigned long)step_delay);
    sendUSBText(outputBuffer);
 8002d70:	4832      	ldr	r0, [pc, #200]	@ (8002e3c <moveAxesWithFeedRate+0x3e4>)
 8002d72:	f7fe fd85 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, OUTPUT_BUFFER_SIZE);
 8002d76:	22c8      	movs	r2, #200	@ 0xc8
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4830      	ldr	r0, [pc, #192]	@ (8002e3c <moveAxesWithFeedRate+0x3e4>)
 8002d7c:	f004 f9f1 	bl	8007162 <memset>
    
    // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
    if (deltaY > maxSteps) maxSteps = deltaY;
 8002d80:	45ba      	cmp	sl, r7
 8002d82:	46d1      	mov	r9, sl
 8002d84:	bfb8      	it	lt
 8002d86:	46b9      	movlt	r9, r7
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 8002d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002d8a:	4599      	cmp	r9, r3
 8002d8c:	bfb8      	it	lt
 8002d8e:	4699      	movlt	r9, r3
    
    if (maxSteps == 0) return; // No hay movimiento
 8002d90:	f1b9 0f00 	cmp.w	r9, #0
 8002d94:	d039      	beq.n	8002e0a <moveAxesWithFeedRate+0x3b2>
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 8002d96:	ea4f 0b69 	mov.w	fp, r9, asr #1
    int32_t errorY = maxSteps / 2;
    int32_t errorZ = maxSteps / 2;
 8002d9a:	465d      	mov	r5, fp
    int32_t errorY = maxSteps / 2;
 8002d9c:	465c      	mov	r4, fp
    
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 8002d9e:	2600      	movs	r6, #0
        bool stepX = false, stepY = false, stepZ = false;
        
        // Algoritmo de Bresenham para X
        errorX += deltaX;
 8002da0:	44d3      	add	fp, sl
        if (errorX >= maxSteps) {
 8002da2:	45d9      	cmp	r9, fp
            errorX -= maxSteps;
            stepX = true;
 8002da4:	bfd4      	ite	le
 8002da6:	2201      	movle	r2, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002da8:	2200      	movgt	r2, #0
            errorY -= maxSteps;
            stepY = true;
        }
        
        // Algoritmo de Bresenham para Z
        errorZ += deltaZ;
 8002daa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
        errorY += deltaY;
 8002dac:	443c      	add	r4, r7
        errorZ += deltaZ;
 8002dae:	440d      	add	r5, r1
            errorX -= maxSteps;
 8002db0:	bfd8      	it	le
 8002db2:	ebab 0b09 	suble.w	fp, fp, r9
        if (errorY >= maxSteps) {
 8002db6:	45a1      	cmp	r9, r4
            stepY = true;
 8002db8:	bfd6      	itet	le
 8002dba:	2301      	movle	r3, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002dbc:	2300      	movgt	r3, #0
            errorY -= maxSteps;
 8002dbe:	eba4 0409 	suble.w	r4, r4, r9
        if (errorZ >= maxSteps) {
 8002dc2:	45a9      	cmp	r9, r5
            errorZ -= maxSteps;
            stepZ = true;
 8002dc4:	bfd6      	itet	le
 8002dc6:	f04f 0801 	movle.w	r8, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002dca:	f04f 0800 	movgt.w	r8, #0
            errorZ -= maxSteps;
 8002dce:	eba5 0509 	suble.w	r5, r5, r9
        }
        
        // Ejecutar pasos simultáneamente
        if (stepX) X_stepOnce();
 8002dd2:	b11a      	cbz	r2, 8002ddc <moveAxesWithFeedRate+0x384>
 8002dd4:	9311      	str	r3, [sp, #68]	@ 0x44
 8002dd6:	f7ff fdcb 	bl	8002970 <X_stepOnce>
 8002dda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        if (stepY) Y_stepOnce();
 8002ddc:	b10b      	cbz	r3, 8002de2 <moveAxesWithFeedRate+0x38a>
 8002dde:	f7ff fddb 	bl	8002998 <Y_stepOnce>
        if (stepZ) Z_stepOnce();
 8002de2:	f1b8 0f00 	cmp.w	r8, #0
 8002de6:	d001      	beq.n	8002dec <moveAxesWithFeedRate+0x394>
 8002de8:	f7ff fdec 	bl	80029c4 <Z_stepOnce>
        
        // Delay controlado por feed rate
        delay_us(step_delay);
 8002dec:	9810      	ldr	r0, [sp, #64]	@ 0x40
    for (int32_t step = 0; step < maxSteps; step++) {
 8002dee:	3601      	adds	r6, #1
        delay_us(step_delay);
 8002df0:	f7ff fd7a 	bl	80028e8 <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 8002df4:	45b1      	cmp	r9, r6
 8002df6:	d1d3      	bne.n	8002da0 <moveAxesWithFeedRate+0x348>
    }
    
    
    // Actualizar posiciones actuales
    currentX = targetX;
 8002df8:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <moveAxesWithFeedRate+0x3ec>)
 8002dfa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002dfc:	601a      	str	r2, [r3, #0]
    currentY = targetY;
 8002dfe:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <moveAxesWithFeedRate+0x3f0>)
 8002e00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002e02:	601a      	str	r2, [r3, #0]
    currentZ = targetZ;
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <moveAxesWithFeedRate+0x3f4>)
 8002e06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002e08:	601a      	str	r2, [r3, #0]
}
 8002e0a:	b017      	add	sp, #92	@ 0x5c
 8002e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002e10:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8002e14:	e63a      	b.n	8002a8c <moveAxesWithFeedRate+0x34>
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8002e16:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8002e1a:	e648      	b.n	8002aae <moveAxesWithFeedRate+0x56>
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 8002e1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8002e20:	e656      	b.n	8002ad0 <moveAxesWithFeedRate+0x78>
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002e22:	f04f 0900 	mov.w	r9, #0
 8002e26:	e66f      	b.n	8002b08 <moveAxesWithFeedRate+0xb0>
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8002e28:	f04f 0800 	mov.w	r8, #0
 8002e2c:	e67e      	b.n	8002b2c <moveAxesWithFeedRate+0xd4>
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	e68d      	b.n	8002b50 <moveAxesWithFeedRate+0xf8>
 8002e34:	0800b693 	.word	0x0800b693
 8002e38:	0800b68a 	.word	0x0800b68a
 8002e3c:	20002370 	.word	0x20002370
 8002e40:	0800b69d 	.word	0x0800b69d
 8002e44:	2000236c 	.word	0x2000236c
 8002e48:	20002368 	.word	0x20002368
 8002e4c:	20002364 	.word	0x20002364

08002e50 <arc_move_r>:
  * @param  x_end, y_end: Coordenadas finales del arco en mm
  * @param  r: Radio del arco en mm
  * @param  clockwise: Dirección del arco (1 = horario, 0 = antihorario)
  * @retval None
  */
void arc_move_r(float x_end, float y_end, float r, int clockwise) {
 8002e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e54:	b08b      	sub	sp, #44	@ 0x2c
 8002e56:	9308      	str	r3, [sp, #32]
    float x0 = currentX;
 8002e58:	4bb3      	ldr	r3, [pc, #716]	@ (8003128 <arc_move_r+0x2d8>)
void arc_move_r(float x_end, float y_end, float r, int clockwise) {
 8002e5a:	4680      	mov	r8, r0
    float x0 = currentX;
 8002e5c:	6818      	ldr	r0, [r3, #0]
void arc_move_r(float x_end, float y_end, float r, int clockwise) {
 8002e5e:	4616      	mov	r6, r2
 8002e60:	460f      	mov	r7, r1
    float x0 = currentX;
 8002e62:	f7fd ff3b 	bl	8000cdc <__aeabi_i2f>
    float y0 = currentY;
 8002e66:	4bb1      	ldr	r3, [pc, #708]	@ (800312c <arc_move_r+0x2dc>)
    float x0 = currentX;
 8002e68:	4605      	mov	r5, r0
    float y0 = currentY;
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f7fd ff36 	bl	8000cdc <__aeabi_i2f>
    float x1 = x_end * STEPS_PER_MM_X;
 8002e70:	49af      	ldr	r1, [pc, #700]	@ (8003130 <arc_move_r+0x2e0>)
    float y0 = currentY;
 8002e72:	4604      	mov	r4, r0
    float x1 = x_end * STEPS_PER_MM_X;
 8002e74:	4640      	mov	r0, r8
 8002e76:	f7fd ff85 	bl	8000d84 <__aeabi_fmul>
    float y1 = y_end * STEPS_PER_MM_Y;
 8002e7a:	49ad      	ldr	r1, [pc, #692]	@ (8003130 <arc_move_r+0x2e0>)
    float x1 = x_end * STEPS_PER_MM_X;
 8002e7c:	9004      	str	r0, [sp, #16]
    float y1 = y_end * STEPS_PER_MM_Y;
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f7fd ff80 	bl	8000d84 <__aeabi_fmul>
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8002e84:	49aa      	ldr	r1, [pc, #680]	@ (8003130 <arc_move_r+0x2e0>)
    float y1 = y_end * STEPS_PER_MM_Y;
 8002e86:	9006      	str	r0, [sp, #24]
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f7fd ff7b 	bl	8000d84 <__aeabi_fmul>

    float dx = x1 - x0;
 8002e8e:	4629      	mov	r1, r5
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8002e90:	9003      	str	r0, [sp, #12]
    float dx = x1 - x0;
 8002e92:	9804      	ldr	r0, [sp, #16]
 8002e94:	f7fd fe6c 	bl	8000b70 <__aeabi_fsub>
    float dy = y1 - y0;
 8002e98:	4621      	mov	r1, r4
    float dx = x1 - x0;
 8002e9a:	4606      	mov	r6, r0
    float dy = y1 - y0;
 8002e9c:	9806      	ldr	r0, [sp, #24]
 8002e9e:	f7fd fe67 	bl	8000b70 <__aeabi_fsub>
    float d = sqrt(dx * dx + dy * dy);
 8002ea2:	4631      	mov	r1, r6
    float dy = y1 - y0;
 8002ea4:	4683      	mov	fp, r0
    float d = sqrt(dx * dx + dy * dy);
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f7fd ff6c 	bl	8000d84 <__aeabi_fmul>
 8002eac:	4659      	mov	r1, fp
 8002eae:	4607      	mov	r7, r0
 8002eb0:	4658      	mov	r0, fp
 8002eb2:	f7fd ff67 	bl	8000d84 <__aeabi_fmul>
 8002eb6:	4601      	mov	r1, r0
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7fd fe5b 	bl	8000b74 <__addsf3>
 8002ebe:	f7fd fab3 	bl	8000428 <__aeabi_f2d>
 8002ec2:	f006 f9e7 	bl	8009294 <sqrt>
 8002ec6:	f7fd fdff 	bl	8000ac8 <__aeabi_d2f>
 8002eca:	4607      	mov	r7, r0

    if (d > 2 * fabs(r)) {
 8002ecc:	f7fd faac 	bl	8000428 <__aeabi_f2d>
 8002ed0:	9b03      	ldr	r3, [sp, #12]
 8002ed2:	4680      	mov	r8, r0
 8002ed4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8002ed8:	4689      	mov	r9, r1
 8002eda:	f7fd faa5 	bl	8000428 <__aeabi_f2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	f7fd f943 	bl	800016c <__adddf3>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4640      	mov	r0, r8
 8002eec:	4649      	mov	r1, r9
 8002eee:	f7fd fd83 	bl	80009f8 <__aeabi_dcmpgt>
 8002ef2:	b128      	cbz	r0, 8002f00 <arc_move_r+0xb0>
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 8002ef4:	488f      	ldr	r0, [pc, #572]	@ (8003134 <arc_move_r+0x2e4>)
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
        float x = cx + r * cos(angle);
        float y = cy + r * sin(angle);
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
    }
}
 8002ef6:	b00b      	add	sp, #44	@ 0x2c
 8002ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 8002efc:	f7fe bcc0 	b.w	8001880 <sendUSBText>
    float mx = (x0 + x1) / 2;
 8002f00:	9904      	ldr	r1, [sp, #16]
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7fd fe36 	bl	8000b74 <__addsf3>
 8002f08:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002f0c:	f7fd ff3a 	bl	8000d84 <__aeabi_fmul>
    float my = (y0 + y1) / 2;
 8002f10:	9906      	ldr	r1, [sp, #24]
    float mx = (x0 + x1) / 2;
 8002f12:	4681      	mov	r9, r0
    float my = (y0 + y1) / 2;
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7fd fe2d 	bl	8000b74 <__addsf3>
 8002f1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002f1e:	f7fd ff31 	bl	8000d84 <__aeabi_fmul>
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8002f22:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
    float my = (y0 + y1) / 2;
 8002f26:	4680      	mov	r8, r0
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8002f28:	4638      	mov	r0, r7
 8002f2a:	f7fd ff2b 	bl	8000d84 <__aeabi_fmul>
 8002f2e:	9903      	ldr	r1, [sp, #12]
 8002f30:	9009      	str	r0, [sp, #36]	@ 0x24
 8002f32:	4608      	mov	r0, r1
 8002f34:	f7fd ff26 	bl	8000d84 <__aeabi_fmul>
 8002f38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f3a:	4682      	mov	sl, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	f7fd ff21 	bl	8000d84 <__aeabi_fmul>
 8002f42:	4601      	mov	r1, r0
 8002f44:	4650      	mov	r0, sl
 8002f46:	f7fd fe13 	bl	8000b70 <__aeabi_fsub>
 8002f4a:	f7fd fa6d 	bl	8000428 <__aeabi_f2d>
 8002f4e:	f006 f9a1 	bl	8009294 <sqrt>
 8002f52:	f7fd fdb9 	bl	8000ac8 <__aeabi_d2f>
    float nx = -dy / d;
 8002f56:	4639      	mov	r1, r7
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8002f58:	4682      	mov	sl, r0
    float nx = -dy / d;
 8002f5a:	f10b 4000 	add.w	r0, fp, #2147483648	@ 0x80000000
 8002f5e:	f7fd ffc5 	bl	8000eec <__aeabi_fdiv>
    float ny = dx / d;
 8002f62:	4639      	mov	r1, r7
    float nx = -dy / d;
 8002f64:	4683      	mov	fp, r0
    float ny = dx / d;
 8002f66:	4630      	mov	r0, r6
 8002f68:	f7fd ffc0 	bl	8000eec <__aeabi_fdiv>
    if (clockwise) {
 8002f6c:	9b08      	ldr	r3, [sp, #32]
    float ny = dx / d;
 8002f6e:	4606      	mov	r6, r0
        cx = mx - nx * h;
 8002f70:	4659      	mov	r1, fp
 8002f72:	4650      	mov	r0, sl
    if (clockwise) {
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80b6 	beq.w	80030e6 <arc_move_r+0x296>
        cx = mx - nx * h;
 8002f7a:	f7fd ff03 	bl	8000d84 <__aeabi_fmul>
 8002f7e:	4601      	mov	r1, r0
 8002f80:	4648      	mov	r0, r9
 8002f82:	f7fd fdf5 	bl	8000b70 <__aeabi_fsub>
        cy = my - ny * h;
 8002f86:	4631      	mov	r1, r6
        cx = mx - nx * h;
 8002f88:	4681      	mov	r9, r0
        cy = my - ny * h;
 8002f8a:	4650      	mov	r0, sl
 8002f8c:	f7fd fefa 	bl	8000d84 <__aeabi_fmul>
 8002f90:	4601      	mov	r1, r0
 8002f92:	4640      	mov	r0, r8
 8002f94:	f7fd fdec 	bl	8000b70 <__aeabi_fsub>
        cy = my + ny * h;
 8002f98:	4680      	mov	r8, r0
    float start_angle = atan2(y0 - cy, x0 - cx);
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f7fd fde7 	bl	8000b70 <__aeabi_fsub>
 8002fa2:	f7fd fa41 	bl	8000428 <__aeabi_f2d>
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	460f      	mov	r7, r1
 8002faa:	4620      	mov	r0, r4
 8002fac:	4641      	mov	r1, r8
 8002fae:	f7fd fddf 	bl	8000b70 <__aeabi_fsub>
 8002fb2:	f7fd fa39 	bl	8000428 <__aeabi_f2d>
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	463b      	mov	r3, r7
 8002fba:	f006 f969 	bl	8009290 <atan2>
 8002fbe:	f7fd fd83 	bl	8000ac8 <__aeabi_d2f>
    float end_angle = atan2(y1 - cy, x1 - cx);
 8002fc2:	4649      	mov	r1, r9
    float start_angle = atan2(y0 - cy, x0 - cx);
 8002fc4:	4683      	mov	fp, r0
    float end_angle = atan2(y1 - cy, x1 - cx);
 8002fc6:	9804      	ldr	r0, [sp, #16]
 8002fc8:	f7fd fdd2 	bl	8000b70 <__aeabi_fsub>
 8002fcc:	f7fd fa2c 	bl	8000428 <__aeabi_f2d>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	9806      	ldr	r0, [sp, #24]
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	f7fd fdca 	bl	8000b70 <__aeabi_fsub>
 8002fdc:	f7fd fa24 	bl	8000428 <__aeabi_f2d>
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	462b      	mov	r3, r5
 8002fe4:	f006 f954 	bl	8009290 <atan2>
 8002fe8:	f7fd fd6e 	bl	8000ac8 <__aeabi_d2f>
    float total_angle = end_angle - start_angle;
 8002fec:	4659      	mov	r1, fp
 8002fee:	f7fd fdbf 	bl	8000b70 <__aeabi_fsub>
    if (clockwise && total_angle > 0) {
 8002ff2:	9b08      	ldr	r3, [sp, #32]
    float total_angle = end_angle - start_angle;
 8002ff4:	4604      	mov	r4, r0
    if (clockwise && total_angle > 0) {
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8082 	beq.w	8003102 <arc_move_r+0x2b2>
 8002ffe:	f7fe f87d 	bl	80010fc <__aeabi_fcmpgt>
 8003002:	b150      	cbz	r0, 800301a <arc_move_r+0x1ca>
        total_angle -= 2 * PI;
 8003004:	4620      	mov	r0, r4
 8003006:	f7fd fa0f 	bl	8000428 <__aeabi_f2d>
 800300a:	a345      	add	r3, pc, #276	@ (adr r3, 8003120 <arc_move_r+0x2d0>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd f8aa 	bl	8000168 <__aeabi_dsub>
        total_angle += 2 * PI;
 8003014:	f7fd fd58 	bl	8000ac8 <__aeabi_d2f>
 8003018:	4604      	mov	r4, r0
    for (int i = 1; i <= SEGMENTS; i++) {
 800301a:	2501      	movs	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800301c:	f8df a110 	ldr.w	sl, [pc, #272]	@ 8003130 <arc_move_r+0x2e0>
        float x = cx + r * cos(angle);
 8003020:	9803      	ldr	r0, [sp, #12]
 8003022:	f7fd fa01 	bl	8000428 <__aeabi_f2d>
 8003026:	e9cd 0104 	strd	r0, r1, [sp, #16]
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
 800302a:	4628      	mov	r0, r5
 800302c:	f7fd fe56 	bl	8000cdc <__aeabi_i2f>
 8003030:	4941      	ldr	r1, [pc, #260]	@ (8003138 <arc_move_r+0x2e8>)
 8003032:	f7fd ff5b 	bl	8000eec <__aeabi_fdiv>
 8003036:	4621      	mov	r1, r4
 8003038:	f7fd fea4 	bl	8000d84 <__aeabi_fmul>
 800303c:	4659      	mov	r1, fp
 800303e:	f7fd fd99 	bl	8000b74 <__addsf3>
        float x = cx + r * cos(angle);
 8003042:	f7fd f9f1 	bl	8000428 <__aeabi_f2d>
 8003046:	4606      	mov	r6, r0
 8003048:	460f      	mov	r7, r1
 800304a:	f006 f947 	bl	80092dc <cos>
 800304e:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float y = cy + r * sin(angle);
 8003052:	4630      	mov	r0, r6
 8003054:	4639      	mov	r1, r7
 8003056:	f006 f987 	bl	8009368 <sin>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800305a:	4b38      	ldr	r3, [pc, #224]	@ (800313c <arc_move_r+0x2ec>)
        float y = cy + r * sin(angle);
 800305c:	4606      	mov	r6, r0
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	f640 735a 	movw	r3, #3930	@ 0xf5a
 8003064:	fb90 f0f3 	sdiv	r0, r0, r3
        float y = cy + r * sin(angle);
 8003068:	460f      	mov	r7, r1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800306a:	f7fd fe37 	bl	8000cdc <__aeabi_i2f>
        float y = cy + r * sin(angle);
 800306e:	4632      	mov	r2, r6
 8003070:	463b      	mov	r3, r7
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003072:	9008      	str	r0, [sp, #32]
        float y = cy + r * sin(angle);
 8003074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003078:	f7fd fa2e 	bl	80004d8 <__aeabi_dmul>
 800307c:	4606      	mov	r6, r0
 800307e:	4640      	mov	r0, r8
 8003080:	460f      	mov	r7, r1
 8003082:	f7fd f9d1 	bl	8000428 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4630      	mov	r0, r6
 800308c:	4639      	mov	r1, r7
 800308e:	f7fd f86d 	bl	800016c <__adddf3>
 8003092:	f7fd fd19 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003096:	4651      	mov	r1, sl
 8003098:	f7fd ff28 	bl	8000eec <__aeabi_fdiv>
        float x = cx + r * cos(angle);
 800309c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80030a0:	9009      	str	r0, [sp, #36]	@ 0x24
        float x = cx + r * cos(angle);
 80030a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030a6:	f7fd fa17 	bl	80004d8 <__aeabi_dmul>
 80030aa:	4606      	mov	r6, r0
 80030ac:	4648      	mov	r0, r9
 80030ae:	460f      	mov	r7, r1
 80030b0:	f7fd f9ba 	bl	8000428 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4630      	mov	r0, r6
 80030ba:	4639      	mov	r1, r7
 80030bc:	f7fd f856 	bl	800016c <__adddf3>
 80030c0:	f7fd fd02 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80030c4:	4651      	mov	r1, sl
 80030c6:	f7fd ff11 	bl	8000eec <__aeabi_fdiv>
 80030ca:	2301      	movs	r3, #1
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <arc_move_r+0x2f0>)
 80030d0:	9a08      	ldr	r2, [sp, #32]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
    for (int i = 1; i <= SEGMENTS; i++) {
 80030d6:	3501      	adds	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80030d8:	f7ff fcbe 	bl	8002a58 <moveAxesWithFeedRate>
    for (int i = 1; i <= SEGMENTS; i++) {
 80030dc:	2d33      	cmp	r5, #51	@ 0x33
 80030de:	d19f      	bne.n	8003020 <arc_move_r+0x1d0>
}
 80030e0:	b00b      	add	sp, #44	@ 0x2c
 80030e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cx = mx + nx * h;
 80030e6:	f7fd fe4d 	bl	8000d84 <__aeabi_fmul>
 80030ea:	4649      	mov	r1, r9
 80030ec:	f7fd fd42 	bl	8000b74 <__addsf3>
        cy = my + ny * h;
 80030f0:	4631      	mov	r1, r6
        cx = mx + nx * h;
 80030f2:	4681      	mov	r9, r0
        cy = my + ny * h;
 80030f4:	4650      	mov	r0, sl
 80030f6:	f7fd fe45 	bl	8000d84 <__aeabi_fmul>
 80030fa:	4641      	mov	r1, r8
 80030fc:	f7fd fd3a 	bl	8000b74 <__addsf3>
 8003100:	e74a      	b.n	8002f98 <arc_move_r+0x148>
    } else if (!clockwise && total_angle < 0) {
 8003102:	f7fd ffdd 	bl	80010c0 <__aeabi_fcmplt>
 8003106:	2800      	cmp	r0, #0
 8003108:	d087      	beq.n	800301a <arc_move_r+0x1ca>
        total_angle += 2 * PI;
 800310a:	4620      	mov	r0, r4
 800310c:	f7fd f98c 	bl	8000428 <__aeabi_f2d>
 8003110:	a303      	add	r3, pc, #12	@ (adr r3, 8003120 <arc_move_r+0x2d0>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd f829 	bl	800016c <__adddf3>
 800311a:	e77b      	b.n	8003014 <arc_move_r+0x1c4>
 800311c:	f3af 8000 	nop.w
 8003120:	54442d18 	.word	0x54442d18
 8003124:	401921fb 	.word	0x401921fb
 8003128:	2000236c 	.word	0x2000236c
 800312c:	20002368 	.word	0x20002368
 8003130:	429e0000 	.word	0x429e0000
 8003134:	0800b6dd 	.word	0x0800b6dd
 8003138:	42480000 	.word	0x42480000
 800313c:	20002364 	.word	0x20002364
 8003140:	20000004 	.word	0x20000004

08003144 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003144:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <HAL_MspInit+0x3c>)
{
 8003146:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	619a      	str	r2, [r3, #24]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	f002 0201 	and.w	r2, r2, #1
 8003156:	9200      	str	r2, [sp, #0]
 8003158:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003164:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800316e:	6853      	ldr	r3, [r2, #4]
 8003170:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003174:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800317a:	b002      	add	sp, #8
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000

08003188 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003188:	e7fe      	b.n	8003188 <NMI_Handler>

0800318a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800318a:	e7fe      	b.n	800318a <HardFault_Handler>

0800318c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <MemManage_Handler>

0800318e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800318e:	e7fe      	b.n	800318e <BusFault_Handler>

08003190 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003190:	e7fe      	b.n	8003190 <UsageFault_Handler>

08003192 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003192:	4770      	bx	lr

08003194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003194:	4770      	bx	lr

08003196 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003196:	4770      	bx	lr

08003198 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003198:	f000 b8bc 	b.w	8003314 <HAL_IncTick>

0800319c <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800319c:	4801      	ldr	r0, [pc, #4]	@ (80031a4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800319e:	f000 baaf 	b.w	8003700 <HAL_PCD_IRQHandler>
 80031a2:	bf00      	nop
 80031a4:	200042a4 	.word	0x200042a4

080031a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80031a8:	2001      	movs	r0, #1
 80031aa:	4770      	bx	lr

080031ac <_kill>:

int _kill(int pid, int sig)
{
 80031ac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ae:	f004 f84b 	bl	8007248 <__errno>
 80031b2:	2316      	movs	r3, #22
 80031b4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ba:	bd08      	pop	{r3, pc}

080031bc <_exit>:

void _exit (int status)
{
 80031bc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80031be:	f004 f843 	bl	8007248 <__errno>
 80031c2:	2316      	movs	r3, #22
 80031c4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80031c6:	e7fe      	b.n	80031c6 <_exit+0xa>

080031c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	460d      	mov	r5, r1
 80031cc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	460e      	mov	r6, r1
 80031d0:	1b73      	subs	r3, r6, r5
 80031d2:	429c      	cmp	r4, r3
 80031d4:	dc01      	bgt.n	80031da <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80031d6:	4620      	mov	r0, r4
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80031da:	f3af 8000 	nop.w
 80031de:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e2:	e7f5      	b.n	80031d0 <_read+0x8>

080031e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	460d      	mov	r5, r1
 80031e8:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ea:	460e      	mov	r6, r1
 80031ec:	1b73      	subs	r3, r6, r5
 80031ee:	429c      	cmp	r4, r3
 80031f0:	dc01      	bgt.n	80031f6 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80031f2:	4620      	mov	r0, r4
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80031f6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80031fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031fe:	e7f5      	b.n	80031ec <_write+0x8>

08003200 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	4770      	bx	lr

08003206 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003206:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 800320a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800320c:	604b      	str	r3, [r1, #4]
}
 800320e:	4770      	bx	lr

08003210 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003210:	2001      	movs	r0, #1
 8003212:	4770      	bx	lr

08003214 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003214:	2000      	movs	r0, #0
 8003216:	4770      	bx	lr

08003218 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4a0b      	ldr	r2, [pc, #44]	@ (8003248 <_sbrk+0x30>)
{
 800321a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800321c:	6811      	ldr	r1, [r2, #0]
{
 800321e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003220:	b909      	cbnz	r1, 8003226 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003222:	490a      	ldr	r1, [pc, #40]	@ (800324c <_sbrk+0x34>)
 8003224:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	6810      	ldr	r0, [r2, #0]
 8003228:	4909      	ldr	r1, [pc, #36]	@ (8003250 <_sbrk+0x38>)
 800322a:	4c0a      	ldr	r4, [pc, #40]	@ (8003254 <_sbrk+0x3c>)
 800322c:	4403      	add	r3, r0
 800322e:	1b09      	subs	r1, r1, r4
 8003230:	428b      	cmp	r3, r1
 8003232:	d906      	bls.n	8003242 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003234:	f004 f808 	bl	8007248 <__errno>
 8003238:	230c      	movs	r3, #12
 800323a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800323c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003240:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003242:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003244:	e7fc      	b.n	8003240 <_sbrk+0x28>
 8003246:	bf00      	nop
 8003248:	20002438 	.word	0x20002438
 800324c:	200046c8 	.word	0x200046c8
 8003250:	20005000 	.word	0x20005000
 8003254:	00000400 	.word	0x00000400

08003258 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003258:	4770      	bx	lr
	...

0800325c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800325c:	f7ff fffc 	bl	8003258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003260:	480b      	ldr	r0, [pc, #44]	@ (8003290 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003262:	490c      	ldr	r1, [pc, #48]	@ (8003294 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003264:	4a0c      	ldr	r2, [pc, #48]	@ (8003298 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003268:	e002      	b.n	8003270 <LoopCopyDataInit>

0800326a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800326c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326e:	3304      	adds	r3, #4

08003270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003274:	d3f9      	bcc.n	800326a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003276:	4a09      	ldr	r2, [pc, #36]	@ (800329c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003278:	4c09      	ldr	r4, [pc, #36]	@ (80032a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800327c:	e001      	b.n	8003282 <LoopFillZerobss>

0800327e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003280:	3204      	adds	r2, #4

08003282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003284:	d3fb      	bcc.n	800327e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003286:	f003 ffe5 	bl	8007254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800328a:	f7ff fab7 	bl	80027fc <main>
  bx lr
 800328e:	4770      	bx	lr
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003298:	0800bda0 	.word	0x0800bda0
  ldr r2, =_sbss
 800329c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80032a0:	200046c8 	.word	0x200046c8

080032a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC1_2_IRQHandler>
	...

080032a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032aa:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <HAL_InitTick+0x3c>)
{
 80032ac:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b8:	4a0b      	ldr	r2, [pc, #44]	@ (80032e8 <HAL_InitTick+0x40>)
 80032ba:	6810      	ldr	r0, [r2, #0]
 80032bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80032c0:	f000 f89c 	bl	80033fc <HAL_SYSTICK_Config>
 80032c4:	4604      	mov	r4, r0
 80032c6:	b958      	cbnz	r0, 80032e0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c8:	2d0f      	cmp	r5, #15
 80032ca:	d809      	bhi.n	80032e0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032cc:	4602      	mov	r2, r0
 80032ce:	4629      	mov	r1, r5
 80032d0:	f04f 30ff 	mov.w	r0, #4294967295
 80032d4:	f000 f854 	bl	8003380 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d8:	4620      	mov	r0, r4
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <HAL_InitTick+0x44>)
 80032dc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80032de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
 80032e2:	e7fc      	b.n	80032de <HAL_InitTick+0x36>
 80032e4:	20000010 	.word	0x20000010
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	20000014 	.word	0x20000014

080032f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f0:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <HAL_Init+0x20>)
{
 80032f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f8:	f043 0310 	orr.w	r3, r3, #16
 80032fc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032fe:	f000 f82d 	bl	800335c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003302:	200f      	movs	r0, #15
 8003304:	f7ff ffd0 	bl	80032a8 <HAL_InitTick>
  HAL_MspInit();
 8003308:	f7ff ff1c 	bl	8003144 <HAL_MspInit>
}
 800330c:	2000      	movs	r0, #0
 800330e:	bd08      	pop	{r3, pc}
 8003310:	40022000 	.word	0x40022000

08003314 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003314:	4a03      	ldr	r2, [pc, #12]	@ (8003324 <HAL_IncTick+0x10>)
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_IncTick+0x14>)
 8003318:	6811      	ldr	r1, [r2, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	440b      	add	r3, r1
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	2000243c 	.word	0x2000243c
 8003328:	20000010 	.word	0x20000010

0800332c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800332c:	4b01      	ldr	r3, [pc, #4]	@ (8003334 <HAL_GetTick+0x8>)
 800332e:	6818      	ldr	r0, [r3, #0]
}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	2000243c 	.word	0x2000243c

08003338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003338:	b538      	push	{r3, r4, r5, lr}
 800333a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800333c:	f7ff fff6 	bl	800332c <HAL_GetTick>
 8003340:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003344:	bf1e      	ittt	ne
 8003346:	4b04      	ldrne	r3, [pc, #16]	@ (8003358 <HAL_Delay+0x20>)
 8003348:	781b      	ldrbne	r3, [r3, #0]
 800334a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800334c:	f7ff ffee 	bl	800332c <HAL_GetTick>
 8003350:	1b43      	subs	r3, r0, r5
 8003352:	42a3      	cmp	r3, r4
 8003354:	d3fa      	bcc.n	800334c <HAL_Delay+0x14>
  {
  }
}
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000010 	.word	0x20000010

0800335c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4907      	ldr	r1, [pc, #28]	@ (800337c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800335e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003362:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800336a:	0412      	lsls	r2, r2, #16
 800336c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003378:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b530      	push	{r4, r5, lr}
 8003384:	68dc      	ldr	r4, [r3, #12]
 8003386:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003390:	2b04      	cmp	r3, #4
 8003392:	bf28      	it	cs
 8003394:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339c:	bf94      	ite	ls
 800339e:	2400      	movls	r4, #0
 80033a0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a2:	fa05 f303 	lsl.w	r3, r5, r3
 80033a6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033aa:	40a5      	lsls	r5, r4
 80033ac:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80033b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	bfac      	ite	ge
 80033ba:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	4a07      	ldrlt	r2, [pc, #28]	@ (80033dc <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	bfab      	itete	ge
 80033c8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80033d6:	bd30      	pop	{r4, r5, pc}
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	e000ed14 	.word	0xe000ed14

080033e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033e0:	2800      	cmp	r0, #0
 80033e2:	db07      	blt.n	80033f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e4:	2301      	movs	r3, #1
 80033e6:	0941      	lsrs	r1, r0, #5
 80033e8:	4a03      	ldr	r2, [pc, #12]	@ (80033f8 <HAL_NVIC_EnableIRQ+0x18>)
 80033ea:	f000 001f 	and.w	r0, r0, #31
 80033ee:	4083      	lsls	r3, r0
 80033f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e100 	.word	0xe000e100

080033fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	3801      	subs	r0, #1
 80033fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003402:	d20b      	bcs.n	800341c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003404:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	21f0      	movs	r1, #240	@ 0xf0
 800340a:	4a05      	ldr	r2, [pc, #20]	@ (8003420 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003412:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003414:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003416:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003418:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800341a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800341c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003428:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800342a:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 800342e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003430:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80035b8 <HAL_GPIO_Init+0x194>
 8003434:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003436:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343a:	680a      	ldr	r2, [r1, #0]
 800343c:	fa32 f506 	lsrs.w	r5, r2, r6
 8003440:	d102      	bne.n	8003448 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8003442:	b003      	add	sp, #12
 8003444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003448:	2501      	movs	r5, #1
 800344a:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8003452:	ea37 0202 	bics.w	r2, r7, r2
 8003456:	d176      	bne.n	8003546 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8003458:	684a      	ldr	r2, [r1, #4]
 800345a:	2a03      	cmp	r2, #3
 800345c:	d807      	bhi.n	800346e <HAL_GPIO_Init+0x4a>
 800345e:	3a01      	subs	r2, #1
 8003460:	2a02      	cmp	r2, #2
 8003462:	f200 8083 	bhi.w	800356c <HAL_GPIO_Init+0x148>
 8003466:	e8df f002 	tbb	[pc, r2]
 800346a:	9691      	.short	0x9691
 800346c:	9c          	.byte	0x9c
 800346d:	00          	.byte	0x00
 800346e:	2a12      	cmp	r2, #18
 8003470:	f000 8094 	beq.w	800359c <HAL_GPIO_Init+0x178>
 8003474:	d869      	bhi.n	800354a <HAL_GPIO_Init+0x126>
 8003476:	2a11      	cmp	r2, #17
 8003478:	f000 808a 	beq.w	8003590 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800347c:	2dff      	cmp	r5, #255	@ 0xff
 800347e:	bf94      	ite	ls
 8003480:	4681      	movls	r9, r0
 8003482:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003484:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003488:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800348c:	bf88      	it	hi
 800348e:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003490:	fa0e fa02 	lsl.w	sl, lr, r2
 8003494:	ea27 070a 	bic.w	r7, r7, sl
 8003498:	fa04 f202 	lsl.w	r2, r4, r2
 800349c:	4317      	orrs	r7, r2
 800349e:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80034a6:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80034aa:	d04c      	beq.n	8003546 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034ac:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80034b0:	f026 0703 	bic.w	r7, r6, #3
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	f8cc 2018 	str.w	r2, [ip, #24]
 80034bc:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80034c0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80034c4:	f002 0201 	and.w	r2, r2, #1
 80034c8:	9201      	str	r2, [sp, #4]
 80034ca:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034ce:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d2:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80034d8:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034da:	fa0e fb0a 	lsl.w	fp, lr, sl
 80034de:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e2:	4a37      	ldr	r2, [pc, #220]	@ (80035c0 <HAL_GPIO_Init+0x19c>)
 80034e4:	4290      	cmp	r0, r2
 80034e6:	d060      	beq.n	80035aa <HAL_GPIO_Init+0x186>
 80034e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034ec:	4290      	cmp	r0, r2
 80034ee:	d05e      	beq.n	80035ae <HAL_GPIO_Init+0x18a>
 80034f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034f4:	4290      	cmp	r0, r2
 80034f6:	d05c      	beq.n	80035b2 <HAL_GPIO_Init+0x18e>
 80034f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80034fc:	4290      	cmp	r0, r2
 80034fe:	bf14      	ite	ne
 8003500:	2204      	movne	r2, #4
 8003502:	2203      	moveq	r2, #3
 8003504:	fa02 f20a 	lsl.w	r2, r2, sl
 8003508:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 800350c:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800350e:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003510:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003514:	bf14      	ite	ne
 8003516:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003518:	43aa      	biceq	r2, r5
 800351a:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800351c:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800351e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003522:	bf14      	ite	ne
 8003524:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003526:	43aa      	biceq	r2, r5
 8003528:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800352a:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800352c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003530:	bf14      	ite	ne
 8003532:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003534:	43aa      	biceq	r2, r5
 8003536:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003538:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800353a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800353e:	bf14      	ite	ne
 8003540:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003542:	43aa      	biceq	r2, r5
 8003544:	601a      	str	r2, [r3, #0]
	position++;
 8003546:	3601      	adds	r6, #1
 8003548:	e777      	b.n	800343a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800354a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80035c4 <HAL_GPIO_Init+0x1a0>
 800354e:	454a      	cmp	r2, r9
 8003550:	d00c      	beq.n	800356c <HAL_GPIO_Init+0x148>
 8003552:	d814      	bhi.n	800357e <HAL_GPIO_Init+0x15a>
 8003554:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8003558:	454a      	cmp	r2, r9
 800355a:	d007      	beq.n	800356c <HAL_GPIO_Init+0x148>
 800355c:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8003560:	454a      	cmp	r2, r9
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x148>
 8003564:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8003568:	454a      	cmp	r2, r9
 800356a:	d187      	bne.n	800347c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800356c:	688a      	ldr	r2, [r1, #8]
 800356e:	b1d2      	cbz	r2, 80035a6 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003570:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003572:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8003576:	bf0c      	ite	eq
 8003578:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 800357a:	6147      	strne	r7, [r0, #20]
 800357c:	e77e      	b.n	800347c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800357e:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80035c8 <HAL_GPIO_Init+0x1a4>
 8003582:	454a      	cmp	r2, r9
 8003584:	d0f2      	beq.n	800356c <HAL_GPIO_Init+0x148>
 8003586:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 800358a:	e7ed      	b.n	8003568 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800358c:	68cc      	ldr	r4, [r1, #12]
          break;
 800358e:	e775      	b.n	800347c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003590:	68cc      	ldr	r4, [r1, #12]
 8003592:	3404      	adds	r4, #4
          break;
 8003594:	e772      	b.n	800347c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003596:	68cc      	ldr	r4, [r1, #12]
 8003598:	3408      	adds	r4, #8
          break;
 800359a:	e76f      	b.n	800347c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800359c:	68cc      	ldr	r4, [r1, #12]
 800359e:	340c      	adds	r4, #12
          break;
 80035a0:	e76c      	b.n	800347c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80035a2:	2400      	movs	r4, #0
 80035a4:	e76a      	b.n	800347c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035a6:	2404      	movs	r4, #4
 80035a8:	e768      	b.n	800347c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035aa:	2200      	movs	r2, #0
 80035ac:	e7aa      	b.n	8003504 <HAL_GPIO_Init+0xe0>
 80035ae:	2201      	movs	r2, #1
 80035b0:	e7a8      	b.n	8003504 <HAL_GPIO_Init+0xe0>
 80035b2:	2202      	movs	r2, #2
 80035b4:	e7a6      	b.n	8003504 <HAL_GPIO_Init+0xe0>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40010400 	.word	0x40010400
 80035c0:	40010800 	.word	0x40010800
 80035c4:	10220000 	.word	0x10220000
 80035c8:	10310000 	.word	0x10310000

080035cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035cc:	6883      	ldr	r3, [r0, #8]
 80035ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80035d0:	bf14      	ite	ne
 80035d2:	2001      	movne	r0, #1
 80035d4:	2000      	moveq	r0, #0
 80035d6:	4770      	bx	lr

080035d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	b10a      	cbz	r2, 80035de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035da:	6101      	str	r1, [r0, #16]
  }
}
 80035dc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035de:	0409      	lsls	r1, r1, #16
 80035e0:	e7fb      	b.n	80035da <HAL_GPIO_WritePin+0x2>

080035e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035e4:	4604      	mov	r4, r0
 80035e6:	b1e0      	cbz	r0, 8003622 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e8:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 80035ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80035f0:	b91b      	cbnz	r3, 80035fa <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f2:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035f6:	f002 fd45 	bl	8006084 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035fa:	2303      	movs	r3, #3
 80035fc:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003600:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003602:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8003604:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8003606:	f855 0b04 	ldr.w	r0, [r5], #4
 800360a:	f001 f975 	bl	80048f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003612:	6820      	ldr	r0, [r4, #0]
 8003614:	f001 f960 	bl	80048d8 <USB_CoreInit>
 8003618:	4601      	mov	r1, r0
 800361a:	b128      	cbz	r0, 8003628 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800361c:	2302      	movs	r3, #2
 800361e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8003622:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8003624:	4628      	mov	r0, r5
 8003626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	f001 f96f 	bl	800490c <USB_SetCurrentMode>
 800362e:	2800      	cmp	r0, #0
 8003630:	d1f4      	bne.n	800361c <HAL_PCD_Init+0x3a>
 8003632:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8003634:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003636:	7926      	ldrb	r6, [r4, #4]
 8003638:	f104 0310 	add.w	r3, r4, #16
 800363c:	b2c1      	uxtb	r1, r0
 800363e:	428e      	cmp	r6, r1
 8003640:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003644:	d818      	bhi.n	8003678 <HAL_PCD_Init+0x96>
 8003646:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8003648:	460a      	mov	r2, r1
 800364a:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 800364e:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	4286      	cmp	r6, r0
 8003652:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003656:	d81b      	bhi.n	8003690 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003658:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	f001 f957 	bl	8004910 <USB_DevInit>
 8003662:	4605      	mov	r5, r0
 8003664:	2800      	cmp	r0, #0
 8003666:	d1d9      	bne.n	800361c <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8003668:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800366a:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 800366c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 800366e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003672:	f001 fc03 	bl	8004e7c <USB_DevDisconnect>
  return HAL_OK;
 8003676:	e7d5      	b.n	8003624 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003678:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 800367c:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8003680:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003684:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	3001      	adds	r0, #1
 800368e:	e7d5      	b.n	800363c <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003690:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8003694:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8003698:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800369c:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a0:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	3101      	adds	r1, #1
 80036a6:	e7d2      	b.n	800364e <HAL_PCD_Init+0x6c>

080036a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80036aa:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 80036ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d010      	beq.n	80036d6 <HAL_PCD_Start+0x2e>
 80036b4:	2501      	movs	r5, #1
 80036b6:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	f001 f913 	bl	80048e6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80036c0:	4629      	mov	r1, r5
 80036c2:	4620      	mov	r0, r4
 80036c4:	f002 fde5 	bl	8006292 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	f001 fbd5 	bl	8004e78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80036d6:	2002      	movs	r0, #2
 80036d8:	e7fc      	b.n	80036d4 <HAL_PCD_Start+0x2c>

080036da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036da:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80036dc:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 80036e0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80036e2:	2a01      	cmp	r2, #1
 80036e4:	d00a      	beq.n	80036fc <HAL_PCD_SetAddress+0x22>
 80036e6:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80036e8:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 80036ea:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036ee:	6800      	ldr	r0, [r0, #0]
 80036f0:	f001 fbbc 	bl	8004e6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80036fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80036fc:	2002      	movs	r0, #2
 80036fe:	e7fc      	b.n	80036fa <HAL_PCD_SetAddress+0x20>

08003700 <HAL_PCD_IRQHandler>:
{
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003708:	6800      	ldr	r0, [r0, #0]
 800370a:	f001 fbb9 	bl	8004e80 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800370e:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8003712:	f000 844f 	beq.w	8003fb4 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8003716:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003718:	4ec6      	ldr	r6, [pc, #792]	@ (8003a34 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800371a:	6820      	ldr	r0, [r4, #0]
 800371c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8003720:	041f      	lsls	r7, r3, #16
 8003722:	d402      	bmi.n	800372a <HAL_PCD_IRQHandler+0x2a>
}
 8003724:	b005      	add	sp, #20
 8003726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800372a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 800372e:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8003732:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8003734:	f040 80c0 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003738:	f011 0110 	ands.w	r1, r1, #16
 800373c:	d126      	bne.n	800378c <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800373e:	8803      	ldrh	r3, [r0, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	4033      	ands	r3, r6
 8003744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003748:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800374a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800374e:	7c22      	ldrb	r2, [r4, #16]
 8003750:	b29b      	uxth	r3, r3
 8003752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003756:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800375a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 800375e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003760:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8003764:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003766:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003768:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 800376a:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800376c:	f002 fcb9 	bl	80060e2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003770:	7b63      	ldrb	r3, [r4, #13]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0d1      	beq.n	800371a <HAL_PCD_IRQHandler+0x1a>
 8003776:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003778:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800377a:	2a00      	cmp	r2, #0
 800377c:	d1cd      	bne.n	800371a <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800377e:	7b63      	ldrb	r3, [r4, #13]
 8003780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003784:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003788:	7362      	strb	r2, [r4, #13]
 800378a:	e7c6      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800378c:	8807      	ldrh	r7, [r0, #0]
 800378e:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003790:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8003794:	d021      	beq.n	80037da <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003796:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800379a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800379e:	b29b      	uxth	r3, r3
 80037a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80037a8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037ac:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80037b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037b4:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037b8:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80037bc:	f001 fdab 	bl	8005316 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037c0:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80037c2:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037c4:	8813      	ldrh	r3, [r2, #0]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ca:	051b      	lsls	r3, r3, #20
 80037cc:	0d1b      	lsrs	r3, r3, #20
 80037ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80037d4:	f002 fc76 	bl	80060c4 <HAL_PCD_SetupStageCallback>
 80037d8:	e79f      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037da:	0419      	lsls	r1, r3, #16
 80037dc:	d59d      	bpl.n	800371a <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037de:	8803      	ldrh	r3, [r0, #0]
 80037e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e4:	051b      	lsls	r3, r3, #20
 80037e6:	0d1b      	lsrs	r3, r3, #20
 80037e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ec:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80037f2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003800:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8003804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003808:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800380c:	b18b      	cbz	r3, 8003832 <HAL_PCD_IRQHandler+0x132>
 800380e:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8003812:	b171      	cbz	r1, 8003832 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003814:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003818:	f001 fd7d 	bl	8005316 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800381c:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8003820:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003824:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8003826:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003828:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800382a:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800382e:	f002 fc4f 	bl	80060d0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003832:	6821      	ldr	r1, [r4, #0]
 8003834:	880a      	ldrh	r2, [r1, #0]
 8003836:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003838:	0512      	lsls	r2, r2, #20
 800383a:	f53f af6e 	bmi.w	800371a <HAL_PCD_IRQHandler+0x1a>
 800383e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003842:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003846:	f43f af68 	beq.w	800371a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800384a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 800384e:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8003852:	b292      	uxth	r2, r2
 8003854:	5a83      	ldrh	r3, [r0, r2]
 8003856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800385a:	5283      	strh	r3, [r0, r2]
 800385c:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8003860:	2b3e      	cmp	r3, #62	@ 0x3e
 8003862:	d91d      	bls.n	80038a0 <HAL_PCD_IRQHandler+0x1a0>
 8003864:	095f      	lsrs	r7, r3, #5
 8003866:	06db      	lsls	r3, r3, #27
 8003868:	5a83      	ldrh	r3, [r0, r2]
 800386a:	bf08      	it	eq
 800386c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387e:	b29b      	uxth	r3, r3
 8003880:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003882:	880b      	ldrh	r3, [r1, #0]
 8003884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389c:	800b      	strh	r3, [r1, #0]
 800389e:	e73c      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038a0:	b90b      	cbnz	r3, 80038a6 <HAL_PCD_IRQHandler+0x1a6>
 80038a2:	5a83      	ldrh	r3, [r0, r2]
 80038a4:	e7e7      	b.n	8003876 <HAL_PCD_IRQHandler+0x176>
 80038a6:	085f      	lsrs	r7, r3, #1
 80038a8:	07db      	lsls	r3, r3, #31
 80038aa:	5a83      	ldrh	r3, [r0, r2]
 80038ac:	bf48      	it	mi
 80038ae:	3701      	addmi	r7, #1
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80038b6:	e7e2      	b.n	800387e <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038b8:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038bc:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80038be:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038c2:	f140 80f6 	bpl.w	8003ab2 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038c6:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80038ca:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	0d1b      	lsrs	r3, r3, #20
 80038d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038da:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80038de:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 80038e2:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 80038e6:	b9bb      	cbnz	r3, 8003918 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80038ec:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3306      	adds	r3, #6
 80038f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038f8:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80038fc:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8003900:	f1b9 0f00 	cmp.w	r9, #0
 8003904:	f000 80ba 	beq.w	8003a7c <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003908:	464b      	mov	r3, r9
 800390a:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800390e:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8003912:	f001 fd00 	bl	8005316 <USB_ReadPMA>
 8003916:	e0b1      	b.n	8003a7c <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8003918:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800391c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8003920:	2b02      	cmp	r3, #2
 8003922:	f040 8089 	bne.w	8003a38 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003926:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 800392a:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 800392e:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003932:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8003936:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800393a:	44d9      	add	r9, fp
 800393c:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003940:	d03c      	beq.n	80039bc <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003942:	f109 0902 	add.w	r9, r9, #2
 8003946:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 800394a:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 800394e:	4599      	cmp	r9, r3
 8003950:	d913      	bls.n	800397a <HAL_PCD_IRQHandler+0x27a>
 8003952:	2300      	movs	r3, #0
 8003954:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003958:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800395c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800396c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003974:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003978:	e005      	b.n	8003986 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 800397a:	eba3 0309 	sub.w	r3, r3, r9
 800397e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0e8      	beq.n	8003958 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003986:	f1bc 0f00 	cmp.w	ip, #0
 800398a:	d00d      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800398c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80039a8:	f1b9 0f00 	cmp.w	r9, #0
 80039ac:	d066      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039ae:	2128      	movs	r1, #40	@ 0x28
 80039b0:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039b4:	464b      	mov	r3, r9
 80039b6:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80039ba:	e7a8      	b.n	800390e <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039bc:	f109 0906 	add.w	r9, r9, #6
 80039c0:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80039c4:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 80039c8:	4599      	cmp	r9, r3
 80039ca:	d912      	bls.n	80039f2 <HAL_PCD_IRQHandler+0x2f2>
 80039cc:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80039f0:	e005      	b.n	80039fe <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 80039f2:	eba3 0309 	sub.w	r3, r3, r9
 80039f6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0e8      	beq.n	80039d0 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039fe:	f1bc 0f00 	cmp.w	ip, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a1c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003a20:	f1b9 0f00 	cmp.w	r9, #0
 8003a24:	d02a      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a26:	2128      	movs	r1, #40	@ 0x28
 8003a28:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8003a32:	e76c      	b.n	800390e <HAL_PCD_IRQHandler+0x20e>
 8003a34:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a54:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8003a58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003a66:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a68:	d054      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a6a:	3202      	adds	r2, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003a72:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003a76:	f1b9 0f00 	cmp.w	r9, #0
 8003a7a:	d19b      	bne.n	80039b4 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8003a7c:	fb05 f107 	mul.w	r1, r5, r7
 8003a80:	1863      	adds	r3, r4, r1
 8003a82:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8003a86:	444a      	add	r2, r9
 8003a88:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8003a8c:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8003a90:	444a      	add	r2, r9
 8003a92:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a96:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003a9a:	b11a      	cbz	r2, 8003aa4 <HAL_PCD_IRQHandler+0x3a4>
 8003a9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003aa0:	4599      	cmp	r9, r3
 8003aa2:	d241      	bcs.n	8003b28 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003aa4:	fb05 4307 	mla	r3, r5, r7, r4
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8003aae:	f002 fb0f 	bl	80060d0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ab2:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ab6:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ab8:	f43f ae2f 	beq.w	800371a <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003abc:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003ac0:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4033      	ands	r3, r6
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003acc:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003ad0:	eb04 030c 	add.w	r3, r4, ip
 8003ad4:	7cda      	ldrb	r2, [r3, #19]
 8003ad6:	2a01      	cmp	r2, #1
 8003ad8:	d156      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8003ada:	2100      	movs	r1, #0
 8003adc:	fb07 5205 	mla	r2, r7, r5, r5
 8003ae0:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8003ae2:	7f1a      	ldrb	r2, [r3, #28]
 8003ae4:	b392      	cbz	r2, 8003b4c <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae6:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aea:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aec:	d036      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003aee:	bb12      	cbnz	r2, 8003b36 <HAL_PCD_IRQHandler+0x436>
 8003af0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003af4:	7c1b      	ldrb	r3, [r3, #16]
 8003af6:	b292      	uxth	r2, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003afe:	4410      	add	r0, r2
 8003b00:	5a1a      	ldrh	r2, [r3, r0]
 8003b02:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b06:	521a      	strh	r2, [r3, r0]
 8003b08:	5a1a      	ldrh	r2, [r3, r0]
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b10:	521a      	strh	r2, [r3, r0]
 8003b12:	e01b      	b.n	8003b4c <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b14:	3206      	adds	r2, #6
 8003b16:	4413      	add	r3, r2
 8003b18:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003b1c:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003b20:	f1b9 0f00 	cmp.w	r9, #0
 8003b24:	d0aa      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x37c>
 8003b26:	e781      	b.n	8003a2c <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8003b28:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	4421      	add	r1, r4
 8003b30:	f001 f9bc 	bl	8004eac <USB_EPStartXfer>
 8003b34:	e7bd      	b.n	8003ab2 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b36:	2a01      	cmp	r2, #1
 8003b38:	d108      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x44c>
 8003b3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003b3e:	7c1b      	ldrb	r3, [r3, #16]
 8003b40:	b292      	uxth	r2, r2
 8003b42:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4410      	add	r0, r2
 8003b4a:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b4c:	2328      	movs	r3, #40	@ 0x28
 8003b4e:	fb03 4307 	mla	r3, r3, r7, r4
 8003b52:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b54:	4620      	mov	r0, r4
 8003b56:	f002 fac4 	bl	80060e2 <HAL_PCD_DataInStageCallback>
 8003b5a:	e5de      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b5c:	b93a      	cbnz	r2, 8003b6e <HAL_PCD_IRQHandler+0x46e>
 8003b5e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003b62:	7c1b      	ldrb	r3, [r3, #16]
 8003b64:	b292      	uxth	r2, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003b6c:	e7c7      	b.n	8003afe <HAL_PCD_IRQHandler+0x3fe>
 8003b6e:	2a01      	cmp	r2, #1
 8003b70:	d1ec      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x44c>
 8003b72:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003b76:	7c1b      	ldrb	r3, [r3, #16]
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4410      	add	r0, r2
 8003b82:	f823 8000 	strh.w	r8, [r3, r0]
 8003b86:	e7e1      	b.n	8003b4c <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b88:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b8a:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8003b8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b90:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003b94:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b98:	d11b      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b9a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8003b9e:	b2bf      	uxth	r7, r7
 8003ba0:	4457      	add	r7, sl
 8003ba2:	3702      	adds	r7, #2
 8003ba4:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003ba8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003bac:	4297      	cmp	r7, r2
 8003bae:	d302      	bcc.n	8003bb6 <HAL_PCD_IRQHandler+0x4b6>
 8003bb0:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8003bb4:	e7ce      	b.n	8003b54 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8003bb6:	1bd2      	subs	r2, r2, r7
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8003bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8003bbc:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8003bc0:	443a      	add	r2, r7
 8003bc2:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc6:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8003bc8:	443a      	add	r2, r7
 8003bca:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bcc:	f001 f96e 	bl	8004eac <USB_EPStartXfer>
 8003bd0:	e5a3      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bd2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bd6:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bda:	fa1f fc8c 	uxth.w	ip, ip
 8003bde:	44d4      	add	ip, sl
 8003be0:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003be4:	f000 80f4 	beq.w	8003dd0 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be8:	f10c 0c02 	add.w	ip, ip, #2
 8003bec:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003bf0:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8003bf4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003bf8:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfa:	bf2c      	ite	cs
 8003bfc:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8003bfe:	eba2 020c 	subcc.w	r2, r2, ip
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	d15b      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c08:	2328      	movs	r3, #40	@ 0x28
 8003c0a:	fb03 4307 	mla	r3, r3, r7, r4
 8003c0e:	7c5b      	ldrb	r3, [r3, #17]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d141      	bne.n	8003c98 <HAL_PCD_IRQHandler+0x598>
 8003c14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003c18:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	010b      	lsls	r3, r1, #4
 8003c20:	4494      	add	ip, r2
 8003c22:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003c26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c2a:	f82c 2003 	strh.w	r2, [ip, r3]
 8003c2e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003c32:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c36:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c40:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003c44:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	4410      	add	r0, r2
 8003c4c:	5ac2      	ldrh	r2, [r0, r3]
 8003c4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c52:	52c2      	strh	r2, [r0, r3]
 8003c54:	5ac2      	ldrh	r2, [r0, r3]
 8003c56:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c5a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c62:	4620      	mov	r0, r4
 8003c64:	f002 fa3d 	bl	80060e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c68:	f1b8 0f00 	cmp.w	r8, #0
 8003c6c:	f000 80f4 	beq.w	8003e58 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c70:	2328      	movs	r3, #40	@ 0x28
 8003c72:	fb03 4307 	mla	r3, r3, r7, r4
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	7c19      	ldrb	r1, [r3, #16]
 8003c7a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c92:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003c96:	e0df      	b.n	8003e58 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d1e2      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x562>
 8003c9c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8003ca0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003ca4:	fa1f fe8e 	uxth.w	lr, lr
 8003ca8:	44f4      	add	ip, lr
 8003caa:	010b      	lsls	r3, r1, #4
 8003cac:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003cb4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003cb8:	fa1f fc8c 	uxth.w	ip, ip
 8003cbc:	4460      	add	r0, ip
 8003cbe:	e7cf      	b.n	8003c60 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cc0:	f1b8 0f00 	cmp.w	r8, #0
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cc6:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003cca:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003cce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003cd2:	0412      	lsls	r2, r2, #16
 8003cd4:	0c12      	lsrs	r2, r2, #16
 8003cd6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003cda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cde:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003ce2:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8003ce6:	fb08 4807 	mla	r8, r8, r7, r4
 8003cea:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003cee:	2a01      	cmp	r2, #1
 8003cf0:	f040 80b2 	bne.w	8003e58 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003cf4:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8003cf8:	eb02 0e0c 	add.w	lr, r2, ip
 8003cfc:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d02:	4462      	add	r2, ip
 8003d04:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d06:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8003d0a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d335      	bcc.n	8003d7e <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d18:	2328      	movs	r3, #40	@ 0x28
 8003d1a:	fb03 4307 	mla	r3, r3, r7, r4
 8003d1e:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003d22:	b293      	uxth	r3, r2
 8003d24:	f1bc 0f00 	cmp.w	ip, #0
 8003d28:	d145      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x6b6>
 8003d2a:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003d2e:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003d32:	fa1f f888 	uxth.w	r8, r8
 8003d36:	44c4      	add	ip, r8
 8003d38:	0109      	lsls	r1, r1, #4
 8003d3a:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8003d3e:	2a3e      	cmp	r2, #62	@ 0x3e
 8003d40:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003d44:	f82c 8001 	strh.w	r8, [ip, r1]
 8003d48:	d925      	bls.n	8003d96 <HAL_PCD_IRQHandler+0x696>
 8003d4a:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8003d4e:	06d2      	lsls	r2, r2, #27
 8003d50:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003d54:	bf08      	it	eq
 8003d56:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003d60:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d64:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d6e:	2228      	movs	r2, #40	@ 0x28
 8003d70:	fb02 4207 	mla	r2, r2, r7, r4
 8003d74:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d76:	4671      	mov	r1, lr
 8003d78:	f001 f888 	bl	8004e8c <USB_WritePMA>
 8003d7c:	e06c      	b.n	8003e58 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8003d7e:	b91b      	cbnz	r3, 8003d88 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8003d80:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8003d82:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8003d86:	e7c7      	b.n	8003d18 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8003d8e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8003d92:	461a      	mov	r2, r3
 8003d94:	e7c0      	b.n	8003d18 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d96:	b912      	cbnz	r2, 8003d9e <HAL_PCD_IRQHandler+0x69e>
 8003d98:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003d9c:	e7e0      	b.n	8003d60 <HAL_PCD_IRQHandler+0x660>
 8003d9e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8003da2:	07d2      	lsls	r2, r2, #31
 8003da4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003da8:	bf48      	it	mi
 8003daa:	f108 0801 	addmi.w	r8, r8, #1
 8003dae:	b292      	uxth	r2, r2
 8003db0:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003db4:	e7d8      	b.n	8003d68 <HAL_PCD_IRQHandler+0x668>
 8003db6:	f1bc 0f01 	cmp.w	ip, #1
 8003dba:	d1d8      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x66e>
 8003dbc:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003dc0:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8003dc4:	fa1f fc8c 	uxth.w	ip, ip
 8003dc8:	4462      	add	r2, ip
 8003dca:	0109      	lsls	r1, r1, #4
 8003dcc:	5253      	strh	r3, [r2, r1]
 8003dce:	e7ce      	b.n	8003d6e <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd0:	f10c 0c06 	add.w	ip, ip, #6
 8003dd4:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003dd8:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8003ddc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003de0:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8003de2:	bf8c      	ite	hi
 8003de4:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8003de6:	eba2 020c 	subls.w	r2, r2, ip
 8003dea:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d15d      	bne.n	8003eac <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df0:	2328      	movs	r3, #40	@ 0x28
 8003df2:	fb03 4307 	mla	r3, r3, r7, r4
 8003df6:	7c5b      	ldrb	r3, [r3, #17]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d143      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x784>
 8003dfc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003e00:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003e04:	b292      	uxth	r2, r2
 8003e06:	010b      	lsls	r3, r1, #4
 8003e08:	4494      	add	ip, r2
 8003e0a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003e0e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e12:	f82c 2003 	strh.w	r2, [ip, r3]
 8003e16:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003e1a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e1e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e22:	b292      	uxth	r2, r2
 8003e24:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003e2c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003e30:	b292      	uxth	r2, r2
 8003e32:	4410      	add	r0, r2
 8003e34:	5ac2      	ldrh	r2, [r0, r3]
 8003e36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e3a:	52c2      	strh	r2, [r0, r3]
 8003e3c:	5ac2      	ldrh	r2, [r0, r3]
 8003e3e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e42:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e46:	b292      	uxth	r2, r2
 8003e48:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f002 f949 	bl	80060e2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e50:	f1b8 0f00 	cmp.w	r8, #0
 8003e54:	f43f af0c 	beq.w	8003c70 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e58:	2328      	movs	r3, #40	@ 0x28
 8003e5a:	fb03 4307 	mla	r3, r3, r7, r4
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	7c19      	ldrb	r1, [r3, #16]
 8003e62:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003e82:	e44a      	b.n	800371a <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d1e0      	bne.n	8003e4a <HAL_PCD_IRQHandler+0x74a>
 8003e88:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8003e8c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003e90:	fa1f fe8e 	uxth.w	lr, lr
 8003e94:	44f4      	add	ip, lr
 8003e96:	010b      	lsls	r3, r1, #4
 8003e98:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e9c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003ea0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003ea4:	fa1f fc8c 	uxth.w	ip, ip
 8003ea8:	4460      	add	r0, ip
 8003eaa:	e7cd      	b.n	8003e48 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003eac:	f1b8 0f00 	cmp.w	r8, #0
 8003eb0:	d10d      	bne.n	8003ece <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eb2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003eb6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003eba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003ebe:	0412      	lsls	r2, r2, #16
 8003ec0:	0c12      	lsrs	r2, r2, #16
 8003ec2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003ec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eca:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003ece:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8003ed2:	fb08 4807 	mla	r8, r8, r7, r4
 8003ed6:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003eda:	2a01      	cmp	r2, #1
 8003edc:	d1bc      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003ede:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8003ee2:	eb02 0e0c 	add.w	lr, r2, ip
 8003ee6:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4462      	add	r2, ip
 8003eee:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ef0:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8003ef4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d332      	bcc.n	8003f62 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f02:	2328      	movs	r3, #40	@ 0x28
 8003f04:	fb03 4307 	mla	r3, r3, r7, r4
 8003f08:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003f0c:	b293      	uxth	r3, r2
 8003f0e:	f1bc 0f00 	cmp.w	ip, #0
 8003f12:	d142      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x89a>
 8003f14:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003f18:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003f1c:	fa1f f888 	uxth.w	r8, r8
 8003f20:	44c4      	add	ip, r8
 8003f22:	0109      	lsls	r1, r1, #4
 8003f24:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8003f28:	2a3e      	cmp	r2, #62	@ 0x3e
 8003f2a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003f2e:	f82c 8001 	strh.w	r8, [ip, r1]
 8003f32:	d922      	bls.n	8003f7a <HAL_PCD_IRQHandler+0x87a>
 8003f34:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8003f38:	06d2      	lsls	r2, r2, #27
 8003f3a:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003f3e:	bf08      	it	eq
 8003f40:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8003f44:	b292      	uxth	r2, r2
 8003f46:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003f4a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003f4e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f52:	b292      	uxth	r2, r2
 8003f54:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f58:	2228      	movs	r2, #40	@ 0x28
 8003f5a:	fb02 4207 	mla	r2, r2, r7, r4
 8003f5e:	8b52      	ldrh	r2, [r2, #26]
 8003f60:	e709      	b.n	8003d76 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 8003f62:	b91b      	cbnz	r3, 8003f6c <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 8003f64:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8003f66:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8003f6a:	e7ca      	b.n	8003f02 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8003f72:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 8003f76:	461a      	mov	r2, r3
 8003f78:	e7c3      	b.n	8003f02 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f7a:	b912      	cbnz	r2, 8003f82 <HAL_PCD_IRQHandler+0x882>
 8003f7c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003f80:	e7e3      	b.n	8003f4a <HAL_PCD_IRQHandler+0x84a>
 8003f82:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8003f86:	07d2      	lsls	r2, r2, #31
 8003f88:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003f8c:	bf48      	it	mi
 8003f8e:	f108 0801 	addmi.w	r8, r8, #1
 8003f92:	b292      	uxth	r2, r2
 8003f94:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8003f98:	e7db      	b.n	8003f52 <HAL_PCD_IRQHandler+0x852>
 8003f9a:	f1bc 0f01 	cmp.w	ip, #1
 8003f9e:	d1db      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x858>
 8003fa0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003fa4:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	4494      	add	ip, r2
 8003fac:	010a      	lsls	r2, r1, #4
 8003fae:	f82c 3002 	strh.w	r3, [ip, r2]
 8003fb2:	e7d1      	b.n	8003f58 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003fb4:	0546      	lsls	r6, r0, #21
 8003fb6:	d512      	bpl.n	8003fde <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fb8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003fba:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fbc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003fcc:	f002 f895 	bl	80060fa <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4620      	mov	r0, r4
}
 8003fd4:	b005      	add	sp, #20
 8003fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fda:	f7ff bb7e 	b.w	80036da <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003fde:	0441      	lsls	r1, r0, #17
 8003fe0:	d50a      	bpl.n	8003ff8 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8003ff4:	f7ff bb96 	b.w	8003724 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003ff8:	0482      	lsls	r2, r0, #18
 8003ffa:	d505      	bpl.n	8004008 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004006:	e7f1      	b.n	8003fec <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004008:	04c3      	lsls	r3, r0, #19
 800400a:	d519      	bpl.n	8004040 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800400c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800400e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004010:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004014:	f023 0304 	bic.w	r3, r3, #4
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004020:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8004024:	f023 0308 	bic.w	r3, r3, #8
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004030:	f002 f886 	bl	8006140 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800403a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800403e:	e7d5      	b.n	8003fec <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004040:	0507      	lsls	r7, r0, #20
 8004042:	d548      	bpl.n	80040d6 <HAL_PCD_IRQHandler+0x9d6>
 8004044:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	4606      	mov	r6, r0
 800404a:	4619      	mov	r1, r3
 800404c:	461a      	mov	r2, r3
 800404e:	f103 0520 	add.w	r5, r3, #32
 8004052:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8004056:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004058:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800405c:	d1f9      	bne.n	8004052 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800405e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004062:	b292      	uxth	r2, r2
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800406c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	0412      	lsls	r2, r2, #16
 8004076:	0c12      	lsrs	r2, r2, #16
 8004078:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800407c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004080:	0556      	lsls	r6, r2, #21
 8004082:	d5fb      	bpl.n	800407c <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004084:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	0412      	lsls	r2, r2, #16
 800408e:	0c12      	lsrs	r2, r2, #16
 8004090:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004094:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004098:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 800409c:	428d      	cmp	r5, r1
 800409e:	d1f9      	bne.n	8004094 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040a0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80040a4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040a6:	b292      	uxth	r2, r2
 80040a8:	f042 0208 	orr.w	r2, r2, #8
 80040ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80040b0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80040b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b8:	0412      	lsls	r2, r2, #16
 80040ba:	0c12      	lsrs	r2, r2, #16
 80040bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80040c0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80040c4:	b292      	uxth	r2, r2
 80040c6:	f042 0204 	orr.w	r2, r2, #4
 80040ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80040ce:	f002 f827 	bl	8006120 <HAL_PCD_SuspendCallback>
    return;
 80040d2:	f7ff bb27 	b.w	8003724 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040d6:	0582      	lsls	r2, r0, #22
 80040d8:	d50d      	bpl.n	80040f6 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040da:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80040dc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040de:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80040e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80040ee:	f002 f800 	bl	80060f2 <HAL_PCD_SOFCallback>
    return;
 80040f2:	f7ff bb17 	b.w	8003724 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80040f6:	05c3      	lsls	r3, r0, #23
 80040f8:	f57f ab14 	bpl.w	8003724 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004102:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004106:	e771      	b.n	8003fec <HAL_PCD_IRQHandler+0x8ec>

08004108 <HAL_PCD_EP_Open>:
{
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2428      	movs	r4, #40	@ 0x28
 800410c:	4605      	mov	r5, r0
 800410e:	f001 0007 	and.w	r0, r1, #7
 8004112:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8004114:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	bf14      	ite	ne
 800411a:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411e:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8004122:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8004126:	bf15      	itete	ne
 8004128:	2401      	movne	r4, #1
    ep->is_in = 0U;
 800412a:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 800412c:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 800412e:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004132:	bf14      	ite	ne
 8004134:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004136:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8004138:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800413a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800413c:	bf08      	it	eq
 800413e:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004140:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8004142:	bf08      	it	eq
 8004144:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8004146:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004148:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 800414c:	2b01      	cmp	r3, #1
 800414e:	d009      	beq.n	8004164 <HAL_PCD_EP_Open+0x5c>
 8004150:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004152:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004154:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004158:	f000 fbec 	bl	8004934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415c:	2000      	movs	r0, #0
 800415e:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8004162:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8004164:	2002      	movs	r0, #2
 8004166:	e7fc      	b.n	8004162 <HAL_PCD_EP_Open+0x5a>

08004168 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004168:	2328      	movs	r3, #40	@ 0x28
 800416a:	f001 0207 	and.w	r2, r1, #7
 800416e:	4353      	muls	r3, r2
 8004170:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004178:	bf18      	it	ne
 800417a:	f103 0110 	addne.w	r1, r3, #16
 800417e:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004180:	bf0b      	itete	eq
 8004182:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 8004186:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004188:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418c:	bf0a      	itet	eq
 800418e:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004190:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8004192:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8004196:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004198:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800419c:	2b01      	cmp	r3, #1
 800419e:	d009      	beq.n	80041b4 <HAL_PCD_EP_Close+0x4c>
 80041a0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80041a4:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a8:	f000 fd24 	bl	8004bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ac:	2000      	movs	r0, #0
 80041ae:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80041b2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80041b4:	2002      	movs	r0, #2
 80041b6:	e7fc      	b.n	80041b2 <HAL_PCD_EP_Close+0x4a>

080041b8 <HAL_PCD_EP_Receive>:
{
 80041b8:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80041ba:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 80041bc:	2600      	movs	r6, #0
 80041be:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80041c2:	434c      	muls	r4, r1
 80041c4:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80041c6:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ca:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041ce:	4401      	add	r1, r0
  ep->xfer_len = len;
 80041d0:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80041d4:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80041d8:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041dc:	6800      	ldr	r0, [r0, #0]
 80041de:	f000 fe65 	bl	8004eac <USB_EPStartXfer>
}
 80041e2:	4630      	mov	r0, r6
 80041e4:	bd70      	pop	{r4, r5, r6, pc}

080041e6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041e6:	2328      	movs	r3, #40	@ 0x28
 80041e8:	f001 0107 	and.w	r1, r1, #7
 80041ec:	fb03 0001 	mla	r0, r3, r1, r0
}
 80041f0:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80041f4:	4770      	bx	lr

080041f6 <HAL_PCD_EP_Transmit>:
{
 80041f6:	b570      	push	{r4, r5, r6, lr}
 80041f8:	2528      	movs	r5, #40	@ 0x28
 80041fa:	f001 0107 	and.w	r1, r1, #7
 80041fe:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8004200:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8004202:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8004204:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8004208:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800420a:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800420c:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004210:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8004212:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8004216:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8004218:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 800421a:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f000 fe45 	bl	8004eac <USB_EPStartXfer>
}
 8004222:	4630      	mov	r0, r6
 8004224:	bd70      	pop	{r4, r5, r6, pc}

08004226 <HAL_PCD_EP_SetStall>:
{
 8004226:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004228:	7903      	ldrb	r3, [r0, #4]
 800422a:	f001 0507 	and.w	r5, r1, #7
 800422e:	42ab      	cmp	r3, r5
{
 8004230:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004232:	d32a      	bcc.n	800428a <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8004234:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004238:	f04f 0328 	mov.w	r3, #40	@ 0x28
 800423c:	d01c      	beq.n	8004278 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 800423e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004240:	436b      	muls	r3, r5
 8004242:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8004246:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004248:	4401      	add	r1, r0
    ep->is_in = 1U;
 800424a:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 800424c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800424e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004250:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004252:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8004256:	429a      	cmp	r2, r3
 8004258:	d019      	beq.n	800428e <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800425a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800425c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004260:	f000 fd9b 	bl	8004d9a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004264:	b925      	cbnz	r5, 8004270 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800426c:	f000 fe0c 	bl	8004e88 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004270:	2000      	movs	r0, #0
 8004272:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004276:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004278:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800427a:	434b      	muls	r3, r1
 800427c:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8004280:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004282:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004284:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8004288:	e7e0      	b.n	800424c <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 800428a:	2001      	movs	r0, #1
 800428c:	e7f3      	b.n	8004276 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 800428e:	2002      	movs	r0, #2
 8004290:	e7f1      	b.n	8004276 <HAL_PCD_EP_SetStall+0x50>

08004292 <HAL_PCD_EP_ClrStall>:
{
 8004292:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004294:	7902      	ldrb	r2, [r0, #4]
 8004296:	f001 030f 	and.w	r3, r1, #15
 800429a:	429a      	cmp	r2, r3
{
 800429c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800429e:	d326      	bcc.n	80042ee <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80042a0:	2328      	movs	r3, #40	@ 0x28
 80042a2:	f001 0207 	and.w	r2, r1, #7
 80042a6:	4353      	muls	r3, r2
 80042a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ac:	bf14      	ite	ne
 80042ae:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 80042b6:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80042b8:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80042bc:	bf15      	itete	ne
 80042be:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80042c0:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c4:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80042c6:	bf14      	ite	ne
 80042c8:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80042ca:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80042ce:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80042d2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00b      	beq.n	80042f2 <HAL_PCD_EP_ClrStall+0x60>
 80042da:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042dc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80042de:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e2:	f000 fd7a 	bl	8004dda <USB_EPClearStall>
  return HAL_OK;
 80042e6:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80042e8:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7fc      	b.n	80042ec <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80042f2:	2002      	movs	r0, #2
 80042f4:	e7fa      	b.n	80042ec <HAL_PCD_EP_ClrStall+0x5a>

080042f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80042f6:	b510      	push	{r4, lr}
 80042f8:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80042fa:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fe:	bf1b      	ittet	ne
 8004300:	f001 0107 	andne.w	r1, r1, #7
 8004304:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004308:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430c:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 800430e:	bf08      	it	eq
 8004310:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004314:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004316:	b91a      	cbnz	r2, 8004320 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8004318:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800431a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800431c:	2000      	movs	r0, #0
 800431e:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8004320:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004322:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8004324:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004326:	e7f9      	b.n	800431c <HAL_PCDEx_PMAConfig+0x26>

08004328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800432c:	4605      	mov	r5, r0
 800432e:	b338      	cbz	r0, 8004380 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004330:	6803      	ldr	r3, [r0, #0]
 8004332:	07db      	lsls	r3, r3, #31
 8004334:	d410      	bmi.n	8004358 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	079f      	lsls	r7, r3, #30
 800433a:	d45e      	bmi.n	80043fa <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	0719      	lsls	r1, r3, #28
 8004340:	f100 8095 	bmi.w	800446e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	075a      	lsls	r2, r3, #29
 8004348:	f100 80c1 	bmi.w	80044ce <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434c:	69eb      	ldr	r3, [r5, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 812c 	bne.w	80045ac <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004354:	2000      	movs	r0, #0
 8004356:	e029      	b.n	80043ac <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004358:	4c90      	ldr	r4, [pc, #576]	@ (800459c <HAL_RCC_OscConfig+0x274>)
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b04      	cmp	r3, #4
 8004362:	d007      	beq.n	8004374 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004364:	6863      	ldr	r3, [r4, #4]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d10a      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	03de      	lsls	r6, r3, #15
 8004372:	d507      	bpl.n	8004384 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	039c      	lsls	r4, r3, #14
 8004378:	d5dd      	bpl.n	8004336 <HAL_RCC_OscConfig+0xe>
 800437a:	686b      	ldr	r3, [r5, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1da      	bne.n	8004336 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004380:	2001      	movs	r0, #1
 8004382:	e013      	b.n	80043ac <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	686b      	ldr	r3, [r5, #4]
 8004386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438a:	d112      	bne.n	80043b2 <HAL_RCC_OscConfig+0x8a>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004392:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004394:	f7fe ffca 	bl	800332c <HAL_GetTick>
 8004398:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0398      	lsls	r0, r3, #14
 800439e:	d4ca      	bmi.n	8004336 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe ffc4 	bl	800332c <HAL_GetTick>
 80043a4:	1b80      	subs	r0, r0, r6
 80043a6:	2864      	cmp	r0, #100	@ 0x64
 80043a8:	d9f7      	bls.n	800439a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80043aa:	2003      	movs	r0, #3
}
 80043ac:	b002      	add	sp, #8
 80043ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b2:	b99b      	cbnz	r3, 80043dc <HAL_RCC_OscConfig+0xb4>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043c4:	f7fe ffb2 	bl	800332c <HAL_GetTick>
 80043c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0399      	lsls	r1, r3, #14
 80043ce:	d5b2      	bpl.n	8004336 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe ffac 	bl	800332c <HAL_GetTick>
 80043d4:	1b80      	subs	r0, r0, r6
 80043d6:	2864      	cmp	r0, #100	@ 0x64
 80043d8:	d9f7      	bls.n	80043ca <HAL_RCC_OscConfig+0xa2>
 80043da:	e7e6      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	d103      	bne.n	80043ec <HAL_RCC_OscConfig+0xc4>
 80043e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	e7cf      	b.n	800438c <HAL_RCC_OscConfig+0x64>
 80043ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043f8:	e7cb      	b.n	8004392 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043fa:	4c68      	ldr	r4, [pc, #416]	@ (800459c <HAL_RCC_OscConfig+0x274>)
 80043fc:	6863      	ldr	r3, [r4, #4]
 80043fe:	f013 0f0c 	tst.w	r3, #12
 8004402:	d007      	beq.n	8004414 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004404:	6863      	ldr	r3, [r4, #4]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b08      	cmp	r3, #8
 800440c:	d110      	bne.n	8004430 <HAL_RCC_OscConfig+0x108>
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	03da      	lsls	r2, r3, #15
 8004412:	d40d      	bmi.n	8004430 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	079b      	lsls	r3, r3, #30
 8004418:	d502      	bpl.n	8004420 <HAL_RCC_OscConfig+0xf8>
 800441a:	692b      	ldr	r3, [r5, #16]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d1af      	bne.n	8004380 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	696a      	ldr	r2, [r5, #20]
 8004424:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004428:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	e785      	b.n	800433c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004430:	692a      	ldr	r2, [r5, #16]
 8004432:	4b5b      	ldr	r3, [pc, #364]	@ (80045a0 <HAL_RCC_OscConfig+0x278>)
 8004434:	b16a      	cbz	r2, 8004452 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800443a:	f7fe ff77 	bl	800332c <HAL_GetTick>
 800443e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	079f      	lsls	r7, r3, #30
 8004444:	d4ec      	bmi.n	8004420 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fe ff71 	bl	800332c <HAL_GetTick>
 800444a:	1b80      	subs	r0, r0, r6
 800444c:	2802      	cmp	r0, #2
 800444e:	d9f7      	bls.n	8004440 <HAL_RCC_OscConfig+0x118>
 8004450:	e7ab      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8004452:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004454:	f7fe ff6a 	bl	800332c <HAL_GetTick>
 8004458:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0798      	lsls	r0, r3, #30
 800445e:	f57f af6d 	bpl.w	800433c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fe ff63 	bl	800332c <HAL_GetTick>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	2802      	cmp	r0, #2
 800446a:	d9f6      	bls.n	800445a <HAL_RCC_OscConfig+0x132>
 800446c:	e79d      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800446e:	69aa      	ldr	r2, [r5, #24]
 8004470:	4e4a      	ldr	r6, [pc, #296]	@ (800459c <HAL_RCC_OscConfig+0x274>)
 8004472:	4b4b      	ldr	r3, [pc, #300]	@ (80045a0 <HAL_RCC_OscConfig+0x278>)
 8004474:	b1e2      	cbz	r2, 80044b0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004476:	2201      	movs	r2, #1
 8004478:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800447c:	f7fe ff56 	bl	800332c <HAL_GetTick>
 8004480:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004484:	079b      	lsls	r3, r3, #30
 8004486:	d50d      	bpl.n	80044a4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004488:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800448c:	4b45      	ldr	r3, [pc, #276]	@ (80045a4 <HAL_RCC_OscConfig+0x27c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fbb3 f3f2 	udiv	r3, r3, r2
 8004494:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004496:	bf00      	nop
  }
  while (Delay --);
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	1e5a      	subs	r2, r3, #1
 800449c:	9201      	str	r2, [sp, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f9      	bne.n	8004496 <HAL_RCC_OscConfig+0x16e>
 80044a2:	e74f      	b.n	8004344 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fe ff42 	bl	800332c <HAL_GetTick>
 80044a8:	1b00      	subs	r0, r0, r4
 80044aa:	2802      	cmp	r0, #2
 80044ac:	d9e9      	bls.n	8004482 <HAL_RCC_OscConfig+0x15a>
 80044ae:	e77c      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80044b0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80044b4:	f7fe ff3a 	bl	800332c <HAL_GetTick>
 80044b8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ba:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80044bc:	079f      	lsls	r7, r3, #30
 80044be:	f57f af41 	bpl.w	8004344 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fe ff33 	bl	800332c <HAL_GetTick>
 80044c6:	1b00      	subs	r0, r0, r4
 80044c8:	2802      	cmp	r0, #2
 80044ca:	d9f6      	bls.n	80044ba <HAL_RCC_OscConfig+0x192>
 80044cc:	e76d      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4c33      	ldr	r4, [pc, #204]	@ (800459c <HAL_RCC_OscConfig+0x274>)
 80044d0:	69e3      	ldr	r3, [r4, #28]
 80044d2:	00d8      	lsls	r0, r3, #3
 80044d4:	d424      	bmi.n	8004520 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80044d6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d8:	69e3      	ldr	r3, [r4, #28]
 80044da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044de:	61e3      	str	r3, [r4, #28]
 80044e0:	69e3      	ldr	r3, [r4, #28]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	4e2f      	ldr	r6, [pc, #188]	@ (80045a8 <HAL_RCC_OscConfig+0x280>)
 80044ec:	6833      	ldr	r3, [r6, #0]
 80044ee:	05d9      	lsls	r1, r3, #23
 80044f0:	d518      	bpl.n	8004524 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f2:	68eb      	ldr	r3, [r5, #12]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d126      	bne.n	8004546 <HAL_RCC_OscConfig+0x21e>
 80044f8:	6a23      	ldr	r3, [r4, #32]
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004500:	f7fe ff14 	bl	800332c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004508:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	6a23      	ldr	r3, [r4, #32]
 800450c:	079b      	lsls	r3, r3, #30
 800450e:	d53f      	bpl.n	8004590 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004510:	2f00      	cmp	r7, #0
 8004512:	f43f af1b 	beq.w	800434c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	69e3      	ldr	r3, [r4, #28]
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451c:	61e3      	str	r3, [r4, #28]
 800451e:	e715      	b.n	800434c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004520:	2700      	movs	r7, #0
 8004522:	e7e2      	b.n	80044ea <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800452c:	f7fe fefe 	bl	800332c <HAL_GetTick>
 8004530:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	6833      	ldr	r3, [r6, #0]
 8004534:	05da      	lsls	r2, r3, #23
 8004536:	d4dc      	bmi.n	80044f2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004538:	f7fe fef8 	bl	800332c <HAL_GetTick>
 800453c:	eba0 0008 	sub.w	r0, r0, r8
 8004540:	2864      	cmp	r0, #100	@ 0x64
 8004542:	d9f6      	bls.n	8004532 <HAL_RCC_OscConfig+0x20a>
 8004544:	e731      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004546:	b9ab      	cbnz	r3, 8004574 <HAL_RCC_OscConfig+0x24c>
 8004548:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6223      	str	r3, [r4, #32]
 8004554:	6a23      	ldr	r3, [r4, #32]
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800455c:	f7fe fee6 	bl	800332c <HAL_GetTick>
 8004560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004562:	6a23      	ldr	r3, [r4, #32]
 8004564:	0798      	lsls	r0, r3, #30
 8004566:	d5d3      	bpl.n	8004510 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fe fee0 	bl	800332c <HAL_GetTick>
 800456c:	1b80      	subs	r0, r0, r6
 800456e:	4540      	cmp	r0, r8
 8004570:	d9f7      	bls.n	8004562 <HAL_RCC_OscConfig+0x23a>
 8004572:	e71a      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	2b05      	cmp	r3, #5
 8004576:	6a23      	ldr	r3, [r4, #32]
 8004578:	d103      	bne.n	8004582 <HAL_RCC_OscConfig+0x25a>
 800457a:	f043 0304 	orr.w	r3, r3, #4
 800457e:	6223      	str	r3, [r4, #32]
 8004580:	e7ba      	b.n	80044f8 <HAL_RCC_OscConfig+0x1d0>
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	6223      	str	r3, [r4, #32]
 8004588:	6a23      	ldr	r3, [r4, #32]
 800458a:	f023 0304 	bic.w	r3, r3, #4
 800458e:	e7b6      	b.n	80044fe <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fe fecc 	bl	800332c <HAL_GetTick>
 8004594:	1b80      	subs	r0, r0, r6
 8004596:	4540      	cmp	r0, r8
 8004598:	d9b7      	bls.n	800450a <HAL_RCC_OscConfig+0x1e2>
 800459a:	e706      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
 800459c:	40021000 	.word	0x40021000
 80045a0:	42420000 	.word	0x42420000
 80045a4:	2000000c 	.word	0x2000000c
 80045a8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ac:	4c2a      	ldr	r4, [pc, #168]	@ (8004658 <HAL_RCC_OscConfig+0x330>)
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	f002 020c 	and.w	r2, r2, #12
 80045b4:	2a08      	cmp	r2, #8
 80045b6:	d03e      	beq.n	8004636 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b8:	2200      	movs	r2, #0
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	4b27      	ldr	r3, [pc, #156]	@ (800465c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c0:	d12c      	bne.n	800461c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80045c2:	f7fe feb3 	bl	800332c <HAL_GetTick>
 80045c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	0199      	lsls	r1, r3, #6
 80045cc:	d420      	bmi.n	8004610 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045ce:	6a2b      	ldr	r3, [r5, #32]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	68a9      	ldr	r1, [r5, #8]
 80045da:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80045de:	430a      	orrs	r2, r1
 80045e0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80045e4:	6862      	ldr	r2, [r4, #4]
 80045e6:	430b      	orrs	r3, r1
 80045e8:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80045ec:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80045ee:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <HAL_RCC_OscConfig+0x334>)
 80045f4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80045f6:	f7fe fe99 	bl	800332c <HAL_GetTick>
 80045fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	019a      	lsls	r2, r3, #6
 8004600:	f53f aea8 	bmi.w	8004354 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fe fe92 	bl	800332c <HAL_GetTick>
 8004608:	1b40      	subs	r0, r0, r5
 800460a:	2802      	cmp	r0, #2
 800460c:	d9f6      	bls.n	80045fc <HAL_RCC_OscConfig+0x2d4>
 800460e:	e6cc      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fe fe8c 	bl	800332c <HAL_GetTick>
 8004614:	1b80      	subs	r0, r0, r6
 8004616:	2802      	cmp	r0, #2
 8004618:	d9d6      	bls.n	80045c8 <HAL_RCC_OscConfig+0x2a0>
 800461a:	e6c6      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800461c:	f7fe fe86 	bl	800332c <HAL_GetTick>
 8004620:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	f57f ae95 	bpl.w	8004354 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462a:	f7fe fe7f 	bl	800332c <HAL_GetTick>
 800462e:	1b40      	subs	r0, r0, r5
 8004630:	2802      	cmp	r0, #2
 8004632:	d9f6      	bls.n	8004622 <HAL_RCC_OscConfig+0x2fa>
 8004634:	e6b9      	b.n	80043aa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004636:	2b01      	cmp	r3, #1
 8004638:	f43f aea2 	beq.w	8004380 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 800463c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	6a2b      	ldr	r3, [r5, #32]
 8004640:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004644:	429a      	cmp	r2, r3
 8004646:	f47f ae9b 	bne.w	8004380 <HAL_RCC_OscConfig+0x58>
 800464a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800464c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004650:	1ac0      	subs	r0, r0, r3
 8004652:	bf18      	it	ne
 8004654:	2001      	movne	r0, #1
 8004656:	e6a9      	b.n	80043ac <HAL_RCC_OscConfig+0x84>
 8004658:	40021000 	.word	0x40021000
 800465c:	42420000 	.word	0x42420000

08004660 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004660:	4a0d      	ldr	r2, [pc, #52]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x38>)
 8004662:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004664:	f003 010c 	and.w	r1, r3, #12
 8004668:	2908      	cmp	r1, #8
 800466a:	d112      	bne.n	8004692 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800466c:	480b      	ldr	r0, [pc, #44]	@ (800469c <HAL_RCC_GetSysClockFreq+0x3c>)
 800466e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004672:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004674:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004676:	d509      	bpl.n	800468c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004678:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800467c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004680:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004682:	4a08      	ldr	r2, [pc, #32]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x44>)
 8004684:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004686:	fbb0 f0f3 	udiv	r0, r0, r3
 800468a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x48>)
 800468e:	4358      	muls	r0, r3
 8004690:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004692:	4803      	ldr	r0, [pc, #12]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	0800b8cf 	.word	0x0800b8cf
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	0800b8cd 	.word	0x0800b8cd
 80046a8:	003d0900 	.word	0x003d0900

080046ac <HAL_RCC_ClockConfig>:
{
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80046b2:	4604      	mov	r4, r0
 80046b4:	b910      	cbnz	r0, 80046bc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80046b6:	2001      	movs	r0, #1
}
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4a44      	ldr	r2, [pc, #272]	@ (80047d0 <HAL_RCC_ClockConfig+0x124>)
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	428b      	cmp	r3, r1
 80046c6:	d328      	bcc.n	800471a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	6821      	ldr	r1, [r4, #0]
 80046ca:	078e      	lsls	r6, r1, #30
 80046cc:	d430      	bmi.n	8004730 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	07ca      	lsls	r2, r1, #31
 80046d0:	d443      	bmi.n	800475a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d2:	4a3f      	ldr	r2, [pc, #252]	@ (80047d0 <HAL_RCC_ClockConfig+0x124>)
 80046d4:	6813      	ldr	r3, [r2, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	42ab      	cmp	r3, r5
 80046dc:	d865      	bhi.n	80047aa <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	4d3c      	ldr	r5, [pc, #240]	@ (80047d4 <HAL_RCC_ClockConfig+0x128>)
 80046e2:	f012 0f04 	tst.w	r2, #4
 80046e6:	d16c      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	0713      	lsls	r3, r2, #28
 80046ea:	d506      	bpl.n	80046fa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ec:	686b      	ldr	r3, [r5, #4]
 80046ee:	6922      	ldr	r2, [r4, #16]
 80046f0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80046f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80046f8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046fa:	f7ff ffb1 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80046fe:	686b      	ldr	r3, [r5, #4]
 8004700:	4a35      	ldr	r2, [pc, #212]	@ (80047d8 <HAL_RCC_ClockConfig+0x12c>)
 8004702:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004706:	5cd3      	ldrb	r3, [r2, r3]
 8004708:	40d8      	lsrs	r0, r3
 800470a:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_ClockConfig+0x130>)
 800470c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <HAL_RCC_ClockConfig+0x134>)
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	f7fe fdc9 	bl	80032a8 <HAL_InitTick>
  return HAL_OK;
 8004716:	2000      	movs	r0, #0
 8004718:	e7ce      	b.n	80046b8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f023 0307 	bic.w	r3, r3, #7
 8004720:	430b      	orrs	r3, r1
 8004722:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004724:	6813      	ldr	r3, [r2, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	428b      	cmp	r3, r1
 800472c:	d1c3      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xa>
 800472e:	e7cb      	b.n	80046c8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004730:	4b28      	ldr	r3, [pc, #160]	@ (80047d4 <HAL_RCC_ClockConfig+0x128>)
 8004732:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004736:	bf1e      	ittt	ne
 8004738:	685a      	ldrne	r2, [r3, #4]
 800473a:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 800473e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004742:	bf42      	ittt	mi
 8004744:	685a      	ldrmi	r2, [r3, #4]
 8004746:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800474a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68a0      	ldr	r0, [r4, #8]
 8004750:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004754:	4302      	orrs	r2, r0
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	e7b9      	b.n	80046ce <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475a:	6862      	ldr	r2, [r4, #4]
 800475c:	4e1d      	ldr	r6, [pc, #116]	@ (80047d4 <HAL_RCC_ClockConfig+0x128>)
 800475e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004760:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004762:	d11a      	bne.n	800479a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004764:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	d0a5      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	4313      	orrs	r3, r2
 8004776:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004778:	f7fe fdd8 	bl	800332c <HAL_GetTick>
 800477c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	6873      	ldr	r3, [r6, #4]
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800478a:	d0a2      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7fe fdce 	bl	800332c <HAL_GetTick>
 8004790:	1bc0      	subs	r0, r0, r7
 8004792:	4540      	cmp	r0, r8
 8004794:	d9f3      	bls.n	800477e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004796:	2003      	movs	r0, #3
 8004798:	e78e      	b.n	80046b8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	2a02      	cmp	r2, #2
 800479c:	d102      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80047a2:	e7e1      	b.n	8004768 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a4:	f013 0f02 	tst.w	r3, #2
 80047a8:	e7de      	b.n	8004768 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	f023 0307 	bic.w	r3, r3, #7
 80047b0:	432b      	orrs	r3, r5
 80047b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	42ab      	cmp	r3, r5
 80047bc:	f47f af7b 	bne.w	80046b6 <HAL_RCC_ClockConfig+0xa>
 80047c0:	e78d      	b.n	80046de <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c2:	686b      	ldr	r3, [r5, #4]
 80047c4:	68e1      	ldr	r1, [r4, #12]
 80047c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80047ca:	430b      	orrs	r3, r1
 80047cc:	606b      	str	r3, [r5, #4]
 80047ce:	e78b      	b.n	80046e8 <HAL_RCC_ClockConfig+0x3c>
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40021000 	.word	0x40021000
 80047d8:	0800b8bd 	.word	0x0800b8bd
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	20000014 	.word	0x20000014

080047e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047e4:	6803      	ldr	r3, [r0, #0]
{
 80047e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80047ea:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047ec:	07d8      	lsls	r0, r3, #31
 80047ee:	d521      	bpl.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f0:	4c36      	ldr	r4, [pc, #216]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80047f2:	69e3      	ldr	r3, [r4, #28]
 80047f4:	00d9      	lsls	r1, r3, #3
 80047f6:	d42b      	bmi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80047f8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	69e3      	ldr	r3, [r4, #28]
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004800:	61e3      	str	r3, [r4, #28]
 8004802:	69e3      	ldr	r3, [r4, #28]
 8004804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	4f30      	ldr	r7, [pc, #192]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	05da      	lsls	r2, r3, #23
 8004812:	d51f      	bpl.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004814:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004816:	686a      	ldr	r2, [r5, #4]
 8004818:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800481c:	d12e      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481e:	6a23      	ldr	r3, [r4, #32]
 8004820:	686a      	ldr	r2, [r5, #4]
 8004822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004826:	4313      	orrs	r3, r2
 8004828:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800482a:	b11e      	cbz	r6, 8004834 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	69e3      	ldr	r3, [r4, #28]
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004834:	682a      	ldr	r2, [r5, #0]
 8004836:	0791      	lsls	r1, r2, #30
 8004838:	d506      	bpl.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800483a:	4924      	ldr	r1, [pc, #144]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800483c:	68a8      	ldr	r0, [r5, #8]
 800483e:	684b      	ldr	r3, [r1, #4]
 8004840:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004844:	4303      	orrs	r3, r0
 8004846:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004848:	06d3      	lsls	r3, r2, #27
 800484a:	d436      	bmi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800484c:	2000      	movs	r0, #0
 800484e:	e012      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8004850:	2600      	movs	r6, #0
 8004852:	e7db      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800485c:	f7fe fd66 	bl	800332c <HAL_GetTick>
 8004860:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	05db      	lsls	r3, r3, #23
 8004866:	d4d5      	bmi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fe fd60 	bl	800332c <HAL_GetTick>
 800486c:	eba0 0008 	sub.w	r0, r0, r8
 8004870:	2864      	cmp	r0, #100	@ 0x64
 8004872:	d9f6      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8004874:	2003      	movs	r0, #3
}
 8004876:	b002      	add	sp, #8
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800487c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004880:	429a      	cmp	r2, r3
 8004882:	d0cc      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004884:	2001      	movs	r0, #1
 8004886:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004888:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800488a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004890:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004894:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 800489a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800489c:	d5bf      	bpl.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800489e:	f7fe fd45 	bl	800332c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80048a6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	6a23      	ldr	r3, [r4, #32]
 80048aa:	0798      	lsls	r0, r3, #30
 80048ac:	d4b7      	bmi.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ae:	f7fe fd3d 	bl	800332c <HAL_GetTick>
 80048b2:	1bc0      	subs	r0, r0, r7
 80048b4:	4540      	cmp	r0, r8
 80048b6:	d9f7      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80048b8:	e7dc      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ba:	4a04      	ldr	r2, [pc, #16]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80048bc:	68e9      	ldr	r1, [r5, #12]
 80048be:	6853      	ldr	r3, [r2, #4]
 80048c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80048c4:	430b      	orrs	r3, r1
 80048c6:	6053      	str	r3, [r2, #4]
 80048c8:	e7c0      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420000 	.word	0x42420000

080048d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048d8:	b084      	sub	sp, #16
 80048da:	a804      	add	r0, sp, #16
 80048dc:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80048e0:	2000      	movs	r0, #0
 80048e2:	b004      	add	sp, #16
 80048e4:	4770      	bx	lr

080048e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048e6:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048e8:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 80048ec:	2000      	movs	r0, #0
 80048ee:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80048f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80048f6:	4770      	bx	lr

080048f8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80048f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80048fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004900:	045b      	lsls	r3, r3, #17
 8004902:	0c5b      	lsrs	r3, r3, #17
 8004904:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8004908:	2000      	movs	r0, #0
 800490a:	4770      	bx	lr

0800490c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800490c:	2000      	movs	r0, #0
 800490e:	4770      	bx	lr

08004910 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004912:	4604      	mov	r4, r0
 8004914:	a804      	add	r0, sp, #16
 8004916:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800491a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800491c:	2301      	movs	r3, #1
 800491e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8004922:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004926:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800492a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 800492e:	b004      	add	sp, #16
 8004930:	bd10      	pop	{r4, pc}
	...

08004934 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004936:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004938:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800493a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800493e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004940:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8004944:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8004948:	0424      	lsls	r4, r4, #16
 800494a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800494c:	2d03      	cmp	r5, #3
 800494e:	d803      	bhi.n	8004958 <USB_ActivateEndpoint+0x24>
 8004950:	e8df f005 	tbb	[pc, r5]
 8004954:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004958:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800495a:	f248 0680 	movw	r6, #32896	@ 0x8080
 800495e:	4334      	orrs	r4, r6
 8004960:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004964:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004968:	4f9f      	ldr	r7, [pc, #636]	@ (8004be8 <USB_ActivateEndpoint+0x2b4>)
 800496a:	b2a4      	uxth	r4, r4
 800496c:	403c      	ands	r4, r7
 800496e:	4314      	orrs	r4, r2
 8004970:	4334      	orrs	r4, r6
 8004972:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004976:	7b0c      	ldrb	r4, [r1, #12]
 8004978:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 800497c:	2c00      	cmp	r4, #0
 800497e:	f040 808d 	bne.w	8004a9c <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004982:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004984:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004986:	0864      	lsrs	r4, r4, #1
 8004988:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800498a:	b37e      	cbz	r6, 80049ec <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800498c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004990:	b289      	uxth	r1, r1
 8004992:	4461      	add	r1, ip
 8004994:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004998:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800499c:	0649      	lsls	r1, r1, #25
 800499e:	d509      	bpl.n	80049b4 <USB_ActivateEndpoint+0x80>
 80049a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049a4:	b289      	uxth	r1, r1
 80049a6:	4039      	ands	r1, r7
 80049a8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80049ac:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80049b0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049b8:	4c8c      	ldr	r4, [pc, #560]	@ (8004bec <USB_ActivateEndpoint+0x2b8>)
 80049ba:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 80049bc:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049be:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80049c2:	d001      	beq.n	80049c8 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049c4:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049c8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80049cc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80049d0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80049d4:	e04c      	b.n	8004a70 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 80049d6:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 80049d8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 80049dc:	e7bd      	b.n	800495a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 80049de:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7b9      	b.n	800495a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049e6:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 80049ea:	e7fa      	b.n	80049e2 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049ec:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049f0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049f2:	b2ad      	uxth	r5, r5
 80049f4:	4465      	add	r5, ip
 80049f6:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049fa:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80049fe:	293e      	cmp	r1, #62	@ 0x3e
 8004a00:	b2a4      	uxth	r4, r4
 8004a02:	4464      	add	r4, ip
 8004a04:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8004a08:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a0c:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8004a10:	d92f      	bls.n	8004a72 <USB_ActivateEndpoint+0x13e>
 8004a12:	094d      	lsrs	r5, r1, #5
 8004a14:	06ce      	lsls	r6, r1, #27
 8004a16:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004a1a:	bf08      	it	eq
 8004a1c:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004a20:	b289      	uxth	r1, r1
 8004a22:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004a26:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004a2a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004a2e:	b289      	uxth	r1, r1
 8004a30:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a34:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a38:	044f      	lsls	r7, r1, #17
 8004a3a:	d50d      	bpl.n	8004a58 <USB_ActivateEndpoint+0x124>
 8004a3c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a40:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004a44:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004a48:	0409      	lsls	r1, r1, #16
 8004a4a:	0c09      	lsrs	r1, r1, #16
 8004a4c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004a50:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004a54:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004a58:	4c65      	ldr	r4, [pc, #404]	@ (8004bf0 <USB_ActivateEndpoint+0x2bc>)
 8004a5a:	b9c2      	cbnz	r2, 8004a8e <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	4022      	ands	r2, r4
 8004a62:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a6e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a72:	b911      	cbnz	r1, 8004a7a <USB_ActivateEndpoint+0x146>
 8004a74:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004a78:	e7d5      	b.n	8004a26 <USB_ActivateEndpoint+0xf2>
 8004a7a:	084d      	lsrs	r5, r1, #1
 8004a7c:	07c9      	lsls	r1, r1, #31
 8004a7e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004a82:	bf48      	it	mi
 8004a84:	3501      	addmi	r5, #1
 8004a86:	b289      	uxth	r1, r1
 8004a88:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004a8c:	e7cf      	b.n	8004a2e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a8e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004a92:	b289      	uxth	r1, r1
 8004a94:	4021      	ands	r1, r4
 8004a96:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8004a9a:	e795      	b.n	80049c8 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8004a9c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a9e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8004aa2:	d15b      	bne.n	8004b5c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004aa4:	b2a4      	uxth	r4, r4
 8004aa6:	403c      	ands	r4, r7
 8004aa8:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8004aac:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8004ab0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ab4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004ab8:	890e      	ldrh	r6, [r1, #8]
 8004aba:	b2a4      	uxth	r4, r4
 8004abc:	0876      	lsrs	r6, r6, #1
 8004abe:	4464      	add	r4, ip
 8004ac0:	0076      	lsls	r6, r6, #1
 8004ac2:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8004ac6:	894e      	ldrh	r6, [r1, #10]
 8004ac8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004acc:	0876      	lsrs	r6, r6, #1
 8004ace:	b2a4      	uxth	r4, r4
 8004ad0:	4464      	add	r4, ip
 8004ad2:	0076      	lsls	r6, r6, #1
 8004ad4:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8004ad8:	7849      	ldrb	r1, [r1, #1]
 8004ada:	2900      	cmp	r1, #0
 8004adc:	d148      	bne.n	8004b70 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ade:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ae2:	044e      	lsls	r6, r1, #17
 8004ae4:	d50d      	bpl.n	8004b02 <USB_ActivateEndpoint+0x1ce>
 8004ae6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004aea:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004aee:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004af2:	0409      	lsls	r1, r1, #16
 8004af4:	0c09      	lsrs	r1, r1, #16
 8004af6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004afa:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004afe:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b06:	064d      	lsls	r5, r1, #25
 8004b08:	d50d      	bpl.n	8004b26 <USB_ActivateEndpoint+0x1f2>
 8004b0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b0e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004b12:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004b16:	0409      	lsls	r1, r1, #16
 8004b18:	0c09      	lsrs	r1, r1, #16
 8004b1a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004b1e:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004b22:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b26:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004b2a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b2e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004b32:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004b36:	0409      	lsls	r1, r1, #16
 8004b38:	0c09      	lsrs	r1, r1, #16
 8004b3a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8004b3e:	4321      	orrs	r1, r4
 8004b40:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b44:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b48:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004b4c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004b50:	0409      	lsls	r1, r1, #16
 8004b52:	0c09      	lsrs	r1, r1, #16
 8004b54:	430c      	orrs	r4, r1
 8004b56:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8004b5a:	e789      	b.n	8004a70 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b5c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8004b60:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8004b64:	0424      	lsls	r4, r4, #16
 8004b66:	0c24      	lsrs	r4, r4, #16
 8004b68:	4326      	orrs	r6, r4
 8004b6a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8004b6e:	e7a1      	b.n	8004ab4 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b70:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b74:	044c      	lsls	r4, r1, #17
 8004b76:	d50d      	bpl.n	8004b94 <USB_ActivateEndpoint+0x260>
 8004b78:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b7c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004b80:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004b84:	0409      	lsls	r1, r1, #16
 8004b86:	0c09      	lsrs	r1, r1, #16
 8004b88:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004b8c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004b90:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b94:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004b98:	0649      	lsls	r1, r1, #25
 8004b9a:	d50d      	bpl.n	8004bb8 <USB_ActivateEndpoint+0x284>
 8004b9c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ba0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004ba4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004ba8:	0409      	lsls	r1, r1, #16
 8004baa:	0c09      	lsrs	r1, r1, #16
 8004bac:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004bb0:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004bb4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bb8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8004bec <USB_ActivateEndpoint+0x2b8>)
 8004bbe:	b289      	uxth	r1, r1
 8004bc0:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004bc2:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc4:	bf18      	it	ne
 8004bc6:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bca:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004bce:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004bd2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004bda:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004bde:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004be2:	0409      	lsls	r1, r1, #16
 8004be4:	0c09      	lsrs	r1, r1, #16
 8004be6:	e6ef      	b.n	80049c8 <USB_ActivateEndpoint+0x94>
 8004be8:	ffff8f8f 	.word	0xffff8f8f
 8004bec:	ffff8fbf 	.word	0xffff8fbf
 8004bf0:	ffffbf8f 	.word	0xffffbf8f

08004bf4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004bf4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004bf8:	7b09      	ldrb	r1, [r1, #12]
 8004bfa:	bbd9      	cbnz	r1, 8004c74 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004bfc:	b30a      	cbz	r2, 8004c42 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bfe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c02:	0651      	lsls	r1, r2, #25
 8004c04:	d50d      	bpl.n	8004c22 <USB_DeactivateEndpoint+0x2e>
 8004c06:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c0a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c12:	0412      	lsls	r2, r2, #16
 8004c14:	0c12      	lsrs	r2, r2, #16
 8004c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c1a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004c1e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c26:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c2e:	0412      	lsls	r2, r2, #16
 8004c30:	0c12      	lsrs	r2, r2, #16
 8004c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c3a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004c3e:	2000      	movs	r0, #0
 8004c40:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c46:	0452      	lsls	r2, r2, #17
 8004c48:	d50d      	bpl.n	8004c66 <USB_DeactivateEndpoint+0x72>
 8004c4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c56:	0412      	lsls	r2, r2, #16
 8004c58:	0c12      	lsrs	r2, r2, #16
 8004c5a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004c5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c6e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c72:	e7dc      	b.n	8004c2e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004c74:	2a00      	cmp	r2, #0
 8004c76:	d14a      	bne.n	8004d0e <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c78:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c7c:	0451      	lsls	r1, r2, #17
 8004c7e:	d50d      	bpl.n	8004c9c <USB_DeactivateEndpoint+0xa8>
 8004c80:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c84:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c8c:	0412      	lsls	r2, r2, #16
 8004c8e:	0c12      	lsrs	r2, r2, #16
 8004c90:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c98:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ca0:	0652      	lsls	r2, r2, #25
 8004ca2:	d50d      	bpl.n	8004cc0 <USB_DeactivateEndpoint+0xcc>
 8004ca4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ca8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004cac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cb0:	0412      	lsls	r2, r2, #16
 8004cb2:	0c12      	lsrs	r2, r2, #16
 8004cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004cbc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cc0:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004cc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cc8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004ccc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cd0:	0412      	lsls	r2, r2, #16
 8004cd2:	0c12      	lsrs	r2, r2, #16
 8004cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004cdc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ce0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ce4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ce8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cec:	0412      	lsls	r2, r2, #16
 8004cee:	0c12      	lsrs	r2, r2, #16
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cf6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004cfa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	0412      	lsls	r2, r2, #16
 8004d04:	0c12      	lsrs	r2, r2, #16
 8004d06:	4311      	orrs	r1, r2
 8004d08:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004d0c:	e797      	b.n	8004c3e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d12:	0451      	lsls	r1, r2, #17
 8004d14:	d50d      	bpl.n	8004d32 <USB_DeactivateEndpoint+0x13e>
 8004d16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d1a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004d1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d22:	0412      	lsls	r2, r2, #16
 8004d24:	0c12      	lsrs	r2, r2, #16
 8004d26:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004d2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	d50d      	bpl.n	8004d56 <USB_DeactivateEndpoint+0x162>
 8004d3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d3e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004d42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d46:	0412      	lsls	r2, r2, #16
 8004d48:	0c12      	lsrs	r2, r2, #16
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d4e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004d52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d56:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004d5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d5e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004d62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d66:	0412      	lsls	r2, r2, #16
 8004d68:	0c12      	lsrs	r2, r2, #16
 8004d6a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004d6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d72:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d7a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d82:	0412      	lsls	r2, r2, #16
 8004d84:	0c12      	lsrs	r2, r2, #16
 8004d86:	430a      	orrs	r2, r1
 8004d88:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d8c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004d90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d94:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d98:	e7b3      	b.n	8004d02 <USB_DeactivateEndpoint+0x10e>

08004d9a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004d9a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004d9c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8004d9e:	b18b      	cbz	r3, 8004dc4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004da0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004dc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004dd8:	e7ec      	b.n	8004db4 <USB_EPSetStall+0x1a>

08004dda <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004dda:	7b0b      	ldrb	r3, [r1, #12]
 8004ddc:	bb3b      	cbnz	r3, 8004e2e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8004dde:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de0:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8004de2:	b333      	cbz	r3, 8004e32 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004de8:	065b      	lsls	r3, r3, #25
 8004dea:	d50d      	bpl.n	8004e08 <USB_EPClearStall+0x2e>
 8004dec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004e08:	78cb      	ldrb	r3, [r1, #3]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00f      	beq.n	8004e2e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004e2e:	2000      	movs	r0, #0
 8004e30:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e36:	045b      	lsls	r3, r3, #17
 8004e38:	d50d      	bpl.n	8004e56 <USB_EPClearStall+0x7c>
 8004e3a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	041b      	lsls	r3, r3, #16
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e52:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e56:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004e6a:	e7da      	b.n	8004e22 <USB_EPClearStall+0x48>

08004e6c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004e6c:	b911      	cbnz	r1, 8004e74 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004e6e:	2380      	movs	r3, #128	@ 0x80
 8004e70:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8004e74:	2000      	movs	r0, #0
 8004e76:	4770      	bx	lr

08004e78 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8004e78:	2000      	movs	r0, #0
 8004e7a:	4770      	bx	lr

08004e7c <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	4770      	bx	lr

08004e80 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e80:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8004e84:	b280      	uxth	r0, r0
 8004e86:	4770      	bx	lr

08004e88 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004e88:	2000      	movs	r0, #0
 8004e8a:	4770      	bx	lr

08004e8c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e8c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e90:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e92:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004e9c:	4283      	cmp	r3, r0
 8004e9e:	d100      	bne.n	8004ea2 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004ea0:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004ea2:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004ea6:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8004eaa:	e7f7      	b.n	8004e9c <USB_WritePMA+0x10>

08004eac <USB_EPStartXfer>:
{
 8004eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8004eb0:	784b      	ldrb	r3, [r1, #1]
{
 8004eb2:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8004eb4:	2b01      	cmp	r3, #1
{
 8004eb6:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8004eb8:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8004eba:	f040 8118 	bne.w	80050ee <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8004ebe:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8004ec2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ec4:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8004ec6:	454f      	cmp	r7, r9
 8004ec8:	bf28      	it	cs
 8004eca:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8004ecc:	bb0a      	cbnz	r2, 8004f12 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ece:	b2bf      	uxth	r7, r7
 8004ed0:	88ea      	ldrh	r2, [r5, #6]
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	f7ff ffda 	bl	8004e8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ed8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004edc:	7829      	ldrb	r1, [r5, #0]
 8004ede:	b280      	uxth	r0, r0
 8004ee0:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8004ee4:	0109      	lsls	r1, r1, #4
 8004ee6:	4402      	add	r2, r0
 8004ee8:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004eea:	782a      	ldrb	r2, [r5, #0]
 8004eec:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	0c1b      	lsrs	r3, r3, #16
 8004efc:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f0a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8004f12:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f14:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8004f18:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004f1a:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f1c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004f20:	f040 80d0 	bne.w	80050c4 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8004f24:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f26:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8004f2a:	f080 80b4 	bcs.w	8005096 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f2e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004f32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004f36:	0412      	lsls	r2, r2, #16
 8004f38:	0c12      	lsrs	r2, r2, #16
 8004f3a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8004f3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f42:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f46:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f4a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8004f4e:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f50:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8004f54:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8004f56:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f5a:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f5c:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f60:	d04e      	beq.n	8005000 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f62:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8004f66:	4472      	add	r2, lr
 8004f68:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f6c:	896a      	ldrh	r2, [r5, #10]
 8004f6e:	f7ff ff8d 	bl	8004e8c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8004f72:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8004f74:	bf36      	itet	cc
 8004f76:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8004f78:	2300      	movcs	r3, #0
 8004f7a:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f7c:	786a      	ldrb	r2, [r5, #1]
 8004f7e:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8004f80:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f84:	b2b3      	uxth	r3, r6
 8004f86:	bb7a      	cbnz	r2, 8004fe8 <USB_EPStartXfer+0x13c>
 8004f88:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8004f8c:	7828      	ldrb	r0, [r5, #0]
 8004f8e:	b292      	uxth	r2, r2
 8004f90:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8004f94:	0100      	lsls	r0, r0, #4
 8004f96:	4411      	add	r1, r2
 8004f98:	5a42      	ldrh	r2, [r0, r1]
 8004f9a:	2e3e      	cmp	r6, #62	@ 0x3e
 8004f9c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fa0:	5242      	strh	r2, [r0, r1]
 8004fa2:	d914      	bls.n	8004fce <USB_EPStartXfer+0x122>
 8004fa4:	5a42      	ldrh	r2, [r0, r1]
 8004fa6:	0977      	lsrs	r7, r6, #5
 8004fa8:	06f6      	lsls	r6, r6, #27
 8004faa:	bf08      	it	eq
 8004fac:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004fb6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004fba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc2:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc8:	f7ff ff60 	bl	8004e8c <USB_WritePMA>
 8004fcc:	e78d      	b.n	8004eea <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fce:	b90e      	cbnz	r6, 8004fd4 <USB_EPStartXfer+0x128>
 8004fd0:	5a42      	ldrh	r2, [r0, r1]
 8004fd2:	e7f0      	b.n	8004fb6 <USB_EPStartXfer+0x10a>
 8004fd4:	07f2      	lsls	r2, r6, #31
 8004fd6:	5a42      	ldrh	r2, [r0, r1]
 8004fd8:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8004fdc:	bf48      	it	mi
 8004fde:	3701      	addmi	r7, #1
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004fe6:	e7ea      	b.n	8004fbe <USB_EPStartXfer+0x112>
 8004fe8:	2a01      	cmp	r2, #1
 8004fea:	d1ea      	bne.n	8004fc2 <USB_EPStartXfer+0x116>
 8004fec:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004ff0:	7829      	ldrb	r1, [r5, #0]
 8004ff2:	b280      	uxth	r0, r0
 8004ff4:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8004ff8:	0109      	lsls	r1, r1, #4
 8004ffa:	4402      	add	r2, r0
 8004ffc:	528b      	strh	r3, [r1, r2]
 8004ffe:	e7e0      	b.n	8004fc2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005000:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005004:	4472      	add	r2, lr
 8005006:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800500a:	892a      	ldrh	r2, [r5, #8]
 800500c:	f7ff ff3e 	bl	8004e8c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8005010:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8005012:	bf36      	itet	cc
 8005014:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005016:	4643      	movcs	r3, r8
 8005018:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800501a:	786a      	ldrb	r2, [r5, #1]
 800501c:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800501e:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005022:	b2b3      	uxth	r3, r6
 8005024:	bb5a      	cbnz	r2, 800507e <USB_EPStartXfer+0x1d2>
 8005026:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800502a:	7828      	ldrb	r0, [r5, #0]
 800502c:	b292      	uxth	r2, r2
 800502e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8005032:	0100      	lsls	r0, r0, #4
 8005034:	4411      	add	r1, r2
 8005036:	5a42      	ldrh	r2, [r0, r1]
 8005038:	2e3e      	cmp	r6, #62	@ 0x3e
 800503a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800503e:	5242      	strh	r2, [r0, r1]
 8005040:	d910      	bls.n	8005064 <USB_EPStartXfer+0x1b8>
 8005042:	5a42      	ldrh	r2, [r0, r1]
 8005044:	0977      	lsrs	r7, r6, #5
 8005046:	06f6      	lsls	r6, r6, #27
 8005048:	bf08      	it	eq
 800504a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800504e:	b292      	uxth	r2, r2
 8005050:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005054:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005058:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800505c:	b292      	uxth	r2, r2
 800505e:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005060:	896a      	ldrh	r2, [r5, #10]
 8005062:	e7af      	b.n	8004fc4 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005064:	b90e      	cbnz	r6, 800506a <USB_EPStartXfer+0x1be>
 8005066:	5a42      	ldrh	r2, [r0, r1]
 8005068:	e7f4      	b.n	8005054 <USB_EPStartXfer+0x1a8>
 800506a:	07f2      	lsls	r2, r6, #31
 800506c:	5a42      	ldrh	r2, [r0, r1]
 800506e:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8005072:	bf48      	it	mi
 8005074:	3701      	addmi	r7, #1
 8005076:	b292      	uxth	r2, r2
 8005078:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800507c:	e7ee      	b.n	800505c <USB_EPStartXfer+0x1b0>
 800507e:	2a01      	cmp	r2, #1
 8005080:	d1ee      	bne.n	8005060 <USB_EPStartXfer+0x1b4>
 8005082:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005086:	7829      	ldrb	r1, [r5, #0]
 8005088:	b280      	uxth	r0, r0
 800508a:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800508e:	0109      	lsls	r1, r1, #4
 8005090:	4402      	add	r2, r0
 8005092:	528b      	strh	r3, [r1, r2]
 8005094:	e7e4      	b.n	8005060 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005096:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800509a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800509e:	0412      	lsls	r2, r2, #16
 80050a0:	0c12      	lsrs	r2, r2, #16
 80050a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050aa:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80050b2:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	441a      	add	r2, r3
 80050ba:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050bc:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050c0:	892a      	ldrh	r2, [r5, #8]
 80050c2:	e781      	b.n	8004fc8 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80050c4:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050c6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80050ca:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050cc:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050d0:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050d2:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050d4:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050d6:	d506      	bpl.n	80050e6 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050d8:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80050dc:	4432      	add	r2, r6
 80050de:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050e2:	896a      	ldrh	r2, [r5, #10]
 80050e4:	e770      	b.n	8004fc8 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050e6:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80050ea:	4432      	add	r2, r6
 80050ec:	e7e6      	b.n	80050bc <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d13b      	bne.n	800516a <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80050f2:	698b      	ldr	r3, [r1, #24]
 80050f4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80050f6:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 80050fa:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80050fc:	bf84      	itt	hi
 80050fe:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8005100:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005102:	7829      	ldrb	r1, [r5, #0]
 8005104:	61aa      	str	r2, [r5, #24]
 8005106:	b280      	uxth	r0, r0
 8005108:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800510c:	0109      	lsls	r1, r1, #4
 800510e:	4402      	add	r2, r0
 8005110:	5a88      	ldrh	r0, [r1, r2]
 8005112:	2b3e      	cmp	r3, #62	@ 0x3e
 8005114:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005118:	5288      	strh	r0, [r1, r2]
 800511a:	d91a      	bls.n	8005152 <USB_EPStartXfer+0x2a6>
 800511c:	0958      	lsrs	r0, r3, #5
 800511e:	06de      	lsls	r6, r3, #27
 8005120:	5a8b      	ldrh	r3, [r1, r2]
 8005122:	bf08      	it	eq
 8005124:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800512e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005136:	b29b      	uxth	r3, r3
 8005138:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800513a:	782a      	ldrb	r2, [r5, #0]
 800513c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005150:	e6d6      	b.n	8004f00 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005152:	b90b      	cbnz	r3, 8005158 <USB_EPStartXfer+0x2ac>
 8005154:	5a8b      	ldrh	r3, [r1, r2]
 8005156:	e7ea      	b.n	800512e <USB_EPStartXfer+0x282>
 8005158:	0858      	lsrs	r0, r3, #1
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	5a8b      	ldrh	r3, [r1, r2]
 800515e:	bf48      	it	mi
 8005160:	3001      	addmi	r0, #1
 8005162:	b29b      	uxth	r3, r3
 8005164:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005168:	e7e5      	b.n	8005136 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800516a:	78ca      	ldrb	r2, [r1, #3]
 800516c:	2a02      	cmp	r2, #2
 800516e:	d170      	bne.n	8005252 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005170:	2b00      	cmp	r3, #0
 8005172:	d138      	bne.n	80051e6 <USB_EPStartXfer+0x33a>
 8005174:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005178:	780b      	ldrb	r3, [r1, #0]
 800517a:	b292      	uxth	r2, r2
 800517c:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4410      	add	r0, r2
 8005184:	5ac2      	ldrh	r2, [r0, r3]
 8005186:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800518a:	52c2      	strh	r2, [r0, r3]
 800518c:	690a      	ldr	r2, [r1, #16]
 800518e:	2a3e      	cmp	r2, #62	@ 0x3e
 8005190:	d946      	bls.n	8005220 <USB_EPStartXfer+0x374>
 8005192:	5ac1      	ldrh	r1, [r0, r3]
 8005194:	0956      	lsrs	r6, r2, #5
 8005196:	06d7      	lsls	r7, r2, #27
 8005198:	bf08      	it	eq
 800519a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800519e:	b289      	uxth	r1, r1
 80051a0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80051a4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80051a8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80051ac:	b289      	uxth	r1, r1
 80051ae:	52c1      	strh	r1, [r0, r3]
 80051b0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80051b4:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80051b8:	b280      	uxth	r0, r0
 80051ba:	4401      	add	r1, r0
 80051bc:	5ac8      	ldrh	r0, [r1, r3]
 80051be:	2a3e      	cmp	r2, #62	@ 0x3e
 80051c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80051c4:	52c8      	strh	r0, [r1, r3]
 80051c6:	d938      	bls.n	800523a <USB_EPStartXfer+0x38e>
 80051c8:	0950      	lsrs	r0, r2, #5
 80051ca:	06d7      	lsls	r7, r2, #27
 80051cc:	5aca      	ldrh	r2, [r1, r3]
 80051ce:	bf08      	it	eq
 80051d0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80051d4:	b292      	uxth	r2, r2
 80051d6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80051da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80051de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80051e2:	b292      	uxth	r2, r2
 80051e4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80051e6:	69eb      	ldr	r3, [r5, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0a6      	beq.n	800513a <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80051ec:	f244 0340 	movw	r3, #16448	@ 0x4040
 80051f0:	782a      	ldrb	r2, [r5, #0]
 80051f2:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80051f6:	ea03 0001 	and.w	r0, r3, r1
 80051fa:	438b      	bics	r3, r1
 80051fc:	d001      	beq.n	8005202 <USB_EPStartXfer+0x356>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d19b      	bne.n	800513a <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005202:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005216:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800521a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800521e:	e78c      	b.n	800513a <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005220:	b90a      	cbnz	r2, 8005226 <USB_EPStartXfer+0x37a>
 8005222:	5ac1      	ldrh	r1, [r0, r3]
 8005224:	e7be      	b.n	80051a4 <USB_EPStartXfer+0x2f8>
 8005226:	07d1      	lsls	r1, r2, #31
 8005228:	5ac1      	ldrh	r1, [r0, r3]
 800522a:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800522e:	bf48      	it	mi
 8005230:	3601      	addmi	r6, #1
 8005232:	b289      	uxth	r1, r1
 8005234:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005238:	e7b8      	b.n	80051ac <USB_EPStartXfer+0x300>
 800523a:	b90a      	cbnz	r2, 8005240 <USB_EPStartXfer+0x394>
 800523c:	5aca      	ldrh	r2, [r1, r3]
 800523e:	e7cc      	b.n	80051da <USB_EPStartXfer+0x32e>
 8005240:	0850      	lsrs	r0, r2, #1
 8005242:	07d6      	lsls	r6, r2, #31
 8005244:	5aca      	ldrh	r2, [r1, r3]
 8005246:	bf48      	it	mi
 8005248:	3001      	addmi	r0, #1
 800524a:	b292      	uxth	r2, r2
 800524c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005250:	e7c7      	b.n	80051e2 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8005252:	2a01      	cmp	r2, #1
 8005254:	d15d      	bne.n	8005312 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8005256:	698a      	ldr	r2, [r1, #24]
 8005258:	6909      	ldr	r1, [r1, #16]
 800525a:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800525c:	bf94      	ite	ls
 800525e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8005260:	1a50      	subhi	r0, r2, r1
 8005262:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8005264:	bf88      	it	hi
 8005266:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005268:	2b00      	cmp	r3, #0
 800526a:	f47f af66 	bne.w	800513a <USB_EPStartXfer+0x28e>
 800526e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8005272:	782b      	ldrb	r3, [r5, #0]
 8005274:	b289      	uxth	r1, r1
 8005276:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4408      	add	r0, r1
 800527e:	5ac1      	ldrh	r1, [r0, r3]
 8005280:	2a3e      	cmp	r2, #62	@ 0x3e
 8005282:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005286:	52c1      	strh	r1, [r0, r3]
 8005288:	d92b      	bls.n	80052e2 <USB_EPStartXfer+0x436>
 800528a:	06d1      	lsls	r1, r2, #27
 800528c:	5ac1      	ldrh	r1, [r0, r3]
 800528e:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8005292:	bf08      	it	eq
 8005294:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005298:	b289      	uxth	r1, r1
 800529a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800529e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80052a2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80052a6:	b289      	uxth	r1, r1
 80052a8:	52c1      	strh	r1, [r0, r3]
 80052aa:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80052ae:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80052b2:	b280      	uxth	r0, r0
 80052b4:	4401      	add	r1, r0
 80052b6:	5ac8      	ldrh	r0, [r1, r3]
 80052b8:	2a3e      	cmp	r2, #62	@ 0x3e
 80052ba:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80052be:	52c8      	strh	r0, [r1, r3]
 80052c0:	d91b      	bls.n	80052fa <USB_EPStartXfer+0x44e>
 80052c2:	0950      	lsrs	r0, r2, #5
 80052c4:	06d6      	lsls	r6, r2, #27
 80052c6:	5aca      	ldrh	r2, [r1, r3]
 80052c8:	bf08      	it	eq
 80052ca:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80052ce:	b292      	uxth	r2, r2
 80052d0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80052d4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80052d8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80052dc:	b292      	uxth	r2, r2
 80052de:	52ca      	strh	r2, [r1, r3]
 80052e0:	e72b      	b.n	800513a <USB_EPStartXfer+0x28e>
 80052e2:	b90a      	cbnz	r2, 80052e8 <USB_EPStartXfer+0x43c>
 80052e4:	5ac1      	ldrh	r1, [r0, r3]
 80052e6:	e7da      	b.n	800529e <USB_EPStartXfer+0x3f2>
 80052e8:	5ac1      	ldrh	r1, [r0, r3]
 80052ea:	0856      	lsrs	r6, r2, #1
 80052ec:	07d7      	lsls	r7, r2, #31
 80052ee:	bf48      	it	mi
 80052f0:	3601      	addmi	r6, #1
 80052f2:	b289      	uxth	r1, r1
 80052f4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80052f8:	e7d5      	b.n	80052a6 <USB_EPStartXfer+0x3fa>
 80052fa:	b90a      	cbnz	r2, 8005300 <USB_EPStartXfer+0x454>
 80052fc:	5aca      	ldrh	r2, [r1, r3]
 80052fe:	e7e9      	b.n	80052d4 <USB_EPStartXfer+0x428>
 8005300:	0850      	lsrs	r0, r2, #1
 8005302:	07d2      	lsls	r2, r2, #31
 8005304:	5aca      	ldrh	r2, [r1, r3]
 8005306:	bf48      	it	mi
 8005308:	3001      	addmi	r0, #1
 800530a:	b292      	uxth	r2, r2
 800530c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005310:	e7e4      	b.n	80052dc <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8005312:	2001      	movs	r0, #1
 8005314:	e5fb      	b.n	8004f0e <USB_EPStartXfer+0x62>

08005316 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005316:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800531a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800531c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005320:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8005322:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005324:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8005326:	462e      	mov	r6, r5
 8005328:	3402      	adds	r4, #2
 800532a:	b936      	cbnz	r6, 800533a <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800532c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800532e:	bf44      	itt	mi
 8005330:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005334:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800533a:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800533e:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005340:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005342:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005346:	0a12      	lsrs	r2, r2, #8
 8005348:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800534c:	e7ec      	b.n	8005328 <USB_ReadPMA+0x12>

0800534e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800534e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8005352:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005354:	b16b      	cbz	r3, 8005372 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005356:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800535a:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800535e:	28ff      	cmp	r0, #255	@ 0xff
 8005360:	d007      	beq.n	8005372 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4621      	mov	r1, r4
 8005366:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800536a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800536c:	23ff      	movs	r3, #255	@ 0xff
 800536e:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8005372:	2000      	movs	r0, #0
 8005374:	bd10      	pop	{r4, pc}
	...

08005378 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005378:	2343      	movs	r3, #67	@ 0x43
 800537a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800537c:	4800      	ldr	r0, [pc, #0]	@ (8005380 <USBD_CDC_GetFSCfgDesc+0x8>)
 800537e:	4770      	bx	lr
 8005380:	2000005c 	.word	0x2000005c

08005384 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005384:	2343      	movs	r3, #67	@ 0x43
 8005386:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005388:	4800      	ldr	r0, [pc, #0]	@ (800538c <USBD_CDC_GetHSCfgDesc+0x8>)
 800538a:	4770      	bx	lr
 800538c:	200000a0 	.word	0x200000a0

08005390 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005390:	2343      	movs	r3, #67	@ 0x43
 8005392:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005394:	4800      	ldr	r0, [pc, #0]	@ (8005398 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005396:	4770      	bx	lr
 8005398:	20000018 	.word	0x20000018

0800539c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800539c:	230a      	movs	r3, #10
 800539e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80053a0:	4800      	ldr	r0, [pc, #0]	@ (80053a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80053a2:	4770      	bx	lr
 80053a4:	2000011c 	.word	0x2000011c

080053a8 <USBD_CDC_DataOut>:
{
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ac:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053b0:	f000 ff66 	bl	8006280 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80053b4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053b8:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80053bc:	b14b      	cbz	r3, 80053d2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053be:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80053c2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80053cc:	4798      	blx	r3
    return USBD_OK;
 80053ce:	2000      	movs	r0, #0
}
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80053d2:	2002      	movs	r0, #2
 80053d4:	e7fc      	b.n	80053d0 <USBD_CDC_DataOut+0x28>

080053d6 <USBD_CDC_DataIn>:
{
 80053d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053d8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80053dc:	b1ce      	cbz	r6, 8005412 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053de:	2214      	movs	r2, #20
 80053e0:	fb02 0201 	mla	r2, r2, r1, r0
 80053e4:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80053e6:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80053ea:	b173      	cbz	r3, 800540a <USBD_CDC_DataIn+0x34>
 80053ec:	2728      	movs	r7, #40	@ 0x28
 80053ee:	fb07 5401 	mla	r4, r7, r1, r5
 80053f2:	6a24      	ldr	r4, [r4, #32]
 80053f4:	fbb3 f5f4 	udiv	r5, r3, r4
 80053f8:	fb04 3315 	mls	r3, r4, r5, r3
 80053fc:	b92b      	cbnz	r3, 800540a <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80053fe:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005400:	461a      	mov	r2, r3
 8005402:	f000 ff2b 	bl	800625c <USBD_LL_Transmit>
    return USBD_OK;
 8005406:	2000      	movs	r0, #0
}
 8005408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8005410:	e7f9      	b.n	8005406 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8005412:	2002      	movs	r0, #2
 8005414:	e7f8      	b.n	8005408 <USBD_CDC_DataIn+0x32>

08005416 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8005416:	2300      	movs	r3, #0
{
 8005418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800541a:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 800541c:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8005420:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005424:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800542c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005430:	d022      	beq.n	8005478 <USBD_CDC_Setup+0x62>
 8005432:	2b20      	cmp	r3, #32
 8005434:	d13a      	bne.n	80054ac <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8005436:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005438:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800543a:	b1ba      	cbz	r2, 800546c <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 800543c:	0639      	lsls	r1, r7, #24
 800543e:	d50b      	bpl.n	8005458 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005440:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8005444:	4618      	mov	r0, r3
 8005446:	688f      	ldr	r7, [r1, #8]
 8005448:	4631      	mov	r1, r6
 800544a:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800544c:	4631      	mov	r1, r6
 800544e:	4620      	mov	r0, r4
 8005450:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005452:	f000 fc4d 	bl	8005cf0 <USBD_CtlSendData>
 8005456:	e006      	b.n	8005466 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005458:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800545a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800545e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005462:	f000 fc5a 	bl	8005d1a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005466:	2000      	movs	r0, #0
}
 8005468:	b003      	add	sp, #12
 800546a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800546c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8005470:	6884      	ldr	r4, [r0, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	47a0      	blx	r4
 8005476:	e7f6      	b.n	8005466 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8005478:	784b      	ldrb	r3, [r1, #1]
 800547a:	2b0a      	cmp	r3, #10
 800547c:	d00a      	beq.n	8005494 <USBD_CDC_Setup+0x7e>
 800547e:	2b0b      	cmp	r3, #11
 8005480:	d010      	beq.n	80054a4 <USBD_CDC_Setup+0x8e>
 8005482:	b99b      	cbnz	r3, 80054ac <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005484:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005488:	2b03      	cmp	r3, #3
 800548a:	d10f      	bne.n	80054ac <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800548c:	2202      	movs	r2, #2
 800548e:	f10d 0106 	add.w	r1, sp, #6
 8005492:	e7de      	b.n	8005452 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005498:	2b03      	cmp	r3, #3
 800549a:	d107      	bne.n	80054ac <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800549c:	2201      	movs	r2, #1
 800549e:	f10d 0105 	add.w	r1, sp, #5
 80054a2:	e7d6      	b.n	8005452 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054a4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d0dc      	beq.n	8005466 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f000 fbf7 	bl	8005ca2 <USBD_CtlError>
            ret = USBD_FAIL;
 80054b4:	2002      	movs	r0, #2
 80054b6:	e7d7      	b.n	8005468 <USBD_CDC_Setup+0x52>

080054b8 <USBD_CDC_DeInit>:
{
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054bc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80054be:	2181      	movs	r1, #129	@ 0x81
 80054c0:	f000 fe97 	bl	80061f2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054c4:	2101      	movs	r1, #1
 80054c6:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80054c8:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80054ca:	f000 fe92 	bl	80061f2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054ce:	2182      	movs	r1, #130	@ 0x82
 80054d0:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80054d2:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80054d6:	f000 fe8c 	bl	80061f2 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80054da:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80054de:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80054e0:	b14b      	cbz	r3, 80054f6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054e2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80054ea:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 80054ee:	f000 fecf 	bl	8006290 <USBD_static_free>
    pdev->pClassData = NULL;
 80054f2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 80054f6:	2000      	movs	r0, #0
 80054f8:	bd38      	pop	{r3, r4, r5, pc}

080054fa <USBD_CDC_Init>:
{
 80054fa:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054fc:	7c03      	ldrb	r3, [r0, #16]
{
 80054fe:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005500:	bba3      	cbnz	r3, 800556c <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005506:	2181      	movs	r1, #129	@ 0x81
 8005508:	2202      	movs	r2, #2
 800550a:	f000 fe66 	bl	80061da <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800550e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005510:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005514:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005516:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005518:	2202      	movs	r2, #2
 800551a:	4620      	mov	r0, r4
 800551c:	f000 fe5d 	bl	80061da <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005520:	2308      	movs	r3, #8
 8005522:	2203      	movs	r2, #3
 8005524:	2182      	movs	r1, #130	@ 0x82
 8005526:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005528:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800552c:	f000 fe55 	bl	80061da <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005530:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005534:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005536:	f000 fea7 	bl	8006288 <USBD_static_malloc>
 800553a:	4606      	mov	r6, r0
 800553c:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8005540:	b1f8      	cbz	r0, 8005582 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005542:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4798      	blx	r3
    hcdc->TxState = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005550:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005554:	7c23      	ldrb	r3, [r4, #16]
 8005556:	b993      	cbnz	r3, 800557e <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005558:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800555c:	4629      	mov	r1, r5
 800555e:	4620      	mov	r0, r4
 8005560:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8005564:	f000 fe83 	bl	800626e <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005568:	2000      	movs	r0, #0
}
 800556a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800556c:	2340      	movs	r3, #64	@ 0x40
 800556e:	2181      	movs	r1, #129	@ 0x81
 8005570:	2202      	movs	r2, #2
 8005572:	f000 fe32 	bl	80061da <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005576:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005578:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800557a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800557c:	e7cb      	b.n	8005516 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800557e:	2340      	movs	r3, #64	@ 0x40
 8005580:	e7ec      	b.n	800555c <USBD_CDC_Init+0x62>
    ret = 1U;
 8005582:	4628      	mov	r0, r5
 8005584:	e7f1      	b.n	800556a <USBD_CDC_Init+0x70>

08005586 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005586:	b119      	cbz	r1, 8005590 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005588:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800558c:	2000      	movs	r0, #0
 800558e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005590:	2002      	movs	r0, #2
  }

  return ret;
}
 8005592:	4770      	bx	lr

08005594 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005594:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005598:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800559a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800559e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 80055a2:	4770      	bx	lr

080055a4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80055a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 80055a8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80055aa:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 80055ae:	4770      	bx	lr

080055b0 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055b0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80055b4:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80055b6:	b182      	cbz	r2, 80055da <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80055b8:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 80055bc:	2301      	movs	r3, #1
 80055be:	b974      	cbnz	r4, 80055de <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80055c0:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80055c4:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80055c8:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80055ca:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80055cc:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f000 fe43 	bl	800625c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80055d6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80055d8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80055da:	2002      	movs	r0, #2
 80055dc:	e7fc      	b.n	80055d8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80055de:	4618      	mov	r0, r3
 80055e0:	e7fa      	b.n	80055d8 <USBD_CDC_TransmitPacket+0x28>

080055e2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055e2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80055e6:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80055e8:	b162      	cbz	r2, 8005604 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055ea:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80055ec:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f0:	b933      	cbnz	r3, 8005600 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80055f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80055f6:	2101      	movs	r1, #1
 80055f8:	f000 fe39 	bl	800626e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80055fc:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80055fe:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8005600:	2340      	movs	r3, #64	@ 0x40
 8005602:	e7f8      	b.n	80055f6 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8005604:	2002      	movs	r0, #2
 8005606:	e7fa      	b.n	80055fe <USBD_CDC_ReceivePacket+0x1c>

08005608 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005608:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800560a:	b180      	cbz	r0, 800562e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800560c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005610:	b113      	cbz	r3, 8005618 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005618:	b109      	cbz	r1, 800561e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800561a:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800561e:	2301      	movs	r3, #1
  pdev->id = id;
 8005620:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005622:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005626:	f000 fd8f 	bl	8006148 <USBD_LL_Init>

  return USBD_OK;
 800562a:	2000      	movs	r0, #0
}
 800562c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800562e:	2002      	movs	r0, #2
 8005630:	e7fc      	b.n	800562c <USBD_Init+0x24>

08005632 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005632:	b119      	cbz	r1, 800563c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005634:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8005638:	2000      	movs	r0, #0
 800563a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800563c:	2002      	movs	r0, #2
  }

  return status;
}
 800563e:	4770      	bx	lr

08005640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005640:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005642:	f000 fdc1 	bl	80061c8 <USBD_LL_Start>

  return USBD_OK;
}
 8005646:	2000      	movs	r0, #0
 8005648:	bd08      	pop	{r3, pc}

0800564a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800564a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800564c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005650:	b133      	cbz	r3, 8005660 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4798      	blx	r3
 8005656:	3800      	subs	r0, #0
 8005658:	bf18      	it	ne
 800565a:	2001      	movne	r0, #1
 800565c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800565e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005660:	2002      	movs	r0, #2
 8005662:	e7fc      	b.n	800565e <USBD_SetClassConfig+0x14>

08005664 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005664:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005666:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	4798      	blx	r3

  return USBD_OK;
}
 800566e:	2000      	movs	r0, #0
 8005670:	bd08      	pop	{r3, pc}

08005672 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005672:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005674:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8005678:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800567a:	4628      	mov	r0, r5
 800567c:	f000 fb06 	bl	8005c8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005680:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005682:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8005686:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800568a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800568e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005692:	f001 031f 	and.w	r3, r1, #31
 8005696:	2b01      	cmp	r3, #1
 8005698:	d008      	beq.n	80056ac <USBD_LL_SetupStage+0x3a>
 800569a:	2b02      	cmp	r3, #2
 800569c:	d00b      	beq.n	80056b6 <USBD_LL_SetupStage+0x44>
 800569e:	b97b      	cbnz	r3, 80056c0 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80056a0:	4629      	mov	r1, r5
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 f8fa 	bl	800589c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80056a8:	2000      	movs	r0, #0
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80056ac:	4629      	mov	r1, r5
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 fa3c 	bl	8005b2c <USBD_StdItfReq>
      break;
 80056b4:	e7f8      	b.n	80056a8 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80056b6:	4629      	mov	r1, r5
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 fa5b 	bl	8005b74 <USBD_StdEPReq>
      break;
 80056be:	e7f3      	b.n	80056a8 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056c0:	4620      	mov	r0, r4
 80056c2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80056c6:	f000 fd9d 	bl	8006204 <USBD_LL_StallEP>
      break;
 80056ca:	e7ed      	b.n	80056a8 <USBD_LL_SetupStage+0x36>

080056cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4604      	mov	r4, r0
 80056d0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80056d2:	bb39      	cbnz	r1, 8005724 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056d4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80056d8:	2a03      	cmp	r2, #3
 80056da:	d11c      	bne.n	8005716 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 80056dc:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 80056e0:	4295      	cmp	r5, r2
 80056e2:	d90b      	bls.n	80056fc <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 80056e4:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 80056e6:	42aa      	cmp	r2, r5
 80056e8:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 80056ea:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80056ee:	bf8c      	ite	hi
 80056f0:	b2aa      	uxthhi	r2, r5
 80056f2:	b292      	uxthls	r2, r2
 80056f4:	f000 fb1e 	bl	8005d34 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80056f8:	2000      	movs	r0, #0
}
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	b123      	cbz	r3, 800570e <USBD_LL_DataOutStage+0x42>
 8005704:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005708:	2a03      	cmp	r2, #3
 800570a:	d100      	bne.n	800570e <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800570c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800570e:	4620      	mov	r0, r4
 8005710:	f000 fb18 	bl	8005d44 <USBD_CtlSendStatus>
 8005714:	e7f0      	b.n	80056f8 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005716:	2a05      	cmp	r2, #5
 8005718:	d1ee      	bne.n	80056f8 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800571a:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800571e:	f000 fd71 	bl	8006204 <USBD_LL_StallEP>
 8005722:	e7e9      	b.n	80056f8 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005724:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	b12b      	cbz	r3, 8005738 <USBD_LL_DataOutStage+0x6c>
 800572c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005730:	2a03      	cmp	r2, #3
 8005732:	d101      	bne.n	8005738 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8005734:	4798      	blx	r3
 8005736:	e7df      	b.n	80056f8 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8005738:	2002      	movs	r0, #2
 800573a:	e7de      	b.n	80056fa <USBD_LL_DataOutStage+0x2e>

0800573c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005742:	460f      	mov	r7, r1
 8005744:	2900      	cmp	r1, #0
 8005746:	d149      	bne.n	80057dc <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005748:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800574c:	2a02      	cmp	r2, #2
 800574e:	d13a      	bne.n	80057c6 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005750:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8005754:	42b5      	cmp	r5, r6
 8005756:	d911      	bls.n	800577c <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8005758:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800575a:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800575c:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800575e:	b2aa      	uxth	r2, r5
 8005760:	f000 fad3 	bl	8005d0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005764:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005766:	461a      	mov	r2, r3
 8005768:	4619      	mov	r1, r3
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fd7f 	bl	800626e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005770:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d02d      	beq.n	80057d4 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005778:	2000      	movs	r0, #0
}
 800577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800577c:	69c3      	ldr	r3, [r0, #28]
 800577e:	fbb3 f5f6 	udiv	r5, r3, r6
 8005782:	fb06 3515 	mls	r5, r6, r5, r3
 8005786:	b965      	cbnz	r5, 80057a2 <USBD_LL_DataInStage+0x66>
 8005788:	429e      	cmp	r6, r3
 800578a:	d80a      	bhi.n	80057a2 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800578c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8005790:	4293      	cmp	r3, r2
 8005792:	d206      	bcs.n	80057a2 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005794:	462a      	mov	r2, r5
 8005796:	f000 fab8 	bl	8005d0a <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800579a:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800579c:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057a0:	e7e1      	b.n	8005766 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057a2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	b12b      	cbz	r3, 80057b6 <USBD_LL_DataInStage+0x7a>
 80057aa:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80057ae:	2a03      	cmp	r2, #3
 80057b0:	d101      	bne.n	80057b6 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80057b2:	4620      	mov	r0, r4
 80057b4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80057b6:	2180      	movs	r1, #128	@ 0x80
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fd23 	bl	8006204 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 facb 	bl	8005d5a <USBD_CtlReceiveStatus>
 80057c4:	e7d4      	b.n	8005770 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057c6:	f032 0304 	bics.w	r3, r2, #4
 80057ca:	d1d1      	bne.n	8005770 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80057cc:	2180      	movs	r1, #128	@ 0x80
 80057ce:	f000 fd19 	bl	8006204 <USBD_LL_StallEP>
 80057d2:	e7cd      	b.n	8005770 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 80057da:	e7cd      	b.n	8005778 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80057dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	b12b      	cbz	r3, 80057f0 <USBD_LL_DataInStage+0xb4>
 80057e4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80057e8:	2a03      	cmp	r2, #3
 80057ea:	d101      	bne.n	80057f0 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 80057ec:	4798      	blx	r3
 80057ee:	e7c3      	b.n	8005778 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 80057f0:	2002      	movs	r0, #2
 80057f2:	e7c2      	b.n	800577a <USBD_LL_DataInStage+0x3e>

080057f4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057f4:	2200      	movs	r2, #0
{
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057fa:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057fc:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057fe:	4611      	mov	r1, r2
 8005800:	2340      	movs	r3, #64	@ 0x40
 8005802:	f000 fcea 	bl	80061da <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005806:	4633      	mov	r3, r6
 8005808:	2180      	movs	r1, #128	@ 0x80
 800580a:	2200      	movs	r2, #0
 800580c:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800580e:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005812:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005816:	f000 fce0 	bl	80061da <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800581a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800581c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005820:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005822:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005824:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005828:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800582c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800582e:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8005832:	b123      	cbz	r3, 800583e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005834:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005838:	4620      	mov	r0, r4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800583e:	2000      	movs	r0, #0
 8005840:	bd70      	pop	{r4, r5, r6, pc}

08005842 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005842:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005844:	2000      	movs	r0, #0
 8005846:	4770      	bx	lr

08005848 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005848:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800584c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005850:	2304      	movs	r3, #4
 8005852:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005856:	2000      	movs	r0, #0
 8005858:	4770      	bx	lr

0800585a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800585a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800585e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005860:	bf04      	itt	eq
 8005862:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005866:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800586a:	2000      	movs	r0, #0
 800586c:	4770      	bx	lr

0800586e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800586e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005870:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005874:	2a03      	cmp	r2, #3
 8005876:	d104      	bne.n	8005882 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8005878:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	b103      	cbz	r3, 8005882 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005880:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005882:	2000      	movs	r0, #0
 8005884:	bd08      	pop	{r3, pc}

08005886 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005886:	b510      	push	{r4, lr}
 8005888:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800588a:	2180      	movs	r1, #128	@ 0x80
 800588c:	f000 fcba 	bl	8006204 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005890:	4620      	mov	r0, r4
}
 8005892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005896:	2100      	movs	r1, #0
 8005898:	f000 bcb4 	b.w	8006204 <USBD_LL_StallEP>

0800589c <USBD_StdDevReq>:
{
 800589c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800589e:	780b      	ldrb	r3, [r1, #0]
 80058a0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80058a6:	2b20      	cmp	r3, #32
{
 80058a8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058aa:	d006      	beq.n	80058ba <USBD_StdDevReq+0x1e>
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d004      	beq.n	80058ba <USBD_StdDevReq+0x1e>
 80058b0:	b163      	cbz	r3, 80058cc <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 80058b2:	4620      	mov	r0, r4
 80058b4:	f7ff ffe7 	bl	8005886 <USBD_CtlError.constprop.0>
        break;
 80058b8:	e005      	b.n	80058c6 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80058ba:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80058be:	4629      	mov	r1, r5
 80058c0:	4620      	mov	r0, r4
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4798      	blx	r3
}
 80058c6:	2000      	movs	r0, #0
 80058c8:	b003      	add	sp, #12
 80058ca:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 80058cc:	784b      	ldrb	r3, [r1, #1]
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d8ef      	bhi.n	80058b2 <USBD_StdDevReq+0x16>
 80058d2:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <USBD_StdDevReq+0x3c>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	08005adb 	.word	0x08005adb
 80058dc:	08005b11 	.word	0x08005b11
 80058e0:	080058b3 	.word	0x080058b3
 80058e4:	08005b03 	.word	0x08005b03
 80058e8:	080058b3 	.word	0x080058b3
 80058ec:	08005a01 	.word	0x08005a01
 80058f0:	08005901 	.word	0x08005901
 80058f4:	080058b3 	.word	0x080058b3
 80058f8:	08005aab 	.word	0x08005aab
 80058fc:	08005a43 	.word	0x08005a43
  uint16_t len = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005906:	884b      	ldrh	r3, [r1, #2]
 8005908:	0a1a      	lsrs	r2, r3, #8
 800590a:	3a01      	subs	r2, #1
 800590c:	2a06      	cmp	r2, #6
 800590e:	d8d0      	bhi.n	80058b2 <USBD_StdDevReq+0x16>
 8005910:	a101      	add	r1, pc, #4	@ (adr r1, 8005918 <USBD_StdDevReq+0x7c>)
 8005912:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005916:	bf00      	nop
 8005918:	08005935 	.word	0x08005935
 800591c:	08005959 	.word	0x08005959
 8005920:	08005973 	.word	0x08005973
 8005924:	080058b3 	.word	0x080058b3
 8005928:	080058b3 	.word	0x080058b3
 800592c:	080059b7 	.word	0x080059b7
 8005930:	080059cd 	.word	0x080059cd
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005934:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005938:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800593a:	7c20      	ldrb	r0, [r4, #16]
 800593c:	f10d 0106 	add.w	r1, sp, #6
 8005940:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005942:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005946:	88eb      	ldrh	r3, [r5, #6]
 8005948:	2a00      	cmp	r2, #0
 800594a:	d054      	beq.n	80059f6 <USBD_StdDevReq+0x15a>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d149      	bne.n	80059e4 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8005950:	4620      	mov	r0, r4
 8005952:	f000 f9f7 	bl	8005d44 <USBD_CtlSendStatus>
 8005956:	e7b6      	b.n	80058c6 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005958:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800595a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595e:	b932      	cbnz	r2, 800596e <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005962:	f10d 0006 	add.w	r0, sp, #6
 8005966:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005968:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800596a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800596c:	e7e9      	b.n	8005942 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	e7f7      	b.n	8005962 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b05      	cmp	r3, #5
 8005976:	d89c      	bhi.n	80058b2 <USBD_StdDevReq+0x16>
 8005978:	e8df f003 	tbb	[pc, r3]
 800597c:	110d0903 	.word	0x110d0903
 8005980:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005982:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005986:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1d6      	bne.n	800593a <USBD_StdDevReq+0x9e>
 800598c:	e791      	b.n	80058b2 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800598e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	e7f8      	b.n	8005988 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005996:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	e7f4      	b.n	8005988 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800599e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	e7f0      	b.n	8005988 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80059a6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	e7ec      	b.n	8005988 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059ae:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	e7e8      	b.n	8005988 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b6:	7c03      	ldrb	r3, [r0, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f af7a 	bne.w	80058b2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80059be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059c2:	f10d 0006 	add.w	r0, sp, #6
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	4798      	blx	r3
  if (err != 0U)
 80059ca:	e7ba      	b.n	8005942 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059cc:	7c03      	ldrb	r3, [r0, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f47f af6f 	bne.w	80058b2 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059d8:	f10d 0006 	add.w	r0, sp, #6
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059e0:	2307      	movs	r3, #7
 80059e2:	e7c2      	b.n	800596a <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 80059e4:	429a      	cmp	r2, r3
 80059e6:	bf28      	it	cs
 80059e8:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80059ea:	4601      	mov	r1, r0
 80059ec:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80059ee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80059f2:	f000 f97d 	bl	8005cf0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80059f6:	88eb      	ldrh	r3, [r5, #6]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f af64 	bne.w	80058c6 <USBD_StdDevReq+0x2a>
 80059fe:	e7a7      	b.n	8005950 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a00:	888b      	ldrh	r3, [r1, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f47f af55 	bne.w	80058b2 <USBD_StdDevReq+0x16>
 8005a08:	88cb      	ldrh	r3, [r1, #6]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f47f af51 	bne.w	80058b2 <USBD_StdDevReq+0x16>
 8005a10:	884d      	ldrh	r5, [r1, #2]
 8005a12:	2d7f      	cmp	r5, #127	@ 0x7f
 8005a14:	f63f af4d 	bhi.w	80058b2 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	f43f af48 	beq.w	80058b2 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a22:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a24:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8005a26:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a2a:	f000 fc0e 	bl	800624a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 f988 	bl	8005d44 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005a34:	b11d      	cbz	r5, 8005a3e <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a36:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a38:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005a3c:	e743      	b.n	80058c6 <USBD_StdDevReq+0x2a>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e7fa      	b.n	8005a38 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8005a42:	7889      	ldrb	r1, [r1, #2]
 8005a44:	4d38      	ldr	r5, [pc, #224]	@ (8005b28 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a46:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005a48:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a4a:	f63f af32 	bhi.w	80058b2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8005a4e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d008      	beq.n	8005a68 <USBD_StdDevReq+0x1cc>
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d015      	beq.n	8005a86 <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8005a5a:	f7ff ff14 	bl	8005886 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005a5e:	4620      	mov	r0, r4
 8005a60:	7829      	ldrb	r1, [r5, #0]
 8005a62:	f7ff fdff 	bl	8005664 <USBD_ClrClassConfig>
        break;
 8005a66:	e72e      	b.n	80058c6 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	f43f af71 	beq.w	8005950 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8005a6e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a70:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005a72:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a74:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f7ff fde6 	bl	800564a <USBD_SetClassConfig>
 8005a7e:	2802      	cmp	r0, #2
 8005a80:	f47f af66 	bne.w	8005950 <USBD_StdDevReq+0xb4>
 8005a84:	e715      	b.n	80058b2 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8005a86:	b931      	cbnz	r1, 8005a96 <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a88:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005a8a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a8c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005a90:	f7ff fde8 	bl	8005664 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005a94:	e75c      	b.n	8005950 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8005a96:	6841      	ldr	r1, [r0, #4]
 8005a98:	2901      	cmp	r1, #1
 8005a9a:	f43f af59 	beq.w	8005950 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a9e:	b2c9      	uxtb	r1, r1
 8005aa0:	f7ff fde0 	bl	8005664 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005aa4:	7829      	ldrb	r1, [r5, #0]
 8005aa6:	6061      	str	r1, [r4, #4]
 8005aa8:	e7e6      	b.n	8005a78 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8005aaa:	88ca      	ldrh	r2, [r1, #6]
 8005aac:	2a01      	cmp	r2, #1
 8005aae:	f47f af00 	bne.w	80058b2 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8005ab2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d80a      	bhi.n	8005ad0 <USBD_StdDevReq+0x234>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f43f aef9 	beq.w	80058b2 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8005ac0:	4601      	mov	r1, r0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 f911 	bl	8005cf0 <USBD_CtlSendData>
      break;
 8005ace:	e6fa      	b.n	80058c6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	f47f aeee 	bne.w	80058b2 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005ad6:	1d01      	adds	r1, r0, #4
 8005ad8:	e7f6      	b.n	8005ac8 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8005ada:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	f63f aee6 	bhi.w	80058b2 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8005ae6:	88ca      	ldrh	r2, [r1, #6]
 8005ae8:	2a02      	cmp	r2, #2
 8005aea:	f47f aee2 	bne.w	80058b2 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8005aee:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005af2:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2303      	movne	r3, #3
 8005afc:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005b00:	e7e2      	b.n	8005ac8 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b02:	884b      	ldrh	r3, [r1, #2]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f47f aede 	bne.w	80058c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8005b0a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8005b0e:	e71f      	b.n	8005950 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8005b10:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b14:	3b01      	subs	r3, #1
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	f63f aecb 	bhi.w	80058b2 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b1c:	884b      	ldrh	r3, [r1, #2]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	f47f aed1 	bne.w	80058c6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	e7f0      	b.n	8005b0a <USBD_StdDevReq+0x26e>
 8005b28:	20002440 	.word	0x20002440

08005b2c <USBD_StdItfReq>:
{
 8005b2c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b2e:	780b      	ldrb	r3, [r1, #0]
{
 8005b30:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b32:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005b36:	065b      	lsls	r3, r3, #25
{
 8005b38:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3a:	d501      	bpl.n	8005b40 <USBD_StdItfReq+0x14>
 8005b3c:	2a40      	cmp	r2, #64	@ 0x40
 8005b3e:	d115      	bne.n	8005b6c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005b40:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005b44:	3b01      	subs	r3, #1
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d810      	bhi.n	8005b6c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b4a:	792b      	ldrb	r3, [r5, #4]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d80d      	bhi.n	8005b6c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b50:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005b54:	4629      	mov	r1, r5
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b5c:	88eb      	ldrh	r3, [r5, #6]
 8005b5e:	b91b      	cbnz	r3, 8005b68 <USBD_StdItfReq+0x3c>
 8005b60:	b910      	cbnz	r0, 8005b68 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 f8ee 	bl	8005d44 <USBD_CtlSendStatus>
}
 8005b68:	2000      	movs	r0, #0
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f7ff fe8a 	bl	8005886 <USBD_CtlError.constprop.0>
          break;
 8005b72:	e7f9      	b.n	8005b68 <USBD_StdItfReq+0x3c>

08005b74 <USBD_StdEPReq>:
{
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	780a      	ldrb	r2, [r1, #0]
 8005b78:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005b7a:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b7e:	2a20      	cmp	r2, #32
{
 8005b80:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8005b82:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b84:	d006      	beq.n	8005b94 <USBD_StdEPReq+0x20>
 8005b86:	2a40      	cmp	r2, #64	@ 0x40
 8005b88:	d004      	beq.n	8005b94 <USBD_StdEPReq+0x20>
 8005b8a:	b15a      	cbz	r2, 8005ba4 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff fe7a 	bl	8005886 <USBD_CtlError.constprop.0>
              break;
 8005b92:	e005      	b.n	8005ba0 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8005b94:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	6892      	ldr	r2, [r2, #8]
 8005b9e:	4790      	blx	r2
}
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005ba4:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005ba6:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8005ba8:	2a01      	cmp	r2, #1
 8005baa:	d035      	beq.n	8005c18 <USBD_StdEPReq+0xa4>
 8005bac:	2a03      	cmp	r2, #3
 8005bae:	d021      	beq.n	8005bf4 <USBD_StdEPReq+0x80>
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d1eb      	bne.n	8005b8c <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8005bb4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d044      	beq.n	8005c46 <USBD_StdEPReq+0xd2>
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d1e5      	bne.n	8005b8c <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8005bc0:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bc2:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005bc6:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bca:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8005bce:	d04b      	beq.n	8005c68 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0da      	beq.n	8005b8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bd6:	2514      	movs	r5, #20
 8005bd8:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8005bdc:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005be0:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be2:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005be4:	d04b      	beq.n	8005c7e <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005be6:	4620      	mov	r0, r4
 8005be8:	f000 fb1e 	bl	8006228 <USBD_LL_IsStallEP>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d04b      	beq.n	8005c88 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e045      	b.n	8005c80 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8005bf4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005bf8:	2a02      	cmp	r2, #2
 8005bfa:	d01b      	beq.n	8005c34 <USBD_StdEPReq+0xc0>
 8005bfc:	2a03      	cmp	r2, #3
 8005bfe:	d1c5      	bne.n	8005b8c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c00:	885a      	ldrh	r2, [r3, #2]
 8005c02:	b92a      	cbnz	r2, 8005c10 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8005c04:	064a      	lsls	r2, r1, #25
 8005c06:	d003      	beq.n	8005c10 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c08:	88db      	ldrh	r3, [r3, #6]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c0c:	f000 fafa 	bl	8006204 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f897 	bl	8005d44 <USBD_CtlSendStatus>
              break;
 8005c16:	e7c3      	b.n	8005ba0 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8005c18:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005c1c:	2a02      	cmp	r2, #2
 8005c1e:	d009      	beq.n	8005c34 <USBD_StdEPReq+0xc0>
 8005c20:	2a03      	cmp	r2, #3
 8005c22:	d1b3      	bne.n	8005b8c <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c24:	885b      	ldrh	r3, [r3, #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ba      	bne.n	8005ba0 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c2a:	064d      	lsls	r5, r1, #25
 8005c2c:	d0f0      	beq.n	8005c10 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c2e:	f000 faf2 	bl	8006216 <USBD_LL_ClearStallEP>
 8005c32:	e7ed      	b.n	8005c10 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c34:	064b      	lsls	r3, r1, #25
 8005c36:	d0a9      	beq.n	8005b8c <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8005c38:	f000 fae4 	bl	8006204 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c3c:	2180      	movs	r1, #128	@ 0x80
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 fae0 	bl	8006204 <USBD_LL_StallEP>
 8005c44:	e7ac      	b.n	8005ba0 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c46:	064a      	lsls	r2, r1, #25
 8005c48:	d1a0      	bne.n	8005b8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c4a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005c4c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c50:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c54:	bf4c      	ite	mi
 8005c56:	f100 0114 	addmi.w	r1, r0, #20
 8005c5a:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8005c5e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f845 	bl	8005cf0 <USBD_CtlSendData>
              break;
 8005c66:	e79b      	b.n	8005ba0 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c68:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d08d      	beq.n	8005b8c <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c70:	2514      	movs	r5, #20
 8005c72:	fb05 0501 	mla	r5, r5, r1, r0
 8005c76:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c7a:	2900      	cmp	r1, #0
 8005c7c:	d1b3      	bne.n	8005be6 <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8005c7e:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8005c80:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c82:	2202      	movs	r2, #2
 8005c84:	4629      	mov	r1, r5
 8005c86:	e7eb      	b.n	8005c60 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8005c88:	6028      	str	r0, [r5, #0]
 8005c8a:	e7fa      	b.n	8005c82 <USBD_StdEPReq+0x10e>

08005c8c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005c8c:	780b      	ldrb	r3, [r1, #0]
 8005c8e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c90:	784b      	ldrb	r3, [r1, #1]
 8005c92:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c94:	884b      	ldrh	r3, [r1, #2]
 8005c96:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c98:	888b      	ldrh	r3, [r1, #4]
 8005c9a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c9c:	88cb      	ldrh	r3, [r1, #6]
 8005c9e:	80c3      	strh	r3, [r0, #6]
}
 8005ca0:	4770      	bx	lr

08005ca2 <USBD_CtlError>:
{
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	f000 faac 	bl	8006204 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cac:	4620      	mov	r0, r4
}
 8005cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f000 baa6 	b.w	8006204 <USBD_LL_StallEP>

08005cb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	460d      	mov	r5, r1
 8005cbc:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	b170      	cbz	r0, 8005ce0 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005cc2:	f7fa fa45 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005cc6:	b2c3      	uxtb	r3, r0
 8005cc8:	3301      	adds	r3, #1
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005cce:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005cd0:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8005cd2:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005cd4:	706b      	strb	r3, [r5, #1]
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8005cda:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005cde:	b901      	cbnz	r1, 8005ce2 <USBD_GetString+0x2a>
}
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	54e9      	strb	r1, [r5, r3]
 8005ce6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005ce8:	3302      	adds	r3, #2
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	54a8      	strb	r0, [r5, r2]
 8005cee:	e7f4      	b.n	8005cda <USBD_GetString+0x22>

08005cf0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005cf0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005cf2:	2202      	movs	r2, #2
{
 8005cf4:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005cf6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005cfa:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cfe:	460a      	mov	r2, r1
 8005d00:	2100      	movs	r1, #0
 8005d02:	f000 faab 	bl	800625c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d06:	2000      	movs	r0, #0
 8005d08:	bd10      	pop	{r4, pc}

08005d0a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005d0a:	b508      	push	{r3, lr}
 8005d0c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d0e:	460a      	mov	r2, r1
 8005d10:	2100      	movs	r1, #0
 8005d12:	f000 faa3 	bl	800625c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d16:	2000      	movs	r0, #0
 8005d18:	bd08      	pop	{r3, pc}

08005d1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005d1a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d1c:	2203      	movs	r2, #3
{
 8005d1e:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005d20:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d24:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d28:	460a      	mov	r2, r1
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f000 fa9f 	bl	800626e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d30:	2000      	movs	r0, #0
 8005d32:	bd10      	pop	{r4, pc}

08005d34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005d34:	b508      	push	{r3, lr}
 8005d36:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d38:	460a      	mov	r2, r1
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f000 fa97 	bl	800626e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d40:	2000      	movs	r0, #0
 8005d42:	bd08      	pop	{r3, pc}

08005d44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d44:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d46:	2304      	movs	r3, #4
 8005d48:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4619      	mov	r1, r3
 8005d52:	f000 fa83 	bl	800625c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d56:	2000      	movs	r0, #0
 8005d58:	bd08      	pop	{r3, pc}

08005d5a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d5a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d5c:	2305      	movs	r3, #5
 8005d5e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d62:	2300      	movs	r3, #0
 8005d64:	461a      	mov	r2, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	f000 fa81 	bl	800626e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	bd08      	pop	{r3, pc}

08005d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d72:	2200      	movs	r2, #0
 8005d74:	490e      	ldr	r1, [pc, #56]	@ (8005db0 <MX_USB_DEVICE_Init+0x40>)
 8005d76:	480f      	ldr	r0, [pc, #60]	@ (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d78:	f7ff fc46 	bl	8005608 <USBD_Init>
 8005d7c:	b108      	cbz	r0, 8005d82 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005d7e:	f7fc fdb1 	bl	80028e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005d82:	490d      	ldr	r1, [pc, #52]	@ (8005db8 <MX_USB_DEVICE_Init+0x48>)
 8005d84:	480b      	ldr	r0, [pc, #44]	@ (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d86:	f7ff fc54 	bl	8005632 <USBD_RegisterClass>
 8005d8a:	b108      	cbz	r0, 8005d90 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005d8c:	f7fc fdaa 	bl	80028e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005d90:	490a      	ldr	r1, [pc, #40]	@ (8005dbc <MX_USB_DEVICE_Init+0x4c>)
 8005d92:	4808      	ldr	r0, [pc, #32]	@ (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005d94:	f7ff fbf7 	bl	8005586 <USBD_CDC_RegisterInterface>
 8005d98:	b108      	cbz	r0, 8005d9e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005d9a:	f7fc fda3 	bl	80028e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d9e:	4805      	ldr	r0, [pc, #20]	@ (8005db4 <MX_USB_DEVICE_Init+0x44>)
 8005da0:	f7ff fc4e 	bl	8005640 <USBD_Start>
 8005da4:	b118      	cbz	r0, 8005dae <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005daa:	f7fc bd9b 	b.w	80028e4 <Error_Handler>
}
 8005dae:	bd08      	pop	{r3, pc}
 8005db0:	2000016c 	.word	0x2000016c
 8005db4:	20002444 	.word	0x20002444
 8005db8:	200000e4 	.word	0x200000e4
 8005dbc:	20000128 	.word	0x20000128

08005dc0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	4770      	bx	lr

08005dc4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4770      	bx	lr

08005dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 8005dca:	2300      	movs	r3, #0
      usbCommandComplete = true;         // Marcar comando completo
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8005dcc:	4d11      	ldr	r5, [pc, #68]	@ (8005e14 <CDC_Receive_FS+0x4c>)
      usbBuffer[usbBufferIndex++] = receivedChar;
 8005dce:	4e12      	ldr	r6, [pc, #72]	@ (8005e18 <CDC_Receive_FS+0x50>)
  for (uint32_t i = 0; i < *Len; i++) {
 8005dd0:	680a      	ldr	r2, [r1, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d90a      	bls.n	8005dec <CDC_Receive_FS+0x24>
    char receivedChar = Buf[i];
 8005dd6:	5cc4      	ldrb	r4, [r0, r3]
    if (receivedChar == '\n') {
 8005dd8:	2c0a      	cmp	r4, #10
 8005dda:	d110      	bne.n	8005dfe <CDC_Receive_FS+0x36>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <CDC_Receive_FS+0x4c>)
 8005de0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e18 <CDC_Receive_FS+0x50>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 8005de6:	2201      	movs	r2, #1
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <CDC_Receive_FS+0x54>)
 8005dea:	701a      	strb	r2, [r3, #0]
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005dec:	4601      	mov	r1, r0
 8005dee:	480c      	ldr	r0, [pc, #48]	@ (8005e20 <CDC_Receive_FS+0x58>)
 8005df0:	f7ff fbd8 	bl	80055a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005df4:	480a      	ldr	r0, [pc, #40]	@ (8005e20 <CDC_Receive_FS+0x58>)
 8005df6:	f7ff fbf4 	bl	80055e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8005dfe:	2c0d      	cmp	r4, #13
 8005e00:	d005      	beq.n	8005e0e <CDC_Receive_FS+0x46>
 8005e02:	682a      	ldr	r2, [r5, #0]
 8005e04:	2a62      	cmp	r2, #98	@ 0x62
      usbBuffer[usbBufferIndex++] = receivedChar;
 8005e06:	bf9e      	ittt	ls
 8005e08:	1c57      	addls	r7, r2, #1
 8005e0a:	602f      	strls	r7, [r5, #0]
 8005e0c:	54b4      	strbls	r4, [r6, r2]
  for (uint32_t i = 0; i < *Len; i++) {
 8005e0e:	3301      	adds	r3, #1
 8005e10:	e7de      	b.n	8005dd0 <CDC_Receive_FS+0x8>
 8005e12:	bf00      	nop
 8005e14:	200022fc 	.word	0x200022fc
 8005e18:	20002300 	.word	0x20002300
 8005e1c:	200022f8 	.word	0x200022f8
 8005e20:	20002444 	.word	0x20002444

08005e24 <CDC_Init_FS>:
{
 8005e24:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e26:	4c06      	ldr	r4, [pc, #24]	@ (8005e40 <CDC_Init_FS+0x1c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4905      	ldr	r1, [pc, #20]	@ (8005e44 <CDC_Init_FS+0x20>)
 8005e2e:	f7ff fbb1 	bl	8005594 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e32:	4620      	mov	r0, r4
 8005e34:	4904      	ldr	r1, [pc, #16]	@ (8005e48 <CDC_Init_FS+0x24>)
 8005e36:	f7ff fbb5 	bl	80055a4 <USBD_CDC_SetRxBuffer>
}
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	bd10      	pop	{r4, pc}
 8005e3e:	bf00      	nop
 8005e40:	20002444 	.word	0x20002444
 8005e44:	20003684 	.word	0x20003684
 8005e48:	20003a84 	.word	0x20003a84

08005e4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005e4c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005e4e:	4c09      	ldr	r4, [pc, #36]	@ (8005e74 <CDC_Transmit_FS+0x28>)
{
 8005e50:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005e52:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8005e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005e5a:	b943      	cbnz	r3, 8005e6e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff fb98 	bl	8005594 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005e64:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8005e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005e6a:	f7ff bba1 	b.w	80055b0 <USBD_CDC_TransmitPacket>
}
 8005e6e:	2001      	movs	r0, #1
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	20002444 	.word	0x20002444

08005e78 <CDC_TxQueue_Init>:
/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
    txQueue.head = 0;
 8005e78:	2200      	movs	r2, #0
    txQueue.tail = 0;
    txQueue.count = 0;
 8005e7a:	211e      	movs	r1, #30
    txQueue.head = 0;
 8005e7c:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <CDC_TxQueue_Init+0x20>)
 8005e7e:	f8a3 2f78 	strh.w	r2, [r3, #3960]	@ 0xf78
    txQueue.count = 0;
 8005e82:	f8a3 2f7a 	strh.w	r2, [r3, #3962]	@ 0xf7a
    txQueue.transmitting = false;
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8005e86:	3901      	subs	r1, #1
        txQueue.messages[i].used = false;
 8005e88:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
        txQueue.messages[i].length = 0;
 8005e8c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8005e90:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8005e94:	d1f7      	bne.n	8005e86 <CDC_TxQueue_Init+0xe>
    }
}
 8005e96:	4770      	bx	lr
 8005e98:	20002708 	.word	0x20002708

08005e9c <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 8005e9c:	b538      	push	{r3, r4, r5, lr}
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8005e9e:	4c15      	ldr	r4, [pc, #84]	@ (8005ef4 <CDC_TxQueue_Add+0x58>)
{
 8005ea0:	460d      	mov	r5, r1
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8005ea2:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8005ea6:	2b1d      	cmp	r3, #29
 8005ea8:	d821      	bhi.n	8005eee <CDC_TxQueue_Add+0x52>
 8005eaa:	2980      	cmp	r1, #128	@ 0x80
 8005eac:	d81f      	bhi.n	8005eee <CDC_TxQueue_Add+0x52>
        return false;
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
    memcpy(msg->data, data, length);
 8005eae:	2284      	movs	r2, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 8005eb0:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
    memcpy(msg->data, data, length);
 8005eb4:	fb02 4303 	mla	r3, r2, r3, r4
 8005eb8:	460a      	mov	r2, r1
 8005eba:	4601      	mov	r1, r0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f9f8 	bl	80072b2 <memcpy>
 8005ec2:	4603      	mov	r3, r0
    msg->length = length;
 8005ec4:	f8a0 5080 	strh.w	r5, [r0, #128]	@ 0x80
    msg->used = true;
 8005ec8:	2001      	movs	r0, #1
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 8005eca:	221e      	movs	r2, #30
    msg->used = true;
 8005ecc:	f883 0082 	strb.w	r0, [r3, #130]	@ 0x82
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 8005ed0:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
 8005ed4:	4403      	add	r3, r0
 8005ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eda:	fb02 3311 	mls	r3, r2, r1, r3
 8005ede:	f884 3f78 	strb.w	r3, [r4, #3960]	@ 0xf78
    txQueue.count++;
 8005ee2:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8005ee6:	4403      	add	r3, r0
 8005ee8:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
    
    return true;
}
 8005eec:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8005eee:	2000      	movs	r0, #0
 8005ef0:	e7fc      	b.n	8005eec <CDC_TxQueue_Add+0x50>
 8005ef2:	bf00      	nop
 8005ef4:	20002708 	.word	0x20002708

08005ef8 <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 8005ef8:	b538      	push	{r3, r4, r5, lr}
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 8005efa:	4c19      	ldr	r4, [pc, #100]	@ (8005f60 <CDC_TxQueue_Process+0x68>)
 8005efc:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8005f00:	b36b      	cbz	r3, 8005f5e <CDC_TxQueue_Process+0x66>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 8005f02:	f894 3f7b 	ldrb.w	r3, [r4, #3963]	@ 0xf7b
 8005f06:	b143      	cbz	r3, 8005f1a <CDC_TxQueue_Process+0x22>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	f7ff ff9e 	bl	8005e4c <CDC_Transmit_FS>
        if (result != USBD_BUSY) {
 8005f10:	2801      	cmp	r0, #1
 8005f12:	d024      	beq.n	8005f5e <CDC_TxQueue_Process+0x66>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
    if (msg->used) {
 8005f1a:	2384      	movs	r3, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 8005f1c:	f894 5f79 	ldrb.w	r5, [r4, #3961]	@ 0xf79
    if (msg->used) {
 8005f20:	fb03 4505 	mla	r5, r3, r5, r4
 8005f24:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8005f28:	b1cb      	cbz	r3, 8005f5e <CDC_TxQueue_Process+0x66>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f8b5 1080 	ldrh.w	r1, [r5, #128]	@ 0x80
 8005f30:	f7ff ff8c 	bl	8005e4c <CDC_Transmit_FS>
        
        if (result == USBD_OK) {
 8005f34:	b998      	cbnz	r0, 8005f5e <CDC_TxQueue_Process+0x66>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 8005f36:	2301      	movs	r3, #1
            msg->used = false;
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8005f38:	221e      	movs	r2, #30
            txQueue.transmitting = true;  // Marcar como transmitiendo
 8005f3a:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8005f3e:	f894 3f79 	ldrb.w	r3, [r4, #3961]	@ 0xf79
            msg->used = false;
 8005f42:	f885 0082 	strb.w	r0, [r5, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8005f46:	3301      	adds	r3, #1
 8005f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f4c:	fb02 3311 	mls	r3, r2, r1, r3
 8005f50:	f884 3f79 	strb.w	r3, [r4, #3961]	@ 0xf79
            txQueue.count--;
 8005f54:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20002708 	.word	0x20002708

08005f64 <CDC_Transmit_Queued>:
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
    return CDC_TxQueue_Add(data, length);
 8005f64:	f7ff bf9a 	b.w	8005e9c <CDC_TxQueue_Add>

08005f68 <CDC_TxQueue_GetCount>:
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
    return txQueue.count;
}
 8005f68:	4b01      	ldr	r3, [pc, #4]	@ (8005f70 <CDC_TxQueue_GetCount+0x8>)
 8005f6a:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
 8005f6e:	4770      	bx	lr
 8005f70:	20002708 	.word	0x20002708

08005f74 <CDC_TxQueue_IsFull>:
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
    return (txQueue.count >= TX_QUEUE_SIZE);
 8005f74:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <CDC_TxQueue_IsFull+0x10>)
 8005f76:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
}
 8005f7a:	281d      	cmp	r0, #29
 8005f7c:	bf94      	ite	ls
 8005f7e:	2000      	movls	r0, #0
 8005f80:	2001      	movhi	r0, #1
 8005f82:	4770      	bx	lr
 8005f84:	20002708 	.word	0x20002708

08005f88 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f88:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005f8a:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f8c:	800b      	strh	r3, [r1, #0]
}
 8005f8e:	4770      	bx	lr
 8005f90:	20000158 	.word	0x20000158

08005f94 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f94:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005f96:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005f98:	800b      	strh	r3, [r1, #0]
}
 8005f9a:	4770      	bx	lr
 8005f9c:	20000154 	.word	0x20000154

08005fa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005fa4:	461e      	mov	r6, r3
 8005fa6:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fa8:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8005faa:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fae:	bf34      	ite	cc
 8005fb0:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fb2:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fb4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8005fb8:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b2dc      	uxtb	r4, r3
 8005fc0:	42a2      	cmp	r2, r4
    value = value << 4;
 8005fc2:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8005fc6:	d8ef      	bhi.n	8005fa8 <IntToUnicode+0x8>
  }
}
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fcc <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005fcc:	231a      	movs	r3, #26
{
 8005fce:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005fd0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <USBD_FS_SerialStrDescriptor+0x30>)
 8005fd4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8005fd8:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8005fdc:	1880      	adds	r0, r0, r2
 8005fde:	d00a      	beq.n	8005ff6 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fe0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005fe4:	4906      	ldr	r1, [pc, #24]	@ (8006000 <USBD_FS_SerialStrDescriptor+0x34>)
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	f7ff ffda 	bl	8005fa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005fec:	2204      	movs	r2, #4
 8005fee:	4620      	mov	r0, r4
 8005ff0:	3110      	adds	r1, #16
 8005ff2:	f7ff ffd5 	bl	8005fa0 <IntToUnicode>
}
 8005ff6:	4803      	ldr	r0, [pc, #12]	@ (8006004 <USBD_FS_SerialStrDescriptor+0x38>)
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop
 8005ffc:	1ffff000 	.word	0x1ffff000
 8006000:	2000013a 	.word	0x2000013a
 8006004:	20000138 	.word	0x20000138

08006008 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006008:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800600a:	4c04      	ldr	r4, [pc, #16]	@ (800601c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800600c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800600e:	4804      	ldr	r0, [pc, #16]	@ (8006020 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006010:	4621      	mov	r1, r4
 8006012:	f7ff fe51 	bl	8005cb8 <USBD_GetString>
}
 8006016:	4620      	mov	r0, r4
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	20003e84 	.word	0x20003e84
 8006020:	0800b715 	.word	0x0800b715

08006024 <USBD_FS_ProductStrDescriptor>:
{
 8006024:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006026:	4c04      	ldr	r4, [pc, #16]	@ (8006038 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006028:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800602a:	4804      	ldr	r0, [pc, #16]	@ (800603c <USBD_FS_ProductStrDescriptor+0x18>)
 800602c:	4621      	mov	r1, r4
 800602e:	f7ff fe43 	bl	8005cb8 <USBD_GetString>
}
 8006032:	4620      	mov	r0, r4
 8006034:	bd10      	pop	{r4, pc}
 8006036:	bf00      	nop
 8006038:	20003e84 	.word	0x20003e84
 800603c:	0800b728 	.word	0x0800b728

08006040 <USBD_FS_ConfigStrDescriptor>:
{
 8006040:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006042:	4c04      	ldr	r4, [pc, #16]	@ (8006054 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006044:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006046:	4804      	ldr	r0, [pc, #16]	@ (8006058 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006048:	4621      	mov	r1, r4
 800604a:	f7ff fe35 	bl	8005cb8 <USBD_GetString>
}
 800604e:	4620      	mov	r0, r4
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop
 8006054:	20003e84 	.word	0x20003e84
 8006058:	0800b73e 	.word	0x0800b73e

0800605c <USBD_FS_InterfaceStrDescriptor>:
{
 800605c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800605e:	4c04      	ldr	r4, [pc, #16]	@ (8006070 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006060:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006062:	4804      	ldr	r0, [pc, #16]	@ (8006074 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006064:	4621      	mov	r1, r4
 8006066:	f7ff fe27 	bl	8005cb8 <USBD_GetString>
}
 800606a:	4620      	mov	r0, r4
 800606c:	bd10      	pop	{r4, pc}
 800606e:	bf00      	nop
 8006070:	20003e84 	.word	0x20003e84
 8006074:	0800b749 	.word	0x0800b749

08006078 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006078:	b118      	cbz	r0, 8006082 <USBD_Get_USB_Status+0xa>
 800607a:	2802      	cmp	r0, #2
 800607c:	bf0c      	ite	eq
 800607e:	2001      	moveq	r0, #1
 8006080:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006082:	4770      	bx	lr

08006084 <HAL_PCD_MspInit>:
{
 8006084:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006086:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <HAL_PCD_MspInit+0x3c>)
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d115      	bne.n	80060ba <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800608e:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 8006092:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006094:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006096:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800609a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800609c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800609e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060a0:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80060a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060aa:	f7fd f969 	bl	8003380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80060ae:	2014      	movs	r0, #20
}
 80060b0:	b003      	add	sp, #12
 80060b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80060b6:	f7fd b993 	b.w	80033e0 <HAL_NVIC_EnableIRQ>
}
 80060ba:	b003      	add	sp, #12
 80060bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c0:	40005c00 	.word	0x40005c00

080060c4 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80060c4:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80060c8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80060cc:	f7ff bad1 	b.w	8005672 <USBD_LL_SetupStage>

080060d0 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80060d0:	2328      	movs	r3, #40	@ 0x28
 80060d2:	fb03 0301 	mla	r3, r3, r1, r0
 80060d6:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80060da:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80060de:	f7ff baf5 	b.w	80056cc <USBD_LL_DataOutStage>

080060e2 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80060e2:	2328      	movs	r3, #40	@ 0x28
 80060e4:	fb03 0301 	mla	r3, r3, r1, r0
 80060e8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80060ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ee:	f7ff bb25 	b.w	800573c <USBD_LL_DataInStage>

080060f2 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060f2:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80060f6:	f7ff bbba 	b.w	800586e <USBD_LL_SOF>

080060fa <HAL_PCD_ResetCallback>:
{
 80060fa:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060fc:	7983      	ldrb	r3, [r0, #6]
{
 80060fe:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006100:	2b02      	cmp	r3, #2
 8006102:	d001      	beq.n	8006108 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006104:	f7fc fbee 	bl	80028e4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006108:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800610c:	2101      	movs	r1, #1
 800610e:	f7ff fb98 	bl	8005842 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006112:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8006116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800611a:	f7ff bb6b 	b.w	80057f4 <USBD_LL_Reset>
	...

08006120 <HAL_PCD_SuspendCallback>:
{
 8006120:	b510      	push	{r4, lr}
 8006122:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006124:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006128:	f7ff fb8e 	bl	8005848 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800612c:	7aa3      	ldrb	r3, [r4, #10]
 800612e:	b123      	cbz	r3, 800613a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006130:	4a02      	ldr	r2, [pc, #8]	@ (800613c <HAL_PCD_SuspendCallback+0x1c>)
 8006132:	6913      	ldr	r3, [r2, #16]
 8006134:	f043 0306 	orr.w	r3, r3, #6
 8006138:	6113      	str	r3, [r2, #16]
}
 800613a:	bd10      	pop	{r4, pc}
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006140:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006144:	f7ff bb89 	b.w	800585a <USBD_LL_Resume>

08006148 <USBD_LL_Init>:
{
 8006148:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800614a:	4b1d      	ldr	r3, [pc, #116]	@ (80061c0 <USBD_LL_Init+0x78>)
{
 800614c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800614e:	481d      	ldr	r0, [pc, #116]	@ (80061c4 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8006150:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006152:	2308      	movs	r3, #8
 8006154:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006156:	2302      	movs	r3, #2
 8006158:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800615a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800615c:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006160:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006164:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006166:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006168:	f7fd fa3b 	bl	80035e2 <HAL_PCD_Init>
 800616c:	b108      	cbz	r0, 8006172 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800616e:	f7fc fbb9 	bl	80028e4 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006172:	2200      	movs	r2, #0
 8006174:	2318      	movs	r3, #24
 8006176:	4611      	mov	r1, r2
 8006178:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800617c:	f7fe f8bb 	bl	80042f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006180:	2358      	movs	r3, #88	@ 0x58
 8006182:	2200      	movs	r2, #0
 8006184:	2180      	movs	r1, #128	@ 0x80
 8006186:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800618a:	f7fe f8b4 	bl	80042f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800618e:	23c0      	movs	r3, #192	@ 0xc0
 8006190:	2200      	movs	r2, #0
 8006192:	2181      	movs	r1, #129	@ 0x81
 8006194:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006198:	f7fe f8ad 	bl	80042f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800619c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80061a0:	2200      	movs	r2, #0
 80061a2:	2101      	movs	r1, #1
 80061a4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061a8:	f7fe f8a5 	bl	80042f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80061ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061b0:	2200      	movs	r2, #0
 80061b2:	2182      	movs	r1, #130	@ 0x82
 80061b4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061b8:	f7fe f89d 	bl	80042f6 <HAL_PCDEx_PMAConfig>
}
 80061bc:	2000      	movs	r0, #0
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	40005c00 	.word	0x40005c00
 80061c4:	200042a4 	.word	0x200042a4

080061c8 <USBD_LL_Start>:
{
 80061c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80061ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061ce:	f7fd fa6b 	bl	80036a8 <HAL_PCD_Start>
}
 80061d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061d6:	f7ff bf4f 	b.w	8006078 <USBD_Get_USB_Status>

080061da <USBD_LL_OpenEP>:
{
 80061da:	b510      	push	{r4, lr}
 80061dc:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 80061e2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061e4:	4623      	mov	r3, r4
 80061e6:	f7fd ff8f 	bl	8004108 <HAL_PCD_EP_Open>
}
 80061ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061ee:	f7ff bf43 	b.w	8006078 <USBD_Get_USB_Status>

080061f2 <USBD_LL_CloseEP>:
{
 80061f2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80061f4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061f8:	f7fd ffb6 	bl	8004168 <HAL_PCD_EP_Close>
}
 80061fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006200:	f7ff bf3a 	b.w	8006078 <USBD_Get_USB_Status>

08006204 <USBD_LL_StallEP>:
{
 8006204:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006206:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800620a:	f7fe f80c 	bl	8004226 <HAL_PCD_EP_SetStall>
}
 800620e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006212:	f7ff bf31 	b.w	8006078 <USBD_Get_USB_Status>

08006216 <USBD_LL_ClearStallEP>:
{
 8006216:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006218:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800621c:	f7fe f839 	bl	8004292 <HAL_PCD_EP_ClrStall>
}
 8006220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006224:	f7ff bf28 	b.w	8006078 <USBD_Get_USB_Status>

08006228 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006228:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800622a:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800622e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006232:	bf1b      	ittet	ne
 8006234:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8006238:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800623c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006240:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006242:	bf08      	it	eq
 8006244:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8006248:	4770      	bx	lr

0800624a <USBD_LL_SetUSBAddress>:
{
 800624a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800624c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006250:	f7fd fa43 	bl	80036da <HAL_PCD_SetAddress>
}
 8006254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006258:	f7ff bf0e 	b.w	8006078 <USBD_Get_USB_Status>

0800625c <USBD_LL_Transmit>:
{
 800625c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800625e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006262:	f7fd ffc8 	bl	80041f6 <HAL_PCD_EP_Transmit>
}
 8006266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800626a:	f7ff bf05 	b.w	8006078 <USBD_Get_USB_Status>

0800626e <USBD_LL_PrepareReceive>:
{
 800626e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006270:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006274:	f7fd ffa0 	bl	80041b8 <HAL_PCD_EP_Receive>
}
 8006278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800627c:	f7ff befc 	b.w	8006078 <USBD_Get_USB_Status>

08006280 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006280:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006284:	f7fd bfaf 	b.w	80041e6 <HAL_PCD_EP_GetRxCount>

08006288 <USBD_static_malloc>:
}
 8006288:	4800      	ldr	r0, [pc, #0]	@ (800628c <USBD_static_malloc+0x4>)
 800628a:	4770      	bx	lr
 800628c:	20004084 	.word	0x20004084

08006290 <USBD_static_free>:
}
 8006290:	4770      	bx	lr

08006292 <HAL_PCDEx_SetConnectionState>:
}
 8006292:	4770      	bx	lr

08006294 <atof>:
 8006294:	2100      	movs	r1, #0
 8006296:	f000 bdfb 	b.w	8006e90 <strtod>

0800629a <sulp>:
 800629a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629e:	460f      	mov	r7, r1
 80062a0:	4690      	mov	r8, r2
 80062a2:	f001 ffc9 	bl	8008238 <__ulp>
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	f1b8 0f00 	cmp.w	r8, #0
 80062ae:	d011      	beq.n	80062d4 <sulp+0x3a>
 80062b0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80062b4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dd0b      	ble.n	80062d4 <sulp+0x3a>
 80062bc:	2400      	movs	r4, #0
 80062be:	051b      	lsls	r3, r3, #20
 80062c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80062c4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80062c8:	4622      	mov	r2, r4
 80062ca:	462b      	mov	r3, r5
 80062cc:	f7fa f904 	bl	80004d8 <__aeabi_dmul>
 80062d0:	4604      	mov	r4, r0
 80062d2:	460d      	mov	r5, r1
 80062d4:	4620      	mov	r0, r4
 80062d6:	4629      	mov	r1, r5
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062dc:	0000      	movs	r0, r0
	...

080062e0 <_strtod_l>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	b09f      	sub	sp, #124	@ 0x7c
 80062e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80062e8:	2200      	movs	r2, #0
 80062ea:	460c      	mov	r4, r1
 80062ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	f04f 0b00 	mov.w	fp, #0
 80062f6:	460a      	mov	r2, r1
 80062f8:	9005      	str	r0, [sp, #20]
 80062fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80062fc:	7811      	ldrb	r1, [r2, #0]
 80062fe:	292b      	cmp	r1, #43	@ 0x2b
 8006300:	d048      	beq.n	8006394 <_strtod_l+0xb4>
 8006302:	d836      	bhi.n	8006372 <_strtod_l+0x92>
 8006304:	290d      	cmp	r1, #13
 8006306:	d830      	bhi.n	800636a <_strtod_l+0x8a>
 8006308:	2908      	cmp	r1, #8
 800630a:	d830      	bhi.n	800636e <_strtod_l+0x8e>
 800630c:	2900      	cmp	r1, #0
 800630e:	d039      	beq.n	8006384 <_strtod_l+0xa4>
 8006310:	2200      	movs	r2, #0
 8006312:	920e      	str	r2, [sp, #56]	@ 0x38
 8006314:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006316:	782a      	ldrb	r2, [r5, #0]
 8006318:	2a30      	cmp	r2, #48	@ 0x30
 800631a:	f040 80b0 	bne.w	800647e <_strtod_l+0x19e>
 800631e:	786a      	ldrb	r2, [r5, #1]
 8006320:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006324:	2a58      	cmp	r2, #88	@ 0x58
 8006326:	d16c      	bne.n	8006402 <_strtod_l+0x122>
 8006328:	9302      	str	r3, [sp, #8]
 800632a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800632c:	4a8f      	ldr	r2, [pc, #572]	@ (800656c <_strtod_l+0x28c>)
 800632e:	9301      	str	r3, [sp, #4]
 8006330:	ab1a      	add	r3, sp, #104	@ 0x68
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	9805      	ldr	r0, [sp, #20]
 8006336:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006338:	a919      	add	r1, sp, #100	@ 0x64
 800633a:	f001 f87f 	bl	800743c <__gethex>
 800633e:	f010 060f 	ands.w	r6, r0, #15
 8006342:	4604      	mov	r4, r0
 8006344:	d005      	beq.n	8006352 <_strtod_l+0x72>
 8006346:	2e06      	cmp	r6, #6
 8006348:	d126      	bne.n	8006398 <_strtod_l+0xb8>
 800634a:	2300      	movs	r3, #0
 800634c:	3501      	adds	r5, #1
 800634e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006350:	930e      	str	r3, [sp, #56]	@ 0x38
 8006352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 8582 	bne.w	8006e5e <_strtod_l+0xb7e>
 800635a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635c:	b1bb      	cbz	r3, 800638e <_strtod_l+0xae>
 800635e:	4650      	mov	r0, sl
 8006360:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006364:	b01f      	add	sp, #124	@ 0x7c
 8006366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636a:	2920      	cmp	r1, #32
 800636c:	d1d0      	bne.n	8006310 <_strtod_l+0x30>
 800636e:	3201      	adds	r2, #1
 8006370:	e7c3      	b.n	80062fa <_strtod_l+0x1a>
 8006372:	292d      	cmp	r1, #45	@ 0x2d
 8006374:	d1cc      	bne.n	8006310 <_strtod_l+0x30>
 8006376:	2101      	movs	r1, #1
 8006378:	910e      	str	r1, [sp, #56]	@ 0x38
 800637a:	1c51      	adds	r1, r2, #1
 800637c:	9119      	str	r1, [sp, #100]	@ 0x64
 800637e:	7852      	ldrb	r2, [r2, #1]
 8006380:	2a00      	cmp	r2, #0
 8006382:	d1c7      	bne.n	8006314 <_strtod_l+0x34>
 8006384:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006386:	9419      	str	r4, [sp, #100]	@ 0x64
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 8566 	bne.w	8006e5a <_strtod_l+0xb7a>
 800638e:	4650      	mov	r0, sl
 8006390:	4659      	mov	r1, fp
 8006392:	e7e7      	b.n	8006364 <_strtod_l+0x84>
 8006394:	2100      	movs	r1, #0
 8006396:	e7ef      	b.n	8006378 <_strtod_l+0x98>
 8006398:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800639a:	b13a      	cbz	r2, 80063ac <_strtod_l+0xcc>
 800639c:	2135      	movs	r1, #53	@ 0x35
 800639e:	a81c      	add	r0, sp, #112	@ 0x70
 80063a0:	f002 f83a 	bl	8008418 <__copybits>
 80063a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063a6:	9805      	ldr	r0, [sp, #20]
 80063a8:	f001 fc1a 	bl	8007be0 <_Bfree>
 80063ac:	3e01      	subs	r6, #1
 80063ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80063b0:	2e04      	cmp	r6, #4
 80063b2:	d806      	bhi.n	80063c2 <_strtod_l+0xe2>
 80063b4:	e8df f006 	tbb	[pc, r6]
 80063b8:	201d0314 	.word	0x201d0314
 80063bc:	14          	.byte	0x14
 80063bd:	00          	.byte	0x00
 80063be:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80063c2:	05e1      	lsls	r1, r4, #23
 80063c4:	bf48      	it	mi
 80063c6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80063ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063ce:	0d1b      	lsrs	r3, r3, #20
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1bd      	bne.n	8006352 <_strtod_l+0x72>
 80063d6:	f000 ff37 	bl	8007248 <__errno>
 80063da:	2322      	movs	r3, #34	@ 0x22
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	e7b8      	b.n	8006352 <_strtod_l+0x72>
 80063e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80063e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80063e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063ec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063f0:	e7e7      	b.n	80063c2 <_strtod_l+0xe2>
 80063f2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006570 <_strtod_l+0x290>
 80063f6:	e7e4      	b.n	80063c2 <_strtod_l+0xe2>
 80063f8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80063fc:	f04f 3aff 	mov.w	sl, #4294967295
 8006400:	e7df      	b.n	80063c2 <_strtod_l+0xe2>
 8006402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	9219      	str	r2, [sp, #100]	@ 0x64
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	2b30      	cmp	r3, #48	@ 0x30
 800640c:	d0f9      	beq.n	8006402 <_strtod_l+0x122>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d09f      	beq.n	8006352 <_strtod_l+0x72>
 8006412:	2301      	movs	r3, #1
 8006414:	2700      	movs	r7, #0
 8006416:	220a      	movs	r2, #10
 8006418:	46b9      	mov	r9, r7
 800641a:	9308      	str	r3, [sp, #32]
 800641c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800641e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006420:	930c      	str	r3, [sp, #48]	@ 0x30
 8006422:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006424:	7805      	ldrb	r5, [r0, #0]
 8006426:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	2909      	cmp	r1, #9
 800642e:	d928      	bls.n	8006482 <_strtod_l+0x1a2>
 8006430:	2201      	movs	r2, #1
 8006432:	4950      	ldr	r1, [pc, #320]	@ (8006574 <_strtod_l+0x294>)
 8006434:	f000 fe9d 	bl	8007172 <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d032      	beq.n	80064a2 <_strtod_l+0x1c2>
 800643c:	2000      	movs	r0, #0
 800643e:	462a      	mov	r2, r5
 8006440:	4603      	mov	r3, r0
 8006442:	464d      	mov	r5, r9
 8006444:	900a      	str	r0, [sp, #40]	@ 0x28
 8006446:	2a65      	cmp	r2, #101	@ 0x65
 8006448:	d001      	beq.n	800644e <_strtod_l+0x16e>
 800644a:	2a45      	cmp	r2, #69	@ 0x45
 800644c:	d114      	bne.n	8006478 <_strtod_l+0x198>
 800644e:	b91d      	cbnz	r5, 8006458 <_strtod_l+0x178>
 8006450:	9a08      	ldr	r2, [sp, #32]
 8006452:	4302      	orrs	r2, r0
 8006454:	d096      	beq.n	8006384 <_strtod_l+0xa4>
 8006456:	2500      	movs	r5, #0
 8006458:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800645a:	1c62      	adds	r2, r4, #1
 800645c:	9219      	str	r2, [sp, #100]	@ 0x64
 800645e:	7862      	ldrb	r2, [r4, #1]
 8006460:	2a2b      	cmp	r2, #43	@ 0x2b
 8006462:	d07a      	beq.n	800655a <_strtod_l+0x27a>
 8006464:	2a2d      	cmp	r2, #45	@ 0x2d
 8006466:	d07e      	beq.n	8006566 <_strtod_l+0x286>
 8006468:	f04f 0c00 	mov.w	ip, #0
 800646c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006470:	2909      	cmp	r1, #9
 8006472:	f240 8085 	bls.w	8006580 <_strtod_l+0x2a0>
 8006476:	9419      	str	r4, [sp, #100]	@ 0x64
 8006478:	f04f 0800 	mov.w	r8, #0
 800647c:	e0a5      	b.n	80065ca <_strtod_l+0x2ea>
 800647e:	2300      	movs	r3, #0
 8006480:	e7c8      	b.n	8006414 <_strtod_l+0x134>
 8006482:	f1b9 0f08 	cmp.w	r9, #8
 8006486:	bfd8      	it	le
 8006488:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800648a:	f100 0001 	add.w	r0, r0, #1
 800648e:	bfd6      	itet	le
 8006490:	fb02 3301 	mlale	r3, r2, r1, r3
 8006494:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006498:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800649a:	f109 0901 	add.w	r9, r9, #1
 800649e:	9019      	str	r0, [sp, #100]	@ 0x64
 80064a0:	e7bf      	b.n	8006422 <_strtod_l+0x142>
 80064a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80064a8:	785a      	ldrb	r2, [r3, #1]
 80064aa:	f1b9 0f00 	cmp.w	r9, #0
 80064ae:	d03b      	beq.n	8006528 <_strtod_l+0x248>
 80064b0:	464d      	mov	r5, r9
 80064b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80064b4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d912      	bls.n	80064e2 <_strtod_l+0x202>
 80064bc:	2301      	movs	r3, #1
 80064be:	e7c2      	b.n	8006446 <_strtod_l+0x166>
 80064c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064c2:	3001      	adds	r0, #1
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80064c8:	785a      	ldrb	r2, [r3, #1]
 80064ca:	2a30      	cmp	r2, #48	@ 0x30
 80064cc:	d0f8      	beq.n	80064c0 <_strtod_l+0x1e0>
 80064ce:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	f200 84c8 	bhi.w	8006e68 <_strtod_l+0xb88>
 80064d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80064da:	2000      	movs	r0, #0
 80064dc:	4605      	mov	r5, r0
 80064de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80064e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80064e2:	3a30      	subs	r2, #48	@ 0x30
 80064e4:	f100 0301 	add.w	r3, r0, #1
 80064e8:	d018      	beq.n	800651c <_strtod_l+0x23c>
 80064ea:	462e      	mov	r6, r5
 80064ec:	f04f 0e0a 	mov.w	lr, #10
 80064f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064f2:	4419      	add	r1, r3
 80064f4:	910a      	str	r1, [sp, #40]	@ 0x28
 80064f6:	1c71      	adds	r1, r6, #1
 80064f8:	eba1 0c05 	sub.w	ip, r1, r5
 80064fc:	4563      	cmp	r3, ip
 80064fe:	dc15      	bgt.n	800652c <_strtod_l+0x24c>
 8006500:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006504:	182b      	adds	r3, r5, r0
 8006506:	2b08      	cmp	r3, #8
 8006508:	f105 0501 	add.w	r5, r5, #1
 800650c:	4405      	add	r5, r0
 800650e:	dc1a      	bgt.n	8006546 <_strtod_l+0x266>
 8006510:	230a      	movs	r3, #10
 8006512:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006514:	fb03 2301 	mla	r3, r3, r1, r2
 8006518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800651a:	2300      	movs	r3, #0
 800651c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800651e:	4618      	mov	r0, r3
 8006520:	1c51      	adds	r1, r2, #1
 8006522:	9119      	str	r1, [sp, #100]	@ 0x64
 8006524:	7852      	ldrb	r2, [r2, #1]
 8006526:	e7c5      	b.n	80064b4 <_strtod_l+0x1d4>
 8006528:	4648      	mov	r0, r9
 800652a:	e7ce      	b.n	80064ca <_strtod_l+0x1ea>
 800652c:	2e08      	cmp	r6, #8
 800652e:	dc05      	bgt.n	800653c <_strtod_l+0x25c>
 8006530:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006532:	fb0e f606 	mul.w	r6, lr, r6
 8006536:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006538:	460e      	mov	r6, r1
 800653a:	e7dc      	b.n	80064f6 <_strtod_l+0x216>
 800653c:	2910      	cmp	r1, #16
 800653e:	bfd8      	it	le
 8006540:	fb0e f707 	mulle.w	r7, lr, r7
 8006544:	e7f8      	b.n	8006538 <_strtod_l+0x258>
 8006546:	2b0f      	cmp	r3, #15
 8006548:	bfdc      	itt	le
 800654a:	230a      	movle	r3, #10
 800654c:	fb03 2707 	mlale	r7, r3, r7, r2
 8006550:	e7e3      	b.n	800651a <_strtod_l+0x23a>
 8006552:	2300      	movs	r3, #0
 8006554:	930a      	str	r3, [sp, #40]	@ 0x28
 8006556:	2301      	movs	r3, #1
 8006558:	e77a      	b.n	8006450 <_strtod_l+0x170>
 800655a:	f04f 0c00 	mov.w	ip, #0
 800655e:	1ca2      	adds	r2, r4, #2
 8006560:	9219      	str	r2, [sp, #100]	@ 0x64
 8006562:	78a2      	ldrb	r2, [r4, #2]
 8006564:	e782      	b.n	800646c <_strtod_l+0x18c>
 8006566:	f04f 0c01 	mov.w	ip, #1
 800656a:	e7f8      	b.n	800655e <_strtod_l+0x27e>
 800656c:	0800b8f4 	.word	0x0800b8f4
 8006570:	7ff00000 	.word	0x7ff00000
 8006574:	0800b757 	.word	0x0800b757
 8006578:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800657a:	1c51      	adds	r1, r2, #1
 800657c:	9119      	str	r1, [sp, #100]	@ 0x64
 800657e:	7852      	ldrb	r2, [r2, #1]
 8006580:	2a30      	cmp	r2, #48	@ 0x30
 8006582:	d0f9      	beq.n	8006578 <_strtod_l+0x298>
 8006584:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006588:	2908      	cmp	r1, #8
 800658a:	f63f af75 	bhi.w	8006478 <_strtod_l+0x198>
 800658e:	f04f 080a 	mov.w	r8, #10
 8006592:	3a30      	subs	r2, #48	@ 0x30
 8006594:	9209      	str	r2, [sp, #36]	@ 0x24
 8006596:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006598:	920f      	str	r2, [sp, #60]	@ 0x3c
 800659a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800659c:	1c56      	adds	r6, r2, #1
 800659e:	9619      	str	r6, [sp, #100]	@ 0x64
 80065a0:	7852      	ldrb	r2, [r2, #1]
 80065a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80065a6:	f1be 0f09 	cmp.w	lr, #9
 80065aa:	d939      	bls.n	8006620 <_strtod_l+0x340>
 80065ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80065ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80065b2:	1a76      	subs	r6, r6, r1
 80065b4:	2e08      	cmp	r6, #8
 80065b6:	dc03      	bgt.n	80065c0 <_strtod_l+0x2e0>
 80065b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065ba:	4588      	cmp	r8, r1
 80065bc:	bfa8      	it	ge
 80065be:	4688      	movge	r8, r1
 80065c0:	f1bc 0f00 	cmp.w	ip, #0
 80065c4:	d001      	beq.n	80065ca <_strtod_l+0x2ea>
 80065c6:	f1c8 0800 	rsb	r8, r8, #0
 80065ca:	2d00      	cmp	r5, #0
 80065cc:	d14e      	bne.n	800666c <_strtod_l+0x38c>
 80065ce:	9908      	ldr	r1, [sp, #32]
 80065d0:	4308      	orrs	r0, r1
 80065d2:	f47f aebe 	bne.w	8006352 <_strtod_l+0x72>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f47f aed4 	bne.w	8006384 <_strtod_l+0xa4>
 80065dc:	2a69      	cmp	r2, #105	@ 0x69
 80065de:	d028      	beq.n	8006632 <_strtod_l+0x352>
 80065e0:	dc25      	bgt.n	800662e <_strtod_l+0x34e>
 80065e2:	2a49      	cmp	r2, #73	@ 0x49
 80065e4:	d025      	beq.n	8006632 <_strtod_l+0x352>
 80065e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80065e8:	f47f aecc 	bne.w	8006384 <_strtod_l+0xa4>
 80065ec:	4999      	ldr	r1, [pc, #612]	@ (8006854 <_strtod_l+0x574>)
 80065ee:	a819      	add	r0, sp, #100	@ 0x64
 80065f0:	f001 f946 	bl	8007880 <__match>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f43f aec5 	beq.w	8006384 <_strtod_l+0xa4>
 80065fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b28      	cmp	r3, #40	@ 0x28
 8006600:	d12e      	bne.n	8006660 <_strtod_l+0x380>
 8006602:	4995      	ldr	r1, [pc, #596]	@ (8006858 <_strtod_l+0x578>)
 8006604:	aa1c      	add	r2, sp, #112	@ 0x70
 8006606:	a819      	add	r0, sp, #100	@ 0x64
 8006608:	f001 f94e 	bl	80078a8 <__hexnan>
 800660c:	2805      	cmp	r0, #5
 800660e:	d127      	bne.n	8006660 <_strtod_l+0x380>
 8006610:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006612:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006616:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800661a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800661e:	e698      	b.n	8006352 <_strtod_l+0x72>
 8006620:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006622:	fb08 2101 	mla	r1, r8, r1, r2
 8006626:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800662a:	9209      	str	r2, [sp, #36]	@ 0x24
 800662c:	e7b5      	b.n	800659a <_strtod_l+0x2ba>
 800662e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006630:	e7da      	b.n	80065e8 <_strtod_l+0x308>
 8006632:	498a      	ldr	r1, [pc, #552]	@ (800685c <_strtod_l+0x57c>)
 8006634:	a819      	add	r0, sp, #100	@ 0x64
 8006636:	f001 f923 	bl	8007880 <__match>
 800663a:	2800      	cmp	r0, #0
 800663c:	f43f aea2 	beq.w	8006384 <_strtod_l+0xa4>
 8006640:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006642:	4987      	ldr	r1, [pc, #540]	@ (8006860 <_strtod_l+0x580>)
 8006644:	3b01      	subs	r3, #1
 8006646:	a819      	add	r0, sp, #100	@ 0x64
 8006648:	9319      	str	r3, [sp, #100]	@ 0x64
 800664a:	f001 f919 	bl	8007880 <__match>
 800664e:	b910      	cbnz	r0, 8006656 <_strtod_l+0x376>
 8006650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006652:	3301      	adds	r3, #1
 8006654:	9319      	str	r3, [sp, #100]	@ 0x64
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006864 <_strtod_l+0x584>
 800665e:	e678      	b.n	8006352 <_strtod_l+0x72>
 8006660:	4881      	ldr	r0, [pc, #516]	@ (8006868 <_strtod_l+0x588>)
 8006662:	f000 fe35 	bl	80072d0 <nan>
 8006666:	4682      	mov	sl, r0
 8006668:	468b      	mov	fp, r1
 800666a:	e672      	b.n	8006352 <_strtod_l+0x72>
 800666c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800666e:	f1b9 0f00 	cmp.w	r9, #0
 8006672:	bf08      	it	eq
 8006674:	46a9      	moveq	r9, r5
 8006676:	eba8 0303 	sub.w	r3, r8, r3
 800667a:	2d10      	cmp	r5, #16
 800667c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800667e:	462c      	mov	r4, r5
 8006680:	9309      	str	r3, [sp, #36]	@ 0x24
 8006682:	bfa8      	it	ge
 8006684:	2410      	movge	r4, #16
 8006686:	f7f9 fead 	bl	80003e4 <__aeabi_ui2d>
 800668a:	2d09      	cmp	r5, #9
 800668c:	4682      	mov	sl, r0
 800668e:	468b      	mov	fp, r1
 8006690:	dc11      	bgt.n	80066b6 <_strtod_l+0x3d6>
 8006692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006694:	2b00      	cmp	r3, #0
 8006696:	f43f ae5c 	beq.w	8006352 <_strtod_l+0x72>
 800669a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669c:	dd76      	ble.n	800678c <_strtod_l+0x4ac>
 800669e:	2b16      	cmp	r3, #22
 80066a0:	dc5d      	bgt.n	800675e <_strtod_l+0x47e>
 80066a2:	4972      	ldr	r1, [pc, #456]	@ (800686c <_strtod_l+0x58c>)
 80066a4:	4652      	mov	r2, sl
 80066a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066aa:	465b      	mov	r3, fp
 80066ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b0:	f7f9 ff12 	bl	80004d8 <__aeabi_dmul>
 80066b4:	e7d7      	b.n	8006666 <_strtod_l+0x386>
 80066b6:	4b6d      	ldr	r3, [pc, #436]	@ (800686c <_strtod_l+0x58c>)
 80066b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80066c0:	f7f9 ff0a 	bl	80004d8 <__aeabi_dmul>
 80066c4:	4682      	mov	sl, r0
 80066c6:	4638      	mov	r0, r7
 80066c8:	468b      	mov	fp, r1
 80066ca:	f7f9 fe8b 	bl	80003e4 <__aeabi_ui2d>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4650      	mov	r0, sl
 80066d4:	4659      	mov	r1, fp
 80066d6:	f7f9 fd49 	bl	800016c <__adddf3>
 80066da:	2d0f      	cmp	r5, #15
 80066dc:	4682      	mov	sl, r0
 80066de:	468b      	mov	fp, r1
 80066e0:	ddd7      	ble.n	8006692 <_strtod_l+0x3b2>
 80066e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e4:	1b2c      	subs	r4, r5, r4
 80066e6:	441c      	add	r4, r3
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	f340 8093 	ble.w	8006814 <_strtod_l+0x534>
 80066ee:	f014 030f 	ands.w	r3, r4, #15
 80066f2:	d00a      	beq.n	800670a <_strtod_l+0x42a>
 80066f4:	495d      	ldr	r1, [pc, #372]	@ (800686c <_strtod_l+0x58c>)
 80066f6:	4652      	mov	r2, sl
 80066f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006700:	465b      	mov	r3, fp
 8006702:	f7f9 fee9 	bl	80004d8 <__aeabi_dmul>
 8006706:	4682      	mov	sl, r0
 8006708:	468b      	mov	fp, r1
 800670a:	f034 040f 	bics.w	r4, r4, #15
 800670e:	d073      	beq.n	80067f8 <_strtod_l+0x518>
 8006710:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006714:	dd49      	ble.n	80067aa <_strtod_l+0x4ca>
 8006716:	2400      	movs	r4, #0
 8006718:	46a0      	mov	r8, r4
 800671a:	46a1      	mov	r9, r4
 800671c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800671e:	2322      	movs	r3, #34	@ 0x22
 8006720:	f04f 0a00 	mov.w	sl, #0
 8006724:	9a05      	ldr	r2, [sp, #20]
 8006726:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006864 <_strtod_l+0x584>
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	f43f ae0f 	beq.w	8006352 <_strtod_l+0x72>
 8006734:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006736:	9805      	ldr	r0, [sp, #20]
 8006738:	f001 fa52 	bl	8007be0 <_Bfree>
 800673c:	4649      	mov	r1, r9
 800673e:	9805      	ldr	r0, [sp, #20]
 8006740:	f001 fa4e 	bl	8007be0 <_Bfree>
 8006744:	4641      	mov	r1, r8
 8006746:	9805      	ldr	r0, [sp, #20]
 8006748:	f001 fa4a 	bl	8007be0 <_Bfree>
 800674c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800674e:	9805      	ldr	r0, [sp, #20]
 8006750:	f001 fa46 	bl	8007be0 <_Bfree>
 8006754:	4621      	mov	r1, r4
 8006756:	9805      	ldr	r0, [sp, #20]
 8006758:	f001 fa42 	bl	8007be0 <_Bfree>
 800675c:	e5f9      	b.n	8006352 <_strtod_l+0x72>
 800675e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006760:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006764:	4293      	cmp	r3, r2
 8006766:	dbbc      	blt.n	80066e2 <_strtod_l+0x402>
 8006768:	4c40      	ldr	r4, [pc, #256]	@ (800686c <_strtod_l+0x58c>)
 800676a:	f1c5 050f 	rsb	r5, r5, #15
 800676e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006772:	4652      	mov	r2, sl
 8006774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006778:	465b      	mov	r3, fp
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006780:	1b5d      	subs	r5, r3, r5
 8006782:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006786:	e9d4 2300 	ldrd	r2, r3, [r4]
 800678a:	e791      	b.n	80066b0 <_strtod_l+0x3d0>
 800678c:	3316      	adds	r3, #22
 800678e:	dba8      	blt.n	80066e2 <_strtod_l+0x402>
 8006790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006792:	4650      	mov	r0, sl
 8006794:	eba3 0808 	sub.w	r8, r3, r8
 8006798:	4b34      	ldr	r3, [pc, #208]	@ (800686c <_strtod_l+0x58c>)
 800679a:	4659      	mov	r1, fp
 800679c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80067a0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80067a4:	f7f9 ffc2 	bl	800072c <__aeabi_ddiv>
 80067a8:	e75d      	b.n	8006666 <_strtod_l+0x386>
 80067aa:	2300      	movs	r3, #0
 80067ac:	4650      	mov	r0, sl
 80067ae:	4659      	mov	r1, fp
 80067b0:	461e      	mov	r6, r3
 80067b2:	4f2f      	ldr	r7, [pc, #188]	@ (8006870 <_strtod_l+0x590>)
 80067b4:	1124      	asrs	r4, r4, #4
 80067b6:	2c01      	cmp	r4, #1
 80067b8:	dc21      	bgt.n	80067fe <_strtod_l+0x51e>
 80067ba:	b10b      	cbz	r3, 80067c0 <_strtod_l+0x4e0>
 80067bc:	4682      	mov	sl, r0
 80067be:	468b      	mov	fp, r1
 80067c0:	492b      	ldr	r1, [pc, #172]	@ (8006870 <_strtod_l+0x590>)
 80067c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80067c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80067ca:	4652      	mov	r2, sl
 80067cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d0:	465b      	mov	r3, fp
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	4b23      	ldr	r3, [pc, #140]	@ (8006864 <_strtod_l+0x584>)
 80067d8:	460a      	mov	r2, r1
 80067da:	400b      	ands	r3, r1
 80067dc:	4925      	ldr	r1, [pc, #148]	@ (8006874 <_strtod_l+0x594>)
 80067de:	4682      	mov	sl, r0
 80067e0:	428b      	cmp	r3, r1
 80067e2:	d898      	bhi.n	8006716 <_strtod_l+0x436>
 80067e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf86      	itte	hi
 80067ec:	f04f 3aff 	movhi.w	sl, #4294967295
 80067f0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006878 <_strtod_l+0x598>
 80067f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80067f8:	2300      	movs	r3, #0
 80067fa:	9308      	str	r3, [sp, #32]
 80067fc:	e076      	b.n	80068ec <_strtod_l+0x60c>
 80067fe:	07e2      	lsls	r2, r4, #31
 8006800:	d504      	bpl.n	800680c <_strtod_l+0x52c>
 8006802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006806:	f7f9 fe67 	bl	80004d8 <__aeabi_dmul>
 800680a:	2301      	movs	r3, #1
 800680c:	3601      	adds	r6, #1
 800680e:	1064      	asrs	r4, r4, #1
 8006810:	3708      	adds	r7, #8
 8006812:	e7d0      	b.n	80067b6 <_strtod_l+0x4d6>
 8006814:	d0f0      	beq.n	80067f8 <_strtod_l+0x518>
 8006816:	4264      	negs	r4, r4
 8006818:	f014 020f 	ands.w	r2, r4, #15
 800681c:	d00a      	beq.n	8006834 <_strtod_l+0x554>
 800681e:	4b13      	ldr	r3, [pc, #76]	@ (800686c <_strtod_l+0x58c>)
 8006820:	4650      	mov	r0, sl
 8006822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006826:	4659      	mov	r1, fp
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 ff7e 	bl	800072c <__aeabi_ddiv>
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	1124      	asrs	r4, r4, #4
 8006836:	d0df      	beq.n	80067f8 <_strtod_l+0x518>
 8006838:	2c1f      	cmp	r4, #31
 800683a:	dd1f      	ble.n	800687c <_strtod_l+0x59c>
 800683c:	2400      	movs	r4, #0
 800683e:	46a0      	mov	r8, r4
 8006840:	46a1      	mov	r9, r4
 8006842:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006844:	2322      	movs	r3, #34	@ 0x22
 8006846:	9a05      	ldr	r2, [sp, #20]
 8006848:	f04f 0a00 	mov.w	sl, #0
 800684c:	f04f 0b00 	mov.w	fp, #0
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	e76b      	b.n	800672c <_strtod_l+0x44c>
 8006854:	0800b762 	.word	0x0800b762
 8006858:	0800b8e0 	.word	0x0800b8e0
 800685c:	0800b759 	.word	0x0800b759
 8006860:	0800b75c 	.word	0x0800b75c
 8006864:	7ff00000 	.word	0x7ff00000
 8006868:	0800afb3 	.word	0x0800afb3
 800686c:	0800b968 	.word	0x0800b968
 8006870:	0800b940 	.word	0x0800b940
 8006874:	7ca00000 	.word	0x7ca00000
 8006878:	7fefffff 	.word	0x7fefffff
 800687c:	f014 0310 	ands.w	r3, r4, #16
 8006880:	bf18      	it	ne
 8006882:	236a      	movne	r3, #106	@ 0x6a
 8006884:	4650      	mov	r0, sl
 8006886:	9308      	str	r3, [sp, #32]
 8006888:	4659      	mov	r1, fp
 800688a:	2300      	movs	r3, #0
 800688c:	4e77      	ldr	r6, [pc, #476]	@ (8006a6c <_strtod_l+0x78c>)
 800688e:	07e7      	lsls	r7, r4, #31
 8006890:	d504      	bpl.n	800689c <_strtod_l+0x5bc>
 8006892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006896:	f7f9 fe1f 	bl	80004d8 <__aeabi_dmul>
 800689a:	2301      	movs	r3, #1
 800689c:	1064      	asrs	r4, r4, #1
 800689e:	f106 0608 	add.w	r6, r6, #8
 80068a2:	d1f4      	bne.n	800688e <_strtod_l+0x5ae>
 80068a4:	b10b      	cbz	r3, 80068aa <_strtod_l+0x5ca>
 80068a6:	4682      	mov	sl, r0
 80068a8:	468b      	mov	fp, r1
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	b1b3      	cbz	r3, 80068dc <_strtod_l+0x5fc>
 80068ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80068b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	4659      	mov	r1, fp
 80068ba:	dd0f      	ble.n	80068dc <_strtod_l+0x5fc>
 80068bc:	2b1f      	cmp	r3, #31
 80068be:	dd58      	ble.n	8006972 <_strtod_l+0x692>
 80068c0:	2b34      	cmp	r3, #52	@ 0x34
 80068c2:	bfd8      	it	le
 80068c4:	f04f 33ff 	movle.w	r3, #4294967295
 80068c8:	f04f 0a00 	mov.w	sl, #0
 80068cc:	bfcf      	iteee	gt
 80068ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80068d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80068d6:	4093      	lslle	r3, r2
 80068d8:	ea03 0b01 	andle.w	fp, r3, r1
 80068dc:	2200      	movs	r2, #0
 80068de:	2300      	movs	r3, #0
 80068e0:	4650      	mov	r0, sl
 80068e2:	4659      	mov	r1, fp
 80068e4:	f7fa f860 	bl	80009a8 <__aeabi_dcmpeq>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d1a7      	bne.n	800683c <_strtod_l+0x55c>
 80068ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068ee:	464a      	mov	r2, r9
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80068f4:	462b      	mov	r3, r5
 80068f6:	9805      	ldr	r0, [sp, #20]
 80068f8:	f001 f9da 	bl	8007cb0 <__s2b>
 80068fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80068fe:	2800      	cmp	r0, #0
 8006900:	f43f af09 	beq.w	8006716 <_strtod_l+0x436>
 8006904:	2400      	movs	r4, #0
 8006906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800690a:	2a00      	cmp	r2, #0
 800690c:	eba3 0308 	sub.w	r3, r3, r8
 8006910:	bfa8      	it	ge
 8006912:	2300      	movge	r3, #0
 8006914:	46a0      	mov	r8, r4
 8006916:	9312      	str	r3, [sp, #72]	@ 0x48
 8006918:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800691c:	9316      	str	r3, [sp, #88]	@ 0x58
 800691e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006920:	9805      	ldr	r0, [sp, #20]
 8006922:	6859      	ldr	r1, [r3, #4]
 8006924:	f001 f91c 	bl	8007b60 <_Balloc>
 8006928:	4681      	mov	r9, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	f43f aef7 	beq.w	800671e <_strtod_l+0x43e>
 8006930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006932:	300c      	adds	r0, #12
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	f103 010c 	add.w	r1, r3, #12
 800693a:	3202      	adds	r2, #2
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	f000 fcb8 	bl	80072b2 <memcpy>
 8006942:	ab1c      	add	r3, sp, #112	@ 0x70
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	9805      	ldr	r0, [sp, #20]
 8006950:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006954:	f001 fcd8 	bl	8008308 <__d2b>
 8006958:	901a      	str	r0, [sp, #104]	@ 0x68
 800695a:	2800      	cmp	r0, #0
 800695c:	f43f aedf 	beq.w	800671e <_strtod_l+0x43e>
 8006960:	2101      	movs	r1, #1
 8006962:	9805      	ldr	r0, [sp, #20]
 8006964:	f001 fa3a 	bl	8007ddc <__i2b>
 8006968:	4680      	mov	r8, r0
 800696a:	b948      	cbnz	r0, 8006980 <_strtod_l+0x6a0>
 800696c:	f04f 0800 	mov.w	r8, #0
 8006970:	e6d5      	b.n	800671e <_strtod_l+0x43e>
 8006972:	f04f 32ff 	mov.w	r2, #4294967295
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	ea03 0a0a 	and.w	sl, r3, sl
 800697e:	e7ad      	b.n	80068dc <_strtod_l+0x5fc>
 8006980:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006982:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006984:	2d00      	cmp	r5, #0
 8006986:	bfab      	itete	ge
 8006988:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800698a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800698c:	18ef      	addge	r7, r5, r3
 800698e:	1b5e      	sublt	r6, r3, r5
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	bfa8      	it	ge
 8006994:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006996:	eba5 0503 	sub.w	r5, r5, r3
 800699a:	4415      	add	r5, r2
 800699c:	4b34      	ldr	r3, [pc, #208]	@ (8006a70 <_strtod_l+0x790>)
 800699e:	f105 35ff 	add.w	r5, r5, #4294967295
 80069a2:	bfb8      	it	lt
 80069a4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80069a6:	429d      	cmp	r5, r3
 80069a8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80069ac:	da50      	bge.n	8006a50 <_strtod_l+0x770>
 80069ae:	1b5b      	subs	r3, r3, r5
 80069b0:	2b1f      	cmp	r3, #31
 80069b2:	f04f 0101 	mov.w	r1, #1
 80069b6:	eba2 0203 	sub.w	r2, r2, r3
 80069ba:	dc3d      	bgt.n	8006a38 <_strtod_l+0x758>
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069c2:	2300      	movs	r3, #0
 80069c4:	9310      	str	r3, [sp, #64]	@ 0x40
 80069c6:	18bd      	adds	r5, r7, r2
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	42af      	cmp	r7, r5
 80069cc:	4416      	add	r6, r2
 80069ce:	441e      	add	r6, r3
 80069d0:	463b      	mov	r3, r7
 80069d2:	bfa8      	it	ge
 80069d4:	462b      	movge	r3, r5
 80069d6:	42b3      	cmp	r3, r6
 80069d8:	bfa8      	it	ge
 80069da:	4633      	movge	r3, r6
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bfc2      	ittt	gt
 80069e0:	1aed      	subgt	r5, r5, r3
 80069e2:	1af6      	subgt	r6, r6, r3
 80069e4:	1aff      	subgt	r7, r7, r3
 80069e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dd16      	ble.n	8006a1a <_strtod_l+0x73a>
 80069ec:	4641      	mov	r1, r8
 80069ee:	461a      	mov	r2, r3
 80069f0:	9805      	ldr	r0, [sp, #20]
 80069f2:	f001 faab 	bl	8007f4c <__pow5mult>
 80069f6:	4680      	mov	r8, r0
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d0b7      	beq.n	800696c <_strtod_l+0x68c>
 80069fc:	4601      	mov	r1, r0
 80069fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a00:	9805      	ldr	r0, [sp, #20]
 8006a02:	f001 fa01 	bl	8007e08 <__multiply>
 8006a06:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f43f ae88 	beq.w	800671e <_strtod_l+0x43e>
 8006a0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a10:	9805      	ldr	r0, [sp, #20]
 8006a12:	f001 f8e5 	bl	8007be0 <_Bfree>
 8006a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a18:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	dc1d      	bgt.n	8006a5a <_strtod_l+0x77a>
 8006a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dd27      	ble.n	8006a74 <_strtod_l+0x794>
 8006a24:	4649      	mov	r1, r9
 8006a26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006a28:	9805      	ldr	r0, [sp, #20]
 8006a2a:	f001 fa8f 	bl	8007f4c <__pow5mult>
 8006a2e:	4681      	mov	r9, r0
 8006a30:	bb00      	cbnz	r0, 8006a74 <_strtod_l+0x794>
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	e672      	b.n	800671e <_strtod_l+0x43e>
 8006a38:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a3c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a40:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a44:	35e2      	adds	r5, #226	@ 0xe2
 8006a46:	fa01 f305 	lsl.w	r3, r1, r5
 8006a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a4c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a4e:	e7ba      	b.n	80069c6 <_strtod_l+0x6e6>
 8006a50:	2300      	movs	r3, #0
 8006a52:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a54:	2301      	movs	r3, #1
 8006a56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a58:	e7b5      	b.n	80069c6 <_strtod_l+0x6e6>
 8006a5a:	462a      	mov	r2, r5
 8006a5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a5e:	9805      	ldr	r0, [sp, #20]
 8006a60:	f001 face 	bl	8008000 <__lshift>
 8006a64:	901a      	str	r0, [sp, #104]	@ 0x68
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d1d9      	bne.n	8006a1e <_strtod_l+0x73e>
 8006a6a:	e658      	b.n	800671e <_strtod_l+0x43e>
 8006a6c:	0800b908 	.word	0x0800b908
 8006a70:	fffffc02 	.word	0xfffffc02
 8006a74:	2e00      	cmp	r6, #0
 8006a76:	dd07      	ble.n	8006a88 <_strtod_l+0x7a8>
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	9805      	ldr	r0, [sp, #20]
 8006a7e:	f001 fabf 	bl	8008000 <__lshift>
 8006a82:	4681      	mov	r9, r0
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0d4      	beq.n	8006a32 <_strtod_l+0x752>
 8006a88:	2f00      	cmp	r7, #0
 8006a8a:	dd08      	ble.n	8006a9e <_strtod_l+0x7be>
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	463a      	mov	r2, r7
 8006a90:	9805      	ldr	r0, [sp, #20]
 8006a92:	f001 fab5 	bl	8008000 <__lshift>
 8006a96:	4680      	mov	r8, r0
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f43f ae40 	beq.w	800671e <_strtod_l+0x43e>
 8006a9e:	464a      	mov	r2, r9
 8006aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006aa2:	9805      	ldr	r0, [sp, #20]
 8006aa4:	f001 fb34 	bl	8008110 <__mdiff>
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f43f ae37 	beq.w	800671e <_strtod_l+0x43e>
 8006ab0:	68c3      	ldr	r3, [r0, #12]
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60c3      	str	r3, [r0, #12]
 8006aba:	f001 fb0d 	bl	80080d8 <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	da3d      	bge.n	8006b3e <_strtod_l+0x85e>
 8006ac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ac4:	ea53 030a 	orrs.w	r3, r3, sl
 8006ac8:	d163      	bne.n	8006b92 <_strtod_l+0x8b2>
 8006aca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d15f      	bne.n	8006b92 <_strtod_l+0x8b2>
 8006ad2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ad6:	0d1b      	lsrs	r3, r3, #20
 8006ad8:	051b      	lsls	r3, r3, #20
 8006ada:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ade:	d958      	bls.n	8006b92 <_strtod_l+0x8b2>
 8006ae0:	6963      	ldr	r3, [r4, #20]
 8006ae2:	b913      	cbnz	r3, 8006aea <_strtod_l+0x80a>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	dd53      	ble.n	8006b92 <_strtod_l+0x8b2>
 8006aea:	4621      	mov	r1, r4
 8006aec:	2201      	movs	r2, #1
 8006aee:	9805      	ldr	r0, [sp, #20]
 8006af0:	f001 fa86 	bl	8008000 <__lshift>
 8006af4:	4641      	mov	r1, r8
 8006af6:	4604      	mov	r4, r0
 8006af8:	f001 faee 	bl	80080d8 <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	dd48      	ble.n	8006b92 <_strtod_l+0x8b2>
 8006b00:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b04:	9a08      	ldr	r2, [sp, #32]
 8006b06:	0d1b      	lsrs	r3, r3, #20
 8006b08:	051b      	lsls	r3, r3, #20
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	d062      	beq.n	8006bd4 <_strtod_l+0x8f4>
 8006b0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b12:	d85f      	bhi.n	8006bd4 <_strtod_l+0x8f4>
 8006b14:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006b18:	f67f ae94 	bls.w	8006844 <_strtod_l+0x564>
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	4659      	mov	r1, fp
 8006b20:	4ba3      	ldr	r3, [pc, #652]	@ (8006db0 <_strtod_l+0xad0>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	4ba2      	ldr	r3, [pc, #648]	@ (8006db4 <_strtod_l+0xad4>)
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	468b      	mov	fp, r1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f47f adff 	bne.w	8006734 <_strtod_l+0x454>
 8006b36:	2322      	movs	r3, #34	@ 0x22
 8006b38:	9a05      	ldr	r2, [sp, #20]
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e5fa      	b.n	8006734 <_strtod_l+0x454>
 8006b3e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006b42:	d165      	bne.n	8006c10 <_strtod_l+0x930>
 8006b44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b4a:	b35a      	cbz	r2, 8006ba4 <_strtod_l+0x8c4>
 8006b4c:	4a9a      	ldr	r2, [pc, #616]	@ (8006db8 <_strtod_l+0xad8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d12b      	bne.n	8006baa <_strtod_l+0x8ca>
 8006b52:	9b08      	ldr	r3, [sp, #32]
 8006b54:	4651      	mov	r1, sl
 8006b56:	b303      	cbz	r3, 8006b9a <_strtod_l+0x8ba>
 8006b58:	465a      	mov	r2, fp
 8006b5a:	4b96      	ldr	r3, [pc, #600]	@ (8006db4 <_strtod_l+0xad4>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006b62:	f04f 32ff 	mov.w	r2, #4294967295
 8006b66:	d81b      	bhi.n	8006ba0 <_strtod_l+0x8c0>
 8006b68:	0d1b      	lsrs	r3, r3, #20
 8006b6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	4299      	cmp	r1, r3
 8006b74:	d119      	bne.n	8006baa <_strtod_l+0x8ca>
 8006b76:	4b91      	ldr	r3, [pc, #580]	@ (8006dbc <_strtod_l+0xadc>)
 8006b78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d102      	bne.n	8006b84 <_strtod_l+0x8a4>
 8006b7e:	3101      	adds	r1, #1
 8006b80:	f43f adcd 	beq.w	800671e <_strtod_l+0x43e>
 8006b84:	f04f 0a00 	mov.w	sl, #0
 8006b88:	4b8a      	ldr	r3, [pc, #552]	@ (8006db4 <_strtod_l+0xad4>)
 8006b8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b8c:	401a      	ands	r2, r3
 8006b8e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1c1      	bne.n	8006b1c <_strtod_l+0x83c>
 8006b98:	e5cc      	b.n	8006734 <_strtod_l+0x454>
 8006b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9e:	e7e8      	b.n	8006b72 <_strtod_l+0x892>
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	e7e6      	b.n	8006b72 <_strtod_l+0x892>
 8006ba4:	ea53 030a 	orrs.w	r3, r3, sl
 8006ba8:	d0aa      	beq.n	8006b00 <_strtod_l+0x820>
 8006baa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bac:	b1db      	cbz	r3, 8006be6 <_strtod_l+0x906>
 8006bae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bb0:	4213      	tst	r3, r2
 8006bb2:	d0ee      	beq.n	8006b92 <_strtod_l+0x8b2>
 8006bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	4659      	mov	r1, fp
 8006bba:	9a08      	ldr	r2, [sp, #32]
 8006bbc:	b1bb      	cbz	r3, 8006bee <_strtod_l+0x90e>
 8006bbe:	f7ff fb6c 	bl	800629a <sulp>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bca:	f7f9 facf 	bl	800016c <__adddf3>
 8006bce:	4682      	mov	sl, r0
 8006bd0:	468b      	mov	fp, r1
 8006bd2:	e7de      	b.n	8006b92 <_strtod_l+0x8b2>
 8006bd4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006bd8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8006be0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006be4:	e7d5      	b.n	8006b92 <_strtod_l+0x8b2>
 8006be6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006be8:	ea13 0f0a 	tst.w	r3, sl
 8006bec:	e7e1      	b.n	8006bb2 <_strtod_l+0x8d2>
 8006bee:	f7ff fb54 	bl	800629a <sulp>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bfa:	f7f9 fab5 	bl	8000168 <__aeabi_dsub>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	4682      	mov	sl, r0
 8006c04:	468b      	mov	fp, r1
 8006c06:	f7f9 fecf 	bl	80009a8 <__aeabi_dcmpeq>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d0c1      	beq.n	8006b92 <_strtod_l+0x8b2>
 8006c0e:	e619      	b.n	8006844 <_strtod_l+0x564>
 8006c10:	4641      	mov	r1, r8
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 fbd0 	bl	80083b8 <__ratio>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	f7f9 fed5 	bl	80009d0 <__aeabi_dcmple>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d06d      	beq.n	8006d06 <_strtod_l+0xa26>
 8006c2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d178      	bne.n	8006d22 <_strtod_l+0xa42>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	d156      	bne.n	8006ce4 <_strtod_l+0xa04>
 8006c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d158      	bne.n	8006cf2 <_strtod_l+0xa12>
 8006c40:	2200      	movs	r2, #0
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	4b5e      	ldr	r3, [pc, #376]	@ (8006dc0 <_strtod_l+0xae0>)
 8006c48:	f7f9 feb8 	bl	80009bc <__aeabi_dcmplt>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d157      	bne.n	8006d00 <_strtod_l+0xa20>
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	2200      	movs	r2, #0
 8006c56:	4b5b      	ldr	r3, [pc, #364]	@ (8006dc4 <_strtod_l+0xae4>)
 8006c58:	f7f9 fc3e 	bl	80004d8 <__aeabi_dmul>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006c64:	9606      	str	r6, [sp, #24]
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c6c:	4d51      	ldr	r5, [pc, #324]	@ (8006db4 <_strtod_l+0xad4>)
 8006c6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c74:	401d      	ands	r5, r3
 8006c76:	4b54      	ldr	r3, [pc, #336]	@ (8006dc8 <_strtod_l+0xae8>)
 8006c78:	429d      	cmp	r5, r3
 8006c7a:	f040 80ab 	bne.w	8006dd4 <_strtod_l+0xaf4>
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c80:	4650      	mov	r0, sl
 8006c82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006c86:	4659      	mov	r1, fp
 8006c88:	f001 fad6 	bl	8008238 <__ulp>
 8006c8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c90:	f7f9 fc22 	bl	80004d8 <__aeabi_dmul>
 8006c94:	4652      	mov	r2, sl
 8006c96:	465b      	mov	r3, fp
 8006c98:	f7f9 fa68 	bl	800016c <__adddf3>
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4945      	ldr	r1, [pc, #276]	@ (8006db4 <_strtod_l+0xad4>)
 8006ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8006dcc <_strtod_l+0xaec>)
 8006ca2:	4019      	ands	r1, r3
 8006ca4:	4291      	cmp	r1, r2
 8006ca6:	4682      	mov	sl, r0
 8006ca8:	d942      	bls.n	8006d30 <_strtod_l+0xa50>
 8006caa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006cac:	4b43      	ldr	r3, [pc, #268]	@ (8006dbc <_strtod_l+0xadc>)
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d103      	bne.n	8006cba <_strtod_l+0x9da>
 8006cb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	f43f ad32 	beq.w	800671e <_strtod_l+0x43e>
 8006cba:	f04f 3aff 	mov.w	sl, #4294967295
 8006cbe:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006dbc <_strtod_l+0xadc>
 8006cc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cc4:	9805      	ldr	r0, [sp, #20]
 8006cc6:	f000 ff8b 	bl	8007be0 <_Bfree>
 8006cca:	4649      	mov	r1, r9
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	f000 ff87 	bl	8007be0 <_Bfree>
 8006cd2:	4641      	mov	r1, r8
 8006cd4:	9805      	ldr	r0, [sp, #20]
 8006cd6:	f000 ff83 	bl	8007be0 <_Bfree>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	9805      	ldr	r0, [sp, #20]
 8006cde:	f000 ff7f 	bl	8007be0 <_Bfree>
 8006ce2:	e61c      	b.n	800691e <_strtod_l+0x63e>
 8006ce4:	f1ba 0f01 	cmp.w	sl, #1
 8006ce8:	d103      	bne.n	8006cf2 <_strtod_l+0xa12>
 8006cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f43f ada9 	beq.w	8006844 <_strtod_l+0x564>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <_strtod_l+0xaf0>)
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cfc:	4f30      	ldr	r7, [pc, #192]	@ (8006dc0 <_strtod_l+0xae0>)
 8006cfe:	e7b3      	b.n	8006c68 <_strtod_l+0x988>
 8006d00:	2600      	movs	r6, #0
 8006d02:	4f30      	ldr	r7, [pc, #192]	@ (8006dc4 <_strtod_l+0xae4>)
 8006d04:	e7ac      	b.n	8006c60 <_strtod_l+0x980>
 8006d06:	4630      	mov	r0, r6
 8006d08:	4639      	mov	r1, r7
 8006d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc4 <_strtod_l+0xae4>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f7f9 fbe3 	bl	80004d8 <__aeabi_dmul>
 8006d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0a1      	beq.n	8006c60 <_strtod_l+0x980>
 8006d1c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d20:	e7a2      	b.n	8006c68 <_strtod_l+0x988>
 8006d22:	2200      	movs	r2, #0
 8006d24:	4b26      	ldr	r3, [pc, #152]	@ (8006dc0 <_strtod_l+0xae0>)
 8006d26:	4616      	mov	r6, r2
 8006d28:	461f      	mov	r7, r3
 8006d2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d2e:	e79b      	b.n	8006c68 <_strtod_l+0x988>
 8006d30:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1c1      	bne.n	8006cc2 <_strtod_l+0x9e2>
 8006d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d42:	0d1b      	lsrs	r3, r3, #20
 8006d44:	051b      	lsls	r3, r3, #20
 8006d46:	429d      	cmp	r5, r3
 8006d48:	d1bb      	bne.n	8006cc2 <_strtod_l+0x9e2>
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	f7fa fa3b 	bl	80011c8 <__aeabi_d2lz>
 8006d52:	f7f9 fb93 	bl	800047c <__aeabi_l2d>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	f7f9 fa03 	bl	8000168 <__aeabi_dsub>
 8006d62:	460b      	mov	r3, r1
 8006d64:	4602      	mov	r2, r0
 8006d66:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006d6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d70:	ea46 060a 	orr.w	r6, r6, sl
 8006d74:	431e      	orrs	r6, r3
 8006d76:	d06a      	beq.n	8006e4e <_strtod_l+0xb6e>
 8006d78:	a309      	add	r3, pc, #36	@ (adr r3, 8006da0 <_strtod_l+0xac0>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fe1d 	bl	80009bc <__aeabi_dcmplt>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f47f acd6 	bne.w	8006734 <_strtod_l+0x454>
 8006d88:	a307      	add	r3, pc, #28	@ (adr r3, 8006da8 <_strtod_l+0xac8>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d92:	f7f9 fe31 	bl	80009f8 <__aeabi_dcmpgt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d093      	beq.n	8006cc2 <_strtod_l+0x9e2>
 8006d9a:	e4cb      	b.n	8006734 <_strtod_l+0x454>
 8006d9c:	f3af 8000 	nop.w
 8006da0:	94a03595 	.word	0x94a03595
 8006da4:	3fdfffff 	.word	0x3fdfffff
 8006da8:	35afe535 	.word	0x35afe535
 8006dac:	3fe00000 	.word	0x3fe00000
 8006db0:	39500000 	.word	0x39500000
 8006db4:	7ff00000 	.word	0x7ff00000
 8006db8:	000fffff 	.word	0x000fffff
 8006dbc:	7fefffff 	.word	0x7fefffff
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	3fe00000 	.word	0x3fe00000
 8006dc8:	7fe00000 	.word	0x7fe00000
 8006dcc:	7c9fffff 	.word	0x7c9fffff
 8006dd0:	bff00000 	.word	0xbff00000
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	b323      	cbz	r3, 8006e22 <_strtod_l+0xb42>
 8006dd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006ddc:	d821      	bhi.n	8006e22 <_strtod_l+0xb42>
 8006dde:	a328      	add	r3, pc, #160	@ (adr r3, 8006e80 <_strtod_l+0xba0>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fdf2 	bl	80009d0 <__aeabi_dcmple>
 8006dec:	b1a0      	cbz	r0, 8006e18 <_strtod_l+0xb38>
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7f9 fe49 	bl	8000a88 <__aeabi_d2uiz>
 8006df6:	2801      	cmp	r0, #1
 8006df8:	bf38      	it	cc
 8006dfa:	2001      	movcc	r0, #1
 8006dfc:	f7f9 faf2 	bl	80003e4 <__aeabi_ui2d>
 8006e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e02:	4606      	mov	r6, r0
 8006e04:	460f      	mov	r7, r1
 8006e06:	b9fb      	cbnz	r3, 8006e48 <_strtod_l+0xb68>
 8006e08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006e0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e1e:	1b5b      	subs	r3, r3, r5
 8006e20:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006e2a:	f001 fa05 	bl	8008238 <__ulp>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4650      	mov	r0, sl
 8006e34:	4659      	mov	r1, fp
 8006e36:	f7f9 fb4f 	bl	80004d8 <__aeabi_dmul>
 8006e3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e3e:	f7f9 f995 	bl	800016c <__adddf3>
 8006e42:	4682      	mov	sl, r0
 8006e44:	468b      	mov	fp, r1
 8006e46:	e775      	b.n	8006d34 <_strtod_l+0xa54>
 8006e48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006e4c:	e7e0      	b.n	8006e10 <_strtod_l+0xb30>
 8006e4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006e88 <_strtod_l+0xba8>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fdb2 	bl	80009bc <__aeabi_dcmplt>
 8006e58:	e79d      	b.n	8006d96 <_strtod_l+0xab6>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e60:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	f7ff ba79 	b.w	800635a <_strtod_l+0x7a>
 8006e68:	2a65      	cmp	r2, #101	@ 0x65
 8006e6a:	f43f ab72 	beq.w	8006552 <_strtod_l+0x272>
 8006e6e:	2a45      	cmp	r2, #69	@ 0x45
 8006e70:	f43f ab6f 	beq.w	8006552 <_strtod_l+0x272>
 8006e74:	2301      	movs	r3, #1
 8006e76:	f7ff bbaa 	b.w	80065ce <_strtod_l+0x2ee>
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w
 8006e80:	ffc00000 	.word	0xffc00000
 8006e84:	41dfffff 	.word	0x41dfffff
 8006e88:	94a03595 	.word	0x94a03595
 8006e8c:	3fcfffff 	.word	0x3fcfffff

08006e90 <strtod>:
 8006e90:	460a      	mov	r2, r1
 8006e92:	4601      	mov	r1, r0
 8006e94:	4802      	ldr	r0, [pc, #8]	@ (8006ea0 <strtod+0x10>)
 8006e96:	4b03      	ldr	r3, [pc, #12]	@ (8006ea4 <strtod+0x14>)
 8006e98:	6800      	ldr	r0, [r0, #0]
 8006e9a:	f7ff ba21 	b.w	80062e0 <_strtod_l>
 8006e9e:	bf00      	nop
 8006ea0:	20000300 	.word	0x20000300
 8006ea4:	20000194 	.word	0x20000194

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6083      	str	r3, [r0, #8]
 8006eb8:	8181      	strh	r1, [r0, #12]
 8006eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ebc:	81c2      	strh	r2, [r0, #14]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	@ 0x5c
 8006ec6:	f000 f94c 	bl	8007162 <memset>
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <std+0x58>)
 8006ecc:	6224      	str	r4, [r4, #32]
 8006ece:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <std+0x5c>)
 8006ed2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f08 <std+0x60>)
 8006ed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8006f0c <std+0x64>)
 8006eda:	6323      	str	r3, [r4, #48]	@ 0x30
 8006edc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f10 <std+0x68>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d006      	beq.n	8006ef0 <std+0x48>
 8006ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ee6:	4294      	cmp	r4, r2
 8006ee8:	d002      	beq.n	8006ef0 <std+0x48>
 8006eea:	33d0      	adds	r3, #208	@ 0xd0
 8006eec:	429c      	cmp	r4, r3
 8006eee:	d105      	bne.n	8006efc <std+0x54>
 8006ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f000 b9d0 	b.w	800729c <__retarget_lock_init_recursive>
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	080070dd 	.word	0x080070dd
 8006f04:	080070ff 	.word	0x080070ff
 8006f08:	08007137 	.word	0x08007137
 8006f0c:	0800715b 	.word	0x0800715b
 8006f10:	2000457c 	.word	0x2000457c

08006f14 <stdio_exit_handler>:
 8006f14:	4a02      	ldr	r2, [pc, #8]	@ (8006f20 <stdio_exit_handler+0xc>)
 8006f16:	4903      	ldr	r1, [pc, #12]	@ (8006f24 <stdio_exit_handler+0x10>)
 8006f18:	4803      	ldr	r0, [pc, #12]	@ (8006f28 <stdio_exit_handler+0x14>)
 8006f1a:	f000 b869 	b.w	8006ff0 <_fwalk_sglue>
 8006f1e:	bf00      	nop
 8006f20:	20000188 	.word	0x20000188
 8006f24:	08008b89 	.word	0x08008b89
 8006f28:	20000304 	.word	0x20000304

08006f2c <cleanup_stdio>:
 8006f2c:	6841      	ldr	r1, [r0, #4]
 8006f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <cleanup_stdio+0x34>)
 8006f30:	b510      	push	{r4, lr}
 8006f32:	4299      	cmp	r1, r3
 8006f34:	4604      	mov	r4, r0
 8006f36:	d001      	beq.n	8006f3c <cleanup_stdio+0x10>
 8006f38:	f001 fe26 	bl	8008b88 <_fflush_r>
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <cleanup_stdio+0x38>)
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <cleanup_stdio+0x1e>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f001 fe1f 	bl	8008b88 <_fflush_r>
 8006f4a:	68e1      	ldr	r1, [r4, #12]
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <cleanup_stdio+0x3c>)
 8006f4e:	4299      	cmp	r1, r3
 8006f50:	d004      	beq.n	8006f5c <cleanup_stdio+0x30>
 8006f52:	4620      	mov	r0, r4
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f001 be16 	b.w	8008b88 <_fflush_r>
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	bf00      	nop
 8006f60:	2000457c 	.word	0x2000457c
 8006f64:	200045e4 	.word	0x200045e4
 8006f68:	2000464c 	.word	0x2000464c

08006f6c <global_stdio_init.part.0>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f9c <global_stdio_init.part.0+0x30>)
 8006f70:	4c0b      	ldr	r4, [pc, #44]	@ (8006fa0 <global_stdio_init.part.0+0x34>)
 8006f72:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa4 <global_stdio_init.part.0+0x38>)
 8006f74:	4620      	mov	r0, r4
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	2104      	movs	r1, #4
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7ff ff94 	bl	8006ea8 <std>
 8006f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f84:	2201      	movs	r2, #1
 8006f86:	2109      	movs	r1, #9
 8006f88:	f7ff ff8e 	bl	8006ea8 <std>
 8006f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f90:	2202      	movs	r2, #2
 8006f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f96:	2112      	movs	r1, #18
 8006f98:	f7ff bf86 	b.w	8006ea8 <std>
 8006f9c:	200046b4 	.word	0x200046b4
 8006fa0:	2000457c 	.word	0x2000457c
 8006fa4:	08006f15 	.word	0x08006f15

08006fa8 <__sfp_lock_acquire>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	@ (8006fb0 <__sfp_lock_acquire+0x8>)
 8006faa:	f000 b978 	b.w	800729e <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	200046bd 	.word	0x200046bd

08006fb4 <__sfp_lock_release>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__sfp_lock_release+0x8>)
 8006fb6:	f000 b973 	b.w	80072a0 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200046bd 	.word	0x200046bd

08006fc0 <__sinit>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	f7ff fff0 	bl	8006fa8 <__sfp_lock_acquire>
 8006fc8:	6a23      	ldr	r3, [r4, #32]
 8006fca:	b11b      	cbz	r3, 8006fd4 <__sinit+0x14>
 8006fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd0:	f7ff bff0 	b.w	8006fb4 <__sfp_lock_release>
 8006fd4:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <__sinit+0x28>)
 8006fd6:	6223      	str	r3, [r4, #32]
 8006fd8:	4b04      	ldr	r3, [pc, #16]	@ (8006fec <__sinit+0x2c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f5      	bne.n	8006fcc <__sinit+0xc>
 8006fe0:	f7ff ffc4 	bl	8006f6c <global_stdio_init.part.0>
 8006fe4:	e7f2      	b.n	8006fcc <__sinit+0xc>
 8006fe6:	bf00      	nop
 8006fe8:	08006f2d 	.word	0x08006f2d
 8006fec:	200046b4 	.word	0x200046b4

08006ff0 <_fwalk_sglue>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4688      	mov	r8, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007000:	f1b9 0901 	subs.w	r9, r9, #1
 8007004:	d505      	bpl.n	8007012 <_fwalk_sglue+0x22>
 8007006:	6824      	ldr	r4, [r4, #0]
 8007008:	2c00      	cmp	r4, #0
 800700a:	d1f7      	bne.n	8006ffc <_fwalk_sglue+0xc>
 800700c:	4630      	mov	r0, r6
 800700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d907      	bls.n	8007028 <_fwalk_sglue+0x38>
 8007018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800701c:	3301      	adds	r3, #1
 800701e:	d003      	beq.n	8007028 <_fwalk_sglue+0x38>
 8007020:	4629      	mov	r1, r5
 8007022:	4638      	mov	r0, r7
 8007024:	47c0      	blx	r8
 8007026:	4306      	orrs	r6, r0
 8007028:	3568      	adds	r5, #104	@ 0x68
 800702a:	e7e9      	b.n	8007000 <_fwalk_sglue+0x10>

0800702c <sniprintf>:
 800702c:	b40c      	push	{r2, r3}
 800702e:	b530      	push	{r4, r5, lr}
 8007030:	4b18      	ldr	r3, [pc, #96]	@ (8007094 <sniprintf+0x68>)
 8007032:	1e0c      	subs	r4, r1, #0
 8007034:	681d      	ldr	r5, [r3, #0]
 8007036:	b09d      	sub	sp, #116	@ 0x74
 8007038:	da08      	bge.n	800704c <sniprintf+0x20>
 800703a:	238b      	movs	r3, #139	@ 0x8b
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	b01d      	add	sp, #116	@ 0x74
 8007044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007048:	b002      	add	sp, #8
 800704a:	4770      	bx	lr
 800704c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	931b      	str	r3, [sp, #108]	@ 0x6c
 800705a:	bf0c      	ite	eq
 800705c:	4623      	moveq	r3, r4
 800705e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	9307      	str	r3, [sp, #28]
 8007066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800706a:	9002      	str	r0, [sp, #8]
 800706c:	9006      	str	r0, [sp, #24]
 800706e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007072:	4628      	mov	r0, r5
 8007074:	ab21      	add	r3, sp, #132	@ 0x84
 8007076:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007078:	a902      	add	r1, sp, #8
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	f001 fa78 	bl	8008570 <_svfiprintf_r>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	bfbc      	itt	lt
 8007084:	238b      	movlt	r3, #139	@ 0x8b
 8007086:	602b      	strlt	r3, [r5, #0]
 8007088:	2c00      	cmp	r4, #0
 800708a:	d0da      	beq.n	8007042 <sniprintf+0x16>
 800708c:	2200      	movs	r2, #0
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e7d6      	b.n	8007042 <sniprintf+0x16>
 8007094:	20000300 	.word	0x20000300

08007098 <siprintf>:
 8007098:	b40e      	push	{r1, r2, r3}
 800709a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800709e:	b510      	push	{r4, lr}
 80070a0:	2400      	movs	r4, #0
 80070a2:	b09d      	sub	sp, #116	@ 0x74
 80070a4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80070a6:	9002      	str	r0, [sp, #8]
 80070a8:	9006      	str	r0, [sp, #24]
 80070aa:	9107      	str	r1, [sp, #28]
 80070ac:	9104      	str	r1, [sp, #16]
 80070ae:	4809      	ldr	r0, [pc, #36]	@ (80070d4 <siprintf+0x3c>)
 80070b0:	4909      	ldr	r1, [pc, #36]	@ (80070d8 <siprintf+0x40>)
 80070b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b6:	9105      	str	r1, [sp, #20]
 80070b8:	6800      	ldr	r0, [r0, #0]
 80070ba:	a902      	add	r1, sp, #8
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80070c0:	f001 fa56 	bl	8008570 <_svfiprintf_r>
 80070c4:	9b02      	ldr	r3, [sp, #8]
 80070c6:	701c      	strb	r4, [r3, #0]
 80070c8:	b01d      	add	sp, #116	@ 0x74
 80070ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ce:	b003      	add	sp, #12
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000300 	.word	0x20000300
 80070d8:	ffff0208 	.word	0xffff0208

080070dc <__sread>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	460c      	mov	r4, r1
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	f000 f88c 	bl	8007200 <_read_r>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	bfab      	itete	ge
 80070ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80070ee:	89a3      	ldrhlt	r3, [r4, #12]
 80070f0:	181b      	addge	r3, r3, r0
 80070f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80070f6:	bfac      	ite	ge
 80070f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070fa:	81a3      	strhlt	r3, [r4, #12]
 80070fc:	bd10      	pop	{r4, pc}

080070fe <__swrite>:
 80070fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007102:	461f      	mov	r7, r3
 8007104:	898b      	ldrh	r3, [r1, #12]
 8007106:	4605      	mov	r5, r0
 8007108:	05db      	lsls	r3, r3, #23
 800710a:	460c      	mov	r4, r1
 800710c:	4616      	mov	r6, r2
 800710e:	d505      	bpl.n	800711c <__swrite+0x1e>
 8007110:	2302      	movs	r3, #2
 8007112:	2200      	movs	r2, #0
 8007114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007118:	f000 f860 	bl	80071dc <_lseek_r>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	4632      	mov	r2, r6
 8007120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	4628      	mov	r0, r5
 8007128:	463b      	mov	r3, r7
 800712a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007132:	f000 b877 	b.w	8007224 <_write_r>

08007136 <__sseek>:
 8007136:	b510      	push	{r4, lr}
 8007138:	460c      	mov	r4, r1
 800713a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713e:	f000 f84d 	bl	80071dc <_lseek_r>
 8007142:	1c43      	adds	r3, r0, #1
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	bf15      	itete	ne
 8007148:	6560      	strne	r0, [r4, #84]	@ 0x54
 800714a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800714e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007152:	81a3      	strheq	r3, [r4, #12]
 8007154:	bf18      	it	ne
 8007156:	81a3      	strhne	r3, [r4, #12]
 8007158:	bd10      	pop	{r4, pc}

0800715a <__sclose>:
 800715a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800715e:	f000 b82d 	b.w	80071bc <_close_r>

08007162 <memset>:
 8007162:	4603      	mov	r3, r0
 8007164:	4402      	add	r2, r0
 8007166:	4293      	cmp	r3, r2
 8007168:	d100      	bne.n	800716c <memset+0xa>
 800716a:	4770      	bx	lr
 800716c:	f803 1b01 	strb.w	r1, [r3], #1
 8007170:	e7f9      	b.n	8007166 <memset+0x4>

08007172 <strncmp>:
 8007172:	b510      	push	{r4, lr}
 8007174:	b16a      	cbz	r2, 8007192 <strncmp+0x20>
 8007176:	3901      	subs	r1, #1
 8007178:	1884      	adds	r4, r0, r2
 800717a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007182:	429a      	cmp	r2, r3
 8007184:	d103      	bne.n	800718e <strncmp+0x1c>
 8007186:	42a0      	cmp	r0, r4
 8007188:	d001      	beq.n	800718e <strncmp+0x1c>
 800718a:	2a00      	cmp	r2, #0
 800718c:	d1f5      	bne.n	800717a <strncmp+0x8>
 800718e:	1ad0      	subs	r0, r2, r3
 8007190:	bd10      	pop	{r4, pc}
 8007192:	4610      	mov	r0, r2
 8007194:	e7fc      	b.n	8007190 <strncmp+0x1e>

08007196 <strncpy>:
 8007196:	4603      	mov	r3, r0
 8007198:	b510      	push	{r4, lr}
 800719a:	3901      	subs	r1, #1
 800719c:	b132      	cbz	r2, 80071ac <strncpy+0x16>
 800719e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071a2:	3a01      	subs	r2, #1
 80071a4:	f803 4b01 	strb.w	r4, [r3], #1
 80071a8:	2c00      	cmp	r4, #0
 80071aa:	d1f7      	bne.n	800719c <strncpy+0x6>
 80071ac:	2100      	movs	r1, #0
 80071ae:	441a      	add	r2, r3
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d100      	bne.n	80071b6 <strncpy+0x20>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ba:	e7f9      	b.n	80071b0 <strncpy+0x1a>

080071bc <_close_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	2300      	movs	r3, #0
 80071c0:	4d05      	ldr	r5, [pc, #20]	@ (80071d8 <_close_r+0x1c>)
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fc f81a 	bl	8003200 <_close>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_close_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_close_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	200046b8 	.word	0x200046b8

080071dc <_lseek_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	2200      	movs	r2, #0
 80071e6:	4d05      	ldr	r5, [pc, #20]	@ (80071fc <_lseek_r+0x20>)
 80071e8:	602a      	str	r2, [r5, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f7fc f812 	bl	8003214 <_lseek>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d102      	bne.n	80071fa <_lseek_r+0x1e>
 80071f4:	682b      	ldr	r3, [r5, #0]
 80071f6:	b103      	cbz	r3, 80071fa <_lseek_r+0x1e>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	200046b8 	.word	0x200046b8

08007200 <_read_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	2200      	movs	r2, #0
 800720a:	4d05      	ldr	r5, [pc, #20]	@ (8007220 <_read_r+0x20>)
 800720c:	602a      	str	r2, [r5, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	f7fb ffda 	bl	80031c8 <_read>
 8007214:	1c43      	adds	r3, r0, #1
 8007216:	d102      	bne.n	800721e <_read_r+0x1e>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	b103      	cbz	r3, 800721e <_read_r+0x1e>
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	200046b8 	.word	0x200046b8

08007224 <_write_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	4611      	mov	r1, r2
 800722c:	2200      	movs	r2, #0
 800722e:	4d05      	ldr	r5, [pc, #20]	@ (8007244 <_write_r+0x20>)
 8007230:	602a      	str	r2, [r5, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f7fb ffd6 	bl	80031e4 <_write>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_write_r+0x1e>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_write_r+0x1e>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	200046b8 	.word	0x200046b8

08007248 <__errno>:
 8007248:	4b01      	ldr	r3, [pc, #4]	@ (8007250 <__errno+0x8>)
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000300 	.word	0x20000300

08007254 <__libc_init_array>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	2600      	movs	r6, #0
 8007258:	4d0c      	ldr	r5, [pc, #48]	@ (800728c <__libc_init_array+0x38>)
 800725a:	4c0d      	ldr	r4, [pc, #52]	@ (8007290 <__libc_init_array+0x3c>)
 800725c:	1b64      	subs	r4, r4, r5
 800725e:	10a4      	asrs	r4, r4, #2
 8007260:	42a6      	cmp	r6, r4
 8007262:	d109      	bne.n	8007278 <__libc_init_array+0x24>
 8007264:	f003 fba0 	bl	800a9a8 <_init>
 8007268:	2600      	movs	r6, #0
 800726a:	4d0a      	ldr	r5, [pc, #40]	@ (8007294 <__libc_init_array+0x40>)
 800726c:	4c0a      	ldr	r4, [pc, #40]	@ (8007298 <__libc_init_array+0x44>)
 800726e:	1b64      	subs	r4, r4, r5
 8007270:	10a4      	asrs	r4, r4, #2
 8007272:	42a6      	cmp	r6, r4
 8007274:	d105      	bne.n	8007282 <__libc_init_array+0x2e>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	f855 3b04 	ldr.w	r3, [r5], #4
 800727c:	4798      	blx	r3
 800727e:	3601      	adds	r6, #1
 8007280:	e7ee      	b.n	8007260 <__libc_init_array+0xc>
 8007282:	f855 3b04 	ldr.w	r3, [r5], #4
 8007286:	4798      	blx	r3
 8007288:	3601      	adds	r6, #1
 800728a:	e7f2      	b.n	8007272 <__libc_init_array+0x1e>
 800728c:	0800bd98 	.word	0x0800bd98
 8007290:	0800bd98 	.word	0x0800bd98
 8007294:	0800bd98 	.word	0x0800bd98
 8007298:	0800bd9c 	.word	0x0800bd9c

0800729c <__retarget_lock_init_recursive>:
 800729c:	4770      	bx	lr

0800729e <__retarget_lock_acquire_recursive>:
 800729e:	4770      	bx	lr

080072a0 <__retarget_lock_release_recursive>:
 80072a0:	4770      	bx	lr

080072a2 <strcpy>:
 80072a2:	4603      	mov	r3, r0
 80072a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a8:	f803 2b01 	strb.w	r2, [r3], #1
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d1f9      	bne.n	80072a4 <strcpy+0x2>
 80072b0:	4770      	bx	lr

080072b2 <memcpy>:
 80072b2:	440a      	add	r2, r1
 80072b4:	4291      	cmp	r1, r2
 80072b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80072ba:	d100      	bne.n	80072be <memcpy+0xc>
 80072bc:	4770      	bx	lr
 80072be:	b510      	push	{r4, lr}
 80072c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c4:	4291      	cmp	r1, r2
 80072c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ca:	d1f9      	bne.n	80072c0 <memcpy+0xe>
 80072cc:	bd10      	pop	{r4, pc}
	...

080072d0 <nan>:
 80072d0:	2000      	movs	r0, #0
 80072d2:	4901      	ldr	r1, [pc, #4]	@ (80072d8 <nan+0x8>)
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	7ff80000 	.word	0x7ff80000

080072dc <_free_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4605      	mov	r5, r0
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d040      	beq.n	8007366 <_free_r+0x8a>
 80072e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e8:	1f0c      	subs	r4, r1, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	bfb8      	it	lt
 80072ee:	18e4      	addlt	r4, r4, r3
 80072f0:	f000 fc2a 	bl	8007b48 <__malloc_lock>
 80072f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007368 <_free_r+0x8c>)
 80072f6:	6813      	ldr	r3, [r2, #0]
 80072f8:	b933      	cbnz	r3, 8007308 <_free_r+0x2c>
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6014      	str	r4, [r2, #0]
 80072fe:	4628      	mov	r0, r5
 8007300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007304:	f000 bc26 	b.w	8007b54 <__malloc_unlock>
 8007308:	42a3      	cmp	r3, r4
 800730a:	d908      	bls.n	800731e <_free_r+0x42>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf01      	itttt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	1809      	addeq	r1, r1, r0
 800731a:	6021      	streq	r1, [r4, #0]
 800731c:	e7ed      	b.n	80072fa <_free_r+0x1e>
 800731e:	461a      	mov	r2, r3
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	b10b      	cbz	r3, 8007328 <_free_r+0x4c>
 8007324:	42a3      	cmp	r3, r4
 8007326:	d9fa      	bls.n	800731e <_free_r+0x42>
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	1850      	adds	r0, r2, r1
 800732c:	42a0      	cmp	r0, r4
 800732e:	d10b      	bne.n	8007348 <_free_r+0x6c>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	4401      	add	r1, r0
 8007334:	1850      	adds	r0, r2, r1
 8007336:	4283      	cmp	r3, r0
 8007338:	6011      	str	r1, [r2, #0]
 800733a:	d1e0      	bne.n	80072fe <_free_r+0x22>
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4408      	add	r0, r1
 8007342:	6010      	str	r0, [r2, #0]
 8007344:	6053      	str	r3, [r2, #4]
 8007346:	e7da      	b.n	80072fe <_free_r+0x22>
 8007348:	d902      	bls.n	8007350 <_free_r+0x74>
 800734a:	230c      	movs	r3, #12
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7d6      	b.n	80072fe <_free_r+0x22>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428b      	cmp	r3, r1
 8007356:	bf01      	itttt	eq
 8007358:	6819      	ldreq	r1, [r3, #0]
 800735a:	685b      	ldreq	r3, [r3, #4]
 800735c:	1809      	addeq	r1, r1, r0
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	6054      	str	r4, [r2, #4]
 8007364:	e7cb      	b.n	80072fe <_free_r+0x22>
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	200046c4 	.word	0x200046c4

0800736c <rshift>:
 800736c:	6903      	ldr	r3, [r0, #16]
 800736e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007372:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007376:	f100 0414 	add.w	r4, r0, #20
 800737a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800737e:	dd46      	ble.n	800740e <rshift+0xa2>
 8007380:	f011 011f 	ands.w	r1, r1, #31
 8007384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800738c:	d10c      	bne.n	80073a8 <rshift+0x3c>
 800738e:	4629      	mov	r1, r5
 8007390:	f100 0710 	add.w	r7, r0, #16
 8007394:	42b1      	cmp	r1, r6
 8007396:	d335      	bcc.n	8007404 <rshift+0x98>
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	1eea      	subs	r2, r5, #3
 800739e:	4296      	cmp	r6, r2
 80073a0:	bf38      	it	cc
 80073a2:	2300      	movcc	r3, #0
 80073a4:	4423      	add	r3, r4
 80073a6:	e015      	b.n	80073d4 <rshift+0x68>
 80073a8:	46a1      	mov	r9, r4
 80073aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073ae:	f1c1 0820 	rsb	r8, r1, #32
 80073b2:	40cf      	lsrs	r7, r1
 80073b4:	f105 0e04 	add.w	lr, r5, #4
 80073b8:	4576      	cmp	r6, lr
 80073ba:	46f4      	mov	ip, lr
 80073bc:	d816      	bhi.n	80073ec <rshift+0x80>
 80073be:	1a9a      	subs	r2, r3, r2
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	3a04      	subs	r2, #4
 80073c4:	3501      	adds	r5, #1
 80073c6:	42ae      	cmp	r6, r5
 80073c8:	bf38      	it	cc
 80073ca:	2200      	movcc	r2, #0
 80073cc:	18a3      	adds	r3, r4, r2
 80073ce:	50a7      	str	r7, [r4, r2]
 80073d0:	b107      	cbz	r7, 80073d4 <rshift+0x68>
 80073d2:	3304      	adds	r3, #4
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	eba3 0204 	sub.w	r2, r3, r4
 80073da:	bf08      	it	eq
 80073dc:	2300      	moveq	r3, #0
 80073de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80073e2:	6102      	str	r2, [r0, #16]
 80073e4:	bf08      	it	eq
 80073e6:	6143      	streq	r3, [r0, #20]
 80073e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ec:	f8dc c000 	ldr.w	ip, [ip]
 80073f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80073f4:	ea4c 0707 	orr.w	r7, ip, r7
 80073f8:	f849 7b04 	str.w	r7, [r9], #4
 80073fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007400:	40cf      	lsrs	r7, r1
 8007402:	e7d9      	b.n	80073b8 <rshift+0x4c>
 8007404:	f851 cb04 	ldr.w	ip, [r1], #4
 8007408:	f847 cf04 	str.w	ip, [r7, #4]!
 800740c:	e7c2      	b.n	8007394 <rshift+0x28>
 800740e:	4623      	mov	r3, r4
 8007410:	e7e0      	b.n	80073d4 <rshift+0x68>

08007412 <__hexdig_fun>:
 8007412:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007416:	2b09      	cmp	r3, #9
 8007418:	d802      	bhi.n	8007420 <__hexdig_fun+0xe>
 800741a:	3820      	subs	r0, #32
 800741c:	b2c0      	uxtb	r0, r0
 800741e:	4770      	bx	lr
 8007420:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007424:	2b05      	cmp	r3, #5
 8007426:	d801      	bhi.n	800742c <__hexdig_fun+0x1a>
 8007428:	3847      	subs	r0, #71	@ 0x47
 800742a:	e7f7      	b.n	800741c <__hexdig_fun+0xa>
 800742c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007430:	2b05      	cmp	r3, #5
 8007432:	d801      	bhi.n	8007438 <__hexdig_fun+0x26>
 8007434:	3827      	subs	r0, #39	@ 0x27
 8007436:	e7f1      	b.n	800741c <__hexdig_fun+0xa>
 8007438:	2000      	movs	r0, #0
 800743a:	4770      	bx	lr

0800743c <__gethex>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	468a      	mov	sl, r1
 8007442:	4690      	mov	r8, r2
 8007444:	b085      	sub	sp, #20
 8007446:	9302      	str	r3, [sp, #8]
 8007448:	680b      	ldr	r3, [r1, #0]
 800744a:	9001      	str	r0, [sp, #4]
 800744c:	1c9c      	adds	r4, r3, #2
 800744e:	46a1      	mov	r9, r4
 8007450:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007454:	2830      	cmp	r0, #48	@ 0x30
 8007456:	d0fa      	beq.n	800744e <__gethex+0x12>
 8007458:	eba9 0303 	sub.w	r3, r9, r3
 800745c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007460:	f7ff ffd7 	bl	8007412 <__hexdig_fun>
 8007464:	4605      	mov	r5, r0
 8007466:	2800      	cmp	r0, #0
 8007468:	d168      	bne.n	800753c <__gethex+0x100>
 800746a:	2201      	movs	r2, #1
 800746c:	4648      	mov	r0, r9
 800746e:	499f      	ldr	r1, [pc, #636]	@ (80076ec <__gethex+0x2b0>)
 8007470:	f7ff fe7f 	bl	8007172 <strncmp>
 8007474:	4607      	mov	r7, r0
 8007476:	2800      	cmp	r0, #0
 8007478:	d167      	bne.n	800754a <__gethex+0x10e>
 800747a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800747e:	4626      	mov	r6, r4
 8007480:	f7ff ffc7 	bl	8007412 <__hexdig_fun>
 8007484:	2800      	cmp	r0, #0
 8007486:	d062      	beq.n	800754e <__gethex+0x112>
 8007488:	4623      	mov	r3, r4
 800748a:	7818      	ldrb	r0, [r3, #0]
 800748c:	4699      	mov	r9, r3
 800748e:	2830      	cmp	r0, #48	@ 0x30
 8007490:	f103 0301 	add.w	r3, r3, #1
 8007494:	d0f9      	beq.n	800748a <__gethex+0x4e>
 8007496:	f7ff ffbc 	bl	8007412 <__hexdig_fun>
 800749a:	fab0 f580 	clz	r5, r0
 800749e:	f04f 0b01 	mov.w	fp, #1
 80074a2:	096d      	lsrs	r5, r5, #5
 80074a4:	464a      	mov	r2, r9
 80074a6:	4616      	mov	r6, r2
 80074a8:	7830      	ldrb	r0, [r6, #0]
 80074aa:	3201      	adds	r2, #1
 80074ac:	f7ff ffb1 	bl	8007412 <__hexdig_fun>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d1f8      	bne.n	80074a6 <__gethex+0x6a>
 80074b4:	2201      	movs	r2, #1
 80074b6:	4630      	mov	r0, r6
 80074b8:	498c      	ldr	r1, [pc, #560]	@ (80076ec <__gethex+0x2b0>)
 80074ba:	f7ff fe5a 	bl	8007172 <strncmp>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d13f      	bne.n	8007542 <__gethex+0x106>
 80074c2:	b944      	cbnz	r4, 80074d6 <__gethex+0x9a>
 80074c4:	1c74      	adds	r4, r6, #1
 80074c6:	4622      	mov	r2, r4
 80074c8:	4616      	mov	r6, r2
 80074ca:	7830      	ldrb	r0, [r6, #0]
 80074cc:	3201      	adds	r2, #1
 80074ce:	f7ff ffa0 	bl	8007412 <__hexdig_fun>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d1f8      	bne.n	80074c8 <__gethex+0x8c>
 80074d6:	1ba4      	subs	r4, r4, r6
 80074d8:	00a7      	lsls	r7, r4, #2
 80074da:	7833      	ldrb	r3, [r6, #0]
 80074dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80074e0:	2b50      	cmp	r3, #80	@ 0x50
 80074e2:	d13e      	bne.n	8007562 <__gethex+0x126>
 80074e4:	7873      	ldrb	r3, [r6, #1]
 80074e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80074e8:	d033      	beq.n	8007552 <__gethex+0x116>
 80074ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80074ec:	d034      	beq.n	8007558 <__gethex+0x11c>
 80074ee:	2400      	movs	r4, #0
 80074f0:	1c71      	adds	r1, r6, #1
 80074f2:	7808      	ldrb	r0, [r1, #0]
 80074f4:	f7ff ff8d 	bl	8007412 <__hexdig_fun>
 80074f8:	1e43      	subs	r3, r0, #1
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b18      	cmp	r3, #24
 80074fe:	d830      	bhi.n	8007562 <__gethex+0x126>
 8007500:	f1a0 0210 	sub.w	r2, r0, #16
 8007504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007508:	f7ff ff83 	bl	8007412 <__hexdig_fun>
 800750c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007510:	fa5f fc8c 	uxtb.w	ip, ip
 8007514:	f1bc 0f18 	cmp.w	ip, #24
 8007518:	f04f 030a 	mov.w	r3, #10
 800751c:	d91e      	bls.n	800755c <__gethex+0x120>
 800751e:	b104      	cbz	r4, 8007522 <__gethex+0xe6>
 8007520:	4252      	negs	r2, r2
 8007522:	4417      	add	r7, r2
 8007524:	f8ca 1000 	str.w	r1, [sl]
 8007528:	b1ed      	cbz	r5, 8007566 <__gethex+0x12a>
 800752a:	f1bb 0f00 	cmp.w	fp, #0
 800752e:	bf0c      	ite	eq
 8007530:	2506      	moveq	r5, #6
 8007532:	2500      	movne	r5, #0
 8007534:	4628      	mov	r0, r5
 8007536:	b005      	add	sp, #20
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	2500      	movs	r5, #0
 800753e:	462c      	mov	r4, r5
 8007540:	e7b0      	b.n	80074a4 <__gethex+0x68>
 8007542:	2c00      	cmp	r4, #0
 8007544:	d1c7      	bne.n	80074d6 <__gethex+0x9a>
 8007546:	4627      	mov	r7, r4
 8007548:	e7c7      	b.n	80074da <__gethex+0x9e>
 800754a:	464e      	mov	r6, r9
 800754c:	462f      	mov	r7, r5
 800754e:	2501      	movs	r5, #1
 8007550:	e7c3      	b.n	80074da <__gethex+0x9e>
 8007552:	2400      	movs	r4, #0
 8007554:	1cb1      	adds	r1, r6, #2
 8007556:	e7cc      	b.n	80074f2 <__gethex+0xb6>
 8007558:	2401      	movs	r4, #1
 800755a:	e7fb      	b.n	8007554 <__gethex+0x118>
 800755c:	fb03 0002 	mla	r0, r3, r2, r0
 8007560:	e7ce      	b.n	8007500 <__gethex+0xc4>
 8007562:	4631      	mov	r1, r6
 8007564:	e7de      	b.n	8007524 <__gethex+0xe8>
 8007566:	4629      	mov	r1, r5
 8007568:	eba6 0309 	sub.w	r3, r6, r9
 800756c:	3b01      	subs	r3, #1
 800756e:	2b07      	cmp	r3, #7
 8007570:	dc0a      	bgt.n	8007588 <__gethex+0x14c>
 8007572:	9801      	ldr	r0, [sp, #4]
 8007574:	f000 faf4 	bl	8007b60 <_Balloc>
 8007578:	4604      	mov	r4, r0
 800757a:	b940      	cbnz	r0, 800758e <__gethex+0x152>
 800757c:	4602      	mov	r2, r0
 800757e:	21e4      	movs	r1, #228	@ 0xe4
 8007580:	4b5b      	ldr	r3, [pc, #364]	@ (80076f0 <__gethex+0x2b4>)
 8007582:	485c      	ldr	r0, [pc, #368]	@ (80076f4 <__gethex+0x2b8>)
 8007584:	f001 fb60 	bl	8008c48 <__assert_func>
 8007588:	3101      	adds	r1, #1
 800758a:	105b      	asrs	r3, r3, #1
 800758c:	e7ef      	b.n	800756e <__gethex+0x132>
 800758e:	2300      	movs	r3, #0
 8007590:	f100 0a14 	add.w	sl, r0, #20
 8007594:	4655      	mov	r5, sl
 8007596:	469b      	mov	fp, r3
 8007598:	45b1      	cmp	r9, r6
 800759a:	d337      	bcc.n	800760c <__gethex+0x1d0>
 800759c:	f845 bb04 	str.w	fp, [r5], #4
 80075a0:	eba5 050a 	sub.w	r5, r5, sl
 80075a4:	10ad      	asrs	r5, r5, #2
 80075a6:	6125      	str	r5, [r4, #16]
 80075a8:	4658      	mov	r0, fp
 80075aa:	f000 fbcb 	bl	8007d44 <__hi0bits>
 80075ae:	016d      	lsls	r5, r5, #5
 80075b0:	f8d8 6000 	ldr.w	r6, [r8]
 80075b4:	1a2d      	subs	r5, r5, r0
 80075b6:	42b5      	cmp	r5, r6
 80075b8:	dd54      	ble.n	8007664 <__gethex+0x228>
 80075ba:	1bad      	subs	r5, r5, r6
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f000 ff4d 	bl	800845e <__any_on>
 80075c4:	4681      	mov	r9, r0
 80075c6:	b178      	cbz	r0, 80075e8 <__gethex+0x1ac>
 80075c8:	f04f 0901 	mov.w	r9, #1
 80075cc:	1e6b      	subs	r3, r5, #1
 80075ce:	1159      	asrs	r1, r3, #5
 80075d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80075d4:	f003 021f 	and.w	r2, r3, #31
 80075d8:	fa09 f202 	lsl.w	r2, r9, r2
 80075dc:	420a      	tst	r2, r1
 80075de:	d003      	beq.n	80075e8 <__gethex+0x1ac>
 80075e0:	454b      	cmp	r3, r9
 80075e2:	dc36      	bgt.n	8007652 <__gethex+0x216>
 80075e4:	f04f 0902 	mov.w	r9, #2
 80075e8:	4629      	mov	r1, r5
 80075ea:	4620      	mov	r0, r4
 80075ec:	f7ff febe 	bl	800736c <rshift>
 80075f0:	442f      	add	r7, r5
 80075f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075f6:	42bb      	cmp	r3, r7
 80075f8:	da42      	bge.n	8007680 <__gethex+0x244>
 80075fa:	4621      	mov	r1, r4
 80075fc:	9801      	ldr	r0, [sp, #4]
 80075fe:	f000 faef 	bl	8007be0 <_Bfree>
 8007602:	2300      	movs	r3, #0
 8007604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007606:	25a3      	movs	r5, #163	@ 0xa3
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	e793      	b.n	8007534 <__gethex+0xf8>
 800760c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007610:	2a2e      	cmp	r2, #46	@ 0x2e
 8007612:	d012      	beq.n	800763a <__gethex+0x1fe>
 8007614:	2b20      	cmp	r3, #32
 8007616:	d104      	bne.n	8007622 <__gethex+0x1e6>
 8007618:	f845 bb04 	str.w	fp, [r5], #4
 800761c:	f04f 0b00 	mov.w	fp, #0
 8007620:	465b      	mov	r3, fp
 8007622:	7830      	ldrb	r0, [r6, #0]
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	f7ff fef4 	bl	8007412 <__hexdig_fun>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	f000 000f 	and.w	r0, r0, #15
 8007630:	4098      	lsls	r0, r3
 8007632:	ea4b 0b00 	orr.w	fp, fp, r0
 8007636:	3304      	adds	r3, #4
 8007638:	e7ae      	b.n	8007598 <__gethex+0x15c>
 800763a:	45b1      	cmp	r9, r6
 800763c:	d8ea      	bhi.n	8007614 <__gethex+0x1d8>
 800763e:	2201      	movs	r2, #1
 8007640:	4630      	mov	r0, r6
 8007642:	492a      	ldr	r1, [pc, #168]	@ (80076ec <__gethex+0x2b0>)
 8007644:	9303      	str	r3, [sp, #12]
 8007646:	f7ff fd94 	bl	8007172 <strncmp>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	2800      	cmp	r0, #0
 800764e:	d1e1      	bne.n	8007614 <__gethex+0x1d8>
 8007650:	e7a2      	b.n	8007598 <__gethex+0x15c>
 8007652:	4620      	mov	r0, r4
 8007654:	1ea9      	subs	r1, r5, #2
 8007656:	f000 ff02 	bl	800845e <__any_on>
 800765a:	2800      	cmp	r0, #0
 800765c:	d0c2      	beq.n	80075e4 <__gethex+0x1a8>
 800765e:	f04f 0903 	mov.w	r9, #3
 8007662:	e7c1      	b.n	80075e8 <__gethex+0x1ac>
 8007664:	da09      	bge.n	800767a <__gethex+0x23e>
 8007666:	1b75      	subs	r5, r6, r5
 8007668:	4621      	mov	r1, r4
 800766a:	462a      	mov	r2, r5
 800766c:	9801      	ldr	r0, [sp, #4]
 800766e:	f000 fcc7 	bl	8008000 <__lshift>
 8007672:	4604      	mov	r4, r0
 8007674:	1b7f      	subs	r7, r7, r5
 8007676:	f100 0a14 	add.w	sl, r0, #20
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	e7b8      	b.n	80075f2 <__gethex+0x1b6>
 8007680:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007684:	42bd      	cmp	r5, r7
 8007686:	dd6f      	ble.n	8007768 <__gethex+0x32c>
 8007688:	1bed      	subs	r5, r5, r7
 800768a:	42ae      	cmp	r6, r5
 800768c:	dc34      	bgt.n	80076f8 <__gethex+0x2bc>
 800768e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d022      	beq.n	80076dc <__gethex+0x2a0>
 8007696:	2b03      	cmp	r3, #3
 8007698:	d024      	beq.n	80076e4 <__gethex+0x2a8>
 800769a:	2b01      	cmp	r3, #1
 800769c:	d115      	bne.n	80076ca <__gethex+0x28e>
 800769e:	42ae      	cmp	r6, r5
 80076a0:	d113      	bne.n	80076ca <__gethex+0x28e>
 80076a2:	2e01      	cmp	r6, #1
 80076a4:	d10b      	bne.n	80076be <__gethex+0x282>
 80076a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076aa:	9a02      	ldr	r2, [sp, #8]
 80076ac:	2562      	movs	r5, #98	@ 0x62
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	2301      	movs	r3, #1
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	f8ca 3000 	str.w	r3, [sl]
 80076b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ba:	601c      	str	r4, [r3, #0]
 80076bc:	e73a      	b.n	8007534 <__gethex+0xf8>
 80076be:	4620      	mov	r0, r4
 80076c0:	1e71      	subs	r1, r6, #1
 80076c2:	f000 fecc 	bl	800845e <__any_on>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d1ed      	bne.n	80076a6 <__gethex+0x26a>
 80076ca:	4621      	mov	r1, r4
 80076cc:	9801      	ldr	r0, [sp, #4]
 80076ce:	f000 fa87 	bl	8007be0 <_Bfree>
 80076d2:	2300      	movs	r3, #0
 80076d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076d6:	2550      	movs	r5, #80	@ 0x50
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e72b      	b.n	8007534 <__gethex+0xf8>
 80076dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f3      	bne.n	80076ca <__gethex+0x28e>
 80076e2:	e7e0      	b.n	80076a6 <__gethex+0x26a>
 80076e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1dd      	bne.n	80076a6 <__gethex+0x26a>
 80076ea:	e7ee      	b.n	80076ca <__gethex+0x28e>
 80076ec:	0800b757 	.word	0x0800b757
 80076f0:	0800b76d 	.word	0x0800b76d
 80076f4:	0800b77e 	.word	0x0800b77e
 80076f8:	1e6f      	subs	r7, r5, #1
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	d130      	bne.n	8007762 <__gethex+0x326>
 8007700:	b127      	cbz	r7, 800770c <__gethex+0x2d0>
 8007702:	4639      	mov	r1, r7
 8007704:	4620      	mov	r0, r4
 8007706:	f000 feaa 	bl	800845e <__any_on>
 800770a:	4681      	mov	r9, r0
 800770c:	2301      	movs	r3, #1
 800770e:	4629      	mov	r1, r5
 8007710:	1b76      	subs	r6, r6, r5
 8007712:	2502      	movs	r5, #2
 8007714:	117a      	asrs	r2, r7, #5
 8007716:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800771a:	f007 071f 	and.w	r7, r7, #31
 800771e:	40bb      	lsls	r3, r7
 8007720:	4213      	tst	r3, r2
 8007722:	4620      	mov	r0, r4
 8007724:	bf18      	it	ne
 8007726:	f049 0902 	orrne.w	r9, r9, #2
 800772a:	f7ff fe1f 	bl	800736c <rshift>
 800772e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	d047      	beq.n	80077c8 <__gethex+0x38c>
 8007738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d015      	beq.n	800776c <__gethex+0x330>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d017      	beq.n	8007774 <__gethex+0x338>
 8007744:	2b01      	cmp	r3, #1
 8007746:	d109      	bne.n	800775c <__gethex+0x320>
 8007748:	f019 0f02 	tst.w	r9, #2
 800774c:	d006      	beq.n	800775c <__gethex+0x320>
 800774e:	f8da 3000 	ldr.w	r3, [sl]
 8007752:	ea49 0903 	orr.w	r9, r9, r3
 8007756:	f019 0f01 	tst.w	r9, #1
 800775a:	d10e      	bne.n	800777a <__gethex+0x33e>
 800775c:	f045 0510 	orr.w	r5, r5, #16
 8007760:	e032      	b.n	80077c8 <__gethex+0x38c>
 8007762:	f04f 0901 	mov.w	r9, #1
 8007766:	e7d1      	b.n	800770c <__gethex+0x2d0>
 8007768:	2501      	movs	r5, #1
 800776a:	e7e2      	b.n	8007732 <__gethex+0x2f6>
 800776c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776e:	f1c3 0301 	rsb	r3, r3, #1
 8007772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d0f0      	beq.n	800775c <__gethex+0x320>
 800777a:	f04f 0c00 	mov.w	ip, #0
 800777e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007782:	f104 0314 	add.w	r3, r4, #20
 8007786:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800778a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800778e:	4618      	mov	r0, r3
 8007790:	f853 2b04 	ldr.w	r2, [r3], #4
 8007794:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007798:	d01b      	beq.n	80077d2 <__gethex+0x396>
 800779a:	3201      	adds	r2, #1
 800779c:	6002      	str	r2, [r0, #0]
 800779e:	2d02      	cmp	r5, #2
 80077a0:	f104 0314 	add.w	r3, r4, #20
 80077a4:	d13c      	bne.n	8007820 <__gethex+0x3e4>
 80077a6:	f8d8 2000 	ldr.w	r2, [r8]
 80077aa:	3a01      	subs	r2, #1
 80077ac:	42b2      	cmp	r2, r6
 80077ae:	d109      	bne.n	80077c4 <__gethex+0x388>
 80077b0:	2201      	movs	r2, #1
 80077b2:	1171      	asrs	r1, r6, #5
 80077b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077b8:	f006 061f 	and.w	r6, r6, #31
 80077bc:	fa02 f606 	lsl.w	r6, r2, r6
 80077c0:	421e      	tst	r6, r3
 80077c2:	d13a      	bne.n	800783a <__gethex+0x3fe>
 80077c4:	f045 0520 	orr.w	r5, r5, #32
 80077c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ca:	601c      	str	r4, [r3, #0]
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	601f      	str	r7, [r3, #0]
 80077d0:	e6b0      	b.n	8007534 <__gethex+0xf8>
 80077d2:	4299      	cmp	r1, r3
 80077d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80077d8:	d8d9      	bhi.n	800778e <__gethex+0x352>
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	459b      	cmp	fp, r3
 80077de:	db17      	blt.n	8007810 <__gethex+0x3d4>
 80077e0:	6861      	ldr	r1, [r4, #4]
 80077e2:	9801      	ldr	r0, [sp, #4]
 80077e4:	3101      	adds	r1, #1
 80077e6:	f000 f9bb 	bl	8007b60 <_Balloc>
 80077ea:	4681      	mov	r9, r0
 80077ec:	b918      	cbnz	r0, 80077f6 <__gethex+0x3ba>
 80077ee:	4602      	mov	r2, r0
 80077f0:	2184      	movs	r1, #132	@ 0x84
 80077f2:	4b19      	ldr	r3, [pc, #100]	@ (8007858 <__gethex+0x41c>)
 80077f4:	e6c5      	b.n	8007582 <__gethex+0x146>
 80077f6:	6922      	ldr	r2, [r4, #16]
 80077f8:	f104 010c 	add.w	r1, r4, #12
 80077fc:	3202      	adds	r2, #2
 80077fe:	0092      	lsls	r2, r2, #2
 8007800:	300c      	adds	r0, #12
 8007802:	f7ff fd56 	bl	80072b2 <memcpy>
 8007806:	4621      	mov	r1, r4
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	f000 f9e9 	bl	8007be0 <_Bfree>
 800780e:	464c      	mov	r4, r9
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	6122      	str	r2, [r4, #16]
 8007816:	2201      	movs	r2, #1
 8007818:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800781c:	615a      	str	r2, [r3, #20]
 800781e:	e7be      	b.n	800779e <__gethex+0x362>
 8007820:	6922      	ldr	r2, [r4, #16]
 8007822:	455a      	cmp	r2, fp
 8007824:	dd0b      	ble.n	800783e <__gethex+0x402>
 8007826:	2101      	movs	r1, #1
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff fd9f 	bl	800736c <rshift>
 800782e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007832:	3701      	adds	r7, #1
 8007834:	42bb      	cmp	r3, r7
 8007836:	f6ff aee0 	blt.w	80075fa <__gethex+0x1be>
 800783a:	2501      	movs	r5, #1
 800783c:	e7c2      	b.n	80077c4 <__gethex+0x388>
 800783e:	f016 061f 	ands.w	r6, r6, #31
 8007842:	d0fa      	beq.n	800783a <__gethex+0x3fe>
 8007844:	4453      	add	r3, sl
 8007846:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800784a:	f000 fa7b 	bl	8007d44 <__hi0bits>
 800784e:	f1c6 0620 	rsb	r6, r6, #32
 8007852:	42b0      	cmp	r0, r6
 8007854:	dbe7      	blt.n	8007826 <__gethex+0x3ea>
 8007856:	e7f0      	b.n	800783a <__gethex+0x3fe>
 8007858:	0800b76d 	.word	0x0800b76d

0800785c <L_shift>:
 800785c:	f1c2 0208 	rsb	r2, r2, #8
 8007860:	0092      	lsls	r2, r2, #2
 8007862:	b570      	push	{r4, r5, r6, lr}
 8007864:	f1c2 0620 	rsb	r6, r2, #32
 8007868:	6843      	ldr	r3, [r0, #4]
 800786a:	6804      	ldr	r4, [r0, #0]
 800786c:	fa03 f506 	lsl.w	r5, r3, r6
 8007870:	432c      	orrs	r4, r5
 8007872:	40d3      	lsrs	r3, r2
 8007874:	6004      	str	r4, [r0, #0]
 8007876:	f840 3f04 	str.w	r3, [r0, #4]!
 800787a:	4288      	cmp	r0, r1
 800787c:	d3f4      	bcc.n	8007868 <L_shift+0xc>
 800787e:	bd70      	pop	{r4, r5, r6, pc}

08007880 <__match>:
 8007880:	b530      	push	{r4, r5, lr}
 8007882:	6803      	ldr	r3, [r0, #0]
 8007884:	3301      	adds	r3, #1
 8007886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800788a:	b914      	cbnz	r4, 8007892 <__match+0x12>
 800788c:	6003      	str	r3, [r0, #0]
 800788e:	2001      	movs	r0, #1
 8007890:	bd30      	pop	{r4, r5, pc}
 8007892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007896:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800789a:	2d19      	cmp	r5, #25
 800789c:	bf98      	it	ls
 800789e:	3220      	addls	r2, #32
 80078a0:	42a2      	cmp	r2, r4
 80078a2:	d0f0      	beq.n	8007886 <__match+0x6>
 80078a4:	2000      	movs	r0, #0
 80078a6:	e7f3      	b.n	8007890 <__match+0x10>

080078a8 <__hexnan>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	2500      	movs	r5, #0
 80078ae:	680b      	ldr	r3, [r1, #0]
 80078b0:	4682      	mov	sl, r0
 80078b2:	115e      	asrs	r6, r3, #5
 80078b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078b8:	f013 031f 	ands.w	r3, r3, #31
 80078bc:	bf18      	it	ne
 80078be:	3604      	addne	r6, #4
 80078c0:	1f37      	subs	r7, r6, #4
 80078c2:	4690      	mov	r8, r2
 80078c4:	46b9      	mov	r9, r7
 80078c6:	463c      	mov	r4, r7
 80078c8:	46ab      	mov	fp, r5
 80078ca:	b087      	sub	sp, #28
 80078cc:	6801      	ldr	r1, [r0, #0]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80078d4:	9502      	str	r5, [sp, #8]
 80078d6:	784a      	ldrb	r2, [r1, #1]
 80078d8:	1c4b      	adds	r3, r1, #1
 80078da:	9303      	str	r3, [sp, #12]
 80078dc:	b342      	cbz	r2, 8007930 <__hexnan+0x88>
 80078de:	4610      	mov	r0, r2
 80078e0:	9105      	str	r1, [sp, #20]
 80078e2:	9204      	str	r2, [sp, #16]
 80078e4:	f7ff fd95 	bl	8007412 <__hexdig_fun>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d151      	bne.n	8007990 <__hexnan+0xe8>
 80078ec:	9a04      	ldr	r2, [sp, #16]
 80078ee:	9905      	ldr	r1, [sp, #20]
 80078f0:	2a20      	cmp	r2, #32
 80078f2:	d818      	bhi.n	8007926 <__hexnan+0x7e>
 80078f4:	9b02      	ldr	r3, [sp, #8]
 80078f6:	459b      	cmp	fp, r3
 80078f8:	dd13      	ble.n	8007922 <__hexnan+0x7a>
 80078fa:	454c      	cmp	r4, r9
 80078fc:	d206      	bcs.n	800790c <__hexnan+0x64>
 80078fe:	2d07      	cmp	r5, #7
 8007900:	dc04      	bgt.n	800790c <__hexnan+0x64>
 8007902:	462a      	mov	r2, r5
 8007904:	4649      	mov	r1, r9
 8007906:	4620      	mov	r0, r4
 8007908:	f7ff ffa8 	bl	800785c <L_shift>
 800790c:	4544      	cmp	r4, r8
 800790e:	d952      	bls.n	80079b6 <__hexnan+0x10e>
 8007910:	2300      	movs	r3, #0
 8007912:	f1a4 0904 	sub.w	r9, r4, #4
 8007916:	f844 3c04 	str.w	r3, [r4, #-4]
 800791a:	461d      	mov	r5, r3
 800791c:	464c      	mov	r4, r9
 800791e:	f8cd b008 	str.w	fp, [sp, #8]
 8007922:	9903      	ldr	r1, [sp, #12]
 8007924:	e7d7      	b.n	80078d6 <__hexnan+0x2e>
 8007926:	2a29      	cmp	r2, #41	@ 0x29
 8007928:	d157      	bne.n	80079da <__hexnan+0x132>
 800792a:	3102      	adds	r1, #2
 800792c:	f8ca 1000 	str.w	r1, [sl]
 8007930:	f1bb 0f00 	cmp.w	fp, #0
 8007934:	d051      	beq.n	80079da <__hexnan+0x132>
 8007936:	454c      	cmp	r4, r9
 8007938:	d206      	bcs.n	8007948 <__hexnan+0xa0>
 800793a:	2d07      	cmp	r5, #7
 800793c:	dc04      	bgt.n	8007948 <__hexnan+0xa0>
 800793e:	462a      	mov	r2, r5
 8007940:	4649      	mov	r1, r9
 8007942:	4620      	mov	r0, r4
 8007944:	f7ff ff8a 	bl	800785c <L_shift>
 8007948:	4544      	cmp	r4, r8
 800794a:	d936      	bls.n	80079ba <__hexnan+0x112>
 800794c:	4623      	mov	r3, r4
 800794e:	f1a8 0204 	sub.w	r2, r8, #4
 8007952:	f853 1b04 	ldr.w	r1, [r3], #4
 8007956:	429f      	cmp	r7, r3
 8007958:	f842 1f04 	str.w	r1, [r2, #4]!
 800795c:	d2f9      	bcs.n	8007952 <__hexnan+0xaa>
 800795e:	1b3b      	subs	r3, r7, r4
 8007960:	f023 0303 	bic.w	r3, r3, #3
 8007964:	3304      	adds	r3, #4
 8007966:	3401      	adds	r4, #1
 8007968:	3e03      	subs	r6, #3
 800796a:	42b4      	cmp	r4, r6
 800796c:	bf88      	it	hi
 800796e:	2304      	movhi	r3, #4
 8007970:	2200      	movs	r2, #0
 8007972:	4443      	add	r3, r8
 8007974:	f843 2b04 	str.w	r2, [r3], #4
 8007978:	429f      	cmp	r7, r3
 800797a:	d2fb      	bcs.n	8007974 <__hexnan+0xcc>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	b91b      	cbnz	r3, 8007988 <__hexnan+0xe0>
 8007980:	4547      	cmp	r7, r8
 8007982:	d128      	bne.n	80079d6 <__hexnan+0x12e>
 8007984:	2301      	movs	r3, #1
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	2005      	movs	r0, #5
 800798a:	b007      	add	sp, #28
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	3501      	adds	r5, #1
 8007992:	2d08      	cmp	r5, #8
 8007994:	f10b 0b01 	add.w	fp, fp, #1
 8007998:	dd06      	ble.n	80079a8 <__hexnan+0x100>
 800799a:	4544      	cmp	r4, r8
 800799c:	d9c1      	bls.n	8007922 <__hexnan+0x7a>
 800799e:	2300      	movs	r3, #0
 80079a0:	2501      	movs	r5, #1
 80079a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80079a6:	3c04      	subs	r4, #4
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	f000 000f 	and.w	r0, r0, #15
 80079ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	e7b5      	b.n	8007922 <__hexnan+0x7a>
 80079b6:	2508      	movs	r5, #8
 80079b8:	e7b3      	b.n	8007922 <__hexnan+0x7a>
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0dd      	beq.n	800797c <__hexnan+0xd4>
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	f1c3 0320 	rsb	r3, r3, #32
 80079c8:	40da      	lsrs	r2, r3
 80079ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80079ce:	4013      	ands	r3, r2
 80079d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80079d4:	e7d2      	b.n	800797c <__hexnan+0xd4>
 80079d6:	3f04      	subs	r7, #4
 80079d8:	e7d0      	b.n	800797c <__hexnan+0xd4>
 80079da:	2004      	movs	r0, #4
 80079dc:	e7d5      	b.n	800798a <__hexnan+0xe2>
	...

080079e0 <sbrk_aligned>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4e0f      	ldr	r6, [pc, #60]	@ (8007a20 <sbrk_aligned+0x40>)
 80079e4:	460c      	mov	r4, r1
 80079e6:	6831      	ldr	r1, [r6, #0]
 80079e8:	4605      	mov	r5, r0
 80079ea:	b911      	cbnz	r1, 80079f2 <sbrk_aligned+0x12>
 80079ec:	f001 f90e 	bl	8008c0c <_sbrk_r>
 80079f0:	6030      	str	r0, [r6, #0]
 80079f2:	4621      	mov	r1, r4
 80079f4:	4628      	mov	r0, r5
 80079f6:	f001 f909 	bl	8008c0c <_sbrk_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d103      	bne.n	8007a06 <sbrk_aligned+0x26>
 80079fe:	f04f 34ff 	mov.w	r4, #4294967295
 8007a02:	4620      	mov	r0, r4
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	1cc4      	adds	r4, r0, #3
 8007a08:	f024 0403 	bic.w	r4, r4, #3
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d0f8      	beq.n	8007a02 <sbrk_aligned+0x22>
 8007a10:	1a21      	subs	r1, r4, r0
 8007a12:	4628      	mov	r0, r5
 8007a14:	f001 f8fa 	bl	8008c0c <_sbrk_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d1f2      	bne.n	8007a02 <sbrk_aligned+0x22>
 8007a1c:	e7ef      	b.n	80079fe <sbrk_aligned+0x1e>
 8007a1e:	bf00      	nop
 8007a20:	200046c0 	.word	0x200046c0

08007a24 <_malloc_r>:
 8007a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a28:	1ccd      	adds	r5, r1, #3
 8007a2a:	f025 0503 	bic.w	r5, r5, #3
 8007a2e:	3508      	adds	r5, #8
 8007a30:	2d0c      	cmp	r5, #12
 8007a32:	bf38      	it	cc
 8007a34:	250c      	movcc	r5, #12
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	4606      	mov	r6, r0
 8007a3a:	db01      	blt.n	8007a40 <_malloc_r+0x1c>
 8007a3c:	42a9      	cmp	r1, r5
 8007a3e:	d904      	bls.n	8007a4a <_malloc_r+0x26>
 8007a40:	230c      	movs	r3, #12
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	2000      	movs	r0, #0
 8007a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b20 <_malloc_r+0xfc>
 8007a4e:	f000 f87b 	bl	8007b48 <__malloc_lock>
 8007a52:	f8d8 3000 	ldr.w	r3, [r8]
 8007a56:	461c      	mov	r4, r3
 8007a58:	bb44      	cbnz	r4, 8007aac <_malloc_r+0x88>
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff ffbf 	bl	80079e0 <sbrk_aligned>
 8007a62:	1c43      	adds	r3, r0, #1
 8007a64:	4604      	mov	r4, r0
 8007a66:	d158      	bne.n	8007b1a <_malloc_r+0xf6>
 8007a68:	f8d8 4000 	ldr.w	r4, [r8]
 8007a6c:	4627      	mov	r7, r4
 8007a6e:	2f00      	cmp	r7, #0
 8007a70:	d143      	bne.n	8007afa <_malloc_r+0xd6>
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	d04b      	beq.n	8007b0e <_malloc_r+0xea>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	4639      	mov	r1, r7
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	eb04 0903 	add.w	r9, r4, r3
 8007a80:	f001 f8c4 	bl	8008c0c <_sbrk_r>
 8007a84:	4581      	cmp	r9, r0
 8007a86:	d142      	bne.n	8007b0e <_malloc_r+0xea>
 8007a88:	6821      	ldr	r1, [r4, #0]
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	1a6d      	subs	r5, r5, r1
 8007a8e:	4629      	mov	r1, r5
 8007a90:	f7ff ffa6 	bl	80079e0 <sbrk_aligned>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d03a      	beq.n	8007b0e <_malloc_r+0xea>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	442b      	add	r3, r5
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	bb62      	cbnz	r2, 8007b00 <_malloc_r+0xdc>
 8007aa6:	f8c8 7000 	str.w	r7, [r8]
 8007aaa:	e00f      	b.n	8007acc <_malloc_r+0xa8>
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	1b52      	subs	r2, r2, r5
 8007ab0:	d420      	bmi.n	8007af4 <_malloc_r+0xd0>
 8007ab2:	2a0b      	cmp	r2, #11
 8007ab4:	d917      	bls.n	8007ae6 <_malloc_r+0xc2>
 8007ab6:	1961      	adds	r1, r4, r5
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	6025      	str	r5, [r4, #0]
 8007abc:	bf18      	it	ne
 8007abe:	6059      	strne	r1, [r3, #4]
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	bf08      	it	eq
 8007ac4:	f8c8 1000 	streq.w	r1, [r8]
 8007ac8:	5162      	str	r2, [r4, r5]
 8007aca:	604b      	str	r3, [r1, #4]
 8007acc:	4630      	mov	r0, r6
 8007ace:	f000 f841 	bl	8007b54 <__malloc_unlock>
 8007ad2:	f104 000b 	add.w	r0, r4, #11
 8007ad6:	1d23      	adds	r3, r4, #4
 8007ad8:	f020 0007 	bic.w	r0, r0, #7
 8007adc:	1ac2      	subs	r2, r0, r3
 8007ade:	bf1c      	itt	ne
 8007ae0:	1a1b      	subne	r3, r3, r0
 8007ae2:	50a3      	strne	r3, [r4, r2]
 8007ae4:	e7af      	b.n	8007a46 <_malloc_r+0x22>
 8007ae6:	6862      	ldr	r2, [r4, #4]
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	bf0c      	ite	eq
 8007aec:	f8c8 2000 	streq.w	r2, [r8]
 8007af0:	605a      	strne	r2, [r3, #4]
 8007af2:	e7eb      	b.n	8007acc <_malloc_r+0xa8>
 8007af4:	4623      	mov	r3, r4
 8007af6:	6864      	ldr	r4, [r4, #4]
 8007af8:	e7ae      	b.n	8007a58 <_malloc_r+0x34>
 8007afa:	463c      	mov	r4, r7
 8007afc:	687f      	ldr	r7, [r7, #4]
 8007afe:	e7b6      	b.n	8007a6e <_malloc_r+0x4a>
 8007b00:	461a      	mov	r2, r3
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d1fb      	bne.n	8007b00 <_malloc_r+0xdc>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6053      	str	r3, [r2, #4]
 8007b0c:	e7de      	b.n	8007acc <_malloc_r+0xa8>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	4630      	mov	r0, r6
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f000 f81e 	bl	8007b54 <__malloc_unlock>
 8007b18:	e794      	b.n	8007a44 <_malloc_r+0x20>
 8007b1a:	6005      	str	r5, [r0, #0]
 8007b1c:	e7d6      	b.n	8007acc <_malloc_r+0xa8>
 8007b1e:	bf00      	nop
 8007b20:	200046c4 	.word	0x200046c4

08007b24 <__ascii_mbtowc>:
 8007b24:	b082      	sub	sp, #8
 8007b26:	b901      	cbnz	r1, 8007b2a <__ascii_mbtowc+0x6>
 8007b28:	a901      	add	r1, sp, #4
 8007b2a:	b142      	cbz	r2, 8007b3e <__ascii_mbtowc+0x1a>
 8007b2c:	b14b      	cbz	r3, 8007b42 <__ascii_mbtowc+0x1e>
 8007b2e:	7813      	ldrb	r3, [r2, #0]
 8007b30:	600b      	str	r3, [r1, #0]
 8007b32:	7812      	ldrb	r2, [r2, #0]
 8007b34:	1e10      	subs	r0, r2, #0
 8007b36:	bf18      	it	ne
 8007b38:	2001      	movne	r0, #1
 8007b3a:	b002      	add	sp, #8
 8007b3c:	4770      	bx	lr
 8007b3e:	4610      	mov	r0, r2
 8007b40:	e7fb      	b.n	8007b3a <__ascii_mbtowc+0x16>
 8007b42:	f06f 0001 	mvn.w	r0, #1
 8007b46:	e7f8      	b.n	8007b3a <__ascii_mbtowc+0x16>

08007b48 <__malloc_lock>:
 8007b48:	4801      	ldr	r0, [pc, #4]	@ (8007b50 <__malloc_lock+0x8>)
 8007b4a:	f7ff bba8 	b.w	800729e <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	200046bc 	.word	0x200046bc

08007b54 <__malloc_unlock>:
 8007b54:	4801      	ldr	r0, [pc, #4]	@ (8007b5c <__malloc_unlock+0x8>)
 8007b56:	f7ff bba3 	b.w	80072a0 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	200046bc 	.word	0x200046bc

08007b60 <_Balloc>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	69c6      	ldr	r6, [r0, #28]
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	b976      	cbnz	r6, 8007b88 <_Balloc+0x28>
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f001 f89e 	bl	8008cac <malloc>
 8007b70:	4602      	mov	r2, r0
 8007b72:	61e0      	str	r0, [r4, #28]
 8007b74:	b920      	cbnz	r0, 8007b80 <_Balloc+0x20>
 8007b76:	216b      	movs	r1, #107	@ 0x6b
 8007b78:	4b17      	ldr	r3, [pc, #92]	@ (8007bd8 <_Balloc+0x78>)
 8007b7a:	4818      	ldr	r0, [pc, #96]	@ (8007bdc <_Balloc+0x7c>)
 8007b7c:	f001 f864 	bl	8008c48 <__assert_func>
 8007b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b84:	6006      	str	r6, [r0, #0]
 8007b86:	60c6      	str	r6, [r0, #12]
 8007b88:	69e6      	ldr	r6, [r4, #28]
 8007b8a:	68f3      	ldr	r3, [r6, #12]
 8007b8c:	b183      	cbz	r3, 8007bb0 <_Balloc+0x50>
 8007b8e:	69e3      	ldr	r3, [r4, #28]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b96:	b9b8      	cbnz	r0, 8007bc8 <_Balloc+0x68>
 8007b98:	2101      	movs	r1, #1
 8007b9a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b9e:	1d72      	adds	r2, r6, #5
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	f001 f86e 	bl	8008c84 <_calloc_r>
 8007ba8:	b160      	cbz	r0, 8007bc4 <_Balloc+0x64>
 8007baa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bae:	e00e      	b.n	8007bce <_Balloc+0x6e>
 8007bb0:	2221      	movs	r2, #33	@ 0x21
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f001 f865 	bl	8008c84 <_calloc_r>
 8007bba:	69e3      	ldr	r3, [r4, #28]
 8007bbc:	60f0      	str	r0, [r6, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e4      	bne.n	8007b8e <_Balloc+0x2e>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	6802      	ldr	r2, [r0, #0]
 8007bca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bd4:	e7f7      	b.n	8007bc6 <_Balloc+0x66>
 8007bd6:	bf00      	nop
 8007bd8:	0800b7de 	.word	0x0800b7de
 8007bdc:	0800b7f5 	.word	0x0800b7f5

08007be0 <_Bfree>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	69c6      	ldr	r6, [r0, #28]
 8007be4:	4605      	mov	r5, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	b976      	cbnz	r6, 8007c08 <_Bfree+0x28>
 8007bea:	2010      	movs	r0, #16
 8007bec:	f001 f85e 	bl	8008cac <malloc>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	61e8      	str	r0, [r5, #28]
 8007bf4:	b920      	cbnz	r0, 8007c00 <_Bfree+0x20>
 8007bf6:	218f      	movs	r1, #143	@ 0x8f
 8007bf8:	4b08      	ldr	r3, [pc, #32]	@ (8007c1c <_Bfree+0x3c>)
 8007bfa:	4809      	ldr	r0, [pc, #36]	@ (8007c20 <_Bfree+0x40>)
 8007bfc:	f001 f824 	bl	8008c48 <__assert_func>
 8007c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c04:	6006      	str	r6, [r0, #0]
 8007c06:	60c6      	str	r6, [r0, #12]
 8007c08:	b13c      	cbz	r4, 8007c1a <_Bfree+0x3a>
 8007c0a:	69eb      	ldr	r3, [r5, #28]
 8007c0c:	6862      	ldr	r2, [r4, #4]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c14:	6021      	str	r1, [r4, #0]
 8007c16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	0800b7de 	.word	0x0800b7de
 8007c20:	0800b7f5 	.word	0x0800b7f5

08007c24 <__multadd>:
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	4607      	mov	r7, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	461e      	mov	r6, r3
 8007c2e:	2000      	movs	r0, #0
 8007c30:	690d      	ldr	r5, [r1, #16]
 8007c32:	f101 0c14 	add.w	ip, r1, #20
 8007c36:	f8dc 3000 	ldr.w	r3, [ip]
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	b299      	uxth	r1, r3
 8007c3e:	fb02 6101 	mla	r1, r2, r1, r6
 8007c42:	0c1e      	lsrs	r6, r3, #16
 8007c44:	0c0b      	lsrs	r3, r1, #16
 8007c46:	fb02 3306 	mla	r3, r2, r6, r3
 8007c4a:	b289      	uxth	r1, r1
 8007c4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c50:	4285      	cmp	r5, r0
 8007c52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c56:	f84c 1b04 	str.w	r1, [ip], #4
 8007c5a:	dcec      	bgt.n	8007c36 <__multadd+0x12>
 8007c5c:	b30e      	cbz	r6, 8007ca2 <__multadd+0x7e>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	dc19      	bgt.n	8007c98 <__multadd+0x74>
 8007c64:	6861      	ldr	r1, [r4, #4]
 8007c66:	4638      	mov	r0, r7
 8007c68:	3101      	adds	r1, #1
 8007c6a:	f7ff ff79 	bl	8007b60 <_Balloc>
 8007c6e:	4680      	mov	r8, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <__multadd+0x5a>
 8007c72:	4602      	mov	r2, r0
 8007c74:	21ba      	movs	r1, #186	@ 0xba
 8007c76:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca8 <__multadd+0x84>)
 8007c78:	480c      	ldr	r0, [pc, #48]	@ (8007cac <__multadd+0x88>)
 8007c7a:	f000 ffe5 	bl	8008c48 <__assert_func>
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	f104 010c 	add.w	r1, r4, #12
 8007c84:	3202      	adds	r2, #2
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	300c      	adds	r0, #12
 8007c8a:	f7ff fb12 	bl	80072b2 <memcpy>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ffa5 	bl	8007be0 <_Bfree>
 8007c96:	4644      	mov	r4, r8
 8007c98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	615e      	str	r6, [r3, #20]
 8007ca0:	6125      	str	r5, [r4, #16]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	0800b76d 	.word	0x0800b76d
 8007cac:	0800b7f5 	.word	0x0800b7f5

08007cb0 <__s2b>:
 8007cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	4615      	mov	r5, r2
 8007cb6:	2209      	movs	r2, #9
 8007cb8:	461f      	mov	r7, r3
 8007cba:	3308      	adds	r3, #8
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	db09      	blt.n	8007ce0 <__s2b+0x30>
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7ff ff47 	bl	8007b60 <_Balloc>
 8007cd2:	b940      	cbnz	r0, 8007ce6 <__s2b+0x36>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	21d3      	movs	r1, #211	@ 0xd3
 8007cd8:	4b18      	ldr	r3, [pc, #96]	@ (8007d3c <__s2b+0x8c>)
 8007cda:	4819      	ldr	r0, [pc, #100]	@ (8007d40 <__s2b+0x90>)
 8007cdc:	f000 ffb4 	bl	8008c48 <__assert_func>
 8007ce0:	0052      	lsls	r2, r2, #1
 8007ce2:	3101      	adds	r1, #1
 8007ce4:	e7f0      	b.n	8007cc8 <__s2b+0x18>
 8007ce6:	9b08      	ldr	r3, [sp, #32]
 8007ce8:	2d09      	cmp	r5, #9
 8007cea:	6143      	str	r3, [r0, #20]
 8007cec:	f04f 0301 	mov.w	r3, #1
 8007cf0:	6103      	str	r3, [r0, #16]
 8007cf2:	dd16      	ble.n	8007d22 <__s2b+0x72>
 8007cf4:	f104 0909 	add.w	r9, r4, #9
 8007cf8:	46c8      	mov	r8, r9
 8007cfa:	442c      	add	r4, r5
 8007cfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d00:	4601      	mov	r1, r0
 8007d02:	220a      	movs	r2, #10
 8007d04:	4630      	mov	r0, r6
 8007d06:	3b30      	subs	r3, #48	@ 0x30
 8007d08:	f7ff ff8c 	bl	8007c24 <__multadd>
 8007d0c:	45a0      	cmp	r8, r4
 8007d0e:	d1f5      	bne.n	8007cfc <__s2b+0x4c>
 8007d10:	f1a5 0408 	sub.w	r4, r5, #8
 8007d14:	444c      	add	r4, r9
 8007d16:	1b2d      	subs	r5, r5, r4
 8007d18:	1963      	adds	r3, r4, r5
 8007d1a:	42bb      	cmp	r3, r7
 8007d1c:	db04      	blt.n	8007d28 <__s2b+0x78>
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	2509      	movs	r5, #9
 8007d24:	340a      	adds	r4, #10
 8007d26:	e7f6      	b.n	8007d16 <__s2b+0x66>
 8007d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	220a      	movs	r2, #10
 8007d30:	4630      	mov	r0, r6
 8007d32:	3b30      	subs	r3, #48	@ 0x30
 8007d34:	f7ff ff76 	bl	8007c24 <__multadd>
 8007d38:	e7ee      	b.n	8007d18 <__s2b+0x68>
 8007d3a:	bf00      	nop
 8007d3c:	0800b76d 	.word	0x0800b76d
 8007d40:	0800b7f5 	.word	0x0800b7f5

08007d44 <__hi0bits>:
 8007d44:	4603      	mov	r3, r0
 8007d46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d4a:	bf3a      	itte	cc
 8007d4c:	0403      	lslcc	r3, r0, #16
 8007d4e:	2010      	movcc	r0, #16
 8007d50:	2000      	movcs	r0, #0
 8007d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d56:	bf3c      	itt	cc
 8007d58:	021b      	lslcc	r3, r3, #8
 8007d5a:	3008      	addcc	r0, #8
 8007d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d60:	bf3c      	itt	cc
 8007d62:	011b      	lslcc	r3, r3, #4
 8007d64:	3004      	addcc	r0, #4
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6a:	bf3c      	itt	cc
 8007d6c:	009b      	lslcc	r3, r3, #2
 8007d6e:	3002      	addcc	r0, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	db05      	blt.n	8007d80 <__hi0bits+0x3c>
 8007d74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d78:	f100 0001 	add.w	r0, r0, #1
 8007d7c:	bf08      	it	eq
 8007d7e:	2020      	moveq	r0, #32
 8007d80:	4770      	bx	lr

08007d82 <__lo0bits>:
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	4602      	mov	r2, r0
 8007d86:	f013 0007 	ands.w	r0, r3, #7
 8007d8a:	d00b      	beq.n	8007da4 <__lo0bits+0x22>
 8007d8c:	07d9      	lsls	r1, r3, #31
 8007d8e:	d421      	bmi.n	8007dd4 <__lo0bits+0x52>
 8007d90:	0798      	lsls	r0, r3, #30
 8007d92:	bf49      	itett	mi
 8007d94:	085b      	lsrmi	r3, r3, #1
 8007d96:	089b      	lsrpl	r3, r3, #2
 8007d98:	2001      	movmi	r0, #1
 8007d9a:	6013      	strmi	r3, [r2, #0]
 8007d9c:	bf5c      	itt	pl
 8007d9e:	2002      	movpl	r0, #2
 8007da0:	6013      	strpl	r3, [r2, #0]
 8007da2:	4770      	bx	lr
 8007da4:	b299      	uxth	r1, r3
 8007da6:	b909      	cbnz	r1, 8007dac <__lo0bits+0x2a>
 8007da8:	2010      	movs	r0, #16
 8007daa:	0c1b      	lsrs	r3, r3, #16
 8007dac:	b2d9      	uxtb	r1, r3
 8007dae:	b909      	cbnz	r1, 8007db4 <__lo0bits+0x32>
 8007db0:	3008      	adds	r0, #8
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	0719      	lsls	r1, r3, #28
 8007db6:	bf04      	itt	eq
 8007db8:	091b      	lsreq	r3, r3, #4
 8007dba:	3004      	addeq	r0, #4
 8007dbc:	0799      	lsls	r1, r3, #30
 8007dbe:	bf04      	itt	eq
 8007dc0:	089b      	lsreq	r3, r3, #2
 8007dc2:	3002      	addeq	r0, #2
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d403      	bmi.n	8007dd0 <__lo0bits+0x4e>
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	f100 0001 	add.w	r0, r0, #1
 8007dce:	d003      	beq.n	8007dd8 <__lo0bits+0x56>
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	4770      	bx	lr
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4770      	bx	lr
 8007dd8:	2020      	movs	r0, #32
 8007dda:	4770      	bx	lr

08007ddc <__i2b>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	460c      	mov	r4, r1
 8007de0:	2101      	movs	r1, #1
 8007de2:	f7ff febd 	bl	8007b60 <_Balloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	b928      	cbnz	r0, 8007df6 <__i2b+0x1a>
 8007dea:	f240 1145 	movw	r1, #325	@ 0x145
 8007dee:	4b04      	ldr	r3, [pc, #16]	@ (8007e00 <__i2b+0x24>)
 8007df0:	4804      	ldr	r0, [pc, #16]	@ (8007e04 <__i2b+0x28>)
 8007df2:	f000 ff29 	bl	8008c48 <__assert_func>
 8007df6:	2301      	movs	r3, #1
 8007df8:	6144      	str	r4, [r0, #20]
 8007dfa:	6103      	str	r3, [r0, #16]
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	bf00      	nop
 8007e00:	0800b76d 	.word	0x0800b76d
 8007e04:	0800b7f5 	.word	0x0800b7f5

08007e08 <__multiply>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	4617      	mov	r7, r2
 8007e0e:	690a      	ldr	r2, [r1, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4689      	mov	r9, r1
 8007e14:	429a      	cmp	r2, r3
 8007e16:	bfa2      	ittt	ge
 8007e18:	463b      	movge	r3, r7
 8007e1a:	460f      	movge	r7, r1
 8007e1c:	4699      	movge	r9, r3
 8007e1e:	693d      	ldr	r5, [r7, #16]
 8007e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	eb05 060a 	add.w	r6, r5, sl
 8007e2c:	42b3      	cmp	r3, r6
 8007e2e:	b085      	sub	sp, #20
 8007e30:	bfb8      	it	lt
 8007e32:	3101      	addlt	r1, #1
 8007e34:	f7ff fe94 	bl	8007b60 <_Balloc>
 8007e38:	b930      	cbnz	r0, 8007e48 <__multiply+0x40>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e40:	4b40      	ldr	r3, [pc, #256]	@ (8007f44 <__multiply+0x13c>)
 8007e42:	4841      	ldr	r0, [pc, #260]	@ (8007f48 <__multiply+0x140>)
 8007e44:	f000 ff00 	bl	8008c48 <__assert_func>
 8007e48:	f100 0414 	add.w	r4, r0, #20
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	2200      	movs	r2, #0
 8007e50:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007e54:	4573      	cmp	r3, lr
 8007e56:	d320      	bcc.n	8007e9a <__multiply+0x92>
 8007e58:	f107 0814 	add.w	r8, r7, #20
 8007e5c:	f109 0114 	add.w	r1, r9, #20
 8007e60:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007e64:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	1beb      	subs	r3, r5, r7
 8007e6c:	3b15      	subs	r3, #21
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	3304      	adds	r3, #4
 8007e74:	3715      	adds	r7, #21
 8007e76:	42bd      	cmp	r5, r7
 8007e78:	bf38      	it	cc
 8007e7a:	2304      	movcc	r3, #4
 8007e7c:	9301      	str	r3, [sp, #4]
 8007e7e:	9b02      	ldr	r3, [sp, #8]
 8007e80:	9103      	str	r1, [sp, #12]
 8007e82:	428b      	cmp	r3, r1
 8007e84:	d80c      	bhi.n	8007ea0 <__multiply+0x98>
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	dd03      	ble.n	8007e92 <__multiply+0x8a>
 8007e8a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d055      	beq.n	8007f3e <__multiply+0x136>
 8007e92:	6106      	str	r6, [r0, #16]
 8007e94:	b005      	add	sp, #20
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	f843 2b04 	str.w	r2, [r3], #4
 8007e9e:	e7d9      	b.n	8007e54 <__multiply+0x4c>
 8007ea0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ea4:	f1ba 0f00 	cmp.w	sl, #0
 8007ea8:	d01f      	beq.n	8007eea <__multiply+0xe2>
 8007eaa:	46c4      	mov	ip, r8
 8007eac:	46a1      	mov	r9, r4
 8007eae:	2700      	movs	r7, #0
 8007eb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007eb4:	f8d9 3000 	ldr.w	r3, [r9]
 8007eb8:	fa1f fb82 	uxth.w	fp, r2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ec2:	443b      	add	r3, r7
 8007ec4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ec8:	0c12      	lsrs	r2, r2, #16
 8007eca:	0c3f      	lsrs	r7, r7, #16
 8007ecc:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ed0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eda:	4565      	cmp	r5, ip
 8007edc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007ee0:	f849 3b04 	str.w	r3, [r9], #4
 8007ee4:	d8e4      	bhi.n	8007eb0 <__multiply+0xa8>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	50e7      	str	r7, [r4, r3]
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	3104      	adds	r1, #4
 8007eee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ef2:	f1b9 0f00 	cmp.w	r9, #0
 8007ef6:	d020      	beq.n	8007f3a <__multiply+0x132>
 8007ef8:	4647      	mov	r7, r8
 8007efa:	46a4      	mov	ip, r4
 8007efc:	f04f 0a00 	mov.w	sl, #0
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f06:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	fb09 220b 	mla	r2, r9, fp, r2
 8007f10:	4452      	add	r2, sl
 8007f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f16:	f84c 3b04 	str.w	r3, [ip], #4
 8007f1a:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f22:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f26:	42bd      	cmp	r5, r7
 8007f28:	fb09 330a 	mla	r3, r9, sl, r3
 8007f2c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007f30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f34:	d8e5      	bhi.n	8007f02 <__multiply+0xfa>
 8007f36:	9a01      	ldr	r2, [sp, #4]
 8007f38:	50a3      	str	r3, [r4, r2]
 8007f3a:	3404      	adds	r4, #4
 8007f3c:	e79f      	b.n	8007e7e <__multiply+0x76>
 8007f3e:	3e01      	subs	r6, #1
 8007f40:	e7a1      	b.n	8007e86 <__multiply+0x7e>
 8007f42:	bf00      	nop
 8007f44:	0800b76d 	.word	0x0800b76d
 8007f48:	0800b7f5 	.word	0x0800b7f5

08007f4c <__pow5mult>:
 8007f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f50:	4615      	mov	r5, r2
 8007f52:	f012 0203 	ands.w	r2, r2, #3
 8007f56:	4607      	mov	r7, r0
 8007f58:	460e      	mov	r6, r1
 8007f5a:	d007      	beq.n	8007f6c <__pow5mult+0x20>
 8007f5c:	4c25      	ldr	r4, [pc, #148]	@ (8007ff4 <__pow5mult+0xa8>)
 8007f5e:	3a01      	subs	r2, #1
 8007f60:	2300      	movs	r3, #0
 8007f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f66:	f7ff fe5d 	bl	8007c24 <__multadd>
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	10ad      	asrs	r5, r5, #2
 8007f6e:	d03d      	beq.n	8007fec <__pow5mult+0xa0>
 8007f70:	69fc      	ldr	r4, [r7, #28]
 8007f72:	b97c      	cbnz	r4, 8007f94 <__pow5mult+0x48>
 8007f74:	2010      	movs	r0, #16
 8007f76:	f000 fe99 	bl	8008cac <malloc>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	61f8      	str	r0, [r7, #28]
 8007f7e:	b928      	cbnz	r0, 8007f8c <__pow5mult+0x40>
 8007f80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f84:	4b1c      	ldr	r3, [pc, #112]	@ (8007ff8 <__pow5mult+0xac>)
 8007f86:	481d      	ldr	r0, [pc, #116]	@ (8007ffc <__pow5mult+0xb0>)
 8007f88:	f000 fe5e 	bl	8008c48 <__assert_func>
 8007f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f90:	6004      	str	r4, [r0, #0]
 8007f92:	60c4      	str	r4, [r0, #12]
 8007f94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f9c:	b94c      	cbnz	r4, 8007fb2 <__pow5mult+0x66>
 8007f9e:	f240 2171 	movw	r1, #625	@ 0x271
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f7ff ff1a 	bl	8007ddc <__i2b>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fb0:	6003      	str	r3, [r0, #0]
 8007fb2:	f04f 0900 	mov.w	r9, #0
 8007fb6:	07eb      	lsls	r3, r5, #31
 8007fb8:	d50a      	bpl.n	8007fd0 <__pow5mult+0x84>
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4622      	mov	r2, r4
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7ff ff22 	bl	8007e08 <__multiply>
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4638      	mov	r0, r7
 8007fca:	f7ff fe09 	bl	8007be0 <_Bfree>
 8007fce:	4646      	mov	r6, r8
 8007fd0:	106d      	asrs	r5, r5, #1
 8007fd2:	d00b      	beq.n	8007fec <__pow5mult+0xa0>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	b938      	cbnz	r0, 8007fe8 <__pow5mult+0x9c>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff ff13 	bl	8007e08 <__multiply>
 8007fe2:	6020      	str	r0, [r4, #0]
 8007fe4:	f8c0 9000 	str.w	r9, [r0]
 8007fe8:	4604      	mov	r4, r0
 8007fea:	e7e4      	b.n	8007fb6 <__pow5mult+0x6a>
 8007fec:	4630      	mov	r0, r6
 8007fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff2:	bf00      	nop
 8007ff4:	0800b930 	.word	0x0800b930
 8007ff8:	0800b7de 	.word	0x0800b7de
 8007ffc:	0800b7f5 	.word	0x0800b7f5

08008000 <__lshift>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	460c      	mov	r4, r1
 8008006:	4607      	mov	r7, r0
 8008008:	4691      	mov	r9, r2
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	6849      	ldr	r1, [r1, #4]
 800800e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008018:	f108 0601 	add.w	r6, r8, #1
 800801c:	42b3      	cmp	r3, r6
 800801e:	db0b      	blt.n	8008038 <__lshift+0x38>
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff fd9d 	bl	8007b60 <_Balloc>
 8008026:	4605      	mov	r5, r0
 8008028:	b948      	cbnz	r0, 800803e <__lshift+0x3e>
 800802a:	4602      	mov	r2, r0
 800802c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008030:	4b27      	ldr	r3, [pc, #156]	@ (80080d0 <__lshift+0xd0>)
 8008032:	4828      	ldr	r0, [pc, #160]	@ (80080d4 <__lshift+0xd4>)
 8008034:	f000 fe08 	bl	8008c48 <__assert_func>
 8008038:	3101      	adds	r1, #1
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	e7ee      	b.n	800801c <__lshift+0x1c>
 800803e:	2300      	movs	r3, #0
 8008040:	f100 0114 	add.w	r1, r0, #20
 8008044:	f100 0210 	add.w	r2, r0, #16
 8008048:	4618      	mov	r0, r3
 800804a:	4553      	cmp	r3, sl
 800804c:	db33      	blt.n	80080b6 <__lshift+0xb6>
 800804e:	6920      	ldr	r0, [r4, #16]
 8008050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008054:	f104 0314 	add.w	r3, r4, #20
 8008058:	f019 091f 	ands.w	r9, r9, #31
 800805c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008064:	d02b      	beq.n	80080be <__lshift+0xbe>
 8008066:	468a      	mov	sl, r1
 8008068:	2200      	movs	r2, #0
 800806a:	f1c9 0e20 	rsb	lr, r9, #32
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	fa00 f009 	lsl.w	r0, r0, r9
 8008074:	4310      	orrs	r0, r2
 8008076:	f84a 0b04 	str.w	r0, [sl], #4
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	459c      	cmp	ip, r3
 8008080:	fa22 f20e 	lsr.w	r2, r2, lr
 8008084:	d8f3      	bhi.n	800806e <__lshift+0x6e>
 8008086:	ebac 0304 	sub.w	r3, ip, r4
 800808a:	3b15      	subs	r3, #21
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	3304      	adds	r3, #4
 8008092:	f104 0015 	add.w	r0, r4, #21
 8008096:	4560      	cmp	r0, ip
 8008098:	bf88      	it	hi
 800809a:	2304      	movhi	r3, #4
 800809c:	50ca      	str	r2, [r1, r3]
 800809e:	b10a      	cbz	r2, 80080a4 <__lshift+0xa4>
 80080a0:	f108 0602 	add.w	r6, r8, #2
 80080a4:	3e01      	subs	r6, #1
 80080a6:	4638      	mov	r0, r7
 80080a8:	4621      	mov	r1, r4
 80080aa:	612e      	str	r6, [r5, #16]
 80080ac:	f7ff fd98 	bl	8007be0 <_Bfree>
 80080b0:	4628      	mov	r0, r5
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080ba:	3301      	adds	r3, #1
 80080bc:	e7c5      	b.n	800804a <__lshift+0x4a>
 80080be:	3904      	subs	r1, #4
 80080c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c4:	459c      	cmp	ip, r3
 80080c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80080ca:	d8f9      	bhi.n	80080c0 <__lshift+0xc0>
 80080cc:	e7ea      	b.n	80080a4 <__lshift+0xa4>
 80080ce:	bf00      	nop
 80080d0:	0800b76d 	.word	0x0800b76d
 80080d4:	0800b7f5 	.word	0x0800b7f5

080080d8 <__mcmp>:
 80080d8:	4603      	mov	r3, r0
 80080da:	690a      	ldr	r2, [r1, #16]
 80080dc:	6900      	ldr	r0, [r0, #16]
 80080de:	b530      	push	{r4, r5, lr}
 80080e0:	1a80      	subs	r0, r0, r2
 80080e2:	d10e      	bne.n	8008102 <__mcmp+0x2a>
 80080e4:	3314      	adds	r3, #20
 80080e6:	3114      	adds	r1, #20
 80080e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080f8:	4295      	cmp	r5, r2
 80080fa:	d003      	beq.n	8008104 <__mcmp+0x2c>
 80080fc:	d205      	bcs.n	800810a <__mcmp+0x32>
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	bd30      	pop	{r4, r5, pc}
 8008104:	42a3      	cmp	r3, r4
 8008106:	d3f3      	bcc.n	80080f0 <__mcmp+0x18>
 8008108:	e7fb      	b.n	8008102 <__mcmp+0x2a>
 800810a:	2001      	movs	r0, #1
 800810c:	e7f9      	b.n	8008102 <__mcmp+0x2a>
	...

08008110 <__mdiff>:
 8008110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4689      	mov	r9, r1
 8008116:	4606      	mov	r6, r0
 8008118:	4611      	mov	r1, r2
 800811a:	4648      	mov	r0, r9
 800811c:	4614      	mov	r4, r2
 800811e:	f7ff ffdb 	bl	80080d8 <__mcmp>
 8008122:	1e05      	subs	r5, r0, #0
 8008124:	d112      	bne.n	800814c <__mdiff+0x3c>
 8008126:	4629      	mov	r1, r5
 8008128:	4630      	mov	r0, r6
 800812a:	f7ff fd19 	bl	8007b60 <_Balloc>
 800812e:	4602      	mov	r2, r0
 8008130:	b928      	cbnz	r0, 800813e <__mdiff+0x2e>
 8008132:	f240 2137 	movw	r1, #567	@ 0x237
 8008136:	4b3e      	ldr	r3, [pc, #248]	@ (8008230 <__mdiff+0x120>)
 8008138:	483e      	ldr	r0, [pc, #248]	@ (8008234 <__mdiff+0x124>)
 800813a:	f000 fd85 	bl	8008c48 <__assert_func>
 800813e:	2301      	movs	r3, #1
 8008140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008144:	4610      	mov	r0, r2
 8008146:	b003      	add	sp, #12
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	bfbc      	itt	lt
 800814e:	464b      	movlt	r3, r9
 8008150:	46a1      	movlt	r9, r4
 8008152:	4630      	mov	r0, r6
 8008154:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008158:	bfba      	itte	lt
 800815a:	461c      	movlt	r4, r3
 800815c:	2501      	movlt	r5, #1
 800815e:	2500      	movge	r5, #0
 8008160:	f7ff fcfe 	bl	8007b60 <_Balloc>
 8008164:	4602      	mov	r2, r0
 8008166:	b918      	cbnz	r0, 8008170 <__mdiff+0x60>
 8008168:	f240 2145 	movw	r1, #581	@ 0x245
 800816c:	4b30      	ldr	r3, [pc, #192]	@ (8008230 <__mdiff+0x120>)
 800816e:	e7e3      	b.n	8008138 <__mdiff+0x28>
 8008170:	f100 0b14 	add.w	fp, r0, #20
 8008174:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008178:	f109 0310 	add.w	r3, r9, #16
 800817c:	60c5      	str	r5, [r0, #12]
 800817e:	f04f 0c00 	mov.w	ip, #0
 8008182:	f109 0514 	add.w	r5, r9, #20
 8008186:	46d9      	mov	r9, fp
 8008188:	6926      	ldr	r6, [r4, #16]
 800818a:	f104 0e14 	add.w	lr, r4, #20
 800818e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008192:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800819e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081a2:	b281      	uxth	r1, r0
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	fa1f f38a 	uxth.w	r3, sl
 80081aa:	1a5b      	subs	r3, r3, r1
 80081ac:	0c00      	lsrs	r0, r0, #16
 80081ae:	4463      	add	r3, ip
 80081b0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081b4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081be:	4576      	cmp	r6, lr
 80081c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081c4:	f849 3b04 	str.w	r3, [r9], #4
 80081c8:	d8e6      	bhi.n	8008198 <__mdiff+0x88>
 80081ca:	1b33      	subs	r3, r6, r4
 80081cc:	3b15      	subs	r3, #21
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	3415      	adds	r4, #21
 80081d4:	3304      	adds	r3, #4
 80081d6:	42a6      	cmp	r6, r4
 80081d8:	bf38      	it	cc
 80081da:	2304      	movcc	r3, #4
 80081dc:	441d      	add	r5, r3
 80081de:	445b      	add	r3, fp
 80081e0:	461e      	mov	r6, r3
 80081e2:	462c      	mov	r4, r5
 80081e4:	4544      	cmp	r4, r8
 80081e6:	d30e      	bcc.n	8008206 <__mdiff+0xf6>
 80081e8:	f108 0103 	add.w	r1, r8, #3
 80081ec:	1b49      	subs	r1, r1, r5
 80081ee:	f021 0103 	bic.w	r1, r1, #3
 80081f2:	3d03      	subs	r5, #3
 80081f4:	45a8      	cmp	r8, r5
 80081f6:	bf38      	it	cc
 80081f8:	2100      	movcc	r1, #0
 80081fa:	440b      	add	r3, r1
 80081fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008200:	b199      	cbz	r1, 800822a <__mdiff+0x11a>
 8008202:	6117      	str	r7, [r2, #16]
 8008204:	e79e      	b.n	8008144 <__mdiff+0x34>
 8008206:	46e6      	mov	lr, ip
 8008208:	f854 1b04 	ldr.w	r1, [r4], #4
 800820c:	fa1f fc81 	uxth.w	ip, r1
 8008210:	44f4      	add	ip, lr
 8008212:	0c08      	lsrs	r0, r1, #16
 8008214:	4471      	add	r1, lr
 8008216:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800821a:	b289      	uxth	r1, r1
 800821c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008224:	f846 1b04 	str.w	r1, [r6], #4
 8008228:	e7dc      	b.n	80081e4 <__mdiff+0xd4>
 800822a:	3f01      	subs	r7, #1
 800822c:	e7e6      	b.n	80081fc <__mdiff+0xec>
 800822e:	bf00      	nop
 8008230:	0800b76d 	.word	0x0800b76d
 8008234:	0800b7f5 	.word	0x0800b7f5

08008238 <__ulp>:
 8008238:	4b0e      	ldr	r3, [pc, #56]	@ (8008274 <__ulp+0x3c>)
 800823a:	400b      	ands	r3, r1
 800823c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc08      	bgt.n	8008256 <__ulp+0x1e>
 8008244:	425b      	negs	r3, r3
 8008246:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800824a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800824e:	da04      	bge.n	800825a <__ulp+0x22>
 8008250:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008254:	4113      	asrs	r3, r2
 8008256:	2200      	movs	r2, #0
 8008258:	e008      	b.n	800826c <__ulp+0x34>
 800825a:	f1a2 0314 	sub.w	r3, r2, #20
 800825e:	2b1e      	cmp	r3, #30
 8008260:	bfd6      	itet	le
 8008262:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008266:	2201      	movgt	r2, #1
 8008268:	40da      	lsrle	r2, r3
 800826a:	2300      	movs	r3, #0
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	7ff00000 	.word	0x7ff00000

08008278 <__b2d>:
 8008278:	6902      	ldr	r2, [r0, #16]
 800827a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827c:	f100 0614 	add.w	r6, r0, #20
 8008280:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008284:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008288:	4f1e      	ldr	r7, [pc, #120]	@ (8008304 <__b2d+0x8c>)
 800828a:	4620      	mov	r0, r4
 800828c:	f7ff fd5a 	bl	8007d44 <__hi0bits>
 8008290:	4603      	mov	r3, r0
 8008292:	f1c0 0020 	rsb	r0, r0, #32
 8008296:	2b0a      	cmp	r3, #10
 8008298:	f1a2 0504 	sub.w	r5, r2, #4
 800829c:	6008      	str	r0, [r1, #0]
 800829e:	dc12      	bgt.n	80082c6 <__b2d+0x4e>
 80082a0:	42ae      	cmp	r6, r5
 80082a2:	bf2c      	ite	cs
 80082a4:	2200      	movcs	r2, #0
 80082a6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80082aa:	f1c3 0c0b 	rsb	ip, r3, #11
 80082ae:	3315      	adds	r3, #21
 80082b0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80082b4:	fa04 f303 	lsl.w	r3, r4, r3
 80082b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80082bc:	ea4e 0107 	orr.w	r1, lr, r7
 80082c0:	431a      	orrs	r2, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c6:	42ae      	cmp	r6, r5
 80082c8:	bf36      	itet	cc
 80082ca:	f1a2 0508 	subcc.w	r5, r2, #8
 80082ce:	2200      	movcs	r2, #0
 80082d0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80082d4:	3b0b      	subs	r3, #11
 80082d6:	d012      	beq.n	80082fe <__b2d+0x86>
 80082d8:	f1c3 0720 	rsb	r7, r3, #32
 80082dc:	fa22 f107 	lsr.w	r1, r2, r7
 80082e0:	409c      	lsls	r4, r3
 80082e2:	430c      	orrs	r4, r1
 80082e4:	42b5      	cmp	r5, r6
 80082e6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80082ea:	bf94      	ite	ls
 80082ec:	2400      	movls	r4, #0
 80082ee:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80082f2:	409a      	lsls	r2, r3
 80082f4:	40fc      	lsrs	r4, r7
 80082f6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80082fa:	4322      	orrs	r2, r4
 80082fc:	e7e1      	b.n	80082c2 <__b2d+0x4a>
 80082fe:	ea44 0107 	orr.w	r1, r4, r7
 8008302:	e7de      	b.n	80082c2 <__b2d+0x4a>
 8008304:	3ff00000 	.word	0x3ff00000

08008308 <__d2b>:
 8008308:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800830c:	2101      	movs	r1, #1
 800830e:	4690      	mov	r8, r2
 8008310:	4699      	mov	r9, r3
 8008312:	9e08      	ldr	r6, [sp, #32]
 8008314:	f7ff fc24 	bl	8007b60 <_Balloc>
 8008318:	4604      	mov	r4, r0
 800831a:	b930      	cbnz	r0, 800832a <__d2b+0x22>
 800831c:	4602      	mov	r2, r0
 800831e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008322:	4b23      	ldr	r3, [pc, #140]	@ (80083b0 <__d2b+0xa8>)
 8008324:	4823      	ldr	r0, [pc, #140]	@ (80083b4 <__d2b+0xac>)
 8008326:	f000 fc8f 	bl	8008c48 <__assert_func>
 800832a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800832e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008332:	b10d      	cbz	r5, 8008338 <__d2b+0x30>
 8008334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f1b8 0300 	subs.w	r3, r8, #0
 800833e:	d024      	beq.n	800838a <__d2b+0x82>
 8008340:	4668      	mov	r0, sp
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	f7ff fd1d 	bl	8007d82 <__lo0bits>
 8008348:	e9dd 1200 	ldrd	r1, r2, [sp]
 800834c:	b1d8      	cbz	r0, 8008386 <__d2b+0x7e>
 800834e:	f1c0 0320 	rsb	r3, r0, #32
 8008352:	fa02 f303 	lsl.w	r3, r2, r3
 8008356:	430b      	orrs	r3, r1
 8008358:	40c2      	lsrs	r2, r0
 800835a:	6163      	str	r3, [r4, #20]
 800835c:	9201      	str	r2, [sp, #4]
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bf0c      	ite	eq
 8008364:	2201      	moveq	r2, #1
 8008366:	2202      	movne	r2, #2
 8008368:	61a3      	str	r3, [r4, #24]
 800836a:	6122      	str	r2, [r4, #16]
 800836c:	b1ad      	cbz	r5, 800839a <__d2b+0x92>
 800836e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008372:	4405      	add	r5, r0
 8008374:	6035      	str	r5, [r6, #0]
 8008376:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800837a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800837c:	6018      	str	r0, [r3, #0]
 800837e:	4620      	mov	r0, r4
 8008380:	b002      	add	sp, #8
 8008382:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008386:	6161      	str	r1, [r4, #20]
 8008388:	e7e9      	b.n	800835e <__d2b+0x56>
 800838a:	a801      	add	r0, sp, #4
 800838c:	f7ff fcf9 	bl	8007d82 <__lo0bits>
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	6163      	str	r3, [r4, #20]
 8008396:	3020      	adds	r0, #32
 8008398:	e7e7      	b.n	800836a <__d2b+0x62>
 800839a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800839e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083a2:	6030      	str	r0, [r6, #0]
 80083a4:	6918      	ldr	r0, [r3, #16]
 80083a6:	f7ff fccd 	bl	8007d44 <__hi0bits>
 80083aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ae:	e7e4      	b.n	800837a <__d2b+0x72>
 80083b0:	0800b76d 	.word	0x0800b76d
 80083b4:	0800b7f5 	.word	0x0800b7f5

080083b8 <__ratio>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	b085      	sub	sp, #20
 80083be:	e9cd 1000 	strd	r1, r0, [sp]
 80083c2:	a902      	add	r1, sp, #8
 80083c4:	f7ff ff58 	bl	8008278 <__b2d>
 80083c8:	468b      	mov	fp, r1
 80083ca:	4606      	mov	r6, r0
 80083cc:	460f      	mov	r7, r1
 80083ce:	9800      	ldr	r0, [sp, #0]
 80083d0:	a903      	add	r1, sp, #12
 80083d2:	f7ff ff51 	bl	8008278 <__b2d>
 80083d6:	460d      	mov	r5, r1
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	4689      	mov	r9, r1
 80083dc:	6919      	ldr	r1, [r3, #16]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	4604      	mov	r4, r0
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	4630      	mov	r0, r6
 80083e6:	1ac9      	subs	r1, r1, r3
 80083e8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfcd      	iteet	gt
 80083f6:	463a      	movgt	r2, r7
 80083f8:	462a      	movle	r2, r5
 80083fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008402:	bfd8      	it	le
 8008404:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008408:	464b      	mov	r3, r9
 800840a:	4622      	mov	r2, r4
 800840c:	4659      	mov	r1, fp
 800840e:	f7f8 f98d 	bl	800072c <__aeabi_ddiv>
 8008412:	b005      	add	sp, #20
 8008414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008418 <__copybits>:
 8008418:	3901      	subs	r1, #1
 800841a:	b570      	push	{r4, r5, r6, lr}
 800841c:	1149      	asrs	r1, r1, #5
 800841e:	6914      	ldr	r4, [r2, #16]
 8008420:	3101      	adds	r1, #1
 8008422:	f102 0314 	add.w	r3, r2, #20
 8008426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800842a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800842e:	1f05      	subs	r5, r0, #4
 8008430:	42a3      	cmp	r3, r4
 8008432:	d30c      	bcc.n	800844e <__copybits+0x36>
 8008434:	1aa3      	subs	r3, r4, r2
 8008436:	3b11      	subs	r3, #17
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	3211      	adds	r2, #17
 800843e:	42a2      	cmp	r2, r4
 8008440:	bf88      	it	hi
 8008442:	2300      	movhi	r3, #0
 8008444:	4418      	add	r0, r3
 8008446:	2300      	movs	r3, #0
 8008448:	4288      	cmp	r0, r1
 800844a:	d305      	bcc.n	8008458 <__copybits+0x40>
 800844c:	bd70      	pop	{r4, r5, r6, pc}
 800844e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008452:	f845 6f04 	str.w	r6, [r5, #4]!
 8008456:	e7eb      	b.n	8008430 <__copybits+0x18>
 8008458:	f840 3b04 	str.w	r3, [r0], #4
 800845c:	e7f4      	b.n	8008448 <__copybits+0x30>

0800845e <__any_on>:
 800845e:	f100 0214 	add.w	r2, r0, #20
 8008462:	6900      	ldr	r0, [r0, #16]
 8008464:	114b      	asrs	r3, r1, #5
 8008466:	4298      	cmp	r0, r3
 8008468:	b510      	push	{r4, lr}
 800846a:	db11      	blt.n	8008490 <__any_on+0x32>
 800846c:	dd0a      	ble.n	8008484 <__any_on+0x26>
 800846e:	f011 011f 	ands.w	r1, r1, #31
 8008472:	d007      	beq.n	8008484 <__any_on+0x26>
 8008474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008478:	fa24 f001 	lsr.w	r0, r4, r1
 800847c:	fa00 f101 	lsl.w	r1, r0, r1
 8008480:	428c      	cmp	r4, r1
 8008482:	d10b      	bne.n	800849c <__any_on+0x3e>
 8008484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008488:	4293      	cmp	r3, r2
 800848a:	d803      	bhi.n	8008494 <__any_on+0x36>
 800848c:	2000      	movs	r0, #0
 800848e:	bd10      	pop	{r4, pc}
 8008490:	4603      	mov	r3, r0
 8008492:	e7f7      	b.n	8008484 <__any_on+0x26>
 8008494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008498:	2900      	cmp	r1, #0
 800849a:	d0f5      	beq.n	8008488 <__any_on+0x2a>
 800849c:	2001      	movs	r0, #1
 800849e:	e7f6      	b.n	800848e <__any_on+0x30>

080084a0 <__ascii_wctomb>:
 80084a0:	4603      	mov	r3, r0
 80084a2:	4608      	mov	r0, r1
 80084a4:	b141      	cbz	r1, 80084b8 <__ascii_wctomb+0x18>
 80084a6:	2aff      	cmp	r2, #255	@ 0xff
 80084a8:	d904      	bls.n	80084b4 <__ascii_wctomb+0x14>
 80084aa:	228a      	movs	r2, #138	@ 0x8a
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	4770      	bx	lr
 80084b4:	2001      	movs	r0, #1
 80084b6:	700a      	strb	r2, [r1, #0]
 80084b8:	4770      	bx	lr

080084ba <__ssputs_r>:
 80084ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084be:	461f      	mov	r7, r3
 80084c0:	688e      	ldr	r6, [r1, #8]
 80084c2:	4682      	mov	sl, r0
 80084c4:	42be      	cmp	r6, r7
 80084c6:	460c      	mov	r4, r1
 80084c8:	4690      	mov	r8, r2
 80084ca:	680b      	ldr	r3, [r1, #0]
 80084cc:	d82d      	bhi.n	800852a <__ssputs_r+0x70>
 80084ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084d6:	d026      	beq.n	8008526 <__ssputs_r+0x6c>
 80084d8:	6965      	ldr	r5, [r4, #20]
 80084da:	6909      	ldr	r1, [r1, #16]
 80084dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e0:	eba3 0901 	sub.w	r9, r3, r1
 80084e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084e8:	1c7b      	adds	r3, r7, #1
 80084ea:	444b      	add	r3, r9
 80084ec:	106d      	asrs	r5, r5, #1
 80084ee:	429d      	cmp	r5, r3
 80084f0:	bf38      	it	cc
 80084f2:	461d      	movcc	r5, r3
 80084f4:	0553      	lsls	r3, r2, #21
 80084f6:	d527      	bpl.n	8008548 <__ssputs_r+0x8e>
 80084f8:	4629      	mov	r1, r5
 80084fa:	f7ff fa93 	bl	8007a24 <_malloc_r>
 80084fe:	4606      	mov	r6, r0
 8008500:	b360      	cbz	r0, 800855c <__ssputs_r+0xa2>
 8008502:	464a      	mov	r2, r9
 8008504:	6921      	ldr	r1, [r4, #16]
 8008506:	f7fe fed4 	bl	80072b2 <memcpy>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	6126      	str	r6, [r4, #16]
 8008518:	444e      	add	r6, r9
 800851a:	6026      	str	r6, [r4, #0]
 800851c:	463e      	mov	r6, r7
 800851e:	6165      	str	r5, [r4, #20]
 8008520:	eba5 0509 	sub.w	r5, r5, r9
 8008524:	60a5      	str	r5, [r4, #8]
 8008526:	42be      	cmp	r6, r7
 8008528:	d900      	bls.n	800852c <__ssputs_r+0x72>
 800852a:	463e      	mov	r6, r7
 800852c:	4632      	mov	r2, r6
 800852e:	4641      	mov	r1, r8
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	f000 fb51 	bl	8008bd8 <memmove>
 8008536:	2000      	movs	r0, #0
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	1b9b      	subs	r3, r3, r6
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4433      	add	r3, r6
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008548:	462a      	mov	r2, r5
 800854a:	f000 fbb7 	bl	8008cbc <_realloc_r>
 800854e:	4606      	mov	r6, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d1e0      	bne.n	8008516 <__ssputs_r+0x5c>
 8008554:	4650      	mov	r0, sl
 8008556:	6921      	ldr	r1, [r4, #16]
 8008558:	f7fe fec0 	bl	80072dc <_free_r>
 800855c:	230c      	movs	r3, #12
 800855e:	f8ca 3000 	str.w	r3, [sl]
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	e7e9      	b.n	8008544 <__ssputs_r+0x8a>

08008570 <_svfiprintf_r>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4698      	mov	r8, r3
 8008576:	898b      	ldrh	r3, [r1, #12]
 8008578:	4607      	mov	r7, r0
 800857a:	061b      	lsls	r3, r3, #24
 800857c:	460d      	mov	r5, r1
 800857e:	4614      	mov	r4, r2
 8008580:	b09d      	sub	sp, #116	@ 0x74
 8008582:	d510      	bpl.n	80085a6 <_svfiprintf_r+0x36>
 8008584:	690b      	ldr	r3, [r1, #16]
 8008586:	b973      	cbnz	r3, 80085a6 <_svfiprintf_r+0x36>
 8008588:	2140      	movs	r1, #64	@ 0x40
 800858a:	f7ff fa4b 	bl	8007a24 <_malloc_r>
 800858e:	6028      	str	r0, [r5, #0]
 8008590:	6128      	str	r0, [r5, #16]
 8008592:	b930      	cbnz	r0, 80085a2 <_svfiprintf_r+0x32>
 8008594:	230c      	movs	r3, #12
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	b01d      	add	sp, #116	@ 0x74
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	2340      	movs	r3, #64	@ 0x40
 80085a4:	616b      	str	r3, [r5, #20]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085aa:	2320      	movs	r3, #32
 80085ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085b0:	2330      	movs	r3, #48	@ 0x30
 80085b2:	f04f 0901 	mov.w	r9, #1
 80085b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008754 <_svfiprintf_r+0x1e4>
 80085be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c2:	4623      	mov	r3, r4
 80085c4:	469a      	mov	sl, r3
 80085c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ca:	b10a      	cbz	r2, 80085d0 <_svfiprintf_r+0x60>
 80085cc:	2a25      	cmp	r2, #37	@ 0x25
 80085ce:	d1f9      	bne.n	80085c4 <_svfiprintf_r+0x54>
 80085d0:	ebba 0b04 	subs.w	fp, sl, r4
 80085d4:	d00b      	beq.n	80085ee <_svfiprintf_r+0x7e>
 80085d6:	465b      	mov	r3, fp
 80085d8:	4622      	mov	r2, r4
 80085da:	4629      	mov	r1, r5
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ff6c 	bl	80084ba <__ssputs_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	f000 80a7 	beq.w	8008736 <_svfiprintf_r+0x1c6>
 80085e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ea:	445a      	add	r2, fp
 80085ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ee:	f89a 3000 	ldrb.w	r3, [sl]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 809f 	beq.w	8008736 <_svfiprintf_r+0x1c6>
 80085f8:	2300      	movs	r3, #0
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295
 80085fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008602:	f10a 0a01 	add.w	sl, sl, #1
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	9307      	str	r3, [sp, #28]
 800860a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800860e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008610:	4654      	mov	r4, sl
 8008612:	2205      	movs	r2, #5
 8008614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008618:	484e      	ldr	r0, [pc, #312]	@ (8008754 <_svfiprintf_r+0x1e4>)
 800861a:	f000 fb07 	bl	8008c2c <memchr>
 800861e:	9a04      	ldr	r2, [sp, #16]
 8008620:	b9d8      	cbnz	r0, 800865a <_svfiprintf_r+0xea>
 8008622:	06d0      	lsls	r0, r2, #27
 8008624:	bf44      	itt	mi
 8008626:	2320      	movmi	r3, #32
 8008628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800862c:	0711      	lsls	r1, r2, #28
 800862e:	bf44      	itt	mi
 8008630:	232b      	movmi	r3, #43	@ 0x2b
 8008632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b2a      	cmp	r3, #42	@ 0x2a
 800863c:	d015      	beq.n	800866a <_svfiprintf_r+0xfa>
 800863e:	4654      	mov	r4, sl
 8008640:	2000      	movs	r0, #0
 8008642:	f04f 0c0a 	mov.w	ip, #10
 8008646:	9a07      	ldr	r2, [sp, #28]
 8008648:	4621      	mov	r1, r4
 800864a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800864e:	3b30      	subs	r3, #48	@ 0x30
 8008650:	2b09      	cmp	r3, #9
 8008652:	d94b      	bls.n	80086ec <_svfiprintf_r+0x17c>
 8008654:	b1b0      	cbz	r0, 8008684 <_svfiprintf_r+0x114>
 8008656:	9207      	str	r2, [sp, #28]
 8008658:	e014      	b.n	8008684 <_svfiprintf_r+0x114>
 800865a:	eba0 0308 	sub.w	r3, r0, r8
 800865e:	fa09 f303 	lsl.w	r3, r9, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	46a2      	mov	sl, r4
 8008666:	9304      	str	r3, [sp, #16]
 8008668:	e7d2      	b.n	8008610 <_svfiprintf_r+0xa0>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1d19      	adds	r1, r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	9103      	str	r1, [sp, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	bfbb      	ittet	lt
 8008676:	425b      	neglt	r3, r3
 8008678:	f042 0202 	orrlt.w	r2, r2, #2
 800867c:	9307      	strge	r3, [sp, #28]
 800867e:	9307      	strlt	r3, [sp, #28]
 8008680:	bfb8      	it	lt
 8008682:	9204      	strlt	r2, [sp, #16]
 8008684:	7823      	ldrb	r3, [r4, #0]
 8008686:	2b2e      	cmp	r3, #46	@ 0x2e
 8008688:	d10a      	bne.n	80086a0 <_svfiprintf_r+0x130>
 800868a:	7863      	ldrb	r3, [r4, #1]
 800868c:	2b2a      	cmp	r3, #42	@ 0x2a
 800868e:	d132      	bne.n	80086f6 <_svfiprintf_r+0x186>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	3402      	adds	r4, #2
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9203      	str	r2, [sp, #12]
 800869a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008758 <_svfiprintf_r+0x1e8>
 80086a4:	2203      	movs	r2, #3
 80086a6:	4650      	mov	r0, sl
 80086a8:	7821      	ldrb	r1, [r4, #0]
 80086aa:	f000 fabf 	bl	8008c2c <memchr>
 80086ae:	b138      	cbz	r0, 80086c0 <_svfiprintf_r+0x150>
 80086b0:	2240      	movs	r2, #64	@ 0x40
 80086b2:	9b04      	ldr	r3, [sp, #16]
 80086b4:	eba0 000a 	sub.w	r0, r0, sl
 80086b8:	4082      	lsls	r2, r0
 80086ba:	4313      	orrs	r3, r2
 80086bc:	3401      	adds	r4, #1
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	2206      	movs	r2, #6
 80086c6:	4825      	ldr	r0, [pc, #148]	@ (800875c <_svfiprintf_r+0x1ec>)
 80086c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086cc:	f000 faae 	bl	8008c2c <memchr>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d036      	beq.n	8008742 <_svfiprintf_r+0x1d2>
 80086d4:	4b22      	ldr	r3, [pc, #136]	@ (8008760 <_svfiprintf_r+0x1f0>)
 80086d6:	bb1b      	cbnz	r3, 8008720 <_svfiprintf_r+0x1b0>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	3307      	adds	r3, #7
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	3308      	adds	r3, #8
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e6:	4433      	add	r3, r6
 80086e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ea:	e76a      	b.n	80085c2 <_svfiprintf_r+0x52>
 80086ec:	460c      	mov	r4, r1
 80086ee:	2001      	movs	r0, #1
 80086f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f4:	e7a8      	b.n	8008648 <_svfiprintf_r+0xd8>
 80086f6:	2300      	movs	r3, #0
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4619      	mov	r1, r3
 80086fe:	3401      	adds	r4, #1
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	4620      	mov	r0, r4
 8008704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008708:	3a30      	subs	r2, #48	@ 0x30
 800870a:	2a09      	cmp	r2, #9
 800870c:	d903      	bls.n	8008716 <_svfiprintf_r+0x1a6>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0c6      	beq.n	80086a0 <_svfiprintf_r+0x130>
 8008712:	9105      	str	r1, [sp, #20]
 8008714:	e7c4      	b.n	80086a0 <_svfiprintf_r+0x130>
 8008716:	4604      	mov	r4, r0
 8008718:	2301      	movs	r3, #1
 800871a:	fb0c 2101 	mla	r1, ip, r1, r2
 800871e:	e7f0      	b.n	8008702 <_svfiprintf_r+0x192>
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	462a      	mov	r2, r5
 8008726:	4638      	mov	r0, r7
 8008728:	4b0e      	ldr	r3, [pc, #56]	@ (8008764 <_svfiprintf_r+0x1f4>)
 800872a:	a904      	add	r1, sp, #16
 800872c:	f3af 8000 	nop.w
 8008730:	1c42      	adds	r2, r0, #1
 8008732:	4606      	mov	r6, r0
 8008734:	d1d6      	bne.n	80086e4 <_svfiprintf_r+0x174>
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	065b      	lsls	r3, r3, #25
 800873a:	f53f af2d 	bmi.w	8008598 <_svfiprintf_r+0x28>
 800873e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008740:	e72c      	b.n	800859c <_svfiprintf_r+0x2c>
 8008742:	ab03      	add	r3, sp, #12
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	462a      	mov	r2, r5
 8008748:	4638      	mov	r0, r7
 800874a:	4b06      	ldr	r3, [pc, #24]	@ (8008764 <_svfiprintf_r+0x1f4>)
 800874c:	a904      	add	r1, sp, #16
 800874e:	f000 f87d 	bl	800884c <_printf_i>
 8008752:	e7ed      	b.n	8008730 <_svfiprintf_r+0x1c0>
 8008754:	0800b84e 	.word	0x0800b84e
 8008758:	0800b854 	.word	0x0800b854
 800875c:	0800b858 	.word	0x0800b858
 8008760:	00000000 	.word	0x00000000
 8008764:	080084bb 	.word	0x080084bb

08008768 <_printf_common>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	4698      	mov	r8, r3
 8008770:	688a      	ldr	r2, [r1, #8]
 8008772:	690b      	ldr	r3, [r1, #16]
 8008774:	4607      	mov	r7, r0
 8008776:	4293      	cmp	r3, r2
 8008778:	bfb8      	it	lt
 800877a:	4613      	movlt	r3, r2
 800877c:	6033      	str	r3, [r6, #0]
 800877e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008782:	460c      	mov	r4, r1
 8008784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008788:	b10a      	cbz	r2, 800878e <_printf_common+0x26>
 800878a:	3301      	adds	r3, #1
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	0699      	lsls	r1, r3, #26
 8008792:	bf42      	ittt	mi
 8008794:	6833      	ldrmi	r3, [r6, #0]
 8008796:	3302      	addmi	r3, #2
 8008798:	6033      	strmi	r3, [r6, #0]
 800879a:	6825      	ldr	r5, [r4, #0]
 800879c:	f015 0506 	ands.w	r5, r5, #6
 80087a0:	d106      	bne.n	80087b0 <_printf_common+0x48>
 80087a2:	f104 0a19 	add.w	sl, r4, #25
 80087a6:	68e3      	ldr	r3, [r4, #12]
 80087a8:	6832      	ldr	r2, [r6, #0]
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dc2b      	bgt.n	8008808 <_printf_common+0xa0>
 80087b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	3b00      	subs	r3, #0
 80087b8:	bf18      	it	ne
 80087ba:	2301      	movne	r3, #1
 80087bc:	0692      	lsls	r2, r2, #26
 80087be:	d430      	bmi.n	8008822 <_printf_common+0xba>
 80087c0:	4641      	mov	r1, r8
 80087c2:	4638      	mov	r0, r7
 80087c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087c8:	47c8      	blx	r9
 80087ca:	3001      	adds	r0, #1
 80087cc:	d023      	beq.n	8008816 <_printf_common+0xae>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	6922      	ldr	r2, [r4, #16]
 80087d2:	f003 0306 	and.w	r3, r3, #6
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	bf14      	ite	ne
 80087da:	2500      	movne	r5, #0
 80087dc:	6833      	ldreq	r3, [r6, #0]
 80087de:	f04f 0600 	mov.w	r6, #0
 80087e2:	bf08      	it	eq
 80087e4:	68e5      	ldreq	r5, [r4, #12]
 80087e6:	f104 041a 	add.w	r4, r4, #26
 80087ea:	bf08      	it	eq
 80087ec:	1aed      	subeq	r5, r5, r3
 80087ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087f2:	bf08      	it	eq
 80087f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bfc4      	itt	gt
 80087fc:	1a9b      	subgt	r3, r3, r2
 80087fe:	18ed      	addgt	r5, r5, r3
 8008800:	42b5      	cmp	r5, r6
 8008802:	d11a      	bne.n	800883a <_printf_common+0xd2>
 8008804:	2000      	movs	r0, #0
 8008806:	e008      	b.n	800881a <_printf_common+0xb2>
 8008808:	2301      	movs	r3, #1
 800880a:	4652      	mov	r2, sl
 800880c:	4641      	mov	r1, r8
 800880e:	4638      	mov	r0, r7
 8008810:	47c8      	blx	r9
 8008812:	3001      	adds	r0, #1
 8008814:	d103      	bne.n	800881e <_printf_common+0xb6>
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881e:	3501      	adds	r5, #1
 8008820:	e7c1      	b.n	80087a6 <_printf_common+0x3e>
 8008822:	2030      	movs	r0, #48	@ 0x30
 8008824:	18e1      	adds	r1, r4, r3
 8008826:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008830:	4422      	add	r2, r4
 8008832:	3302      	adds	r3, #2
 8008834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008838:	e7c2      	b.n	80087c0 <_printf_common+0x58>
 800883a:	2301      	movs	r3, #1
 800883c:	4622      	mov	r2, r4
 800883e:	4641      	mov	r1, r8
 8008840:	4638      	mov	r0, r7
 8008842:	47c8      	blx	r9
 8008844:	3001      	adds	r0, #1
 8008846:	d0e6      	beq.n	8008816 <_printf_common+0xae>
 8008848:	3601      	adds	r6, #1
 800884a:	e7d9      	b.n	8008800 <_printf_common+0x98>

0800884c <_printf_i>:
 800884c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	7e0f      	ldrb	r7, [r1, #24]
 8008852:	4691      	mov	r9, r2
 8008854:	2f78      	cmp	r7, #120	@ 0x78
 8008856:	4680      	mov	r8, r0
 8008858:	460c      	mov	r4, r1
 800885a:	469a      	mov	sl, r3
 800885c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800885e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008862:	d807      	bhi.n	8008874 <_printf_i+0x28>
 8008864:	2f62      	cmp	r7, #98	@ 0x62
 8008866:	d80a      	bhi.n	800887e <_printf_i+0x32>
 8008868:	2f00      	cmp	r7, #0
 800886a:	f000 80d1 	beq.w	8008a10 <_printf_i+0x1c4>
 800886e:	2f58      	cmp	r7, #88	@ 0x58
 8008870:	f000 80b8 	beq.w	80089e4 <_printf_i+0x198>
 8008874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008878:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800887c:	e03a      	b.n	80088f4 <_printf_i+0xa8>
 800887e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008882:	2b15      	cmp	r3, #21
 8008884:	d8f6      	bhi.n	8008874 <_printf_i+0x28>
 8008886:	a101      	add	r1, pc, #4	@ (adr r1, 800888c <_printf_i+0x40>)
 8008888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800888c:	080088e5 	.word	0x080088e5
 8008890:	080088f9 	.word	0x080088f9
 8008894:	08008875 	.word	0x08008875
 8008898:	08008875 	.word	0x08008875
 800889c:	08008875 	.word	0x08008875
 80088a0:	08008875 	.word	0x08008875
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008875 	.word	0x08008875
 80088ac:	08008875 	.word	0x08008875
 80088b0:	08008875 	.word	0x08008875
 80088b4:	08008875 	.word	0x08008875
 80088b8:	080089f7 	.word	0x080089f7
 80088bc:	08008923 	.word	0x08008923
 80088c0:	080089b1 	.word	0x080089b1
 80088c4:	08008875 	.word	0x08008875
 80088c8:	08008875 	.word	0x08008875
 80088cc:	08008a19 	.word	0x08008a19
 80088d0:	08008875 	.word	0x08008875
 80088d4:	08008923 	.word	0x08008923
 80088d8:	08008875 	.word	0x08008875
 80088dc:	08008875 	.word	0x08008875
 80088e0:	080089b9 	.word	0x080089b9
 80088e4:	6833      	ldr	r3, [r6, #0]
 80088e6:	1d1a      	adds	r2, r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6032      	str	r2, [r6, #0]
 80088ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088f4:	2301      	movs	r3, #1
 80088f6:	e09c      	b.n	8008a32 <_printf_i+0x1e6>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	6820      	ldr	r0, [r4, #0]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	6031      	str	r1, [r6, #0]
 8008900:	0606      	lsls	r6, r0, #24
 8008902:	d501      	bpl.n	8008908 <_printf_i+0xbc>
 8008904:	681d      	ldr	r5, [r3, #0]
 8008906:	e003      	b.n	8008910 <_printf_i+0xc4>
 8008908:	0645      	lsls	r5, r0, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0xb8>
 800890c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008910:	2d00      	cmp	r5, #0
 8008912:	da03      	bge.n	800891c <_printf_i+0xd0>
 8008914:	232d      	movs	r3, #45	@ 0x2d
 8008916:	426d      	negs	r5, r5
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800891c:	230a      	movs	r3, #10
 800891e:	4858      	ldr	r0, [pc, #352]	@ (8008a80 <_printf_i+0x234>)
 8008920:	e011      	b.n	8008946 <_printf_i+0xfa>
 8008922:	6821      	ldr	r1, [r4, #0]
 8008924:	6833      	ldr	r3, [r6, #0]
 8008926:	0608      	lsls	r0, r1, #24
 8008928:	f853 5b04 	ldr.w	r5, [r3], #4
 800892c:	d402      	bmi.n	8008934 <_printf_i+0xe8>
 800892e:	0649      	lsls	r1, r1, #25
 8008930:	bf48      	it	mi
 8008932:	b2ad      	uxthmi	r5, r5
 8008934:	2f6f      	cmp	r7, #111	@ 0x6f
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	bf14      	ite	ne
 800893a:	230a      	movne	r3, #10
 800893c:	2308      	moveq	r3, #8
 800893e:	4850      	ldr	r0, [pc, #320]	@ (8008a80 <_printf_i+0x234>)
 8008940:	2100      	movs	r1, #0
 8008942:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008946:	6866      	ldr	r6, [r4, #4]
 8008948:	2e00      	cmp	r6, #0
 800894a:	60a6      	str	r6, [r4, #8]
 800894c:	db05      	blt.n	800895a <_printf_i+0x10e>
 800894e:	6821      	ldr	r1, [r4, #0]
 8008950:	432e      	orrs	r6, r5
 8008952:	f021 0104 	bic.w	r1, r1, #4
 8008956:	6021      	str	r1, [r4, #0]
 8008958:	d04b      	beq.n	80089f2 <_printf_i+0x1a6>
 800895a:	4616      	mov	r6, r2
 800895c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008960:	fb03 5711 	mls	r7, r3, r1, r5
 8008964:	5dc7      	ldrb	r7, [r0, r7]
 8008966:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800896a:	462f      	mov	r7, r5
 800896c:	42bb      	cmp	r3, r7
 800896e:	460d      	mov	r5, r1
 8008970:	d9f4      	bls.n	800895c <_printf_i+0x110>
 8008972:	2b08      	cmp	r3, #8
 8008974:	d10b      	bne.n	800898e <_printf_i+0x142>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	07df      	lsls	r7, r3, #31
 800897a:	d508      	bpl.n	800898e <_printf_i+0x142>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	6861      	ldr	r1, [r4, #4]
 8008980:	4299      	cmp	r1, r3
 8008982:	bfde      	ittt	le
 8008984:	2330      	movle	r3, #48	@ 0x30
 8008986:	f806 3c01 	strble.w	r3, [r6, #-1]
 800898a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800898e:	1b92      	subs	r2, r2, r6
 8008990:	6122      	str	r2, [r4, #16]
 8008992:	464b      	mov	r3, r9
 8008994:	4621      	mov	r1, r4
 8008996:	4640      	mov	r0, r8
 8008998:	f8cd a000 	str.w	sl, [sp]
 800899c:	aa03      	add	r2, sp, #12
 800899e:	f7ff fee3 	bl	8008768 <_printf_common>
 80089a2:	3001      	adds	r0, #1
 80089a4:	d14a      	bne.n	8008a3c <_printf_i+0x1f0>
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	b004      	add	sp, #16
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	f043 0320 	orr.w	r3, r3, #32
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	2778      	movs	r7, #120	@ 0x78
 80089ba:	4832      	ldr	r0, [pc, #200]	@ (8008a84 <_printf_i+0x238>)
 80089bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	6831      	ldr	r1, [r6, #0]
 80089c4:	061f      	lsls	r7, r3, #24
 80089c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ca:	d402      	bmi.n	80089d2 <_printf_i+0x186>
 80089cc:	065f      	lsls	r7, r3, #25
 80089ce:	bf48      	it	mi
 80089d0:	b2ad      	uxthmi	r5, r5
 80089d2:	6031      	str	r1, [r6, #0]
 80089d4:	07d9      	lsls	r1, r3, #31
 80089d6:	bf44      	itt	mi
 80089d8:	f043 0320 	orrmi.w	r3, r3, #32
 80089dc:	6023      	strmi	r3, [r4, #0]
 80089de:	b11d      	cbz	r5, 80089e8 <_printf_i+0x19c>
 80089e0:	2310      	movs	r3, #16
 80089e2:	e7ad      	b.n	8008940 <_printf_i+0xf4>
 80089e4:	4826      	ldr	r0, [pc, #152]	@ (8008a80 <_printf_i+0x234>)
 80089e6:	e7e9      	b.n	80089bc <_printf_i+0x170>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	f023 0320 	bic.w	r3, r3, #32
 80089ee:	6023      	str	r3, [r4, #0]
 80089f0:	e7f6      	b.n	80089e0 <_printf_i+0x194>
 80089f2:	4616      	mov	r6, r2
 80089f4:	e7bd      	b.n	8008972 <_printf_i+0x126>
 80089f6:	6833      	ldr	r3, [r6, #0]
 80089f8:	6825      	ldr	r5, [r4, #0]
 80089fa:	1d18      	adds	r0, r3, #4
 80089fc:	6961      	ldr	r1, [r4, #20]
 80089fe:	6030      	str	r0, [r6, #0]
 8008a00:	062e      	lsls	r6, r5, #24
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	d501      	bpl.n	8008a0a <_printf_i+0x1be>
 8008a06:	6019      	str	r1, [r3, #0]
 8008a08:	e002      	b.n	8008a10 <_printf_i+0x1c4>
 8008a0a:	0668      	lsls	r0, r5, #25
 8008a0c:	d5fb      	bpl.n	8008a06 <_printf_i+0x1ba>
 8008a0e:	8019      	strh	r1, [r3, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	4616      	mov	r6, r2
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	e7bc      	b.n	8008992 <_printf_i+0x146>
 8008a18:	6833      	ldr	r3, [r6, #0]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	6032      	str	r2, [r6, #0]
 8008a20:	681e      	ldr	r6, [r3, #0]
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 f901 	bl	8008c2c <memchr>
 8008a2a:	b108      	cbz	r0, 8008a30 <_printf_i+0x1e4>
 8008a2c:	1b80      	subs	r0, r0, r6
 8008a2e:	6060      	str	r0, [r4, #4]
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	6123      	str	r3, [r4, #16]
 8008a34:	2300      	movs	r3, #0
 8008a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a3a:	e7aa      	b.n	8008992 <_printf_i+0x146>
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	47d0      	blx	sl
 8008a46:	3001      	adds	r0, #1
 8008a48:	d0ad      	beq.n	80089a6 <_printf_i+0x15a>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	079b      	lsls	r3, r3, #30
 8008a4e:	d413      	bmi.n	8008a78 <_printf_i+0x22c>
 8008a50:	68e0      	ldr	r0, [r4, #12]
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	4298      	cmp	r0, r3
 8008a56:	bfb8      	it	lt
 8008a58:	4618      	movlt	r0, r3
 8008a5a:	e7a6      	b.n	80089aa <_printf_i+0x15e>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4632      	mov	r2, r6
 8008a60:	4649      	mov	r1, r9
 8008a62:	4640      	mov	r0, r8
 8008a64:	47d0      	blx	sl
 8008a66:	3001      	adds	r0, #1
 8008a68:	d09d      	beq.n	80089a6 <_printf_i+0x15a>
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	68e3      	ldr	r3, [r4, #12]
 8008a6e:	9903      	ldr	r1, [sp, #12]
 8008a70:	1a5b      	subs	r3, r3, r1
 8008a72:	42ab      	cmp	r3, r5
 8008a74:	dcf2      	bgt.n	8008a5c <_printf_i+0x210>
 8008a76:	e7eb      	b.n	8008a50 <_printf_i+0x204>
 8008a78:	2500      	movs	r5, #0
 8008a7a:	f104 0619 	add.w	r6, r4, #25
 8008a7e:	e7f5      	b.n	8008a6c <_printf_i+0x220>
 8008a80:	0800b85f 	.word	0x0800b85f
 8008a84:	0800b870 	.word	0x0800b870

08008a88 <__sflush_r>:
 8008a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	0716      	lsls	r6, r2, #28
 8008a90:	4605      	mov	r5, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	d454      	bmi.n	8008b40 <__sflush_r+0xb8>
 8008a96:	684b      	ldr	r3, [r1, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc02      	bgt.n	8008aa2 <__sflush_r+0x1a>
 8008a9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	dd48      	ble.n	8008b34 <__sflush_r+0xac>
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	d045      	beq.n	8008b34 <__sflush_r+0xac>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008aae:	682f      	ldr	r7, [r5, #0]
 8008ab0:	6a21      	ldr	r1, [r4, #32]
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	d030      	beq.n	8008b18 <__sflush_r+0x90>
 8008ab6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	0759      	lsls	r1, r3, #29
 8008abc:	d505      	bpl.n	8008aca <__sflush_r+0x42>
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	1ad2      	subs	r2, r2, r3
 8008ac2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ac4:	b10b      	cbz	r3, 8008aca <__sflush_r+0x42>
 8008ac6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	4628      	mov	r0, r5
 8008ace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ad0:	6a21      	ldr	r1, [r4, #32]
 8008ad2:	47b0      	blx	r6
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	d106      	bne.n	8008ae8 <__sflush_r+0x60>
 8008ada:	6829      	ldr	r1, [r5, #0]
 8008adc:	291d      	cmp	r1, #29
 8008ade:	d82b      	bhi.n	8008b38 <__sflush_r+0xb0>
 8008ae0:	4a28      	ldr	r2, [pc, #160]	@ (8008b84 <__sflush_r+0xfc>)
 8008ae2:	40ca      	lsrs	r2, r1
 8008ae4:	07d6      	lsls	r6, r2, #31
 8008ae6:	d527      	bpl.n	8008b38 <__sflush_r+0xb0>
 8008ae8:	2200      	movs	r2, #0
 8008aea:	6062      	str	r2, [r4, #4]
 8008aec:	6922      	ldr	r2, [r4, #16]
 8008aee:	04d9      	lsls	r1, r3, #19
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	d504      	bpl.n	8008afe <__sflush_r+0x76>
 8008af4:	1c42      	adds	r2, r0, #1
 8008af6:	d101      	bne.n	8008afc <__sflush_r+0x74>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b903      	cbnz	r3, 8008afe <__sflush_r+0x76>
 8008afc:	6560      	str	r0, [r4, #84]	@ 0x54
 8008afe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b00:	602f      	str	r7, [r5, #0]
 8008b02:	b1b9      	cbz	r1, 8008b34 <__sflush_r+0xac>
 8008b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	d002      	beq.n	8008b12 <__sflush_r+0x8a>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7fe fbe5 	bl	80072dc <_free_r>
 8008b12:	2300      	movs	r3, #0
 8008b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b16:	e00d      	b.n	8008b34 <__sflush_r+0xac>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b0      	blx	r6
 8008b1e:	4602      	mov	r2, r0
 8008b20:	1c50      	adds	r0, r2, #1
 8008b22:	d1c9      	bne.n	8008ab8 <__sflush_r+0x30>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0c6      	beq.n	8008ab8 <__sflush_r+0x30>
 8008b2a:	2b1d      	cmp	r3, #29
 8008b2c:	d001      	beq.n	8008b32 <__sflush_r+0xaa>
 8008b2e:	2b16      	cmp	r3, #22
 8008b30:	d11d      	bne.n	8008b6e <__sflush_r+0xe6>
 8008b32:	602f      	str	r7, [r5, #0]
 8008b34:	2000      	movs	r0, #0
 8008b36:	e021      	b.n	8008b7c <__sflush_r+0xf4>
 8008b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b3c:	b21b      	sxth	r3, r3
 8008b3e:	e01a      	b.n	8008b76 <__sflush_r+0xee>
 8008b40:	690f      	ldr	r7, [r1, #16]
 8008b42:	2f00      	cmp	r7, #0
 8008b44:	d0f6      	beq.n	8008b34 <__sflush_r+0xac>
 8008b46:	0793      	lsls	r3, r2, #30
 8008b48:	bf18      	it	ne
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	680e      	ldr	r6, [r1, #0]
 8008b4e:	bf08      	it	eq
 8008b50:	694b      	ldreq	r3, [r1, #20]
 8008b52:	1bf6      	subs	r6, r6, r7
 8008b54:	600f      	str	r7, [r1, #0]
 8008b56:	608b      	str	r3, [r1, #8]
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	ddeb      	ble.n	8008b34 <__sflush_r+0xac>
 8008b5c:	4633      	mov	r3, r6
 8008b5e:	463a      	mov	r2, r7
 8008b60:	4628      	mov	r0, r5
 8008b62:	6a21      	ldr	r1, [r4, #32]
 8008b64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008b68:	47e0      	blx	ip
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	dc07      	bgt.n	8008b7e <__sflush_r+0xf6>
 8008b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b76:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7e:	4407      	add	r7, r0
 8008b80:	1a36      	subs	r6, r6, r0
 8008b82:	e7e9      	b.n	8008b58 <__sflush_r+0xd0>
 8008b84:	20400001 	.word	0x20400001

08008b88 <_fflush_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	690b      	ldr	r3, [r1, #16]
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	b913      	cbnz	r3, 8008b98 <_fflush_r+0x10>
 8008b92:	2500      	movs	r5, #0
 8008b94:	4628      	mov	r0, r5
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
 8008b98:	b118      	cbz	r0, 8008ba2 <_fflush_r+0x1a>
 8008b9a:	6a03      	ldr	r3, [r0, #32]
 8008b9c:	b90b      	cbnz	r3, 8008ba2 <_fflush_r+0x1a>
 8008b9e:	f7fe fa0f 	bl	8006fc0 <__sinit>
 8008ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f3      	beq.n	8008b92 <_fflush_r+0xa>
 8008baa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bac:	07d0      	lsls	r0, r2, #31
 8008bae:	d404      	bmi.n	8008bba <_fflush_r+0x32>
 8008bb0:	0599      	lsls	r1, r3, #22
 8008bb2:	d402      	bmi.n	8008bba <_fflush_r+0x32>
 8008bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bb6:	f7fe fb72 	bl	800729e <__retarget_lock_acquire_recursive>
 8008bba:	4628      	mov	r0, r5
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	f7ff ff63 	bl	8008a88 <__sflush_r>
 8008bc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	07da      	lsls	r2, r3, #31
 8008bc8:	d4e4      	bmi.n	8008b94 <_fflush_r+0xc>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	059b      	lsls	r3, r3, #22
 8008bce:	d4e1      	bmi.n	8008b94 <_fflush_r+0xc>
 8008bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bd2:	f7fe fb65 	bl	80072a0 <__retarget_lock_release_recursive>
 8008bd6:	e7dd      	b.n	8008b94 <_fflush_r+0xc>

08008bd8 <memmove>:
 8008bd8:	4288      	cmp	r0, r1
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	eb01 0402 	add.w	r4, r1, r2
 8008be0:	d902      	bls.n	8008be8 <memmove+0x10>
 8008be2:	4284      	cmp	r4, r0
 8008be4:	4623      	mov	r3, r4
 8008be6:	d807      	bhi.n	8008bf8 <memmove+0x20>
 8008be8:	1e43      	subs	r3, r0, #1
 8008bea:	42a1      	cmp	r1, r4
 8008bec:	d008      	beq.n	8008c00 <memmove+0x28>
 8008bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bf6:	e7f8      	b.n	8008bea <memmove+0x12>
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	4402      	add	r2, r0
 8008bfc:	428a      	cmp	r2, r1
 8008bfe:	d100      	bne.n	8008c02 <memmove+0x2a>
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c0a:	e7f7      	b.n	8008bfc <memmove+0x24>

08008c0c <_sbrk_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4d05      	ldr	r5, [pc, #20]	@ (8008c28 <_sbrk_r+0x1c>)
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	f7fa fafe 	bl	8003218 <_sbrk>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_sbrk_r+0x1a>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_sbrk_r+0x1a>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	200046b8 	.word	0x200046b8

08008c2c <memchr>:
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	b510      	push	{r4, lr}
 8008c30:	b2c9      	uxtb	r1, r1
 8008c32:	4402      	add	r2, r0
 8008c34:	4293      	cmp	r3, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	d101      	bne.n	8008c3e <memchr+0x12>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e003      	b.n	8008c46 <memchr+0x1a>
 8008c3e:	7804      	ldrb	r4, [r0, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	428c      	cmp	r4, r1
 8008c44:	d1f6      	bne.n	8008c34 <memchr+0x8>
 8008c46:	bd10      	pop	{r4, pc}

08008c48 <__assert_func>:
 8008c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c4a:	4614      	mov	r4, r2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4b09      	ldr	r3, [pc, #36]	@ (8008c74 <__assert_func+0x2c>)
 8008c50:	4605      	mov	r5, r0
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68d8      	ldr	r0, [r3, #12]
 8008c56:	b14c      	cbz	r4, 8008c6c <__assert_func+0x24>
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <__assert_func+0x30>)
 8008c5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c5e:	9100      	str	r1, [sp, #0]
 8008c60:	462b      	mov	r3, r5
 8008c62:	4906      	ldr	r1, [pc, #24]	@ (8008c7c <__assert_func+0x34>)
 8008c64:	f000 f858 	bl	8008d18 <fiprintf>
 8008c68:	f000 f868 	bl	8008d3c <abort>
 8008c6c:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <__assert_func+0x38>)
 8008c6e:	461c      	mov	r4, r3
 8008c70:	e7f3      	b.n	8008c5a <__assert_func+0x12>
 8008c72:	bf00      	nop
 8008c74:	20000300 	.word	0x20000300
 8008c78:	0800b881 	.word	0x0800b881
 8008c7c:	0800b88e 	.word	0x0800b88e
 8008c80:	0800afb3 	.word	0x0800afb3

08008c84 <_calloc_r>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	fba1 5402 	umull	r5, r4, r1, r2
 8008c8a:	b934      	cbnz	r4, 8008c9a <_calloc_r+0x16>
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	f7fe fec9 	bl	8007a24 <_malloc_r>
 8008c92:	4606      	mov	r6, r0
 8008c94:	b928      	cbnz	r0, 8008ca2 <_calloc_r+0x1e>
 8008c96:	4630      	mov	r0, r6
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	220c      	movs	r2, #12
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	6002      	str	r2, [r0, #0]
 8008ca0:	e7f9      	b.n	8008c96 <_calloc_r+0x12>
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f7fe fa5c 	bl	8007162 <memset>
 8008caa:	e7f4      	b.n	8008c96 <_calloc_r+0x12>

08008cac <malloc>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	@ (8008cb8 <malloc+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7fe beb7 	b.w	8007a24 <_malloc_r>
 8008cb6:	bf00      	nop
 8008cb8:	20000300 	.word	0x20000300

08008cbc <_realloc_r>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	b921      	cbnz	r1, 8008cd2 <_realloc_r+0x16>
 8008cc8:	4611      	mov	r1, r2
 8008cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cce:	f7fe bea9 	b.w	8007a24 <_malloc_r>
 8008cd2:	b92a      	cbnz	r2, 8008ce0 <_realloc_r+0x24>
 8008cd4:	f7fe fb02 	bl	80072dc <_free_r>
 8008cd8:	4625      	mov	r5, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	f000 f833 	bl	8008d4a <_malloc_usable_size_r>
 8008ce4:	4284      	cmp	r4, r0
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	d802      	bhi.n	8008cf0 <_realloc_r+0x34>
 8008cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cee:	d8f4      	bhi.n	8008cda <_realloc_r+0x1e>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7fe fe96 	bl	8007a24 <_malloc_r>
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	b908      	cbnz	r0, 8008d00 <_realloc_r+0x44>
 8008cfc:	4645      	mov	r5, r8
 8008cfe:	e7ec      	b.n	8008cda <_realloc_r+0x1e>
 8008d00:	42b4      	cmp	r4, r6
 8008d02:	4622      	mov	r2, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	bf28      	it	cs
 8008d08:	4632      	movcs	r2, r6
 8008d0a:	f7fe fad2 	bl	80072b2 <memcpy>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7fe fae3 	bl	80072dc <_free_r>
 8008d16:	e7f1      	b.n	8008cfc <_realloc_r+0x40>

08008d18 <fiprintf>:
 8008d18:	b40e      	push	{r1, r2, r3}
 8008d1a:	b503      	push	{r0, r1, lr}
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	ab03      	add	r3, sp, #12
 8008d20:	4805      	ldr	r0, [pc, #20]	@ (8008d38 <fiprintf+0x20>)
 8008d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d26:	6800      	ldr	r0, [r0, #0]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	f000 f83d 	bl	8008da8 <_vfiprintf_r>
 8008d2e:	b002      	add	sp, #8
 8008d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d34:	b003      	add	sp, #12
 8008d36:	4770      	bx	lr
 8008d38:	20000300 	.word	0x20000300

08008d3c <abort>:
 8008d3c:	2006      	movs	r0, #6
 8008d3e:	b508      	push	{r3, lr}
 8008d40:	f000 fa06 	bl	8009150 <raise>
 8008d44:	2001      	movs	r0, #1
 8008d46:	f7fa fa39 	bl	80031bc <_exit>

08008d4a <_malloc_usable_size_r>:
 8008d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4e:	1f18      	subs	r0, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	bfbc      	itt	lt
 8008d54:	580b      	ldrlt	r3, [r1, r0]
 8008d56:	18c0      	addlt	r0, r0, r3
 8008d58:	4770      	bx	lr

08008d5a <__sfputc_r>:
 8008d5a:	6893      	ldr	r3, [r2, #8]
 8008d5c:	b410      	push	{r4}
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	6093      	str	r3, [r2, #8]
 8008d64:	da07      	bge.n	8008d76 <__sfputc_r+0x1c>
 8008d66:	6994      	ldr	r4, [r2, #24]
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	db01      	blt.n	8008d70 <__sfputc_r+0x16>
 8008d6c:	290a      	cmp	r1, #10
 8008d6e:	d102      	bne.n	8008d76 <__sfputc_r+0x1c>
 8008d70:	bc10      	pop	{r4}
 8008d72:	f000 b931 	b.w	8008fd8 <__swbuf_r>
 8008d76:	6813      	ldr	r3, [r2, #0]
 8008d78:	1c58      	adds	r0, r3, #1
 8008d7a:	6010      	str	r0, [r2, #0]
 8008d7c:	7019      	strb	r1, [r3, #0]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	bc10      	pop	{r4}
 8008d82:	4770      	bx	lr

08008d84 <__sfputs_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	4606      	mov	r6, r0
 8008d88:	460f      	mov	r7, r1
 8008d8a:	4614      	mov	r4, r2
 8008d8c:	18d5      	adds	r5, r2, r3
 8008d8e:	42ac      	cmp	r4, r5
 8008d90:	d101      	bne.n	8008d96 <__sfputs_r+0x12>
 8008d92:	2000      	movs	r0, #0
 8008d94:	e007      	b.n	8008da6 <__sfputs_r+0x22>
 8008d96:	463a      	mov	r2, r7
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9e:	f7ff ffdc 	bl	8008d5a <__sfputc_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d1f3      	bne.n	8008d8e <__sfputs_r+0xa>
 8008da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008da8 <_vfiprintf_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	460d      	mov	r5, r1
 8008dae:	4614      	mov	r4, r2
 8008db0:	4698      	mov	r8, r3
 8008db2:	4606      	mov	r6, r0
 8008db4:	b09d      	sub	sp, #116	@ 0x74
 8008db6:	b118      	cbz	r0, 8008dc0 <_vfiprintf_r+0x18>
 8008db8:	6a03      	ldr	r3, [r0, #32]
 8008dba:	b90b      	cbnz	r3, 8008dc0 <_vfiprintf_r+0x18>
 8008dbc:	f7fe f900 	bl	8006fc0 <__sinit>
 8008dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dc2:	07d9      	lsls	r1, r3, #31
 8008dc4:	d405      	bmi.n	8008dd2 <_vfiprintf_r+0x2a>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	059a      	lsls	r2, r3, #22
 8008dca:	d402      	bmi.n	8008dd2 <_vfiprintf_r+0x2a>
 8008dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dce:	f7fe fa66 	bl	800729e <__retarget_lock_acquire_recursive>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	071b      	lsls	r3, r3, #28
 8008dd6:	d501      	bpl.n	8008ddc <_vfiprintf_r+0x34>
 8008dd8:	692b      	ldr	r3, [r5, #16]
 8008dda:	b99b      	cbnz	r3, 8008e04 <_vfiprintf_r+0x5c>
 8008ddc:	4629      	mov	r1, r5
 8008dde:	4630      	mov	r0, r6
 8008de0:	f000 f938 	bl	8009054 <__swsetup_r>
 8008de4:	b170      	cbz	r0, 8008e04 <_vfiprintf_r+0x5c>
 8008de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008de8:	07dc      	lsls	r4, r3, #31
 8008dea:	d504      	bpl.n	8008df6 <_vfiprintf_r+0x4e>
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295
 8008df0:	b01d      	add	sp, #116	@ 0x74
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	0598      	lsls	r0, r3, #22
 8008dfa:	d4f7      	bmi.n	8008dec <_vfiprintf_r+0x44>
 8008dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dfe:	f7fe fa4f 	bl	80072a0 <__retarget_lock_release_recursive>
 8008e02:	e7f3      	b.n	8008dec <_vfiprintf_r+0x44>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e0e:	2330      	movs	r3, #48	@ 0x30
 8008e10:	f04f 0901 	mov.w	r9, #1
 8008e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008fc4 <_vfiprintf_r+0x21c>
 8008e1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e20:	4623      	mov	r3, r4
 8008e22:	469a      	mov	sl, r3
 8008e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e28:	b10a      	cbz	r2, 8008e2e <_vfiprintf_r+0x86>
 8008e2a:	2a25      	cmp	r2, #37	@ 0x25
 8008e2c:	d1f9      	bne.n	8008e22 <_vfiprintf_r+0x7a>
 8008e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e32:	d00b      	beq.n	8008e4c <_vfiprintf_r+0xa4>
 8008e34:	465b      	mov	r3, fp
 8008e36:	4622      	mov	r2, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ffa2 	bl	8008d84 <__sfputs_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	f000 80a7 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e48:	445a      	add	r2, fp
 8008e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 809f 	beq.w	8008f94 <_vfiprintf_r+0x1ec>
 8008e56:	2300      	movs	r3, #0
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e60:	f10a 0a01 	add.w	sl, sl, #1
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2205      	movs	r2, #5
 8008e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e76:	4853      	ldr	r0, [pc, #332]	@ (8008fc4 <_vfiprintf_r+0x21c>)
 8008e78:	f7ff fed8 	bl	8008c2c <memchr>
 8008e7c:	9a04      	ldr	r2, [sp, #16]
 8008e7e:	b9d8      	cbnz	r0, 8008eb8 <_vfiprintf_r+0x110>
 8008e80:	06d1      	lsls	r1, r2, #27
 8008e82:	bf44      	itt	mi
 8008e84:	2320      	movmi	r3, #32
 8008e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8a:	0713      	lsls	r3, r2, #28
 8008e8c:	bf44      	itt	mi
 8008e8e:	232b      	movmi	r3, #43	@ 0x2b
 8008e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e9a:	d015      	beq.n	8008ec8 <_vfiprintf_r+0x120>
 8008e9c:	4654      	mov	r4, sl
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f04f 0c0a 	mov.w	ip, #10
 8008ea4:	9a07      	ldr	r2, [sp, #28]
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eac:	3b30      	subs	r3, #48	@ 0x30
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d94b      	bls.n	8008f4a <_vfiprintf_r+0x1a2>
 8008eb2:	b1b0      	cbz	r0, 8008ee2 <_vfiprintf_r+0x13a>
 8008eb4:	9207      	str	r2, [sp, #28]
 8008eb6:	e014      	b.n	8008ee2 <_vfiprintf_r+0x13a>
 8008eb8:	eba0 0308 	sub.w	r3, r0, r8
 8008ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	46a2      	mov	sl, r4
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	e7d2      	b.n	8008e6e <_vfiprintf_r+0xc6>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d19      	adds	r1, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9103      	str	r1, [sp, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfbb      	ittet	lt
 8008ed4:	425b      	neglt	r3, r3
 8008ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eda:	9307      	strge	r3, [sp, #28]
 8008edc:	9307      	strlt	r3, [sp, #28]
 8008ede:	bfb8      	it	lt
 8008ee0:	9204      	strlt	r2, [sp, #16]
 8008ee2:	7823      	ldrb	r3, [r4, #0]
 8008ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee6:	d10a      	bne.n	8008efe <_vfiprintf_r+0x156>
 8008ee8:	7863      	ldrb	r3, [r4, #1]
 8008eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eec:	d132      	bne.n	8008f54 <_vfiprintf_r+0x1ac>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	3402      	adds	r4, #2
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	9203      	str	r2, [sp, #12]
 8008ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008efc:	9305      	str	r3, [sp, #20]
 8008efe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008fc8 <_vfiprintf_r+0x220>
 8008f02:	2203      	movs	r2, #3
 8008f04:	4650      	mov	r0, sl
 8008f06:	7821      	ldrb	r1, [r4, #0]
 8008f08:	f7ff fe90 	bl	8008c2c <memchr>
 8008f0c:	b138      	cbz	r0, 8008f1e <_vfiprintf_r+0x176>
 8008f0e:	2240      	movs	r2, #64	@ 0x40
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	eba0 000a 	sub.w	r0, r0, sl
 8008f16:	4082      	lsls	r2, r0
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	3401      	adds	r4, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	2206      	movs	r2, #6
 8008f24:	4829      	ldr	r0, [pc, #164]	@ (8008fcc <_vfiprintf_r+0x224>)
 8008f26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f2a:	f7ff fe7f 	bl	8008c2c <memchr>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d03f      	beq.n	8008fb2 <_vfiprintf_r+0x20a>
 8008f32:	4b27      	ldr	r3, [pc, #156]	@ (8008fd0 <_vfiprintf_r+0x228>)
 8008f34:	bb1b      	cbnz	r3, 8008f7e <_vfiprintf_r+0x1d6>
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	3307      	adds	r3, #7
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	3308      	adds	r3, #8
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f44:	443b      	add	r3, r7
 8008f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f48:	e76a      	b.n	8008e20 <_vfiprintf_r+0x78>
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f52:	e7a8      	b.n	8008ea6 <_vfiprintf_r+0xfe>
 8008f54:	2300      	movs	r3, #0
 8008f56:	f04f 0c0a 	mov.w	ip, #10
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	3401      	adds	r4, #1
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f66:	3a30      	subs	r2, #48	@ 0x30
 8008f68:	2a09      	cmp	r2, #9
 8008f6a:	d903      	bls.n	8008f74 <_vfiprintf_r+0x1cc>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0c6      	beq.n	8008efe <_vfiprintf_r+0x156>
 8008f70:	9105      	str	r1, [sp, #20]
 8008f72:	e7c4      	b.n	8008efe <_vfiprintf_r+0x156>
 8008f74:	4604      	mov	r4, r0
 8008f76:	2301      	movs	r3, #1
 8008f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f7c:	e7f0      	b.n	8008f60 <_vfiprintf_r+0x1b8>
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	9300      	str	r3, [sp, #0]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4630      	mov	r0, r6
 8008f86:	4b13      	ldr	r3, [pc, #76]	@ (8008fd4 <_vfiprintf_r+0x22c>)
 8008f88:	a904      	add	r1, sp, #16
 8008f8a:	f3af 8000 	nop.w
 8008f8e:	4607      	mov	r7, r0
 8008f90:	1c78      	adds	r0, r7, #1
 8008f92:	d1d6      	bne.n	8008f42 <_vfiprintf_r+0x19a>
 8008f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x1fe>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x1fe>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa2:	f7fe f97d 	bl	80072a0 <__retarget_lock_release_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	065b      	lsls	r3, r3, #25
 8008faa:	f53f af1f 	bmi.w	8008dec <_vfiprintf_r+0x44>
 8008fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fb0:	e71e      	b.n	8008df0 <_vfiprintf_r+0x48>
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4630      	mov	r0, r6
 8008fba:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <_vfiprintf_r+0x22c>)
 8008fbc:	a904      	add	r1, sp, #16
 8008fbe:	f7ff fc45 	bl	800884c <_printf_i>
 8008fc2:	e7e4      	b.n	8008f8e <_vfiprintf_r+0x1e6>
 8008fc4:	0800b84e 	.word	0x0800b84e
 8008fc8:	0800b854 	.word	0x0800b854
 8008fcc:	0800b858 	.word	0x0800b858
 8008fd0:	00000000 	.word	0x00000000
 8008fd4:	08008d85 	.word	0x08008d85

08008fd8 <__swbuf_r>:
 8008fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fda:	460e      	mov	r6, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	4605      	mov	r5, r0
 8008fe0:	b118      	cbz	r0, 8008fea <__swbuf_r+0x12>
 8008fe2:	6a03      	ldr	r3, [r0, #32]
 8008fe4:	b90b      	cbnz	r3, 8008fea <__swbuf_r+0x12>
 8008fe6:	f7fd ffeb 	bl	8006fc0 <__sinit>
 8008fea:	69a3      	ldr	r3, [r4, #24]
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	071a      	lsls	r2, r3, #28
 8008ff2:	d501      	bpl.n	8008ff8 <__swbuf_r+0x20>
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	b943      	cbnz	r3, 800900a <__swbuf_r+0x32>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f82a 	bl	8009054 <__swsetup_r>
 8009000:	b118      	cbz	r0, 800900a <__swbuf_r+0x32>
 8009002:	f04f 37ff 	mov.w	r7, #4294967295
 8009006:	4638      	mov	r0, r7
 8009008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	6922      	ldr	r2, [r4, #16]
 800900e:	b2f6      	uxtb	r6, r6
 8009010:	1a98      	subs	r0, r3, r2
 8009012:	6963      	ldr	r3, [r4, #20]
 8009014:	4637      	mov	r7, r6
 8009016:	4283      	cmp	r3, r0
 8009018:	dc05      	bgt.n	8009026 <__swbuf_r+0x4e>
 800901a:	4621      	mov	r1, r4
 800901c:	4628      	mov	r0, r5
 800901e:	f7ff fdb3 	bl	8008b88 <_fflush_r>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1ed      	bne.n	8009002 <__swbuf_r+0x2a>
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	3b01      	subs	r3, #1
 800902a:	60a3      	str	r3, [r4, #8]
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	701e      	strb	r6, [r3, #0]
 8009034:	6962      	ldr	r2, [r4, #20]
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	429a      	cmp	r2, r3
 800903a:	d004      	beq.n	8009046 <__swbuf_r+0x6e>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	07db      	lsls	r3, r3, #31
 8009040:	d5e1      	bpl.n	8009006 <__swbuf_r+0x2e>
 8009042:	2e0a      	cmp	r6, #10
 8009044:	d1df      	bne.n	8009006 <__swbuf_r+0x2e>
 8009046:	4621      	mov	r1, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fd9d 	bl	8008b88 <_fflush_r>
 800904e:	2800      	cmp	r0, #0
 8009050:	d0d9      	beq.n	8009006 <__swbuf_r+0x2e>
 8009052:	e7d6      	b.n	8009002 <__swbuf_r+0x2a>

08009054 <__swsetup_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4b29      	ldr	r3, [pc, #164]	@ (80090fc <__swsetup_r+0xa8>)
 8009058:	4605      	mov	r5, r0
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	460c      	mov	r4, r1
 800905e:	b118      	cbz	r0, 8009068 <__swsetup_r+0x14>
 8009060:	6a03      	ldr	r3, [r0, #32]
 8009062:	b90b      	cbnz	r3, 8009068 <__swsetup_r+0x14>
 8009064:	f7fd ffac 	bl	8006fc0 <__sinit>
 8009068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906c:	0719      	lsls	r1, r3, #28
 800906e:	d422      	bmi.n	80090b6 <__swsetup_r+0x62>
 8009070:	06da      	lsls	r2, r3, #27
 8009072:	d407      	bmi.n	8009084 <__swsetup_r+0x30>
 8009074:	2209      	movs	r2, #9
 8009076:	602a      	str	r2, [r5, #0]
 8009078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	81a3      	strh	r3, [r4, #12]
 8009082:	e033      	b.n	80090ec <__swsetup_r+0x98>
 8009084:	0758      	lsls	r0, r3, #29
 8009086:	d512      	bpl.n	80090ae <__swsetup_r+0x5a>
 8009088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800908a:	b141      	cbz	r1, 800909e <__swsetup_r+0x4a>
 800908c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009090:	4299      	cmp	r1, r3
 8009092:	d002      	beq.n	800909a <__swsetup_r+0x46>
 8009094:	4628      	mov	r0, r5
 8009096:	f7fe f921 	bl	80072dc <_free_r>
 800909a:	2300      	movs	r3, #0
 800909c:	6363      	str	r3, [r4, #52]	@ 0x34
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090a4:	81a3      	strh	r3, [r4, #12]
 80090a6:	2300      	movs	r3, #0
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f043 0308 	orr.w	r3, r3, #8
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	b94b      	cbnz	r3, 80090ce <__swsetup_r+0x7a>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090c4:	d003      	beq.n	80090ce <__swsetup_r+0x7a>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f882 	bl	80091d2 <__smakebuf_r>
 80090ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090d2:	f013 0201 	ands.w	r2, r3, #1
 80090d6:	d00a      	beq.n	80090ee <__swsetup_r+0x9a>
 80090d8:	2200      	movs	r2, #0
 80090da:	60a2      	str	r2, [r4, #8]
 80090dc:	6962      	ldr	r2, [r4, #20]
 80090de:	4252      	negs	r2, r2
 80090e0:	61a2      	str	r2, [r4, #24]
 80090e2:	6922      	ldr	r2, [r4, #16]
 80090e4:	b942      	cbnz	r2, 80090f8 <__swsetup_r+0xa4>
 80090e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090ea:	d1c5      	bne.n	8009078 <__swsetup_r+0x24>
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	0799      	lsls	r1, r3, #30
 80090f0:	bf58      	it	pl
 80090f2:	6962      	ldrpl	r2, [r4, #20]
 80090f4:	60a2      	str	r2, [r4, #8]
 80090f6:	e7f4      	b.n	80090e2 <__swsetup_r+0x8e>
 80090f8:	2000      	movs	r0, #0
 80090fa:	e7f7      	b.n	80090ec <__swsetup_r+0x98>
 80090fc:	20000300 	.word	0x20000300

08009100 <_raise_r>:
 8009100:	291f      	cmp	r1, #31
 8009102:	b538      	push	{r3, r4, r5, lr}
 8009104:	4605      	mov	r5, r0
 8009106:	460c      	mov	r4, r1
 8009108:	d904      	bls.n	8009114 <_raise_r+0x14>
 800910a:	2316      	movs	r3, #22
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009116:	b112      	cbz	r2, 800911e <_raise_r+0x1e>
 8009118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800911c:	b94b      	cbnz	r3, 8009132 <_raise_r+0x32>
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f830 	bl	8009184 <_getpid_r>
 8009124:	4622      	mov	r2, r4
 8009126:	4601      	mov	r1, r0
 8009128:	4628      	mov	r0, r5
 800912a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800912e:	f000 b817 	b.w	8009160 <_kill_r>
 8009132:	2b01      	cmp	r3, #1
 8009134:	d00a      	beq.n	800914c <_raise_r+0x4c>
 8009136:	1c59      	adds	r1, r3, #1
 8009138:	d103      	bne.n	8009142 <_raise_r+0x42>
 800913a:	2316      	movs	r3, #22
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	2001      	movs	r0, #1
 8009140:	e7e7      	b.n	8009112 <_raise_r+0x12>
 8009142:	2100      	movs	r1, #0
 8009144:	4620      	mov	r0, r4
 8009146:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800914a:	4798      	blx	r3
 800914c:	2000      	movs	r0, #0
 800914e:	e7e0      	b.n	8009112 <_raise_r+0x12>

08009150 <raise>:
 8009150:	4b02      	ldr	r3, [pc, #8]	@ (800915c <raise+0xc>)
 8009152:	4601      	mov	r1, r0
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	f7ff bfd3 	b.w	8009100 <_raise_r>
 800915a:	bf00      	nop
 800915c:	20000300 	.word	0x20000300

08009160 <_kill_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	2300      	movs	r3, #0
 8009164:	4d06      	ldr	r5, [pc, #24]	@ (8009180 <_kill_r+0x20>)
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	f7fa f81d 	bl	80031ac <_kill>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	d102      	bne.n	800917c <_kill_r+0x1c>
 8009176:	682b      	ldr	r3, [r5, #0]
 8009178:	b103      	cbz	r3, 800917c <_kill_r+0x1c>
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	bd38      	pop	{r3, r4, r5, pc}
 800917e:	bf00      	nop
 8009180:	200046b8 	.word	0x200046b8

08009184 <_getpid_r>:
 8009184:	f7fa b810 	b.w	80031a8 <_getpid>

08009188 <__swhatbuf_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	4615      	mov	r5, r2
 8009192:	2900      	cmp	r1, #0
 8009194:	461e      	mov	r6, r3
 8009196:	b096      	sub	sp, #88	@ 0x58
 8009198:	da0c      	bge.n	80091b4 <__swhatbuf_r+0x2c>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	2100      	movs	r1, #0
 800919e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091a2:	bf14      	ite	ne
 80091a4:	2340      	movne	r3, #64	@ 0x40
 80091a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091aa:	2000      	movs	r0, #0
 80091ac:	6031      	str	r1, [r6, #0]
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	b016      	add	sp, #88	@ 0x58
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	466a      	mov	r2, sp
 80091b6:	f000 f849 	bl	800924c <_fstat_r>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	dbed      	blt.n	800919a <__swhatbuf_r+0x12>
 80091be:	9901      	ldr	r1, [sp, #4]
 80091c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091c8:	4259      	negs	r1, r3
 80091ca:	4159      	adcs	r1, r3
 80091cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091d0:	e7eb      	b.n	80091aa <__swhatbuf_r+0x22>

080091d2 <__smakebuf_r>:
 80091d2:	898b      	ldrh	r3, [r1, #12]
 80091d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091d6:	079d      	lsls	r5, r3, #30
 80091d8:	4606      	mov	r6, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	d507      	bpl.n	80091ee <__smakebuf_r+0x1c>
 80091de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091e2:	6023      	str	r3, [r4, #0]
 80091e4:	6123      	str	r3, [r4, #16]
 80091e6:	2301      	movs	r3, #1
 80091e8:	6163      	str	r3, [r4, #20]
 80091ea:	b003      	add	sp, #12
 80091ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ee:	466a      	mov	r2, sp
 80091f0:	ab01      	add	r3, sp, #4
 80091f2:	f7ff ffc9 	bl	8009188 <__swhatbuf_r>
 80091f6:	9f00      	ldr	r7, [sp, #0]
 80091f8:	4605      	mov	r5, r0
 80091fa:	4639      	mov	r1, r7
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7fe fc11 	bl	8007a24 <_malloc_r>
 8009202:	b948      	cbnz	r0, 8009218 <__smakebuf_r+0x46>
 8009204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d4ee      	bmi.n	80091ea <__smakebuf_r+0x18>
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	f043 0302 	orr.w	r3, r3, #2
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	e7e2      	b.n	80091de <__smakebuf_r+0xc>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800921e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	9b01      	ldr	r3, [sp, #4]
 8009226:	6020      	str	r0, [r4, #0]
 8009228:	b15b      	cbz	r3, 8009242 <__smakebuf_r+0x70>
 800922a:	4630      	mov	r0, r6
 800922c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009230:	f000 f81e 	bl	8009270 <_isatty_r>
 8009234:	b128      	cbz	r0, 8009242 <__smakebuf_r+0x70>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	431d      	orrs	r5, r3
 8009246:	81a5      	strh	r5, [r4, #12]
 8009248:	e7cf      	b.n	80091ea <__smakebuf_r+0x18>
	...

0800924c <_fstat_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	2300      	movs	r3, #0
 8009250:	4d06      	ldr	r5, [pc, #24]	@ (800926c <_fstat_r+0x20>)
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	4611      	mov	r1, r2
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	f7f9 ffd4 	bl	8003206 <_fstat>
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	d102      	bne.n	8009268 <_fstat_r+0x1c>
 8009262:	682b      	ldr	r3, [r5, #0]
 8009264:	b103      	cbz	r3, 8009268 <_fstat_r+0x1c>
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	bf00      	nop
 800926c:	200046b8 	.word	0x200046b8

08009270 <_isatty_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	2300      	movs	r3, #0
 8009274:	4d05      	ldr	r5, [pc, #20]	@ (800928c <_isatty_r+0x1c>)
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	602b      	str	r3, [r5, #0]
 800927c:	f7f9 ffc8 	bl	8003210 <_isatty>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_isatty_r+0x1a>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_isatty_r+0x1a>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200046b8 	.word	0x200046b8

08009290 <atan2>:
 8009290:	f000 bb16 	b.w	80098c0 <__ieee754_atan2>

08009294 <sqrt>:
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	f000 f8ab 	bl	80093f4 <__ieee754_sqrt>
 800929e:	4632      	mov	r2, r6
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	463b      	mov	r3, r7
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	f7f7 fbaf 	bl	8000a0c <__aeabi_dcmpun>
 80092ae:	b990      	cbnz	r0, 80092d6 <sqrt+0x42>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	4630      	mov	r0, r6
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f7 fb80 	bl	80009bc <__aeabi_dcmplt>
 80092bc:	b158      	cbz	r0, 80092d6 <sqrt+0x42>
 80092be:	f7fd ffc3 	bl	8007248 <__errno>
 80092c2:	2321      	movs	r3, #33	@ 0x21
 80092c4:	2200      	movs	r2, #0
 80092c6:	6003      	str	r3, [r0, #0]
 80092c8:	2300      	movs	r3, #0
 80092ca:	4610      	mov	r0, r2
 80092cc:	4619      	mov	r1, r3
 80092ce:	f7f7 fa2d 	bl	800072c <__aeabi_ddiv>
 80092d2:	4604      	mov	r4, r0
 80092d4:	460d      	mov	r5, r1
 80092d6:	4620      	mov	r0, r4
 80092d8:	4629      	mov	r1, r5
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092dc <cos>:
 80092dc:	b530      	push	{r4, r5, lr}
 80092de:	4d20      	ldr	r5, [pc, #128]	@ (8009360 <cos+0x84>)
 80092e0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80092e4:	42ac      	cmp	r4, r5
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	b087      	sub	sp, #28
 80092ec:	d806      	bhi.n	80092fc <cos+0x20>
 80092ee:	2200      	movs	r2, #0
 80092f0:	2300      	movs	r3, #0
 80092f2:	b007      	add	sp, #28
 80092f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092f8:	f000 b96a 	b.w	80095d0 <__kernel_cos>
 80092fc:	4d19      	ldr	r5, [pc, #100]	@ (8009364 <cos+0x88>)
 80092fe:	42ac      	cmp	r4, r5
 8009300:	d903      	bls.n	800930a <cos+0x2e>
 8009302:	f7f6 ff31 	bl	8000168 <__aeabi_dsub>
 8009306:	b007      	add	sp, #28
 8009308:	bd30      	pop	{r4, r5, pc}
 800930a:	aa02      	add	r2, sp, #8
 800930c:	f000 fbac 	bl	8009a68 <__ieee754_rem_pio2>
 8009310:	f000 0003 	and.w	r0, r0, #3
 8009314:	2801      	cmp	r0, #1
 8009316:	d009      	beq.n	800932c <cos+0x50>
 8009318:	2802      	cmp	r0, #2
 800931a:	d011      	beq.n	8009340 <cos+0x64>
 800931c:	b9b8      	cbnz	r0, 800934e <cos+0x72>
 800931e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009326:	f000 f953 	bl	80095d0 <__kernel_cos>
 800932a:	e7ec      	b.n	8009306 <cos+0x2a>
 800932c:	9000      	str	r0, [sp, #0]
 800932e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009336:	f000 fa0b 	bl	8009750 <__kernel_sin>
 800933a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800933e:	e7e2      	b.n	8009306 <cos+0x2a>
 8009340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009348:	f000 f942 	bl	80095d0 <__kernel_cos>
 800934c:	e7f5      	b.n	800933a <cos+0x5e>
 800934e:	2301      	movs	r3, #1
 8009350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935a:	f000 f9f9 	bl	8009750 <__kernel_sin>
 800935e:	e7d2      	b.n	8009306 <cos+0x2a>
 8009360:	3fe921fb 	.word	0x3fe921fb
 8009364:	7fefffff 	.word	0x7fefffff

08009368 <sin>:
 8009368:	b530      	push	{r4, r5, lr}
 800936a:	4d20      	ldr	r5, [pc, #128]	@ (80093ec <sin+0x84>)
 800936c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009370:	42ac      	cmp	r4, r5
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	b087      	sub	sp, #28
 8009378:	d806      	bhi.n	8009388 <sin+0x20>
 800937a:	2300      	movs	r3, #0
 800937c:	2200      	movs	r2, #0
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	2300      	movs	r3, #0
 8009382:	f000 f9e5 	bl	8009750 <__kernel_sin>
 8009386:	e004      	b.n	8009392 <sin+0x2a>
 8009388:	4d19      	ldr	r5, [pc, #100]	@ (80093f0 <sin+0x88>)
 800938a:	42ac      	cmp	r4, r5
 800938c:	d903      	bls.n	8009396 <sin+0x2e>
 800938e:	f7f6 feeb 	bl	8000168 <__aeabi_dsub>
 8009392:	b007      	add	sp, #28
 8009394:	bd30      	pop	{r4, r5, pc}
 8009396:	aa02      	add	r2, sp, #8
 8009398:	f000 fb66 	bl	8009a68 <__ieee754_rem_pio2>
 800939c:	f000 0003 	and.w	r0, r0, #3
 80093a0:	2801      	cmp	r0, #1
 80093a2:	d009      	beq.n	80093b8 <sin+0x50>
 80093a4:	2802      	cmp	r0, #2
 80093a6:	d00e      	beq.n	80093c6 <sin+0x5e>
 80093a8:	b9c0      	cbnz	r0, 80093dc <sin+0x74>
 80093aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ae:	2301      	movs	r3, #1
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b6:	e7e4      	b.n	8009382 <sin+0x1a>
 80093b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c0:	f000 f906 	bl	80095d0 <__kernel_cos>
 80093c4:	e7e5      	b.n	8009392 <sin+0x2a>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093d2:	f000 f9bd 	bl	8009750 <__kernel_sin>
 80093d6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80093da:	e7da      	b.n	8009392 <sin+0x2a>
 80093dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e4:	f000 f8f4 	bl	80095d0 <__kernel_cos>
 80093e8:	e7f5      	b.n	80093d6 <sin+0x6e>
 80093ea:	bf00      	nop
 80093ec:	3fe921fb 	.word	0x3fe921fb
 80093f0:	7fefffff 	.word	0x7fefffff

080093f4 <__ieee754_sqrt>:
 80093f4:	4a65      	ldr	r2, [pc, #404]	@ (800958c <__ieee754_sqrt+0x198>)
 80093f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fa:	438a      	bics	r2, r1
 80093fc:	4606      	mov	r6, r0
 80093fe:	460f      	mov	r7, r1
 8009400:	460b      	mov	r3, r1
 8009402:	4604      	mov	r4, r0
 8009404:	d10e      	bne.n	8009424 <__ieee754_sqrt+0x30>
 8009406:	4602      	mov	r2, r0
 8009408:	f7f7 f866 	bl	80004d8 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f6 feaa 	bl	800016c <__adddf3>
 8009418:	4606      	mov	r6, r0
 800941a:	460f      	mov	r7, r1
 800941c:	4630      	mov	r0, r6
 800941e:	4639      	mov	r1, r7
 8009420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009424:	2900      	cmp	r1, #0
 8009426:	dc0c      	bgt.n	8009442 <__ieee754_sqrt+0x4e>
 8009428:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800942c:	4302      	orrs	r2, r0
 800942e:	d0f5      	beq.n	800941c <__ieee754_sqrt+0x28>
 8009430:	b189      	cbz	r1, 8009456 <__ieee754_sqrt+0x62>
 8009432:	4602      	mov	r2, r0
 8009434:	f7f6 fe98 	bl	8000168 <__aeabi_dsub>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	f7f7 f976 	bl	800072c <__aeabi_ddiv>
 8009440:	e7ea      	b.n	8009418 <__ieee754_sqrt+0x24>
 8009442:	150a      	asrs	r2, r1, #20
 8009444:	d115      	bne.n	8009472 <__ieee754_sqrt+0x7e>
 8009446:	2100      	movs	r1, #0
 8009448:	e009      	b.n	800945e <__ieee754_sqrt+0x6a>
 800944a:	0ae3      	lsrs	r3, r4, #11
 800944c:	3a15      	subs	r2, #21
 800944e:	0564      	lsls	r4, r4, #21
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0fa      	beq.n	800944a <__ieee754_sqrt+0x56>
 8009454:	e7f7      	b.n	8009446 <__ieee754_sqrt+0x52>
 8009456:	460a      	mov	r2, r1
 8009458:	e7fa      	b.n	8009450 <__ieee754_sqrt+0x5c>
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	3101      	adds	r1, #1
 800945e:	02d8      	lsls	r0, r3, #11
 8009460:	d5fb      	bpl.n	800945a <__ieee754_sqrt+0x66>
 8009462:	1e48      	subs	r0, r1, #1
 8009464:	1a12      	subs	r2, r2, r0
 8009466:	f1c1 0020 	rsb	r0, r1, #32
 800946a:	fa24 f000 	lsr.w	r0, r4, r0
 800946e:	4303      	orrs	r3, r0
 8009470:	408c      	lsls	r4, r1
 8009472:	2700      	movs	r7, #0
 8009474:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009478:	2116      	movs	r1, #22
 800947a:	07d2      	lsls	r2, r2, #31
 800947c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009480:	463a      	mov	r2, r7
 8009482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800948a:	bf5c      	itt	pl
 800948c:	005b      	lslpl	r3, r3, #1
 800948e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009492:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009496:	bf58      	it	pl
 8009498:	0064      	lslpl	r4, r4, #1
 800949a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800949e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094a2:	0064      	lsls	r4, r4, #1
 80094a4:	1815      	adds	r5, r2, r0
 80094a6:	429d      	cmp	r5, r3
 80094a8:	bfde      	ittt	le
 80094aa:	182a      	addle	r2, r5, r0
 80094ac:	1b5b      	suble	r3, r3, r5
 80094ae:	183f      	addle	r7, r7, r0
 80094b0:	0fe5      	lsrs	r5, r4, #31
 80094b2:	3901      	subs	r1, #1
 80094b4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80094b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80094bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80094c0:	d1f0      	bne.n	80094a4 <__ieee754_sqrt+0xb0>
 80094c2:	460d      	mov	r5, r1
 80094c4:	2620      	movs	r6, #32
 80094c6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80094ca:	4293      	cmp	r3, r2
 80094cc:	eb00 0c01 	add.w	ip, r0, r1
 80094d0:	dc02      	bgt.n	80094d8 <__ieee754_sqrt+0xe4>
 80094d2:	d113      	bne.n	80094fc <__ieee754_sqrt+0x108>
 80094d4:	45a4      	cmp	ip, r4
 80094d6:	d811      	bhi.n	80094fc <__ieee754_sqrt+0x108>
 80094d8:	f1bc 0f00 	cmp.w	ip, #0
 80094dc:	eb0c 0100 	add.w	r1, ip, r0
 80094e0:	da3e      	bge.n	8009560 <__ieee754_sqrt+0x16c>
 80094e2:	2900      	cmp	r1, #0
 80094e4:	db3c      	blt.n	8009560 <__ieee754_sqrt+0x16c>
 80094e6:	f102 0e01 	add.w	lr, r2, #1
 80094ea:	1a9b      	subs	r3, r3, r2
 80094ec:	4672      	mov	r2, lr
 80094ee:	45a4      	cmp	ip, r4
 80094f0:	bf88      	it	hi
 80094f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80094f6:	eba4 040c 	sub.w	r4, r4, ip
 80094fa:	4405      	add	r5, r0
 80094fc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009500:	3e01      	subs	r6, #1
 8009502:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009506:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800950a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800950e:	d1dc      	bne.n	80094ca <__ieee754_sqrt+0xd6>
 8009510:	431c      	orrs	r4, r3
 8009512:	d01a      	beq.n	800954a <__ieee754_sqrt+0x156>
 8009514:	4c1e      	ldr	r4, [pc, #120]	@ (8009590 <__ieee754_sqrt+0x19c>)
 8009516:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8009594 <__ieee754_sqrt+0x1a0>
 800951a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800951e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009522:	f7f6 fe21 	bl	8000168 <__aeabi_dsub>
 8009526:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4650      	mov	r0, sl
 8009530:	4659      	mov	r1, fp
 8009532:	f7f7 fa4d 	bl	80009d0 <__aeabi_dcmple>
 8009536:	b140      	cbz	r0, 800954a <__ieee754_sqrt+0x156>
 8009538:	e9d4 0100 	ldrd	r0, r1, [r4]
 800953c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009540:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009544:	d10e      	bne.n	8009564 <__ieee754_sqrt+0x170>
 8009546:	4635      	mov	r5, r6
 8009548:	3701      	adds	r7, #1
 800954a:	107b      	asrs	r3, r7, #1
 800954c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009550:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009554:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009558:	086b      	lsrs	r3, r5, #1
 800955a:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800955e:	e75b      	b.n	8009418 <__ieee754_sqrt+0x24>
 8009560:	4696      	mov	lr, r2
 8009562:	e7c2      	b.n	80094ea <__ieee754_sqrt+0xf6>
 8009564:	f7f6 fe02 	bl	800016c <__adddf3>
 8009568:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4650      	mov	r0, sl
 8009572:	4659      	mov	r1, fp
 8009574:	f7f7 fa22 	bl	80009bc <__aeabi_dcmplt>
 8009578:	b120      	cbz	r0, 8009584 <__ieee754_sqrt+0x190>
 800957a:	1cab      	adds	r3, r5, #2
 800957c:	bf08      	it	eq
 800957e:	3701      	addeq	r7, #1
 8009580:	3502      	adds	r5, #2
 8009582:	e7e2      	b.n	800954a <__ieee754_sqrt+0x156>
 8009584:	1c6b      	adds	r3, r5, #1
 8009586:	f023 0501 	bic.w	r5, r3, #1
 800958a:	e7de      	b.n	800954a <__ieee754_sqrt+0x156>
 800958c:	7ff00000 	.word	0x7ff00000
 8009590:	0800bb40 	.word	0x0800bb40
 8009594:	0800bb38 	.word	0x0800bb38

08009598 <truncf>:
 8009598:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800959c:	3b7f      	subs	r3, #127	@ 0x7f
 800959e:	2b16      	cmp	r3, #22
 80095a0:	4601      	mov	r1, r0
 80095a2:	b510      	push	{r4, lr}
 80095a4:	dc0a      	bgt.n	80095bc <truncf+0x24>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 80095ac:	db04      	blt.n	80095b8 <truncf+0x20>
 80095ae:	4a06      	ldr	r2, [pc, #24]	@ (80095c8 <truncf+0x30>)
 80095b0:	fa42 f303 	asr.w	r3, r2, r3
 80095b4:	4003      	ands	r3, r0
 80095b6:	4319      	orrs	r1, r3
 80095b8:	4608      	mov	r0, r1
 80095ba:	bd10      	pop	{r4, pc}
 80095bc:	2b80      	cmp	r3, #128	@ 0x80
 80095be:	d1fb      	bne.n	80095b8 <truncf+0x20>
 80095c0:	f7f7 fad8 	bl	8000b74 <__addsf3>
 80095c4:	4601      	mov	r1, r0
 80095c6:	e7f7      	b.n	80095b8 <truncf+0x20>
 80095c8:	ff800000 	.word	0xff800000
 80095cc:	00000000 	.word	0x00000000

080095d0 <__kernel_cos>:
 80095d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80095d8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80095dc:	4680      	mov	r8, r0
 80095de:	4689      	mov	r9, r1
 80095e0:	e9cd 2300 	strd	r2, r3, [sp]
 80095e4:	d204      	bcs.n	80095f0 <__kernel_cos+0x20>
 80095e6:	f7f7 fa27 	bl	8000a38 <__aeabi_d2iz>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	f000 8086 	beq.w	80096fc <__kernel_cos+0x12c>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	4640      	mov	r0, r8
 80095f6:	4649      	mov	r1, r9
 80095f8:	f7f6 ff6e 	bl	80004d8 <__aeabi_dmul>
 80095fc:	2200      	movs	r2, #0
 80095fe:	4b4e      	ldr	r3, [pc, #312]	@ (8009738 <__kernel_cos+0x168>)
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	f7f6 ff68 	bl	80004d8 <__aeabi_dmul>
 8009608:	a33f      	add	r3, pc, #252	@ (adr r3, 8009708 <__kernel_cos+0x138>)
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f7f6 ff5f 	bl	80004d8 <__aeabi_dmul>
 800961a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009710 <__kernel_cos+0x140>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fda4 	bl	800016c <__adddf3>
 8009624:	4622      	mov	r2, r4
 8009626:	462b      	mov	r3, r5
 8009628:	f7f6 ff56 	bl	80004d8 <__aeabi_dmul>
 800962c:	a33a      	add	r3, pc, #232	@ (adr r3, 8009718 <__kernel_cos+0x148>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fd99 	bl	8000168 <__aeabi_dsub>
 8009636:	4622      	mov	r2, r4
 8009638:	462b      	mov	r3, r5
 800963a:	f7f6 ff4d 	bl	80004d8 <__aeabi_dmul>
 800963e:	a338      	add	r3, pc, #224	@ (adr r3, 8009720 <__kernel_cos+0x150>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fd92 	bl	800016c <__adddf3>
 8009648:	4622      	mov	r2, r4
 800964a:	462b      	mov	r3, r5
 800964c:	f7f6 ff44 	bl	80004d8 <__aeabi_dmul>
 8009650:	a335      	add	r3, pc, #212	@ (adr r3, 8009728 <__kernel_cos+0x158>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f7f6 fd87 	bl	8000168 <__aeabi_dsub>
 800965a:	4622      	mov	r2, r4
 800965c:	462b      	mov	r3, r5
 800965e:	f7f6 ff3b 	bl	80004d8 <__aeabi_dmul>
 8009662:	a333      	add	r3, pc, #204	@ (adr r3, 8009730 <__kernel_cos+0x160>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fd80 	bl	800016c <__adddf3>
 800966c:	4622      	mov	r2, r4
 800966e:	462b      	mov	r3, r5
 8009670:	f7f6 ff32 	bl	80004d8 <__aeabi_dmul>
 8009674:	4622      	mov	r2, r4
 8009676:	462b      	mov	r3, r5
 8009678:	f7f6 ff2e 	bl	80004d8 <__aeabi_dmul>
 800967c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009680:	4604      	mov	r4, r0
 8009682:	460d      	mov	r5, r1
 8009684:	4640      	mov	r0, r8
 8009686:	4649      	mov	r1, r9
 8009688:	f7f6 ff26 	bl	80004d8 <__aeabi_dmul>
 800968c:	460b      	mov	r3, r1
 800968e:	4602      	mov	r2, r0
 8009690:	4629      	mov	r1, r5
 8009692:	4620      	mov	r0, r4
 8009694:	f7f6 fd68 	bl	8000168 <__aeabi_dsub>
 8009698:	4b28      	ldr	r3, [pc, #160]	@ (800973c <__kernel_cos+0x16c>)
 800969a:	4680      	mov	r8, r0
 800969c:	429e      	cmp	r6, r3
 800969e:	4689      	mov	r9, r1
 80096a0:	d80e      	bhi.n	80096c0 <__kernel_cos+0xf0>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4650      	mov	r0, sl
 80096a8:	4659      	mov	r1, fp
 80096aa:	f7f6 fd5d 	bl	8000168 <__aeabi_dsub>
 80096ae:	4602      	mov	r2, r0
 80096b0:	2000      	movs	r0, #0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4922      	ldr	r1, [pc, #136]	@ (8009740 <__kernel_cos+0x170>)
 80096b6:	f7f6 fd57 	bl	8000168 <__aeabi_dsub>
 80096ba:	b003      	add	sp, #12
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c0:	2400      	movs	r4, #0
 80096c2:	4b20      	ldr	r3, [pc, #128]	@ (8009744 <__kernel_cos+0x174>)
 80096c4:	4622      	mov	r2, r4
 80096c6:	429e      	cmp	r6, r3
 80096c8:	bf8c      	ite	hi
 80096ca:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009748 <__kernel_cos+0x178>)
 80096cc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80096d0:	462b      	mov	r3, r5
 80096d2:	2000      	movs	r0, #0
 80096d4:	491a      	ldr	r1, [pc, #104]	@ (8009740 <__kernel_cos+0x170>)
 80096d6:	f7f6 fd47 	bl	8000168 <__aeabi_dsub>
 80096da:	4622      	mov	r2, r4
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	462b      	mov	r3, r5
 80096e2:	4650      	mov	r0, sl
 80096e4:	4659      	mov	r1, fp
 80096e6:	f7f6 fd3f 	bl	8000168 <__aeabi_dsub>
 80096ea:	4642      	mov	r2, r8
 80096ec:	464b      	mov	r3, r9
 80096ee:	f7f6 fd3b 	bl	8000168 <__aeabi_dsub>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	e7dc      	b.n	80096b6 <__kernel_cos+0xe6>
 80096fc:	2000      	movs	r0, #0
 80096fe:	4910      	ldr	r1, [pc, #64]	@ (8009740 <__kernel_cos+0x170>)
 8009700:	e7db      	b.n	80096ba <__kernel_cos+0xea>
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w
 8009708:	be8838d4 	.word	0xbe8838d4
 800970c:	bda8fae9 	.word	0xbda8fae9
 8009710:	bdb4b1c4 	.word	0xbdb4b1c4
 8009714:	3e21ee9e 	.word	0x3e21ee9e
 8009718:	809c52ad 	.word	0x809c52ad
 800971c:	3e927e4f 	.word	0x3e927e4f
 8009720:	19cb1590 	.word	0x19cb1590
 8009724:	3efa01a0 	.word	0x3efa01a0
 8009728:	16c15177 	.word	0x16c15177
 800972c:	3f56c16c 	.word	0x3f56c16c
 8009730:	5555554c 	.word	0x5555554c
 8009734:	3fa55555 	.word	0x3fa55555
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	3fd33332 	.word	0x3fd33332
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	3fe90000 	.word	0x3fe90000
 8009748:	3fd20000 	.word	0x3fd20000
 800974c:	00000000 	.word	0x00000000

08009750 <__kernel_sin>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	461f      	mov	r7, r3
 8009756:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800975a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800975e:	4604      	mov	r4, r0
 8009760:	460d      	mov	r5, r1
 8009762:	4616      	mov	r6, r2
 8009764:	b085      	sub	sp, #20
 8009766:	d203      	bcs.n	8009770 <__kernel_sin+0x20>
 8009768:	f7f7 f966 	bl	8000a38 <__aeabi_d2iz>
 800976c:	2800      	cmp	r0, #0
 800976e:	d051      	beq.n	8009814 <__kernel_sin+0xc4>
 8009770:	4622      	mov	r2, r4
 8009772:	462b      	mov	r3, r5
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 feae 	bl	80004d8 <__aeabi_dmul>
 800977c:	4682      	mov	sl, r0
 800977e:	468b      	mov	fp, r1
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4620      	mov	r0, r4
 8009786:	4629      	mov	r1, r5
 8009788:	f7f6 fea6 	bl	80004d8 <__aeabi_dmul>
 800978c:	a33e      	add	r3, pc, #248	@ (adr r3, 8009888 <__kernel_sin+0x138>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	4680      	mov	r8, r0
 8009794:	4689      	mov	r9, r1
 8009796:	4650      	mov	r0, sl
 8009798:	4659      	mov	r1, fp
 800979a:	f7f6 fe9d 	bl	80004d8 <__aeabi_dmul>
 800979e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009890 <__kernel_sin+0x140>)
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f7f6 fce0 	bl	8000168 <__aeabi_dsub>
 80097a8:	4652      	mov	r2, sl
 80097aa:	465b      	mov	r3, fp
 80097ac:	f7f6 fe94 	bl	80004d8 <__aeabi_dmul>
 80097b0:	a339      	add	r3, pc, #228	@ (adr r3, 8009898 <__kernel_sin+0x148>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f6 fcd9 	bl	800016c <__adddf3>
 80097ba:	4652      	mov	r2, sl
 80097bc:	465b      	mov	r3, fp
 80097be:	f7f6 fe8b 	bl	80004d8 <__aeabi_dmul>
 80097c2:	a337      	add	r3, pc, #220	@ (adr r3, 80098a0 <__kernel_sin+0x150>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 fcce 	bl	8000168 <__aeabi_dsub>
 80097cc:	4652      	mov	r2, sl
 80097ce:	465b      	mov	r3, fp
 80097d0:	f7f6 fe82 	bl	80004d8 <__aeabi_dmul>
 80097d4:	a334      	add	r3, pc, #208	@ (adr r3, 80098a8 <__kernel_sin+0x158>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	f7f6 fcc7 	bl	800016c <__adddf3>
 80097de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e0:	e9cd 0100 	strd	r0, r1, [sp]
 80097e4:	b9db      	cbnz	r3, 800981e <__kernel_sin+0xce>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4650      	mov	r0, sl
 80097ec:	4659      	mov	r1, fp
 80097ee:	f7f6 fe73 	bl	80004d8 <__aeabi_dmul>
 80097f2:	a32f      	add	r3, pc, #188	@ (adr r3, 80098b0 <__kernel_sin+0x160>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fcb6 	bl	8000168 <__aeabi_dsub>
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	f7f6 fe6a 	bl	80004d8 <__aeabi_dmul>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4620      	mov	r0, r4
 800980a:	4629      	mov	r1, r5
 800980c:	f7f6 fcae 	bl	800016c <__adddf3>
 8009810:	4604      	mov	r4, r0
 8009812:	460d      	mov	r5, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	b005      	add	sp, #20
 800981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981e:	2200      	movs	r2, #0
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	4b24      	ldr	r3, [pc, #144]	@ (80098b8 <__kernel_sin+0x168>)
 8009826:	f7f6 fe57 	bl	80004d8 <__aeabi_dmul>
 800982a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800982e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009832:	4640      	mov	r0, r8
 8009834:	4649      	mov	r1, r9
 8009836:	f7f6 fe4f 	bl	80004d8 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009842:	f7f6 fc91 	bl	8000168 <__aeabi_dsub>
 8009846:	4652      	mov	r2, sl
 8009848:	465b      	mov	r3, fp
 800984a:	f7f6 fe45 	bl	80004d8 <__aeabi_dmul>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	f7f6 fc89 	bl	8000168 <__aeabi_dsub>
 8009856:	a316      	add	r3, pc, #88	@ (adr r3, 80098b0 <__kernel_sin+0x160>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	4606      	mov	r6, r0
 800985e:	460f      	mov	r7, r1
 8009860:	4640      	mov	r0, r8
 8009862:	4649      	mov	r1, r9
 8009864:	f7f6 fe38 	bl	80004d8 <__aeabi_dmul>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4630      	mov	r0, r6
 800986e:	4639      	mov	r1, r7
 8009870:	f7f6 fc7c 	bl	800016c <__adddf3>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fc74 	bl	8000168 <__aeabi_dsub>
 8009880:	e7c6      	b.n	8009810 <__kernel_sin+0xc0>
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	5acfd57c 	.word	0x5acfd57c
 800988c:	3de5d93a 	.word	0x3de5d93a
 8009890:	8a2b9ceb 	.word	0x8a2b9ceb
 8009894:	3e5ae5e6 	.word	0x3e5ae5e6
 8009898:	57b1fe7d 	.word	0x57b1fe7d
 800989c:	3ec71de3 	.word	0x3ec71de3
 80098a0:	19c161d5 	.word	0x19c161d5
 80098a4:	3f2a01a0 	.word	0x3f2a01a0
 80098a8:	1110f8a6 	.word	0x1110f8a6
 80098ac:	3f811111 	.word	0x3f811111
 80098b0:	55555549 	.word	0x55555549
 80098b4:	3fc55555 	.word	0x3fc55555
 80098b8:	3fe00000 	.word	0x3fe00000
 80098bc:	00000000 	.word	0x00000000

080098c0 <__ieee754_atan2>:
 80098c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	4617      	mov	r7, r2
 80098c6:	4690      	mov	r8, r2
 80098c8:	4699      	mov	r9, r3
 80098ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80098ce:	427b      	negs	r3, r7
 80098d0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009a58 <__ieee754_atan2+0x198>
 80098d4:	433b      	orrs	r3, r7
 80098d6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80098da:	4553      	cmp	r3, sl
 80098dc:	4604      	mov	r4, r0
 80098de:	460d      	mov	r5, r1
 80098e0:	d809      	bhi.n	80098f6 <__ieee754_atan2+0x36>
 80098e2:	4246      	negs	r6, r0
 80098e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098e8:	4306      	orrs	r6, r0
 80098ea:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80098ee:	4556      	cmp	r6, sl
 80098f0:	468e      	mov	lr, r1
 80098f2:	4683      	mov	fp, r0
 80098f4:	d908      	bls.n	8009908 <__ieee754_atan2+0x48>
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f6 fc35 	bl	800016c <__adddf3>
 8009902:	4604      	mov	r4, r0
 8009904:	460d      	mov	r5, r1
 8009906:	e016      	b.n	8009936 <__ieee754_atan2+0x76>
 8009908:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800990c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009910:	433e      	orrs	r6, r7
 8009912:	d103      	bne.n	800991c <__ieee754_atan2+0x5c>
 8009914:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	f000 ba9e 	b.w	8009e58 <atan>
 800991c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009920:	f006 0602 	and.w	r6, r6, #2
 8009924:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009928:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800992c:	d107      	bne.n	800993e <__ieee754_atan2+0x7e>
 800992e:	2e02      	cmp	r6, #2
 8009930:	d064      	beq.n	80099fc <__ieee754_atan2+0x13c>
 8009932:	2e03      	cmp	r6, #3
 8009934:	d066      	beq.n	8009a04 <__ieee754_atan2+0x144>
 8009936:	4620      	mov	r0, r4
 8009938:	4629      	mov	r1, r5
 800993a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993e:	4317      	orrs	r7, r2
 8009940:	d106      	bne.n	8009950 <__ieee754_atan2+0x90>
 8009942:	f1be 0f00 	cmp.w	lr, #0
 8009946:	db68      	blt.n	8009a1a <__ieee754_atan2+0x15a>
 8009948:	a537      	add	r5, pc, #220	@ (adr r5, 8009a28 <__ieee754_atan2+0x168>)
 800994a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800994e:	e7f2      	b.n	8009936 <__ieee754_atan2+0x76>
 8009950:	4552      	cmp	r2, sl
 8009952:	d10f      	bne.n	8009974 <__ieee754_atan2+0xb4>
 8009954:	4293      	cmp	r3, r2
 8009956:	f106 36ff 	add.w	r6, r6, #4294967295
 800995a:	d107      	bne.n	800996c <__ieee754_atan2+0xac>
 800995c:	2e02      	cmp	r6, #2
 800995e:	d855      	bhi.n	8009a0c <__ieee754_atan2+0x14c>
 8009960:	4b3e      	ldr	r3, [pc, #248]	@ (8009a5c <__ieee754_atan2+0x19c>)
 8009962:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009966:	e9d3 4500 	ldrd	r4, r5, [r3]
 800996a:	e7e4      	b.n	8009936 <__ieee754_atan2+0x76>
 800996c:	2e02      	cmp	r6, #2
 800996e:	d851      	bhi.n	8009a14 <__ieee754_atan2+0x154>
 8009970:	4b3b      	ldr	r3, [pc, #236]	@ (8009a60 <__ieee754_atan2+0x1a0>)
 8009972:	e7f6      	b.n	8009962 <__ieee754_atan2+0xa2>
 8009974:	4553      	cmp	r3, sl
 8009976:	d0e4      	beq.n	8009942 <__ieee754_atan2+0x82>
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800997e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009982:	da21      	bge.n	80099c8 <__ieee754_atan2+0x108>
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	da01      	bge.n	800998e <__ieee754_atan2+0xce>
 800998a:	323c      	adds	r2, #60	@ 0x3c
 800998c:	db20      	blt.n	80099d0 <__ieee754_atan2+0x110>
 800998e:	4642      	mov	r2, r8
 8009990:	464b      	mov	r3, r9
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f6 fec9 	bl	800072c <__aeabi_ddiv>
 800999a:	f000 fbed 	bl	800a178 <fabs>
 800999e:	f000 fa5b 	bl	8009e58 <atan>
 80099a2:	4604      	mov	r4, r0
 80099a4:	460d      	mov	r5, r1
 80099a6:	2e01      	cmp	r6, #1
 80099a8:	d015      	beq.n	80099d6 <__ieee754_atan2+0x116>
 80099aa:	2e02      	cmp	r6, #2
 80099ac:	d017      	beq.n	80099de <__ieee754_atan2+0x11e>
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d0c1      	beq.n	8009936 <__ieee754_atan2+0x76>
 80099b2:	a31f      	add	r3, pc, #124	@ (adr r3, 8009a30 <__ieee754_atan2+0x170>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fbd4 	bl	8000168 <__aeabi_dsub>
 80099c0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009a38 <__ieee754_atan2+0x178>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	e016      	b.n	80099f6 <__ieee754_atan2+0x136>
 80099c8:	a517      	add	r5, pc, #92	@ (adr r5, 8009a28 <__ieee754_atan2+0x168>)
 80099ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099ce:	e7ea      	b.n	80099a6 <__ieee754_atan2+0xe6>
 80099d0:	2400      	movs	r4, #0
 80099d2:	2500      	movs	r5, #0
 80099d4:	e7e7      	b.n	80099a6 <__ieee754_atan2+0xe6>
 80099d6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80099da:	461d      	mov	r5, r3
 80099dc:	e7ab      	b.n	8009936 <__ieee754_atan2+0x76>
 80099de:	a314      	add	r3, pc, #80	@ (adr r3, 8009a30 <__ieee754_atan2+0x170>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fbbe 	bl	8000168 <__aeabi_dsub>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	a111      	add	r1, pc, #68	@ (adr r1, 8009a38 <__ieee754_atan2+0x178>)
 80099f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f6:	f7f6 fbb7 	bl	8000168 <__aeabi_dsub>
 80099fa:	e782      	b.n	8009902 <__ieee754_atan2+0x42>
 80099fc:	a50e      	add	r5, pc, #56	@ (adr r5, 8009a38 <__ieee754_atan2+0x178>)
 80099fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a02:	e798      	b.n	8009936 <__ieee754_atan2+0x76>
 8009a04:	a50e      	add	r5, pc, #56	@ (adr r5, 8009a40 <__ieee754_atan2+0x180>)
 8009a06:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a0a:	e794      	b.n	8009936 <__ieee754_atan2+0x76>
 8009a0c:	a50e      	add	r5, pc, #56	@ (adr r5, 8009a48 <__ieee754_atan2+0x188>)
 8009a0e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a12:	e790      	b.n	8009936 <__ieee754_atan2+0x76>
 8009a14:	2400      	movs	r4, #0
 8009a16:	2500      	movs	r5, #0
 8009a18:	e78d      	b.n	8009936 <__ieee754_atan2+0x76>
 8009a1a:	a50d      	add	r5, pc, #52	@ (adr r5, 8009a50 <__ieee754_atan2+0x190>)
 8009a1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a20:	e789      	b.n	8009936 <__ieee754_atan2+0x76>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
 8009a28:	54442d18 	.word	0x54442d18
 8009a2c:	3ff921fb 	.word	0x3ff921fb
 8009a30:	33145c07 	.word	0x33145c07
 8009a34:	3ca1a626 	.word	0x3ca1a626
 8009a38:	54442d18 	.word	0x54442d18
 8009a3c:	400921fb 	.word	0x400921fb
 8009a40:	54442d18 	.word	0x54442d18
 8009a44:	c00921fb 	.word	0xc00921fb
 8009a48:	54442d18 	.word	0x54442d18
 8009a4c:	3fe921fb 	.word	0x3fe921fb
 8009a50:	54442d18 	.word	0x54442d18
 8009a54:	bff921fb 	.word	0xbff921fb
 8009a58:	7ff00000 	.word	0x7ff00000
 8009a5c:	0800bb60 	.word	0x0800bb60
 8009a60:	0800bb48 	.word	0x0800bb48
 8009a64:	00000000 	.word	0x00000000

08009a68 <__ieee754_rem_pio2>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	4bc4      	ldr	r3, [pc, #784]	@ (8009d80 <__ieee754_rem_pio2+0x318>)
 8009a6e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009a72:	b08d      	sub	sp, #52	@ 0x34
 8009a74:	4598      	cmp	r8, r3
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	4614      	mov	r4, r2
 8009a7c:	9104      	str	r1, [sp, #16]
 8009a7e:	d807      	bhi.n	8009a90 <__ieee754_rem_pio2+0x28>
 8009a80:	e9c2 6700 	strd	r6, r7, [r2]
 8009a84:	2300      	movs	r3, #0
 8009a86:	2200      	movs	r2, #0
 8009a88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	e026      	b.n	8009ade <__ieee754_rem_pio2+0x76>
 8009a90:	4bbc      	ldr	r3, [pc, #752]	@ (8009d84 <__ieee754_rem_pio2+0x31c>)
 8009a92:	4598      	cmp	r8, r3
 8009a94:	d876      	bhi.n	8009b84 <__ieee754_rem_pio2+0x11c>
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	4dbb      	ldr	r5, [pc, #748]	@ (8009d88 <__ieee754_rem_pio2+0x320>)
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009d48 <__ieee754_rem_pio2+0x2e0>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	dd38      	ble.n	8009b16 <__ieee754_rem_pio2+0xae>
 8009aa4:	f7f6 fb60 	bl	8000168 <__aeabi_dsub>
 8009aa8:	45a8      	cmp	r8, r5
 8009aaa:	4606      	mov	r6, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	d01a      	beq.n	8009ae6 <__ieee754_rem_pio2+0x7e>
 8009ab0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009d50 <__ieee754_rem_pio2+0x2e8>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fb57 	bl	8000168 <__aeabi_dsub>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4689      	mov	r9, r1
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	4639      	mov	r1, r7
 8009ac6:	f7f6 fb4f 	bl	8000168 <__aeabi_dsub>
 8009aca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009d50 <__ieee754_rem_pio2+0x2e8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fb4a 	bl	8000168 <__aeabi_dsub>
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	e9c4 8900 	strd	r8, r9, [r4]
 8009ada:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ade:	4628      	mov	r0, r5
 8009ae0:	b00d      	add	sp, #52	@ 0x34
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	a39c      	add	r3, pc, #624	@ (adr r3, 8009d58 <__ieee754_rem_pio2+0x2f0>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fb3c 	bl	8000168 <__aeabi_dsub>
 8009af0:	a39b      	add	r3, pc, #620	@ (adr r3, 8009d60 <__ieee754_rem_pio2+0x2f8>)
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	4606      	mov	r6, r0
 8009af8:	460f      	mov	r7, r1
 8009afa:	f7f6 fb35 	bl	8000168 <__aeabi_dsub>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4680      	mov	r8, r0
 8009b04:	4689      	mov	r9, r1
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fb2d 	bl	8000168 <__aeabi_dsub>
 8009b0e:	a394      	add	r3, pc, #592	@ (adr r3, 8009d60 <__ieee754_rem_pio2+0x2f8>)
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	e7dc      	b.n	8009ad0 <__ieee754_rem_pio2+0x68>
 8009b16:	f7f6 fb29 	bl	800016c <__adddf3>
 8009b1a:	45a8      	cmp	r8, r5
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	d018      	beq.n	8009b54 <__ieee754_rem_pio2+0xec>
 8009b22:	a38b      	add	r3, pc, #556	@ (adr r3, 8009d50 <__ieee754_rem_pio2+0x2e8>)
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f7f6 fb20 	bl	800016c <__adddf3>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 fb16 	bl	8000168 <__aeabi_dsub>
 8009b3c:	a384      	add	r3, pc, #528	@ (adr r3, 8009d50 <__ieee754_rem_pio2+0x2e8>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fb13 	bl	800016c <__adddf3>
 8009b46:	f04f 35ff 	mov.w	r5, #4294967295
 8009b4a:	e9c4 8900 	strd	r8, r9, [r4]
 8009b4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b52:	e7c4      	b.n	8009ade <__ieee754_rem_pio2+0x76>
 8009b54:	a380      	add	r3, pc, #512	@ (adr r3, 8009d58 <__ieee754_rem_pio2+0x2f0>)
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	f7f6 fb07 	bl	800016c <__adddf3>
 8009b5e:	a380      	add	r3, pc, #512	@ (adr r3, 8009d60 <__ieee754_rem_pio2+0x2f8>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	f7f6 fb00 	bl	800016c <__adddf3>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4680      	mov	r8, r0
 8009b72:	4689      	mov	r9, r1
 8009b74:	4630      	mov	r0, r6
 8009b76:	4639      	mov	r1, r7
 8009b78:	f7f6 faf6 	bl	8000168 <__aeabi_dsub>
 8009b7c:	a378      	add	r3, pc, #480	@ (adr r3, 8009d60 <__ieee754_rem_pio2+0x2f8>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	e7de      	b.n	8009b42 <__ieee754_rem_pio2+0xda>
 8009b84:	4b81      	ldr	r3, [pc, #516]	@ (8009d8c <__ieee754_rem_pio2+0x324>)
 8009b86:	4598      	cmp	r8, r3
 8009b88:	f200 80cf 	bhi.w	8009d2a <__ieee754_rem_pio2+0x2c2>
 8009b8c:	f000 faf4 	bl	800a178 <fabs>
 8009b90:	a375      	add	r3, pc, #468	@ (adr r3, 8009d68 <__ieee754_rem_pio2+0x300>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	4606      	mov	r6, r0
 8009b98:	460f      	mov	r7, r1
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8009d90 <__ieee754_rem_pio2+0x328>)
 8009ba2:	f7f6 fae3 	bl	800016c <__adddf3>
 8009ba6:	f7f6 ff47 	bl	8000a38 <__aeabi_d2iz>
 8009baa:	4605      	mov	r5, r0
 8009bac:	f7f6 fc2a 	bl	8000404 <__aeabi_i2d>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bb8:	a363      	add	r3, pc, #396	@ (adr r3, 8009d48 <__ieee754_rem_pio2+0x2e0>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fc8b 	bl	80004d8 <__aeabi_dmul>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	4639      	mov	r1, r7
 8009bca:	f7f6 facd 	bl	8000168 <__aeabi_dsub>
 8009bce:	a360      	add	r3, pc, #384	@ (adr r3, 8009d50 <__ieee754_rem_pio2+0x2e8>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	468b      	mov	fp, r1
 8009bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bdc:	f7f6 fc7c 	bl	80004d8 <__aeabi_dmul>
 8009be0:	2d1f      	cmp	r5, #31
 8009be2:	4606      	mov	r6, r0
 8009be4:	460f      	mov	r7, r1
 8009be6:	dc0c      	bgt.n	8009c02 <__ieee754_rem_pio2+0x19a>
 8009be8:	4b6a      	ldr	r3, [pc, #424]	@ (8009d94 <__ieee754_rem_pio2+0x32c>)
 8009bea:	1e6a      	subs	r2, r5, #1
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	4543      	cmp	r3, r8
 8009bf2:	d006      	beq.n	8009c02 <__ieee754_rem_pio2+0x19a>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	f7f6 fab4 	bl	8000168 <__aeabi_dsub>
 8009c00:	e00e      	b.n	8009c20 <__ieee754_rem_pio2+0x1b8>
 8009c02:	463b      	mov	r3, r7
 8009c04:	4632      	mov	r2, r6
 8009c06:	4650      	mov	r0, sl
 8009c08:	4659      	mov	r1, fp
 8009c0a:	f7f6 faad 	bl	8000168 <__aeabi_dsub>
 8009c0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009c1c:	2b10      	cmp	r3, #16
 8009c1e:	dc02      	bgt.n	8009c26 <__ieee754_rem_pio2+0x1be>
 8009c20:	e9c4 0100 	strd	r0, r1, [r4]
 8009c24:	e039      	b.n	8009c9a <__ieee754_rem_pio2+0x232>
 8009c26:	a34c      	add	r3, pc, #304	@ (adr r3, 8009d58 <__ieee754_rem_pio2+0x2f0>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c30:	f7f6 fc52 	bl	80004d8 <__aeabi_dmul>
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	4659      	mov	r1, fp
 8009c40:	f7f6 fa92 	bl	8000168 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4689      	mov	r9, r1
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	4659      	mov	r1, fp
 8009c50:	f7f6 fa8a 	bl	8000168 <__aeabi_dsub>
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	f7f6 fa86 	bl	8000168 <__aeabi_dsub>
 8009c5c:	a340      	add	r3, pc, #256	@ (adr r3, 8009d60 <__ieee754_rem_pio2+0x2f8>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6a:	f7f6 fc35 	bl	80004d8 <__aeabi_dmul>
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	f7f6 fa79 	bl	8000168 <__aeabi_dsub>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4640      	mov	r0, r8
 8009c80:	4649      	mov	r1, r9
 8009c82:	f7f6 fa71 	bl	8000168 <__aeabi_dsub>
 8009c86:	9a05      	ldr	r2, [sp, #20]
 8009c88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b31      	cmp	r3, #49	@ 0x31
 8009c90:	dc20      	bgt.n	8009cd4 <__ieee754_rem_pio2+0x26c>
 8009c92:	46c2      	mov	sl, r8
 8009c94:	46cb      	mov	fp, r9
 8009c96:	e9c4 0100 	strd	r0, r1, [r4]
 8009c9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	4642      	mov	r2, r8
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	f7f6 fa5f 	bl	8000168 <__aeabi_dsub>
 8009caa:	463b      	mov	r3, r7
 8009cac:	4632      	mov	r2, r6
 8009cae:	f7f6 fa5b 	bl	8000168 <__aeabi_dsub>
 8009cb2:	9b04      	ldr	r3, [sp, #16]
 8009cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f6bf af10 	bge.w	8009ade <__ieee754_rem_pio2+0x76>
 8009cbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cc8:	f8c4 8000 	str.w	r8, [r4]
 8009ccc:	60a0      	str	r0, [r4, #8]
 8009cce:	60e3      	str	r3, [r4, #12]
 8009cd0:	426d      	negs	r5, r5
 8009cd2:	e704      	b.n	8009ade <__ieee754_rem_pio2+0x76>
 8009cd4:	a326      	add	r3, pc, #152	@ (adr r3, 8009d70 <__ieee754_rem_pio2+0x308>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cde:	f7f6 fbfb 	bl	80004d8 <__aeabi_dmul>
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 fa3b 	bl	8000168 <__aeabi_dsub>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4682      	mov	sl, r0
 8009cf8:	468b      	mov	fp, r1
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 fa33 	bl	8000168 <__aeabi_dsub>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	f7f6 fa2f 	bl	8000168 <__aeabi_dsub>
 8009d0a:	a31b      	add	r3, pc, #108	@ (adr r3, 8009d78 <__ieee754_rem_pio2+0x310>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4606      	mov	r6, r0
 8009d12:	460f      	mov	r7, r1
 8009d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d18:	f7f6 fbde 	bl	80004d8 <__aeabi_dmul>
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	463b      	mov	r3, r7
 8009d20:	f7f6 fa22 	bl	8000168 <__aeabi_dsub>
 8009d24:	4606      	mov	r6, r0
 8009d26:	460f      	mov	r7, r1
 8009d28:	e764      	b.n	8009bf4 <__ieee754_rem_pio2+0x18c>
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <__ieee754_rem_pio2+0x330>)
 8009d2c:	4598      	cmp	r8, r3
 8009d2e:	d935      	bls.n	8009d9c <__ieee754_rem_pio2+0x334>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	f7f6 fa18 	bl	8000168 <__aeabi_dsub>
 8009d38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d3c:	e9c4 0100 	strd	r0, r1, [r4]
 8009d40:	e6a4      	b.n	8009a8c <__ieee754_rem_pio2+0x24>
 8009d42:	bf00      	nop
 8009d44:	f3af 8000 	nop.w
 8009d48:	54400000 	.word	0x54400000
 8009d4c:	3ff921fb 	.word	0x3ff921fb
 8009d50:	1a626331 	.word	0x1a626331
 8009d54:	3dd0b461 	.word	0x3dd0b461
 8009d58:	1a600000 	.word	0x1a600000
 8009d5c:	3dd0b461 	.word	0x3dd0b461
 8009d60:	2e037073 	.word	0x2e037073
 8009d64:	3ba3198a 	.word	0x3ba3198a
 8009d68:	6dc9c883 	.word	0x6dc9c883
 8009d6c:	3fe45f30 	.word	0x3fe45f30
 8009d70:	2e000000 	.word	0x2e000000
 8009d74:	3ba3198a 	.word	0x3ba3198a
 8009d78:	252049c1 	.word	0x252049c1
 8009d7c:	397b839a 	.word	0x397b839a
 8009d80:	3fe921fb 	.word	0x3fe921fb
 8009d84:	4002d97b 	.word	0x4002d97b
 8009d88:	3ff921fb 	.word	0x3ff921fb
 8009d8c:	413921fb 	.word	0x413921fb
 8009d90:	3fe00000 	.word	0x3fe00000
 8009d94:	0800bb78 	.word	0x0800bb78
 8009d98:	7fefffff 	.word	0x7fefffff
 8009d9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009da0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009da4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009da8:	460f      	mov	r7, r1
 8009daa:	f7f6 fe45 	bl	8000a38 <__aeabi_d2iz>
 8009dae:	f7f6 fb29 	bl	8000404 <__aeabi_i2d>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dbe:	f7f6 f9d3 	bl	8000168 <__aeabi_dsub>
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4b21      	ldr	r3, [pc, #132]	@ (8009e4c <__ieee754_rem_pio2+0x3e4>)
 8009dc6:	f7f6 fb87 	bl	80004d8 <__aeabi_dmul>
 8009dca:	460f      	mov	r7, r1
 8009dcc:	4606      	mov	r6, r0
 8009dce:	f7f6 fe33 	bl	8000a38 <__aeabi_d2iz>
 8009dd2:	f7f6 fb17 	bl	8000404 <__aeabi_i2d>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009de2:	f7f6 f9c1 	bl	8000168 <__aeabi_dsub>
 8009de6:	2200      	movs	r2, #0
 8009de8:	4b18      	ldr	r3, [pc, #96]	@ (8009e4c <__ieee754_rem_pio2+0x3e4>)
 8009dea:	f7f6 fb75 	bl	80004d8 <__aeabi_dmul>
 8009dee:	f04f 0803 	mov.w	r8, #3
 8009df2:	2600      	movs	r6, #0
 8009df4:	2700      	movs	r7, #0
 8009df6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009dfa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009dfe:	4632      	mov	r2, r6
 8009e00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009e04:	463b      	mov	r3, r7
 8009e06:	46c2      	mov	sl, r8
 8009e08:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e0c:	f7f6 fdcc 	bl	80009a8 <__aeabi_dcmpeq>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1f4      	bne.n	8009dfe <__ieee754_rem_pio2+0x396>
 8009e14:	4b0e      	ldr	r3, [pc, #56]	@ (8009e50 <__ieee754_rem_pio2+0x3e8>)
 8009e16:	462a      	mov	r2, r5
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	a806      	add	r0, sp, #24
 8009e22:	4653      	mov	r3, sl
 8009e24:	f000 f9ac 	bl	800a180 <__kernel_rem_pio2>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f6bf ae56 	bge.w	8009ade <__ieee754_rem_pio2+0x76>
 8009e32:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009e36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e3a:	e9c4 2300 	strd	r2, r3, [r4]
 8009e3e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009e42:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e46:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009e4a:	e741      	b.n	8009cd0 <__ieee754_rem_pio2+0x268>
 8009e4c:	41700000 	.word	0x41700000
 8009e50:	0800bbf8 	.word	0x0800bbf8
 8009e54:	00000000 	.word	0x00000000

08009e58 <atan>:
 8009e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	4bbc      	ldr	r3, [pc, #752]	@ (800a150 <atan+0x2f8>)
 8009e5e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009e62:	429e      	cmp	r6, r3
 8009e64:	4604      	mov	r4, r0
 8009e66:	460d      	mov	r5, r1
 8009e68:	468b      	mov	fp, r1
 8009e6a:	d918      	bls.n	8009e9e <atan+0x46>
 8009e6c:	4bb9      	ldr	r3, [pc, #740]	@ (800a154 <atan+0x2fc>)
 8009e6e:	429e      	cmp	r6, r3
 8009e70:	d801      	bhi.n	8009e76 <atan+0x1e>
 8009e72:	d109      	bne.n	8009e88 <atan+0x30>
 8009e74:	b140      	cbz	r0, 8009e88 <atan+0x30>
 8009e76:	4622      	mov	r2, r4
 8009e78:	462b      	mov	r3, r5
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	f7f6 f975 	bl	800016c <__adddf3>
 8009e82:	4604      	mov	r4, r0
 8009e84:	460d      	mov	r5, r1
 8009e86:	e006      	b.n	8009e96 <atan+0x3e>
 8009e88:	f1bb 0f00 	cmp.w	fp, #0
 8009e8c:	f340 8123 	ble.w	800a0d6 <atan+0x27e>
 8009e90:	a593      	add	r5, pc, #588	@ (adr r5, 800a0e0 <atan+0x288>)
 8009e92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4bae      	ldr	r3, [pc, #696]	@ (800a158 <atan+0x300>)
 8009ea0:	429e      	cmp	r6, r3
 8009ea2:	d811      	bhi.n	8009ec8 <atan+0x70>
 8009ea4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009ea8:	429e      	cmp	r6, r3
 8009eaa:	d80a      	bhi.n	8009ec2 <atan+0x6a>
 8009eac:	a38e      	add	r3, pc, #568	@ (adr r3, 800a0e8 <atan+0x290>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f7f6 f95b 	bl	800016c <__adddf3>
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	4ba8      	ldr	r3, [pc, #672]	@ (800a15c <atan+0x304>)
 8009eba:	f7f6 fd9d 	bl	80009f8 <__aeabi_dcmpgt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1e9      	bne.n	8009e96 <atan+0x3e>
 8009ec2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ec6:	e027      	b.n	8009f18 <atan+0xc0>
 8009ec8:	f000 f956 	bl	800a178 <fabs>
 8009ecc:	4ba4      	ldr	r3, [pc, #656]	@ (800a160 <atan+0x308>)
 8009ece:	4604      	mov	r4, r0
 8009ed0:	429e      	cmp	r6, r3
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	f200 80b8 	bhi.w	800a048 <atan+0x1f0>
 8009ed8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009edc:	429e      	cmp	r6, r3
 8009ede:	f200 809c 	bhi.w	800a01a <atan+0x1c2>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	f7f6 f941 	bl	800016c <__adddf3>
 8009eea:	2200      	movs	r2, #0
 8009eec:	4b9b      	ldr	r3, [pc, #620]	@ (800a15c <atan+0x304>)
 8009eee:	f7f6 f93b 	bl	8000168 <__aeabi_dsub>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 f934 	bl	800016c <__adddf3>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f7f6 fc0e 	bl	800072c <__aeabi_ddiv>
 8009f10:	f04f 0a00 	mov.w	sl, #0
 8009f14:	4604      	mov	r4, r0
 8009f16:	460d      	mov	r5, r1
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 fada 	bl	80004d8 <__aeabi_dmul>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4680      	mov	r8, r0
 8009f2a:	4689      	mov	r9, r1
 8009f2c:	f7f6 fad4 	bl	80004d8 <__aeabi_dmul>
 8009f30:	a36f      	add	r3, pc, #444	@ (adr r3, 800a0f0 <atan+0x298>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	f7f6 facd 	bl	80004d8 <__aeabi_dmul>
 8009f3e:	a36e      	add	r3, pc, #440	@ (adr r3, 800a0f8 <atan+0x2a0>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f7f6 f912 	bl	800016c <__adddf3>
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 fac4 	bl	80004d8 <__aeabi_dmul>
 8009f50:	a36b      	add	r3, pc, #428	@ (adr r3, 800a100 <atan+0x2a8>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f909 	bl	800016c <__adddf3>
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	f7f6 fabb 	bl	80004d8 <__aeabi_dmul>
 8009f62:	a369      	add	r3, pc, #420	@ (adr r3, 800a108 <atan+0x2b0>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f900 	bl	800016c <__adddf3>
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	f7f6 fab2 	bl	80004d8 <__aeabi_dmul>
 8009f74:	a366      	add	r3, pc, #408	@ (adr r3, 800a110 <atan+0x2b8>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f8f7 	bl	800016c <__adddf3>
 8009f7e:	4632      	mov	r2, r6
 8009f80:	463b      	mov	r3, r7
 8009f82:	f7f6 faa9 	bl	80004d8 <__aeabi_dmul>
 8009f86:	a364      	add	r3, pc, #400	@ (adr r3, 800a118 <atan+0x2c0>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f8ee 	bl	800016c <__adddf3>
 8009f90:	4642      	mov	r2, r8
 8009f92:	464b      	mov	r3, r9
 8009f94:	f7f6 faa0 	bl	80004d8 <__aeabi_dmul>
 8009f98:	a361      	add	r3, pc, #388	@ (adr r3, 800a120 <atan+0x2c8>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	4689      	mov	r9, r1
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	f7f6 fa97 	bl	80004d8 <__aeabi_dmul>
 8009faa:	a35f      	add	r3, pc, #380	@ (adr r3, 800a128 <atan+0x2d0>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f8da 	bl	8000168 <__aeabi_dsub>
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	f7f6 fa8e 	bl	80004d8 <__aeabi_dmul>
 8009fbc:	a35c      	add	r3, pc, #368	@ (adr r3, 800a130 <atan+0x2d8>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 f8d1 	bl	8000168 <__aeabi_dsub>
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	463b      	mov	r3, r7
 8009fca:	f7f6 fa85 	bl	80004d8 <__aeabi_dmul>
 8009fce:	a35a      	add	r3, pc, #360	@ (adr r3, 800a138 <atan+0x2e0>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 f8c8 	bl	8000168 <__aeabi_dsub>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 fa7c 	bl	80004d8 <__aeabi_dmul>
 8009fe0:	a357      	add	r3, pc, #348	@ (adr r3, 800a140 <atan+0x2e8>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 f8bf 	bl	8000168 <__aeabi_dsub>
 8009fea:	4632      	mov	r2, r6
 8009fec:	463b      	mov	r3, r7
 8009fee:	f7f6 fa73 	bl	80004d8 <__aeabi_dmul>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 f8b7 	bl	800016c <__adddf3>
 8009ffe:	4622      	mov	r2, r4
 800a000:	462b      	mov	r3, r5
 800a002:	f7f6 fa69 	bl	80004d8 <__aeabi_dmul>
 800a006:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	d144      	bne.n	800a09a <atan+0x242>
 800a010:	4620      	mov	r0, r4
 800a012:	4629      	mov	r1, r5
 800a014:	f7f6 f8a8 	bl	8000168 <__aeabi_dsub>
 800a018:	e733      	b.n	8009e82 <atan+0x2a>
 800a01a:	2200      	movs	r2, #0
 800a01c:	4b4f      	ldr	r3, [pc, #316]	@ (800a15c <atan+0x304>)
 800a01e:	f7f6 f8a3 	bl	8000168 <__aeabi_dsub>
 800a022:	2200      	movs	r2, #0
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	4b4b      	ldr	r3, [pc, #300]	@ (800a15c <atan+0x304>)
 800a02e:	f7f6 f89d 	bl	800016c <__adddf3>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4630      	mov	r0, r6
 800a038:	4639      	mov	r1, r7
 800a03a:	f7f6 fb77 	bl	800072c <__aeabi_ddiv>
 800a03e:	f04f 0a01 	mov.w	sl, #1
 800a042:	4604      	mov	r4, r0
 800a044:	460d      	mov	r5, r1
 800a046:	e767      	b.n	8009f18 <atan+0xc0>
 800a048:	4b46      	ldr	r3, [pc, #280]	@ (800a164 <atan+0x30c>)
 800a04a:	429e      	cmp	r6, r3
 800a04c:	d21a      	bcs.n	800a084 <atan+0x22c>
 800a04e:	2200      	movs	r2, #0
 800a050:	4b45      	ldr	r3, [pc, #276]	@ (800a168 <atan+0x310>)
 800a052:	f7f6 f889 	bl	8000168 <__aeabi_dsub>
 800a056:	2200      	movs	r2, #0
 800a058:	4606      	mov	r6, r0
 800a05a:	460f      	mov	r7, r1
 800a05c:	4620      	mov	r0, r4
 800a05e:	4629      	mov	r1, r5
 800a060:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <atan+0x310>)
 800a062:	f7f6 fa39 	bl	80004d8 <__aeabi_dmul>
 800a066:	2200      	movs	r2, #0
 800a068:	4b3c      	ldr	r3, [pc, #240]	@ (800a15c <atan+0x304>)
 800a06a:	f7f6 f87f 	bl	800016c <__adddf3>
 800a06e:	4602      	mov	r2, r0
 800a070:	460b      	mov	r3, r1
 800a072:	4630      	mov	r0, r6
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 fb59 	bl	800072c <__aeabi_ddiv>
 800a07a:	f04f 0a02 	mov.w	sl, #2
 800a07e:	4604      	mov	r4, r0
 800a080:	460d      	mov	r5, r1
 800a082:	e749      	b.n	8009f18 <atan+0xc0>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	2000      	movs	r0, #0
 800a08a:	4938      	ldr	r1, [pc, #224]	@ (800a16c <atan+0x314>)
 800a08c:	f7f6 fb4e 	bl	800072c <__aeabi_ddiv>
 800a090:	f04f 0a03 	mov.w	sl, #3
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	e73e      	b.n	8009f18 <atan+0xc0>
 800a09a:	4b35      	ldr	r3, [pc, #212]	@ (800a170 <atan+0x318>)
 800a09c:	4e35      	ldr	r6, [pc, #212]	@ (800a174 <atan+0x31c>)
 800a09e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f7f6 f85f 	bl	8000168 <__aeabi_dsub>
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	f7f6 f85b 	bl	8000168 <__aeabi_dsub>
 800a0b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a0be:	f7f6 f853 	bl	8000168 <__aeabi_dsub>
 800a0c2:	f1bb 0f00 	cmp.w	fp, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	f6bf aee4 	bge.w	8009e96 <atan+0x3e>
 800a0ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0d2:	461d      	mov	r5, r3
 800a0d4:	e6df      	b.n	8009e96 <atan+0x3e>
 800a0d6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a148 <atan+0x2f0>)
 800a0d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0dc:	e6db      	b.n	8009e96 <atan+0x3e>
 800a0de:	bf00      	nop
 800a0e0:	54442d18 	.word	0x54442d18
 800a0e4:	3ff921fb 	.word	0x3ff921fb
 800a0e8:	8800759c 	.word	0x8800759c
 800a0ec:	7e37e43c 	.word	0x7e37e43c
 800a0f0:	e322da11 	.word	0xe322da11
 800a0f4:	3f90ad3a 	.word	0x3f90ad3a
 800a0f8:	24760deb 	.word	0x24760deb
 800a0fc:	3fa97b4b 	.word	0x3fa97b4b
 800a100:	a0d03d51 	.word	0xa0d03d51
 800a104:	3fb10d66 	.word	0x3fb10d66
 800a108:	c54c206e 	.word	0xc54c206e
 800a10c:	3fb745cd 	.word	0x3fb745cd
 800a110:	920083ff 	.word	0x920083ff
 800a114:	3fc24924 	.word	0x3fc24924
 800a118:	5555550d 	.word	0x5555550d
 800a11c:	3fd55555 	.word	0x3fd55555
 800a120:	2c6a6c2f 	.word	0x2c6a6c2f
 800a124:	bfa2b444 	.word	0xbfa2b444
 800a128:	52defd9a 	.word	0x52defd9a
 800a12c:	3fadde2d 	.word	0x3fadde2d
 800a130:	af749a6d 	.word	0xaf749a6d
 800a134:	3fb3b0f2 	.word	0x3fb3b0f2
 800a138:	fe231671 	.word	0xfe231671
 800a13c:	3fbc71c6 	.word	0x3fbc71c6
 800a140:	9998ebc4 	.word	0x9998ebc4
 800a144:	3fc99999 	.word	0x3fc99999
 800a148:	54442d18 	.word	0x54442d18
 800a14c:	bff921fb 	.word	0xbff921fb
 800a150:	440fffff 	.word	0x440fffff
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	3fdbffff 	.word	0x3fdbffff
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	3ff2ffff 	.word	0x3ff2ffff
 800a164:	40038000 	.word	0x40038000
 800a168:	3ff80000 	.word	0x3ff80000
 800a16c:	bff00000 	.word	0xbff00000
 800a170:	0800bd00 	.word	0x0800bd00
 800a174:	0800bd20 	.word	0x0800bd20

0800a178 <fabs>:
 800a178:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a17c:	4619      	mov	r1, r3
 800a17e:	4770      	bx	lr

0800a180 <__kernel_rem_pio2>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a188:	9308      	str	r3, [sp, #32]
 800a18a:	9104      	str	r1, [sp, #16]
 800a18c:	4bba      	ldr	r3, [pc, #744]	@ (800a478 <__kernel_rem_pio2+0x2f8>)
 800a18e:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a190:	f112 0f14 	cmn.w	r2, #20
 800a194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a198:	bfa8      	it	ge
 800a19a:	1ed4      	subge	r4, r2, #3
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	bfb8      	it	lt
 800a1a2:	2400      	movlt	r4, #0
 800a1a4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1a8:	9306      	str	r3, [sp, #24]
 800a1aa:	bfa4      	itt	ge
 800a1ac:	2318      	movge	r3, #24
 800a1ae:	fb94 f4f3 	sdivge	r4, r4, r3
 800a1b2:	f06f 0317 	mvn.w	r3, #23
 800a1b6:	fb04 3303 	mla	r3, r4, r3, r3
 800a1ba:	eb03 0a02 	add.w	sl, r3, r2
 800a1be:	9a06      	ldr	r2, [sp, #24]
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	1aa7      	subs	r7, r4, r2
 800a1c4:	eb03 0802 	add.w	r8, r3, r2
 800a1c8:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9009      	str	r0, [sp, #36]	@ 0x24
 800a1d6:	ae20      	add	r6, sp, #128	@ 0x80
 800a1d8:	4545      	cmp	r5, r8
 800a1da:	dd13      	ble.n	800a204 <__kernel_rem_pio2+0x84>
 800a1dc:	2700      	movs	r7, #0
 800a1de:	9a08      	ldr	r2, [sp, #32]
 800a1e0:	ab20      	add	r3, sp, #128	@ 0x80
 800a1e2:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a1e6:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a1ea:	9b02      	ldr	r3, [sp, #8]
 800a1ec:	429f      	cmp	r7, r3
 800a1ee:	dc33      	bgt.n	800a258 <__kernel_rem_pio2+0xd8>
 800a1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f1a3 0908 	sub.w	r9, r3, #8
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	46a8      	mov	r8, r5
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	e9cd 2300 	strd	r2, r3, [sp]
 800a202:	e01f      	b.n	800a244 <__kernel_rem_pio2+0xc4>
 800a204:	42ef      	cmn	r7, r5
 800a206:	d40b      	bmi.n	800a220 <__kernel_rem_pio2+0xa0>
 800a208:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a20c:	e9cd 2300 	strd	r2, r3, [sp]
 800a210:	f7f6 f8f8 	bl	8000404 <__aeabi_i2d>
 800a214:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a218:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a21c:	3501      	adds	r5, #1
 800a21e:	e7db      	b.n	800a1d8 <__kernel_rem_pio2+0x58>
 800a220:	4610      	mov	r0, r2
 800a222:	4619      	mov	r1, r3
 800a224:	e7f8      	b.n	800a218 <__kernel_rem_pio2+0x98>
 800a226:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a22a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a22e:	f7f6 f953 	bl	80004d8 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a23a:	f7f5 ff97 	bl	800016c <__adddf3>
 800a23e:	e9cd 0100 	strd	r0, r1, [sp]
 800a242:	3601      	adds	r6, #1
 800a244:	9b06      	ldr	r3, [sp, #24]
 800a246:	429e      	cmp	r6, r3
 800a248:	dded      	ble.n	800a226 <__kernel_rem_pio2+0xa6>
 800a24a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a24e:	3701      	adds	r7, #1
 800a250:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a254:	3508      	adds	r5, #8
 800a256:	e7c8      	b.n	800a1ea <__kernel_rem_pio2+0x6a>
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	aa0c      	add	r2, sp, #48	@ 0x30
 800a25c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a262:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a264:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a26c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a26e:	ab98      	add	r3, sp, #608	@ 0x260
 800a270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a274:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a278:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a27a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a27e:	ae0c      	add	r6, sp, #48	@ 0x30
 800a280:	4699      	mov	r9, r3
 800a282:	46b0      	mov	r8, r6
 800a284:	465f      	mov	r7, fp
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	2f00      	cmp	r7, #0
 800a28a:	dc71      	bgt.n	800a370 <__kernel_rem_pio2+0x1f0>
 800a28c:	4652      	mov	r2, sl
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f000 fa95 	bl	800a7c0 <scalbn>
 800a296:	2200      	movs	r2, #0
 800a298:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	f7f6 f91a 	bl	80004d8 <__aeabi_dmul>
 800a2a4:	f000 fb00 	bl	800a8a8 <floor>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4b74      	ldr	r3, [pc, #464]	@ (800a47c <__kernel_rem_pio2+0x2fc>)
 800a2ac:	f7f6 f914 	bl	80004d8 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f5 ff56 	bl	8000168 <__aeabi_dsub>
 800a2bc:	460d      	mov	r5, r1
 800a2be:	4604      	mov	r4, r0
 800a2c0:	f7f6 fbba 	bl	8000a38 <__aeabi_d2iz>
 800a2c4:	9005      	str	r0, [sp, #20]
 800a2c6:	f7f6 f89d 	bl	8000404 <__aeabi_i2d>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f5 ff49 	bl	8000168 <__aeabi_dsub>
 800a2d6:	f1ba 0f00 	cmp.w	sl, #0
 800a2da:	4680      	mov	r8, r0
 800a2dc:	4689      	mov	r9, r1
 800a2de:	dd6d      	ble.n	800a3bc <__kernel_rem_pio2+0x23c>
 800a2e0:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a2e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ea:	9c05      	ldr	r4, [sp, #20]
 800a2ec:	f1ca 0018 	rsb	r0, sl, #24
 800a2f0:	fa43 f200 	asr.w	r2, r3, r0
 800a2f4:	4414      	add	r4, r2
 800a2f6:	4082      	lsls	r2, r0
 800a2f8:	1a9b      	subs	r3, r3, r2
 800a2fa:	aa0c      	add	r2, sp, #48	@ 0x30
 800a2fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a300:	f1ca 0217 	rsb	r2, sl, #23
 800a304:	9405      	str	r4, [sp, #20]
 800a306:	4113      	asrs	r3, r2
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dd64      	ble.n	800a3da <__kernel_rem_pio2+0x25a>
 800a310:	2200      	movs	r2, #0
 800a312:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a316:	4614      	mov	r4, r2
 800a318:	9b05      	ldr	r3, [sp, #20]
 800a31a:	3301      	adds	r3, #1
 800a31c:	9305      	str	r3, [sp, #20]
 800a31e:	4593      	cmp	fp, r2
 800a320:	f300 809d 	bgt.w	800a45e <__kernel_rem_pio2+0x2de>
 800a324:	f1ba 0f00 	cmp.w	sl, #0
 800a328:	dd07      	ble.n	800a33a <__kernel_rem_pio2+0x1ba>
 800a32a:	f1ba 0f01 	cmp.w	sl, #1
 800a32e:	f000 80b3 	beq.w	800a498 <__kernel_rem_pio2+0x318>
 800a332:	f1ba 0f02 	cmp.w	sl, #2
 800a336:	f000 80ba 	beq.w	800a4ae <__kernel_rem_pio2+0x32e>
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d14c      	bne.n	800a3da <__kernel_rem_pio2+0x25a>
 800a340:	4642      	mov	r2, r8
 800a342:	464b      	mov	r3, r9
 800a344:	2000      	movs	r0, #0
 800a346:	494e      	ldr	r1, [pc, #312]	@ (800a480 <__kernel_rem_pio2+0x300>)
 800a348:	f7f5 ff0e 	bl	8000168 <__aeabi_dsub>
 800a34c:	4680      	mov	r8, r0
 800a34e:	4689      	mov	r9, r1
 800a350:	2c00      	cmp	r4, #0
 800a352:	d042      	beq.n	800a3da <__kernel_rem_pio2+0x25a>
 800a354:	4652      	mov	r2, sl
 800a356:	2000      	movs	r0, #0
 800a358:	4949      	ldr	r1, [pc, #292]	@ (800a480 <__kernel_rem_pio2+0x300>)
 800a35a:	f000 fa31 	bl	800a7c0 <scalbn>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f7f5 feff 	bl	8000168 <__aeabi_dsub>
 800a36a:	4680      	mov	r8, r0
 800a36c:	4689      	mov	r9, r1
 800a36e:	e034      	b.n	800a3da <__kernel_rem_pio2+0x25a>
 800a370:	2200      	movs	r2, #0
 800a372:	4b44      	ldr	r3, [pc, #272]	@ (800a484 <__kernel_rem_pio2+0x304>)
 800a374:	4620      	mov	r0, r4
 800a376:	4629      	mov	r1, r5
 800a378:	f7f6 f8ae 	bl	80004d8 <__aeabi_dmul>
 800a37c:	f7f6 fb5c 	bl	8000a38 <__aeabi_d2iz>
 800a380:	f7f6 f840 	bl	8000404 <__aeabi_i2d>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9cd 2300 	strd	r2, r3, [sp]
 800a38c:	2200      	movs	r2, #0
 800a38e:	4b3e      	ldr	r3, [pc, #248]	@ (800a488 <__kernel_rem_pio2+0x308>)
 800a390:	f7f6 f8a2 	bl	80004d8 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 fee4 	bl	8000168 <__aeabi_dsub>
 800a3a0:	f7f6 fb4a 	bl	8000a38 <__aeabi_d2iz>
 800a3a4:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800a3a8:	f848 0b04 	str.w	r0, [r8], #4
 800a3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b0:	f7f5 fedc 	bl	800016c <__adddf3>
 800a3b4:	3f01      	subs	r7, #1
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	e765      	b.n	800a288 <__kernel_rem_pio2+0x108>
 800a3bc:	d106      	bne.n	800a3cc <__kernel_rem_pio2+0x24c>
 800a3be:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a3c2:	aa0c      	add	r2, sp, #48	@ 0x30
 800a3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3c8:	15db      	asrs	r3, r3, #23
 800a3ca:	e79d      	b.n	800a308 <__kernel_rem_pio2+0x188>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a48c <__kernel_rem_pio2+0x30c>)
 800a3d0:	f7f6 fb08 	bl	80009e4 <__aeabi_dcmpge>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d13f      	bne.n	800a458 <__kernel_rem_pio2+0x2d8>
 800a3d8:	9000      	str	r0, [sp, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 fae1 	bl	80009a8 <__aeabi_dcmpeq>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f000 80b0 	beq.w	800a54c <__kernel_rem_pio2+0x3cc>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a3f2:	9902      	ldr	r1, [sp, #8]
 800a3f4:	428b      	cmp	r3, r1
 800a3f6:	da62      	bge.n	800a4be <__kernel_rem_pio2+0x33e>
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d077      	beq.n	800a4ec <__kernel_rem_pio2+0x36c>
 800a3fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a400:	ab0c      	add	r3, sp, #48	@ 0x30
 800a402:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a406:	f1aa 0a18 	sub.w	sl, sl, #24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f6      	beq.n	800a3fc <__kernel_rem_pio2+0x27c>
 800a40e:	4652      	mov	r2, sl
 800a410:	2000      	movs	r0, #0
 800a412:	491b      	ldr	r1, [pc, #108]	@ (800a480 <__kernel_rem_pio2+0x300>)
 800a414:	f000 f9d4 	bl	800a7c0 <scalbn>
 800a418:	465d      	mov	r5, fp
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	f04f 0900 	mov.w	r9, #0
 800a422:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a424:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a484 <__kernel_rem_pio2+0x304>
 800a428:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a42c:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a430:	2d00      	cmp	r5, #0
 800a432:	f280 80c1 	bge.w	800a5b8 <__kernel_rem_pio2+0x438>
 800a436:	465d      	mov	r5, fp
 800a438:	2d00      	cmp	r5, #0
 800a43a:	f2c0 80f1 	blt.w	800a620 <__kernel_rem_pio2+0x4a0>
 800a43e:	4b14      	ldr	r3, [pc, #80]	@ (800a490 <__kernel_rem_pio2+0x310>)
 800a440:	f04f 0900 	mov.w	r9, #0
 800a444:	9306      	str	r3, [sp, #24]
 800a446:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a448:	f04f 0a00 	mov.w	sl, #0
 800a44c:	2700      	movs	r7, #0
 800a44e:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a452:	ebab 0605 	sub.w	r6, fp, r5
 800a456:	e0d7      	b.n	800a608 <__kernel_rem_pio2+0x488>
 800a458:	2302      	movs	r3, #2
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	e758      	b.n	800a310 <__kernel_rem_pio2+0x190>
 800a45e:	f856 3b04 	ldr.w	r3, [r6], #4
 800a462:	b9bc      	cbnz	r4, 800a494 <__kernel_rem_pio2+0x314>
 800a464:	b123      	cbz	r3, 800a470 <__kernel_rem_pio2+0x2f0>
 800a466:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a46a:	f846 3c04 	str.w	r3, [r6, #-4]
 800a46e:	2301      	movs	r3, #1
 800a470:	461c      	mov	r4, r3
 800a472:	3201      	adds	r2, #1
 800a474:	e753      	b.n	800a31e <__kernel_rem_pio2+0x19e>
 800a476:	bf00      	nop
 800a478:	0800bd80 	.word	0x0800bd80
 800a47c:	40200000 	.word	0x40200000
 800a480:	3ff00000 	.word	0x3ff00000
 800a484:	3e700000 	.word	0x3e700000
 800a488:	41700000 	.word	0x41700000
 800a48c:	3fe00000 	.word	0x3fe00000
 800a490:	0800bd40 	.word	0x0800bd40
 800a494:	1acb      	subs	r3, r1, r3
 800a496:	e7e8      	b.n	800a46a <__kernel_rem_pio2+0x2ea>
 800a498:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a49c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a4a6:	a90c      	add	r1, sp, #48	@ 0x30
 800a4a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a4ac:	e745      	b.n	800a33a <__kernel_rem_pio2+0x1ba>
 800a4ae:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a4b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a4bc:	e7f3      	b.n	800a4a6 <__kernel_rem_pio2+0x326>
 800a4be:	a90c      	add	r1, sp, #48	@ 0x30
 800a4c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	e793      	b.n	800a3f2 <__kernel_rem_pio2+0x272>
 800a4ca:	3401      	adds	r4, #1
 800a4cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	d0fa      	beq.n	800a4ca <__kernel_rem_pio2+0x34a>
 800a4d4:	9b08      	ldr	r3, [sp, #32]
 800a4d6:	aa20      	add	r2, sp, #128	@ 0x80
 800a4d8:	445b      	add	r3, fp
 800a4da:	f10b 0801 	add.w	r8, fp, #1
 800a4de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a4e2:	445c      	add	r4, fp
 800a4e4:	4544      	cmp	r4, r8
 800a4e6:	da04      	bge.n	800a4f2 <__kernel_rem_pio2+0x372>
 800a4e8:	46a3      	mov	fp, r4
 800a4ea:	e6c0      	b.n	800a26e <__kernel_rem_pio2+0xee>
 800a4ec:	2401      	movs	r4, #1
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f0:	e7ec      	b.n	800a4cc <__kernel_rem_pio2+0x34c>
 800a4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f4:	46ab      	mov	fp, r5
 800a4f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a4fa:	f7f5 ff83 	bl	8000404 <__aeabi_i2d>
 800a4fe:	f04f 0900 	mov.w	r9, #0
 800a502:	2600      	movs	r6, #0
 800a504:	2700      	movs	r7, #0
 800a506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a508:	e9c5 0100 	strd	r0, r1, [r5]
 800a50c:	3b08      	subs	r3, #8
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	9b06      	ldr	r3, [sp, #24]
 800a512:	4599      	cmp	r9, r3
 800a514:	dd07      	ble.n	800a526 <__kernel_rem_pio2+0x3a6>
 800a516:	9b07      	ldr	r3, [sp, #28]
 800a518:	f108 0801 	add.w	r8, r8, #1
 800a51c:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a520:	3508      	adds	r5, #8
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	e7de      	b.n	800a4e4 <__kernel_rem_pio2+0x364>
 800a526:	9900      	ldr	r1, [sp, #0]
 800a528:	f109 0901 	add.w	r9, r9, #1
 800a52c:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a530:	9100      	str	r1, [sp, #0]
 800a532:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a536:	f7f5 ffcf 	bl	80004d8 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f5 fe13 	bl	800016c <__adddf3>
 800a546:	4606      	mov	r6, r0
 800a548:	460f      	mov	r7, r1
 800a54a:	e7e1      	b.n	800a510 <__kernel_rem_pio2+0x390>
 800a54c:	f1ca 0200 	rsb	r2, sl, #0
 800a550:	4640      	mov	r0, r8
 800a552:	4649      	mov	r1, r9
 800a554:	f000 f934 	bl	800a7c0 <scalbn>
 800a558:	2200      	movs	r2, #0
 800a55a:	4b97      	ldr	r3, [pc, #604]	@ (800a7b8 <__kernel_rem_pio2+0x638>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	460d      	mov	r5, r1
 800a560:	f7f6 fa40 	bl	80009e4 <__aeabi_dcmpge>
 800a564:	b300      	cbz	r0, 800a5a8 <__kernel_rem_pio2+0x428>
 800a566:	2200      	movs	r2, #0
 800a568:	4b94      	ldr	r3, [pc, #592]	@ (800a7bc <__kernel_rem_pio2+0x63c>)
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f5 ffb3 	bl	80004d8 <__aeabi_dmul>
 800a572:	f7f6 fa61 	bl	8000a38 <__aeabi_d2iz>
 800a576:	4606      	mov	r6, r0
 800a578:	f7f5 ff44 	bl	8000404 <__aeabi_i2d>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b8e      	ldr	r3, [pc, #568]	@ (800a7b8 <__kernel_rem_pio2+0x638>)
 800a580:	f7f5 ffaa 	bl	80004d8 <__aeabi_dmul>
 800a584:	460b      	mov	r3, r1
 800a586:	4602      	mov	r2, r0
 800a588:	4629      	mov	r1, r5
 800a58a:	4620      	mov	r0, r4
 800a58c:	f7f5 fdec 	bl	8000168 <__aeabi_dsub>
 800a590:	f7f6 fa52 	bl	8000a38 <__aeabi_d2iz>
 800a594:	ab0c      	add	r3, sp, #48	@ 0x30
 800a596:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a59a:	f10b 0b01 	add.w	fp, fp, #1
 800a59e:	f10a 0a18 	add.w	sl, sl, #24
 800a5a2:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a5a6:	e732      	b.n	800a40e <__kernel_rem_pio2+0x28e>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f6 fa44 	bl	8000a38 <__aeabi_d2iz>
 800a5b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a5b2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a5b6:	e72a      	b.n	800a40e <__kernel_rem_pio2+0x28e>
 800a5b8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a5ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5be:	f7f5 ff21 	bl	8000404 <__aeabi_i2d>
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	f7f5 ff87 	bl	80004d8 <__aeabi_dmul>
 800a5ca:	464a      	mov	r2, r9
 800a5cc:	e868 0102 	strd	r0, r1, [r8], #-8
 800a5d0:	4653      	mov	r3, sl
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f5 ff7f 	bl	80004d8 <__aeabi_dmul>
 800a5da:	3d01      	subs	r5, #1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460f      	mov	r7, r1
 800a5e0:	e726      	b.n	800a430 <__kernel_rem_pio2+0x2b0>
 800a5e2:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a5e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a5ea:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a5ee:	f8cd c018 	str.w	ip, [sp, #24]
 800a5f2:	f7f5 ff71 	bl	80004d8 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4648      	mov	r0, r9
 800a5fc:	4651      	mov	r1, sl
 800a5fe:	f7f5 fdb5 	bl	800016c <__adddf3>
 800a602:	4681      	mov	r9, r0
 800a604:	468a      	mov	sl, r1
 800a606:	3701      	adds	r7, #1
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	429f      	cmp	r7, r3
 800a60c:	dc01      	bgt.n	800a612 <__kernel_rem_pio2+0x492>
 800a60e:	42b7      	cmp	r7, r6
 800a610:	dde7      	ble.n	800a5e2 <__kernel_rem_pio2+0x462>
 800a612:	ab48      	add	r3, sp, #288	@ 0x120
 800a614:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a618:	e9c6 9a00 	strd	r9, sl, [r6]
 800a61c:	3d01      	subs	r5, #1
 800a61e:	e70b      	b.n	800a438 <__kernel_rem_pio2+0x2b8>
 800a620:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a622:	2b02      	cmp	r3, #2
 800a624:	dc09      	bgt.n	800a63a <__kernel_rem_pio2+0x4ba>
 800a626:	2b00      	cmp	r3, #0
 800a628:	dc2c      	bgt.n	800a684 <__kernel_rem_pio2+0x504>
 800a62a:	d04e      	beq.n	800a6ca <__kernel_rem_pio2+0x54a>
 800a62c:	9b05      	ldr	r3, [sp, #20]
 800a62e:	f003 0007 	and.w	r0, r3, #7
 800a632:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d1f5      	bne.n	800a62c <__kernel_rem_pio2+0x4ac>
 800a640:	ab48      	add	r3, sp, #288	@ 0x120
 800a642:	441c      	add	r4, r3
 800a644:	4625      	mov	r5, r4
 800a646:	46da      	mov	sl, fp
 800a648:	f1ba 0f00 	cmp.w	sl, #0
 800a64c:	dc63      	bgt.n	800a716 <__kernel_rem_pio2+0x596>
 800a64e:	4625      	mov	r5, r4
 800a650:	46da      	mov	sl, fp
 800a652:	f1ba 0f01 	cmp.w	sl, #1
 800a656:	dc7b      	bgt.n	800a750 <__kernel_rem_pio2+0x5d0>
 800a658:	2000      	movs	r0, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	f1bb 0f01 	cmp.w	fp, #1
 800a660:	f300 8093 	bgt.w	800a78a <__kernel_rem_pio2+0x60a>
 800a664:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800a668:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800a66c:	9b00      	ldr	r3, [sp, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f040 8092 	bne.w	800a798 <__kernel_rem_pio2+0x618>
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	e9c3 5600 	strd	r5, r6, [r3]
 800a67a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a67e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a682:	e7d3      	b.n	800a62c <__kernel_rem_pio2+0x4ac>
 800a684:	465d      	mov	r5, fp
 800a686:	2000      	movs	r0, #0
 800a688:	2100      	movs	r1, #0
 800a68a:	ab48      	add	r3, sp, #288	@ 0x120
 800a68c:	441c      	add	r4, r3
 800a68e:	2d00      	cmp	r5, #0
 800a690:	da32      	bge.n	800a6f8 <__kernel_rem_pio2+0x578>
 800a692:	9b00      	ldr	r3, [sp, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d035      	beq.n	800a704 <__kernel_rem_pio2+0x584>
 800a698:	4602      	mov	r2, r0
 800a69a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a69e:	9c04      	ldr	r4, [sp, #16]
 800a6a0:	2501      	movs	r5, #1
 800a6a2:	e9c4 2300 	strd	r2, r3, [r4]
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a6ae:	f7f5 fd5b 	bl	8000168 <__aeabi_dsub>
 800a6b2:	ac48      	add	r4, sp, #288	@ 0x120
 800a6b4:	45ab      	cmp	fp, r5
 800a6b6:	da28      	bge.n	800a70a <__kernel_rem_pio2+0x58a>
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	b113      	cbz	r3, 800a6c2 <__kernel_rem_pio2+0x542>
 800a6bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a6c8:	e7b0      	b.n	800a62c <__kernel_rem_pio2+0x4ac>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	ab48      	add	r3, sp, #288	@ 0x120
 800a6d0:	441c      	add	r4, r3
 800a6d2:	f1bb 0f00 	cmp.w	fp, #0
 800a6d6:	da08      	bge.n	800a6ea <__kernel_rem_pio2+0x56a>
 800a6d8:	9b00      	ldr	r3, [sp, #0]
 800a6da:	b113      	cbz	r3, 800a6e2 <__kernel_rem_pio2+0x562>
 800a6dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	9b04      	ldr	r3, [sp, #16]
 800a6e4:	e9c3 0100 	strd	r0, r1, [r3]
 800a6e8:	e7a0      	b.n	800a62c <__kernel_rem_pio2+0x4ac>
 800a6ea:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a6ee:	f7f5 fd3d 	bl	800016c <__adddf3>
 800a6f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6f6:	e7ec      	b.n	800a6d2 <__kernel_rem_pio2+0x552>
 800a6f8:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a6fc:	f7f5 fd36 	bl	800016c <__adddf3>
 800a700:	3d01      	subs	r5, #1
 800a702:	e7c4      	b.n	800a68e <__kernel_rem_pio2+0x50e>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e7c9      	b.n	800a69e <__kernel_rem_pio2+0x51e>
 800a70a:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a70e:	f7f5 fd2d 	bl	800016c <__adddf3>
 800a712:	3501      	adds	r5, #1
 800a714:	e7ce      	b.n	800a6b4 <__kernel_rem_pio2+0x534>
 800a716:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a71a:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a71e:	4640      	mov	r0, r8
 800a720:	4649      	mov	r1, r9
 800a722:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a726:	f7f5 fd21 	bl	800016c <__adddf3>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4606      	mov	r6, r0
 800a730:	460f      	mov	r7, r1
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 fd17 	bl	8000168 <__aeabi_dsub>
 800a73a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a73e:	f7f5 fd15 	bl	800016c <__adddf3>
 800a742:	e865 0102 	strd	r0, r1, [r5], #-8
 800a746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a74a:	e9c5 6700 	strd	r6, r7, [r5]
 800a74e:	e77b      	b.n	800a648 <__kernel_rem_pio2+0x4c8>
 800a750:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a754:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a760:	f7f5 fd04 	bl	800016c <__adddf3>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4606      	mov	r6, r0
 800a76a:	460f      	mov	r7, r1
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f5 fcfa 	bl	8000168 <__aeabi_dsub>
 800a774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a778:	f7f5 fcf8 	bl	800016c <__adddf3>
 800a77c:	e865 0102 	strd	r0, r1, [r5], #-8
 800a780:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a784:	e9c5 6700 	strd	r6, r7, [r5]
 800a788:	e763      	b.n	800a652 <__kernel_rem_pio2+0x4d2>
 800a78a:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a78e:	f7f5 fced 	bl	800016c <__adddf3>
 800a792:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a796:	e761      	b.n	800a65c <__kernel_rem_pio2+0x4dc>
 800a798:	9b04      	ldr	r3, [sp, #16]
 800a79a:	9a04      	ldr	r2, [sp, #16]
 800a79c:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800a7a0:	601d      	str	r5, [r3, #0]
 800a7a2:	605c      	str	r4, [r3, #4]
 800a7a4:	609f      	str	r7, [r3, #8]
 800a7a6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800a7aa:	60d3      	str	r3, [r2, #12]
 800a7ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7b0:	6110      	str	r0, [r2, #16]
 800a7b2:	6153      	str	r3, [r2, #20]
 800a7b4:	e73a      	b.n	800a62c <__kernel_rem_pio2+0x4ac>
 800a7b6:	bf00      	nop
 800a7b8:	41700000 	.word	0x41700000
 800a7bc:	3e700000 	.word	0x3e700000

0800a7c0 <scalbn>:
 800a7c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a7c4:	4616      	mov	r6, r2
 800a7c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a7ca:	4683      	mov	fp, r0
 800a7cc:	468c      	mov	ip, r1
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	b982      	cbnz	r2, 800a7f4 <scalbn+0x34>
 800a7d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a7d6:	4303      	orrs	r3, r0
 800a7d8:	d035      	beq.n	800a846 <scalbn+0x86>
 800a7da:	4b2d      	ldr	r3, [pc, #180]	@ (800a890 <scalbn+0xd0>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f7f5 fe7b 	bl	80004d8 <__aeabi_dmul>
 800a7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a894 <scalbn+0xd4>)
 800a7e4:	4683      	mov	fp, r0
 800a7e6:	429e      	cmp	r6, r3
 800a7e8:	468c      	mov	ip, r1
 800a7ea:	da0d      	bge.n	800a808 <scalbn+0x48>
 800a7ec:	a324      	add	r3, pc, #144	@ (adr r3, 800a880 <scalbn+0xc0>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	e019      	b.n	800a828 <scalbn+0x68>
 800a7f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a7f8:	42ba      	cmp	r2, r7
 800a7fa:	d109      	bne.n	800a810 <scalbn+0x50>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	f7f5 fcb5 	bl	800016c <__adddf3>
 800a802:	4683      	mov	fp, r0
 800a804:	468c      	mov	ip, r1
 800a806:	e01e      	b.n	800a846 <scalbn+0x86>
 800a808:	460b      	mov	r3, r1
 800a80a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a80e:	3a36      	subs	r2, #54	@ 0x36
 800a810:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a814:	428e      	cmp	r6, r1
 800a816:	dd0a      	ble.n	800a82e <scalbn+0x6e>
 800a818:	a31b      	add	r3, pc, #108	@ (adr r3, 800a888 <scalbn+0xc8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	4665      	mov	r5, ip
 800a820:	f363 051e 	bfi	r5, r3, #0, #31
 800a824:	4629      	mov	r1, r5
 800a826:	481c      	ldr	r0, [pc, #112]	@ (800a898 <scalbn+0xd8>)
 800a828:	f7f5 fe56 	bl	80004d8 <__aeabi_dmul>
 800a82c:	e7e9      	b.n	800a802 <scalbn+0x42>
 800a82e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a832:	4432      	add	r2, r6
 800a834:	428a      	cmp	r2, r1
 800a836:	dcef      	bgt.n	800a818 <scalbn+0x58>
 800a838:	2a00      	cmp	r2, #0
 800a83a:	dd08      	ble.n	800a84e <scalbn+0x8e>
 800a83c:	f36f 531e 	bfc	r3, #20, #11
 800a840:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a844:	46ac      	mov	ip, r5
 800a846:	4658      	mov	r0, fp
 800a848:	4661      	mov	r1, ip
 800a84a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a84e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a852:	da09      	bge.n	800a868 <scalbn+0xa8>
 800a854:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a858:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a85c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a860:	480e      	ldr	r0, [pc, #56]	@ (800a89c <scalbn+0xdc>)
 800a862:	f041 011f 	orr.w	r1, r1, #31
 800a866:	e7c1      	b.n	800a7ec <scalbn+0x2c>
 800a868:	3236      	adds	r2, #54	@ 0x36
 800a86a:	f36f 531e 	bfc	r3, #20, #11
 800a86e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a872:	4658      	mov	r0, fp
 800a874:	4629      	mov	r1, r5
 800a876:	2200      	movs	r2, #0
 800a878:	4b09      	ldr	r3, [pc, #36]	@ (800a8a0 <scalbn+0xe0>)
 800a87a:	e7d5      	b.n	800a828 <scalbn+0x68>
 800a87c:	f3af 8000 	nop.w
 800a880:	c2f8f359 	.word	0xc2f8f359
 800a884:	01a56e1f 	.word	0x01a56e1f
 800a888:	8800759c 	.word	0x8800759c
 800a88c:	7e37e43c 	.word	0x7e37e43c
 800a890:	43500000 	.word	0x43500000
 800a894:	ffff3cb0 	.word	0xffff3cb0
 800a898:	8800759c 	.word	0x8800759c
 800a89c:	c2f8f359 	.word	0xc2f8f359
 800a8a0:	3c900000 	.word	0x3c900000
 800a8a4:	00000000 	.word	0x00000000

0800a8a8 <floor>:
 800a8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ac:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a8b0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a8b4:	2e13      	cmp	r6, #19
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	4605      	mov	r5, r0
 800a8be:	4680      	mov	r8, r0
 800a8c0:	dc35      	bgt.n	800a92e <floor+0x86>
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	da17      	bge.n	800a8f6 <floor+0x4e>
 800a8c6:	a334      	add	r3, pc, #208	@ (adr r3, 800a998 <floor+0xf0>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fc4e 	bl	800016c <__adddf3>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f7f6 f890 	bl	80009f8 <__aeabi_dcmpgt>
 800a8d8:	b150      	cbz	r0, 800a8f0 <floor+0x48>
 800a8da:	2c00      	cmp	r4, #0
 800a8dc:	da57      	bge.n	800a98e <floor+0xe6>
 800a8de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a8e2:	432c      	orrs	r4, r5
 800a8e4:	2500      	movs	r5, #0
 800a8e6:	42ac      	cmp	r4, r5
 800a8e8:	4c2d      	ldr	r4, [pc, #180]	@ (800a9a0 <floor+0xf8>)
 800a8ea:	bf08      	it	eq
 800a8ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a8f0:	4623      	mov	r3, r4
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	e024      	b.n	800a940 <floor+0x98>
 800a8f6:	4f2b      	ldr	r7, [pc, #172]	@ (800a9a4 <floor+0xfc>)
 800a8f8:	4137      	asrs	r7, r6
 800a8fa:	ea01 0c07 	and.w	ip, r1, r7
 800a8fe:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a902:	d01d      	beq.n	800a940 <floor+0x98>
 800a904:	a324      	add	r3, pc, #144	@ (adr r3, 800a998 <floor+0xf0>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fc2f 	bl	800016c <__adddf3>
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	f7f6 f871 	bl	80009f8 <__aeabi_dcmpgt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d0ea      	beq.n	800a8f0 <floor+0x48>
 800a91a:	2c00      	cmp	r4, #0
 800a91c:	bfbe      	ittt	lt
 800a91e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a922:	4133      	asrlt	r3, r6
 800a924:	18e4      	addlt	r4, r4, r3
 800a926:	2500      	movs	r5, #0
 800a928:	ea24 0407 	bic.w	r4, r4, r7
 800a92c:	e7e0      	b.n	800a8f0 <floor+0x48>
 800a92e:	2e33      	cmp	r6, #51	@ 0x33
 800a930:	dd0a      	ble.n	800a948 <floor+0xa0>
 800a932:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a936:	d103      	bne.n	800a940 <floor+0x98>
 800a938:	f7f5 fc18 	bl	800016c <__adddf3>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4610      	mov	r0, r2
 800a942:	4619      	mov	r1, r3
 800a944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a948:	f04f 3cff 	mov.w	ip, #4294967295
 800a94c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a950:	fa2c f707 	lsr.w	r7, ip, r7
 800a954:	4207      	tst	r7, r0
 800a956:	d0f3      	beq.n	800a940 <floor+0x98>
 800a958:	a30f      	add	r3, pc, #60	@ (adr r3, 800a998 <floor+0xf0>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fc05 	bl	800016c <__adddf3>
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	f7f6 f847 	bl	80009f8 <__aeabi_dcmpgt>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d0c0      	beq.n	800a8f0 <floor+0x48>
 800a96e:	2c00      	cmp	r4, #0
 800a970:	da0a      	bge.n	800a988 <floor+0xe0>
 800a972:	2e14      	cmp	r6, #20
 800a974:	d101      	bne.n	800a97a <floor+0xd2>
 800a976:	3401      	adds	r4, #1
 800a978:	e006      	b.n	800a988 <floor+0xe0>
 800a97a:	2301      	movs	r3, #1
 800a97c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a980:	40b3      	lsls	r3, r6
 800a982:	441d      	add	r5, r3
 800a984:	4545      	cmp	r5, r8
 800a986:	d3f6      	bcc.n	800a976 <floor+0xce>
 800a988:	ea25 0507 	bic.w	r5, r5, r7
 800a98c:	e7b0      	b.n	800a8f0 <floor+0x48>
 800a98e:	2500      	movs	r5, #0
 800a990:	462c      	mov	r4, r5
 800a992:	e7ad      	b.n	800a8f0 <floor+0x48>
 800a994:	f3af 8000 	nop.w
 800a998:	8800759c 	.word	0x8800759c
 800a99c:	7e37e43c 	.word	0x7e37e43c
 800a9a0:	bff00000 	.word	0xbff00000
 800a9a4:	000fffff 	.word	0x000fffff

0800a9a8 <_init>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr

0800a9b4 <_fini>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	bf00      	nop
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr
